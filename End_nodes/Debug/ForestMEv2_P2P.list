
ForestMEv2_P2P.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd20  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  0800ce58  0800ce58  0000de58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d470  0800d470  0000f024  2**0
                  CONTENTS
  4 .ARM          00000008  0800d470  0800d470  0000e470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d478  0800d478  0000f024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d478  0800d478  0000e478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d47c  0800d47c  0000e47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800d480  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000090c  20000028  0800d4a4  0000f028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000934  0800d4a4  0000f934  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000f024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000537ab  00000000  00000000  0000f04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a5ea  00000000  00000000  000627f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00027743  00000000  00000000  0006cde3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024b8  00000000  00000000  00094528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000530d  00000000  00000000  000969e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243a0  00000000  00000000  0009bced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000542a5  00000000  00000000  000c008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccb88  00000000  00000000  00114332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001e0eba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e40  00000000  00000000  001e0f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  001e7d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000028 	.word	0x20000028
 8000154:	00000000 	.word	0x00000000
 8000158:	0800ce40 	.word	0x0800ce40

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000002c 	.word	0x2000002c
 8000174:	0800ce40 	.word	0x0800ce40

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_fmul>:
 8000188:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800018c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000190:	bf1e      	ittt	ne
 8000192:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000196:	ea92 0f0c 	teqne	r2, ip
 800019a:	ea93 0f0c 	teqne	r3, ip
 800019e:	d06f      	beq.n	8000280 <__aeabi_fmul+0xf8>
 80001a0:	441a      	add	r2, r3
 80001a2:	ea80 0c01 	eor.w	ip, r0, r1
 80001a6:	0240      	lsls	r0, r0, #9
 80001a8:	bf18      	it	ne
 80001aa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001ae:	d01e      	beq.n	80001ee <__aeabi_fmul+0x66>
 80001b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80001b4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001b8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001bc:	fba0 3101 	umull	r3, r1, r0, r1
 80001c0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80001c4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001c8:	bf3e      	ittt	cc
 80001ca:	0049      	lslcc	r1, r1, #1
 80001cc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001d0:	005b      	lslcc	r3, r3, #1
 80001d2:	ea40 0001 	orr.w	r0, r0, r1
 80001d6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001da:	2afd      	cmp	r2, #253	@ 0xfd
 80001dc:	d81d      	bhi.n	800021a <__aeabi_fmul+0x92>
 80001de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001e6:	bf08      	it	eq
 80001e8:	f020 0001 	biceq.w	r0, r0, #1
 80001ec:	4770      	bx	lr
 80001ee:	f090 0f00 	teq	r0, #0
 80001f2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001f6:	bf08      	it	eq
 80001f8:	0249      	lsleq	r1, r1, #9
 80001fa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001fe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000202:	3a7f      	subs	r2, #127	@ 0x7f
 8000204:	bfc2      	ittt	gt
 8000206:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800020a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800020e:	4770      	bxgt	lr
 8000210:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000214:	f04f 0300 	mov.w	r3, #0
 8000218:	3a01      	subs	r2, #1
 800021a:	dc5d      	bgt.n	80002d8 <__aeabi_fmul+0x150>
 800021c:	f112 0f19 	cmn.w	r2, #25
 8000220:	bfdc      	itt	le
 8000222:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000226:	4770      	bxle	lr
 8000228:	f1c2 0200 	rsb	r2, r2, #0
 800022c:	0041      	lsls	r1, r0, #1
 800022e:	fa21 f102 	lsr.w	r1, r1, r2
 8000232:	f1c2 0220 	rsb	r2, r2, #32
 8000236:	fa00 fc02 	lsl.w	ip, r0, r2
 800023a:	ea5f 0031 	movs.w	r0, r1, rrx
 800023e:	f140 0000 	adc.w	r0, r0, #0
 8000242:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000246:	bf08      	it	eq
 8000248:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800024c:	4770      	bx	lr
 800024e:	f092 0f00 	teq	r2, #0
 8000252:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0040      	lsleq	r0, r0, #1
 800025a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800025e:	3a01      	subeq	r2, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xce>
 8000262:	ea40 000c 	orr.w	r0, r0, ip
 8000266:	f093 0f00 	teq	r3, #0
 800026a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800026e:	bf02      	ittt	eq
 8000270:	0049      	lsleq	r1, r1, #1
 8000272:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000276:	3b01      	subeq	r3, #1
 8000278:	d0f9      	beq.n	800026e <__aeabi_fmul+0xe6>
 800027a:	ea41 010c 	orr.w	r1, r1, ip
 800027e:	e78f      	b.n	80001a0 <__aeabi_fmul+0x18>
 8000280:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	bf18      	it	ne
 800028a:	ea93 0f0c 	teqne	r3, ip
 800028e:	d00a      	beq.n	80002a6 <__aeabi_fmul+0x11e>
 8000290:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000294:	bf18      	it	ne
 8000296:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800029a:	d1d8      	bne.n	800024e <__aeabi_fmul+0xc6>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	4770      	bx	lr
 80002a6:	f090 0f00 	teq	r0, #0
 80002aa:	bf17      	itett	ne
 80002ac:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80002b0:	4608      	moveq	r0, r1
 80002b2:	f091 0f00 	teqne	r1, #0
 80002b6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80002ba:	d014      	beq.n	80002e6 <__aeabi_fmul+0x15e>
 80002bc:	ea92 0f0c 	teq	r2, ip
 80002c0:	d101      	bne.n	80002c6 <__aeabi_fmul+0x13e>
 80002c2:	0242      	lsls	r2, r0, #9
 80002c4:	d10f      	bne.n	80002e6 <__aeabi_fmul+0x15e>
 80002c6:	ea93 0f0c 	teq	r3, ip
 80002ca:	d103      	bne.n	80002d4 <__aeabi_fmul+0x14c>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	bf18      	it	ne
 80002d0:	4608      	movne	r0, r1
 80002d2:	d108      	bne.n	80002e6 <__aeabi_fmul+0x15e>
 80002d4:	ea80 0001 	eor.w	r0, r0, r1
 80002d8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002dc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002e0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002e4:	4770      	bx	lr
 80002e6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002ea:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_frsub>:
 80002f0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__addsf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_fsub>:
 80002f8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002fc <__addsf3>:
 80002fc:	0042      	lsls	r2, r0, #1
 80002fe:	bf1f      	itttt	ne
 8000300:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000304:	ea92 0f03 	teqne	r2, r3
 8000308:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800030c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000310:	d06a      	beq.n	80003e8 <__addsf3+0xec>
 8000312:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000316:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800031a:	bfc1      	itttt	gt
 800031c:	18d2      	addgt	r2, r2, r3
 800031e:	4041      	eorgt	r1, r0
 8000320:	4048      	eorgt	r0, r1
 8000322:	4041      	eorgt	r1, r0
 8000324:	bfb8      	it	lt
 8000326:	425b      	neglt	r3, r3
 8000328:	2b19      	cmp	r3, #25
 800032a:	bf88      	it	hi
 800032c:	4770      	bxhi	lr
 800032e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000332:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000336:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800033a:	bf18      	it	ne
 800033c:	4240      	negne	r0, r0
 800033e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000342:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000346:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800034a:	bf18      	it	ne
 800034c:	4249      	negne	r1, r1
 800034e:	ea92 0f03 	teq	r2, r3
 8000352:	d03f      	beq.n	80003d4 <__addsf3+0xd8>
 8000354:	f1a2 0201 	sub.w	r2, r2, #1
 8000358:	fa41 fc03 	asr.w	ip, r1, r3
 800035c:	eb10 000c 	adds.w	r0, r0, ip
 8000360:	f1c3 0320 	rsb	r3, r3, #32
 8000364:	fa01 f103 	lsl.w	r1, r1, r3
 8000368:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800036c:	d502      	bpl.n	8000374 <__addsf3+0x78>
 800036e:	4249      	negs	r1, r1
 8000370:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000374:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000378:	d313      	bcc.n	80003a2 <__addsf3+0xa6>
 800037a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800037e:	d306      	bcc.n	800038e <__addsf3+0x92>
 8000380:	0840      	lsrs	r0, r0, #1
 8000382:	ea4f 0131 	mov.w	r1, r1, rrx
 8000386:	f102 0201 	add.w	r2, r2, #1
 800038a:	2afe      	cmp	r2, #254	@ 0xfe
 800038c:	d251      	bcs.n	8000432 <__addsf3+0x136>
 800038e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000392:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000396:	bf08      	it	eq
 8000398:	f020 0001 	biceq.w	r0, r0, #1
 800039c:	ea40 0003 	orr.w	r0, r0, r3
 80003a0:	4770      	bx	lr
 80003a2:	0049      	lsls	r1, r1, #1
 80003a4:	eb40 0000 	adc.w	r0, r0, r0
 80003a8:	3a01      	subs	r2, #1
 80003aa:	bf28      	it	cs
 80003ac:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80003b0:	d2ed      	bcs.n	800038e <__addsf3+0x92>
 80003b2:	fab0 fc80 	clz	ip, r0
 80003b6:	f1ac 0c08 	sub.w	ip, ip, #8
 80003ba:	ebb2 020c 	subs.w	r2, r2, ip
 80003be:	fa00 f00c 	lsl.w	r0, r0, ip
 80003c2:	bfaa      	itet	ge
 80003c4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003c8:	4252      	neglt	r2, r2
 80003ca:	4318      	orrge	r0, r3
 80003cc:	bfbc      	itt	lt
 80003ce:	40d0      	lsrlt	r0, r2
 80003d0:	4318      	orrlt	r0, r3
 80003d2:	4770      	bx	lr
 80003d4:	f092 0f00 	teq	r2, #0
 80003d8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003dc:	bf06      	itte	eq
 80003de:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003e2:	3201      	addeq	r2, #1
 80003e4:	3b01      	subne	r3, #1
 80003e6:	e7b5      	b.n	8000354 <__addsf3+0x58>
 80003e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003f0:	bf18      	it	ne
 80003f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003f6:	d021      	beq.n	800043c <__addsf3+0x140>
 80003f8:	ea92 0f03 	teq	r2, r3
 80003fc:	d004      	beq.n	8000408 <__addsf3+0x10c>
 80003fe:	f092 0f00 	teq	r2, #0
 8000402:	bf08      	it	eq
 8000404:	4608      	moveq	r0, r1
 8000406:	4770      	bx	lr
 8000408:	ea90 0f01 	teq	r0, r1
 800040c:	bf1c      	itt	ne
 800040e:	2000      	movne	r0, #0
 8000410:	4770      	bxne	lr
 8000412:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000416:	d104      	bne.n	8000422 <__addsf3+0x126>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	bf28      	it	cs
 800041c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000420:	4770      	bx	lr
 8000422:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000426:	bf3c      	itt	cc
 8000428:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800042c:	4770      	bxcc	lr
 800042e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000432:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000436:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800043a:	4770      	bx	lr
 800043c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000440:	bf16      	itet	ne
 8000442:	4608      	movne	r0, r1
 8000444:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000448:	4601      	movne	r1, r0
 800044a:	0242      	lsls	r2, r0, #9
 800044c:	bf06      	itte	eq
 800044e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000452:	ea90 0f01 	teqeq	r0, r1
 8000456:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800045a:	4770      	bx	lr

0800045c <__aeabi_ui2f>:
 800045c:	f04f 0300 	mov.w	r3, #0
 8000460:	e004      	b.n	800046c <__aeabi_i2f+0x8>
 8000462:	bf00      	nop

08000464 <__aeabi_i2f>:
 8000464:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000468:	bf48      	it	mi
 800046a:	4240      	negmi	r0, r0
 800046c:	ea5f 0c00 	movs.w	ip, r0
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000478:	4601      	mov	r1, r0
 800047a:	f04f 0000 	mov.w	r0, #0
 800047e:	e01c      	b.n	80004ba <__aeabi_l2f+0x2a>

08000480 <__aeabi_ul2f>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	f04f 0300 	mov.w	r3, #0
 800048c:	e00a      	b.n	80004a4 <__aeabi_l2f+0x14>
 800048e:	bf00      	nop

08000490 <__aeabi_l2f>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800049c:	d502      	bpl.n	80004a4 <__aeabi_l2f+0x14>
 800049e:	4240      	negs	r0, r0
 80004a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a4:	ea5f 0c01 	movs.w	ip, r1
 80004a8:	bf02      	ittt	eq
 80004aa:	4684      	moveq	ip, r0
 80004ac:	4601      	moveq	r1, r0
 80004ae:	2000      	moveq	r0, #0
 80004b0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80004b4:	bf08      	it	eq
 80004b6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80004ba:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80004be:	fabc f28c 	clz	r2, ip
 80004c2:	3a08      	subs	r2, #8
 80004c4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004c8:	db10      	blt.n	80004ec <__aeabi_l2f+0x5c>
 80004ca:	fa01 fc02 	lsl.w	ip, r1, r2
 80004ce:	4463      	add	r3, ip
 80004d0:	fa00 fc02 	lsl.w	ip, r0, r2
 80004d4:	f1c2 0220 	rsb	r2, r2, #32
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	fa20 f202 	lsr.w	r2, r0, r2
 80004e0:	eb43 0002 	adc.w	r0, r3, r2
 80004e4:	bf08      	it	eq
 80004e6:	f020 0001 	biceq.w	r0, r0, #1
 80004ea:	4770      	bx	lr
 80004ec:	f102 0220 	add.w	r2, r2, #32
 80004f0:	fa01 fc02 	lsl.w	ip, r1, r2
 80004f4:	f1c2 0220 	rsb	r2, r2, #32
 80004f8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004fc:	fa21 f202 	lsr.w	r2, r1, r2
 8000500:	eb43 0002 	adc.w	r0, r3, r2
 8000504:	bf08      	it	eq
 8000506:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800050a:	4770      	bx	lr

0800050c <__aeabi_f2iz>:
 800050c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000510:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000514:	d30f      	bcc.n	8000536 <__aeabi_f2iz+0x2a>
 8000516:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800051a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800051e:	d90d      	bls.n	800053c <__aeabi_f2iz+0x30>
 8000520:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000524:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000528:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800052c:	fa23 f002 	lsr.w	r0, r3, r2
 8000530:	bf18      	it	ne
 8000532:	4240      	negne	r0, r0
 8000534:	4770      	bx	lr
 8000536:	f04f 0000 	mov.w	r0, #0
 800053a:	4770      	bx	lr
 800053c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000540:	d101      	bne.n	8000546 <__aeabi_f2iz+0x3a>
 8000542:	0242      	lsls	r2, r0, #9
 8000544:	d105      	bne.n	8000552 <__aeabi_f2iz+0x46>
 8000546:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800054a:	bf08      	it	eq
 800054c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000550:	4770      	bx	lr
 8000552:	f04f 0000 	mov.w	r0, #0
 8000556:	4770      	bx	lr

08000558 <__aeabi_ldivmod>:
 8000558:	b97b      	cbnz	r3, 800057a <__aeabi_ldivmod+0x22>
 800055a:	b972      	cbnz	r2, 800057a <__aeabi_ldivmod+0x22>
 800055c:	2900      	cmp	r1, #0
 800055e:	bfbe      	ittt	lt
 8000560:	2000      	movlt	r0, #0
 8000562:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000566:	e006      	blt.n	8000576 <__aeabi_ldivmod+0x1e>
 8000568:	bf08      	it	eq
 800056a:	2800      	cmpeq	r0, #0
 800056c:	bf1c      	itt	ne
 800056e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000572:	f04f 30ff 	movne.w	r0, #4294967295
 8000576:	f000 b9b5 	b.w	80008e4 <__aeabi_idiv0>
 800057a:	f1ad 0c08 	sub.w	ip, sp, #8
 800057e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000582:	2900      	cmp	r1, #0
 8000584:	db09      	blt.n	800059a <__aeabi_ldivmod+0x42>
 8000586:	2b00      	cmp	r3, #0
 8000588:	db1a      	blt.n	80005c0 <__aeabi_ldivmod+0x68>
 800058a:	f000 f84d 	bl	8000628 <__udivmoddi4>
 800058e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000592:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000596:	b004      	add	sp, #16
 8000598:	4770      	bx	lr
 800059a:	4240      	negs	r0, r0
 800059c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	db1b      	blt.n	80005dc <__aeabi_ldivmod+0x84>
 80005a4:	f000 f840 	bl	8000628 <__udivmoddi4>
 80005a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005b0:	b004      	add	sp, #16
 80005b2:	4240      	negs	r0, r0
 80005b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b8:	4252      	negs	r2, r2
 80005ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005be:	4770      	bx	lr
 80005c0:	4252      	negs	r2, r2
 80005c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005c6:	f000 f82f 	bl	8000628 <__udivmoddi4>
 80005ca:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005d2:	b004      	add	sp, #16
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	4770      	bx	lr
 80005dc:	4252      	negs	r2, r2
 80005de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005e2:	f000 f821 	bl	8000628 <__udivmoddi4>
 80005e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005ee:	b004      	add	sp, #16
 80005f0:	4252      	negs	r2, r2
 80005f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005f6:	4770      	bx	lr

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295
 8000608:	f04f 30ff 	movne.w	r0, #4294967295
 800060c:	f000 b96a 	b.w	80008e4 <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f806 	bl	8000628 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__udivmoddi4>:
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	9d08      	ldr	r5, [sp, #32]
 800062e:	460c      	mov	r4, r1
 8000630:	2b00      	cmp	r3, #0
 8000632:	d14e      	bne.n	80006d2 <__udivmoddi4+0xaa>
 8000634:	4694      	mov	ip, r2
 8000636:	458c      	cmp	ip, r1
 8000638:	4686      	mov	lr, r0
 800063a:	fab2 f282 	clz	r2, r2
 800063e:	d962      	bls.n	8000706 <__udivmoddi4+0xde>
 8000640:	b14a      	cbz	r2, 8000656 <__udivmoddi4+0x2e>
 8000642:	f1c2 0320 	rsb	r3, r2, #32
 8000646:	4091      	lsls	r1, r2
 8000648:	fa20 f303 	lsr.w	r3, r0, r3
 800064c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000650:	4319      	orrs	r1, r3
 8000652:	fa00 fe02 	lsl.w	lr, r0, r2
 8000656:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800065a:	fa1f f68c 	uxth.w	r6, ip
 800065e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000662:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000666:	fb07 1114 	mls	r1, r7, r4, r1
 800066a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800066e:	fb04 f106 	mul.w	r1, r4, r6
 8000672:	4299      	cmp	r1, r3
 8000674:	d90a      	bls.n	800068c <__udivmoddi4+0x64>
 8000676:	eb1c 0303 	adds.w	r3, ip, r3
 800067a:	f104 30ff 	add.w	r0, r4, #4294967295
 800067e:	f080 8112 	bcs.w	80008a6 <__udivmoddi4+0x27e>
 8000682:	4299      	cmp	r1, r3
 8000684:	f240 810f 	bls.w	80008a6 <__udivmoddi4+0x27e>
 8000688:	3c02      	subs	r4, #2
 800068a:	4463      	add	r3, ip
 800068c:	1a59      	subs	r1, r3, r1
 800068e:	fa1f f38e 	uxth.w	r3, lr
 8000692:	fbb1 f0f7 	udiv	r0, r1, r7
 8000696:	fb07 1110 	mls	r1, r7, r0, r1
 800069a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800069e:	fb00 f606 	mul.w	r6, r0, r6
 80006a2:	429e      	cmp	r6, r3
 80006a4:	d90a      	bls.n	80006bc <__udivmoddi4+0x94>
 80006a6:	eb1c 0303 	adds.w	r3, ip, r3
 80006aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80006ae:	f080 80fc 	bcs.w	80008aa <__udivmoddi4+0x282>
 80006b2:	429e      	cmp	r6, r3
 80006b4:	f240 80f9 	bls.w	80008aa <__udivmoddi4+0x282>
 80006b8:	4463      	add	r3, ip
 80006ba:	3802      	subs	r0, #2
 80006bc:	1b9b      	subs	r3, r3, r6
 80006be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80006c2:	2100      	movs	r1, #0
 80006c4:	b11d      	cbz	r5, 80006ce <__udivmoddi4+0xa6>
 80006c6:	40d3      	lsrs	r3, r2
 80006c8:	2200      	movs	r2, #0
 80006ca:	e9c5 3200 	strd	r3, r2, [r5]
 80006ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d2:	428b      	cmp	r3, r1
 80006d4:	d905      	bls.n	80006e2 <__udivmoddi4+0xba>
 80006d6:	b10d      	cbz	r5, 80006dc <__udivmoddi4+0xb4>
 80006d8:	e9c5 0100 	strd	r0, r1, [r5]
 80006dc:	2100      	movs	r1, #0
 80006de:	4608      	mov	r0, r1
 80006e0:	e7f5      	b.n	80006ce <__udivmoddi4+0xa6>
 80006e2:	fab3 f183 	clz	r1, r3
 80006e6:	2900      	cmp	r1, #0
 80006e8:	d146      	bne.n	8000778 <__udivmoddi4+0x150>
 80006ea:	42a3      	cmp	r3, r4
 80006ec:	d302      	bcc.n	80006f4 <__udivmoddi4+0xcc>
 80006ee:	4290      	cmp	r0, r2
 80006f0:	f0c0 80f0 	bcc.w	80008d4 <__udivmoddi4+0x2ac>
 80006f4:	1a86      	subs	r6, r0, r2
 80006f6:	eb64 0303 	sbc.w	r3, r4, r3
 80006fa:	2001      	movs	r0, #1
 80006fc:	2d00      	cmp	r5, #0
 80006fe:	d0e6      	beq.n	80006ce <__udivmoddi4+0xa6>
 8000700:	e9c5 6300 	strd	r6, r3, [r5]
 8000704:	e7e3      	b.n	80006ce <__udivmoddi4+0xa6>
 8000706:	2a00      	cmp	r2, #0
 8000708:	f040 8090 	bne.w	800082c <__udivmoddi4+0x204>
 800070c:	eba1 040c 	sub.w	r4, r1, ip
 8000710:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000714:	fa1f f78c 	uxth.w	r7, ip
 8000718:	2101      	movs	r1, #1
 800071a:	fbb4 f6f8 	udiv	r6, r4, r8
 800071e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000722:	fb08 4416 	mls	r4, r8, r6, r4
 8000726:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800072a:	fb07 f006 	mul.w	r0, r7, r6
 800072e:	4298      	cmp	r0, r3
 8000730:	d908      	bls.n	8000744 <__udivmoddi4+0x11c>
 8000732:	eb1c 0303 	adds.w	r3, ip, r3
 8000736:	f106 34ff 	add.w	r4, r6, #4294967295
 800073a:	d202      	bcs.n	8000742 <__udivmoddi4+0x11a>
 800073c:	4298      	cmp	r0, r3
 800073e:	f200 80cd 	bhi.w	80008dc <__udivmoddi4+0x2b4>
 8000742:	4626      	mov	r6, r4
 8000744:	1a1c      	subs	r4, r3, r0
 8000746:	fa1f f38e 	uxth.w	r3, lr
 800074a:	fbb4 f0f8 	udiv	r0, r4, r8
 800074e:	fb08 4410 	mls	r4, r8, r0, r4
 8000752:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000756:	fb00 f707 	mul.w	r7, r0, r7
 800075a:	429f      	cmp	r7, r3
 800075c:	d908      	bls.n	8000770 <__udivmoddi4+0x148>
 800075e:	eb1c 0303 	adds.w	r3, ip, r3
 8000762:	f100 34ff 	add.w	r4, r0, #4294967295
 8000766:	d202      	bcs.n	800076e <__udivmoddi4+0x146>
 8000768:	429f      	cmp	r7, r3
 800076a:	f200 80b0 	bhi.w	80008ce <__udivmoddi4+0x2a6>
 800076e:	4620      	mov	r0, r4
 8000770:	1bdb      	subs	r3, r3, r7
 8000772:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000776:	e7a5      	b.n	80006c4 <__udivmoddi4+0x9c>
 8000778:	f1c1 0620 	rsb	r6, r1, #32
 800077c:	408b      	lsls	r3, r1
 800077e:	fa22 f706 	lsr.w	r7, r2, r6
 8000782:	431f      	orrs	r7, r3
 8000784:	fa20 fc06 	lsr.w	ip, r0, r6
 8000788:	fa04 f301 	lsl.w	r3, r4, r1
 800078c:	ea43 030c 	orr.w	r3, r3, ip
 8000790:	40f4      	lsrs	r4, r6
 8000792:	fa00 f801 	lsl.w	r8, r0, r1
 8000796:	0c38      	lsrs	r0, r7, #16
 8000798:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800079c:	fbb4 fef0 	udiv	lr, r4, r0
 80007a0:	fa1f fc87 	uxth.w	ip, r7
 80007a4:	fb00 441e 	mls	r4, r0, lr, r4
 80007a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007ac:	fb0e f90c 	mul.w	r9, lr, ip
 80007b0:	45a1      	cmp	r9, r4
 80007b2:	fa02 f201 	lsl.w	r2, r2, r1
 80007b6:	d90a      	bls.n	80007ce <__udivmoddi4+0x1a6>
 80007b8:	193c      	adds	r4, r7, r4
 80007ba:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007be:	f080 8084 	bcs.w	80008ca <__udivmoddi4+0x2a2>
 80007c2:	45a1      	cmp	r9, r4
 80007c4:	f240 8081 	bls.w	80008ca <__udivmoddi4+0x2a2>
 80007c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80007cc:	443c      	add	r4, r7
 80007ce:	eba4 0409 	sub.w	r4, r4, r9
 80007d2:	fa1f f983 	uxth.w	r9, r3
 80007d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80007da:	fb00 4413 	mls	r4, r0, r3, r4
 80007de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80007e6:	45a4      	cmp	ip, r4
 80007e8:	d907      	bls.n	80007fa <__udivmoddi4+0x1d2>
 80007ea:	193c      	adds	r4, r7, r4
 80007ec:	f103 30ff 	add.w	r0, r3, #4294967295
 80007f0:	d267      	bcs.n	80008c2 <__udivmoddi4+0x29a>
 80007f2:	45a4      	cmp	ip, r4
 80007f4:	d965      	bls.n	80008c2 <__udivmoddi4+0x29a>
 80007f6:	3b02      	subs	r3, #2
 80007f8:	443c      	add	r4, r7
 80007fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80007fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000802:	eba4 040c 	sub.w	r4, r4, ip
 8000806:	429c      	cmp	r4, r3
 8000808:	46ce      	mov	lr, r9
 800080a:	469c      	mov	ip, r3
 800080c:	d351      	bcc.n	80008b2 <__udivmoddi4+0x28a>
 800080e:	d04e      	beq.n	80008ae <__udivmoddi4+0x286>
 8000810:	b155      	cbz	r5, 8000828 <__udivmoddi4+0x200>
 8000812:	ebb8 030e 	subs.w	r3, r8, lr
 8000816:	eb64 040c 	sbc.w	r4, r4, ip
 800081a:	fa04 f606 	lsl.w	r6, r4, r6
 800081e:	40cb      	lsrs	r3, r1
 8000820:	431e      	orrs	r6, r3
 8000822:	40cc      	lsrs	r4, r1
 8000824:	e9c5 6400 	strd	r6, r4, [r5]
 8000828:	2100      	movs	r1, #0
 800082a:	e750      	b.n	80006ce <__udivmoddi4+0xa6>
 800082c:	f1c2 0320 	rsb	r3, r2, #32
 8000830:	fa20 f103 	lsr.w	r1, r0, r3
 8000834:	fa0c fc02 	lsl.w	ip, ip, r2
 8000838:	fa24 f303 	lsr.w	r3, r4, r3
 800083c:	4094      	lsls	r4, r2
 800083e:	430c      	orrs	r4, r1
 8000840:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000844:	fa00 fe02 	lsl.w	lr, r0, r2
 8000848:	fa1f f78c 	uxth.w	r7, ip
 800084c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000850:	fb08 3110 	mls	r1, r8, r0, r3
 8000854:	0c23      	lsrs	r3, r4, #16
 8000856:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800085a:	fb00 f107 	mul.w	r1, r0, r7
 800085e:	4299      	cmp	r1, r3
 8000860:	d908      	bls.n	8000874 <__udivmoddi4+0x24c>
 8000862:	eb1c 0303 	adds.w	r3, ip, r3
 8000866:	f100 36ff 	add.w	r6, r0, #4294967295
 800086a:	d22c      	bcs.n	80008c6 <__udivmoddi4+0x29e>
 800086c:	4299      	cmp	r1, r3
 800086e:	d92a      	bls.n	80008c6 <__udivmoddi4+0x29e>
 8000870:	3802      	subs	r0, #2
 8000872:	4463      	add	r3, ip
 8000874:	1a5b      	subs	r3, r3, r1
 8000876:	b2a4      	uxth	r4, r4
 8000878:	fbb3 f1f8 	udiv	r1, r3, r8
 800087c:	fb08 3311 	mls	r3, r8, r1, r3
 8000880:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000884:	fb01 f307 	mul.w	r3, r1, r7
 8000888:	42a3      	cmp	r3, r4
 800088a:	d908      	bls.n	800089e <__udivmoddi4+0x276>
 800088c:	eb1c 0404 	adds.w	r4, ip, r4
 8000890:	f101 36ff 	add.w	r6, r1, #4294967295
 8000894:	d213      	bcs.n	80008be <__udivmoddi4+0x296>
 8000896:	42a3      	cmp	r3, r4
 8000898:	d911      	bls.n	80008be <__udivmoddi4+0x296>
 800089a:	3902      	subs	r1, #2
 800089c:	4464      	add	r4, ip
 800089e:	1ae4      	subs	r4, r4, r3
 80008a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008a4:	e739      	b.n	800071a <__udivmoddi4+0xf2>
 80008a6:	4604      	mov	r4, r0
 80008a8:	e6f0      	b.n	800068c <__udivmoddi4+0x64>
 80008aa:	4608      	mov	r0, r1
 80008ac:	e706      	b.n	80006bc <__udivmoddi4+0x94>
 80008ae:	45c8      	cmp	r8, r9
 80008b0:	d2ae      	bcs.n	8000810 <__udivmoddi4+0x1e8>
 80008b2:	ebb9 0e02 	subs.w	lr, r9, r2
 80008b6:	eb63 0c07 	sbc.w	ip, r3, r7
 80008ba:	3801      	subs	r0, #1
 80008bc:	e7a8      	b.n	8000810 <__udivmoddi4+0x1e8>
 80008be:	4631      	mov	r1, r6
 80008c0:	e7ed      	b.n	800089e <__udivmoddi4+0x276>
 80008c2:	4603      	mov	r3, r0
 80008c4:	e799      	b.n	80007fa <__udivmoddi4+0x1d2>
 80008c6:	4630      	mov	r0, r6
 80008c8:	e7d4      	b.n	8000874 <__udivmoddi4+0x24c>
 80008ca:	46d6      	mov	lr, sl
 80008cc:	e77f      	b.n	80007ce <__udivmoddi4+0x1a6>
 80008ce:	4463      	add	r3, ip
 80008d0:	3802      	subs	r0, #2
 80008d2:	e74d      	b.n	8000770 <__udivmoddi4+0x148>
 80008d4:	4606      	mov	r6, r0
 80008d6:	4623      	mov	r3, r4
 80008d8:	4608      	mov	r0, r1
 80008da:	e70f      	b.n	80006fc <__udivmoddi4+0xd4>
 80008dc:	3e02      	subs	r6, #2
 80008de:	4463      	add	r3, ip
 80008e0:	e730      	b.n	8000744 <__udivmoddi4+0x11c>
 80008e2:	bf00      	nop

080008e4 <__aeabi_idiv0>:
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80008e8:	b510      	push	{r4, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80008ea:	481c      	ldr	r0, [pc, #112]	@ (800095c <MX_ADC_Init+0x74>)
 80008ec:	4c1c      	ldr	r4, [pc, #112]	@ (8000960 <MX_ADC_Init+0x78>)
 80008ee:	6004      	str	r4, [r0, #0]
{
 80008f0:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 80008f2:	2300      	movs	r3, #0
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = DISABLE;
  hadc.Init.NbrOfConversion = 1;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 80008f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  ADC_ChannelConfTypeDef sConfig = {0};
 80008f8:	e9cd 3301 	strd	r3, r3, [sp, #4]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000900:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000904:	e9c0 330c 	strd	r3, r3, [r0, #48]	@ 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8000908:	9303      	str	r3, [sp, #12]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800090a:	8303      	strh	r3, [r0, #24]
  hadc.Init.ContinuousConvMode = DISABLE;
 800090c:	7683      	strb	r3, [r0, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800090e:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000912:	6383      	str	r3, [r0, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000914:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000918:	64c3      	str	r3, [r0, #76]	@ 0x4c
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 800091a:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 800091e:	2310      	movs	r3, #16
  hadc.Init.NbrOfConversion = 1;
 8000920:	2101      	movs	r1, #1
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8000922:	e9c0 2301 	strd	r2, r3, [r0, #4]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000926:	2304      	movs	r3, #4
  hadc.Init.NbrOfConversion = 1;
 8000928:	61c1      	str	r1, [r0, #28]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800092a:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800092e:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000930:	f003 fed0 	bl	80046d4 <HAL_ADC_Init>
 8000934:	b958      	cbnz	r0, 800094e <MX_ADC_Init+0x66>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000936:	4a0b      	ldr	r2, [pc, #44]	@ (8000964 <MX_ADC_Init+0x7c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000938:	4808      	ldr	r0, [pc, #32]	@ (800095c <MX_ADC_Init+0x74>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800093a:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800093c:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800093e:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000942:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000944:	f003 ffd4 	bl	80048f0 <HAL_ADC_ConfigChannel>
 8000948:	b920      	cbnz	r0, 8000954 <MX_ADC_Init+0x6c>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800094a:	b004      	add	sp, #16
 800094c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800094e:	f000 fa63 	bl	8000e18 <Error_Handler>
 8000952:	e7f0      	b.n	8000936 <MX_ADC_Init+0x4e>
    Error_Handler();
 8000954:	f000 fa60 	bl	8000e18 <Error_Handler>
}
 8000958:	b004      	add	sp, #16
 800095a:	bd10      	pop	{r4, pc}
 800095c:	200000a4 	.word	0x200000a4
 8000960:	40012400 	.word	0x40012400
 8000964:	20000100 	.word	0x20000100

08000968 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000968:	b570      	push	{r4, r5, r6, lr}
 800096a:	4604      	mov	r4, r0
 800096c:	b096      	sub	sp, #88	@ 0x58

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000970:	2238      	movs	r2, #56	@ 0x38
 8000972:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000978:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800097c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800097e:	f00c fa33 	bl	800cde8 <memset>
  if(adcHandle->Instance==ADC)
 8000982:	4b26      	ldr	r3, [pc, #152]	@ (8000a1c <HAL_ADC_MspInit+0xb4>)
 8000984:	6822      	ldr	r2, [r4, #0]
 8000986:	429a      	cmp	r2, r3
 8000988:	d001      	beq.n	800098e <HAL_ADC_MspInit+0x26>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800098a:	b016      	add	sp, #88	@ 0x58
 800098c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800098e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 8000992:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000996:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000998:	9208      	str	r2, [sp, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 800099a:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800099c:	f005 fff4 	bl	8006988 <HAL_RCCEx_PeriphCLKConfig>
 80009a0:	2800      	cmp	r0, #0
 80009a2:	d135      	bne.n	8000a10 <HAL_ADC_MspInit+0xa8>
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80009a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2600      	movs	r6, #0
 80009aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
    hdma_adc.Instance = DMA1_Channel1;
 80009ac:	4d1c      	ldr	r5, [pc, #112]	@ (8000a20 <HAL_ADC_MspInit+0xb8>)
 80009ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80009b2:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80009b6:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80009ba:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80009bc:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80009c0:	f042 0201 	orr.w	r2, r2, #1
 80009c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	9604      	str	r6, [sp, #16]
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009d0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009d8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
  (void)tmpreg;
 80009e0:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f004 fb1b 	bl	800501c <HAL_GPIO_Init>
    hdma_adc.Init.Request = DMA_REQUEST_ADC;
 80009e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a24 <HAL_ADC_MspInit+0xbc>)
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80009e8:	622e      	str	r6, [r5, #32]
    hdma_adc.Init.Request = DMA_REQUEST_ADC;
 80009ea:	2305      	movs	r3, #5
 80009ec:	e9c5 2300 	strd	r2, r3, [r5]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80009f0:	4628      	mov	r0, r5
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80009f2:	2280      	movs	r2, #128	@ 0x80
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80009f4:	2320      	movs	r3, #32
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80009f6:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009fa:	e9c5 2604 	strd	r2, r6, [r5, #16]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80009fe:	e9c5 6306 	strd	r6, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000a02:	f004 f8cd 	bl	8004ba0 <HAL_DMA_Init>
 8000a06:	b930      	cbnz	r0, 8000a16 <HAL_ADC_MspInit+0xae>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8000a08:	6525      	str	r5, [r4, #80]	@ 0x50
 8000a0a:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8000a0c:	b016      	add	sp, #88	@ 0x58
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8000a10:	f000 fa02 	bl	8000e18 <Error_Handler>
 8000a14:	e7c6      	b.n	80009a4 <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 8000a16:	f000 f9ff 	bl	8000e18 <Error_Handler>
 8000a1a:	e7f5      	b.n	8000a08 <HAL_ADC_MspInit+0xa0>
 8000a1c:	40012400 	.word	0x40012400
 8000a20:	20000044 	.word	0x20000044
 8000a24:	40020008 	.word	0x40020008

08000a28 <MX_DMA_Init>:
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a2c:	b510      	push	{r4, lr}
 8000a2e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8000a30:	f040 0004 	orr.w	r0, r0, #4
 8000a34:	6498      	str	r0, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000a36:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8000a38:	b082      	sub	sp, #8
 8000a3a:	f004 0404 	and.w	r4, r4, #4
 8000a3e:	9401      	str	r4, [sp, #4]
  (void)tmpreg;
 8000a40:	9c01      	ldr	r4, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000a42:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8000a44:	f044 0401 	orr.w	r4, r4, #1
 8000a48:	649c      	str	r4, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000a4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	4611      	mov	r1, r2
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	200b      	movs	r0, #11
  (void)tmpreg;
 8000a58:	9b00      	ldr	r3, [sp, #0]
 8000a5a:	f004 f845 	bl	8004ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a5e:	200b      	movs	r0, #11
 8000a60:	f004 f87e 	bl	8004b60 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	200c      	movs	r0, #12
 8000a68:	4611      	mov	r1, r2
 8000a6a:	f004 f83d 	bl	8004ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000a6e:	200c      	movs	r0, #12

}
 8000a70:	b002      	add	sp, #8
 8000a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000a76:	f004 b873 	b.w	8004b60 <HAL_NVIC_EnableIRQ>
 8000a7a:	bf00      	nop

08000a7c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000a7c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	2400      	movs	r4, #0
{
 8000a80:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000a86:	e9cd 4406 	strd	r4, r4, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a8e:	9408      	str	r4, [sp, #32]
 8000a90:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000a92:	f041 0102 	orr.w	r1, r1, #2
 8000a96:	64d9      	str	r1, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a98:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000a9a:	f001 0102 	and.w	r1, r1, #2
 8000a9e:	9103      	str	r1, [sp, #12]
  (void)tmpreg;
 8000aa0:	9903      	ldr	r1, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000aa2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000aa4:	f041 0101 	orr.w	r1, r1, #1
 8000aa8:	64d9      	str	r1, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000aaa:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000aac:	f001 0101 	and.w	r1, r1, #1
 8000ab0:	9102      	str	r1, [sp, #8]
  (void)tmpreg;
 8000ab2:	9902      	ldr	r1, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ab4:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000ab6:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8000aba:	64d9      	str	r1, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000abc:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000abe:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8000ac2:	9101      	str	r1, [sp, #4]
  (void)tmpreg;
 8000ac4:	9901      	ldr	r1, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ac6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000ac8:	f041 0104 	orr.w	r1, r1, #4
 8000acc:	64d9      	str	r1, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad0:	f003 0304 	and.w	r3, r3, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ad4:	4622      	mov	r2, r4
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	2120      	movs	r1, #32
 8000ada:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  (void)tmpreg;
 8000ade:	9b00      	ldr	r3, [sp, #0]
 8000ae0:	f004 fbfe 	bl	80052e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB8 PB0 PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12;
 8000ae6:	f241 1205 	movw	r2, #4357	@ 0x1105
 8000aea:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	4821      	ldr	r0, [pc, #132]	@ (8000b74 <MX_GPIO_Init+0xf8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12;
 8000af0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f004 fa92 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA8 PA9
                           PA10 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 8000af8:	f648 7211 	movw	r2, #36625	@ 0x8f11
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 8000afe:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 8000b04:	e9cd 2304 	strd	r2, r3, [sp, #16]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f004 fa86 	bl	800501c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_Pin;
 8000b10:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b12:	a904      	add	r1, sp, #16
 8000b14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = LED_Pin;
 8000b18:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	e9cd 5405 	strd	r5, r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f004 fa7c 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin;
 8000b24:	22c0      	movs	r2, #192	@ 0xc0
 8000b26:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	a904      	add	r1, sp, #16
 8000b2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin;
 8000b30:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b34:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f004 fa71 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b3a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b3c:	2208      	movs	r2, #8
 8000b3e:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b40:	480d      	ldr	r0, [pc, #52]	@ (8000b78 <MX_GPIO_Init+0xfc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b44:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b48:	f004 fa68 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b52:	a904      	add	r1, sp, #16
 8000b54:	4809      	ldr	r0, [pc, #36]	@ (8000b7c <MX_GPIO_Init+0x100>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b58:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5c:	f004 fa5e 	bl	800501c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b60:	4622      	mov	r2, r4
 8000b62:	4621      	mov	r1, r4
 8000b64:	2016      	movs	r0, #22
 8000b66:	f003 ffbf 	bl	8004ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b6a:	2016      	movs	r0, #22
 8000b6c:	f003 fff8 	bl	8004b60 <HAL_NVIC_EnableIRQ>

}
 8000b70:	b00b      	add	sp, #44	@ 0x2c
 8000b72:	bd30      	pop	{r4, r5, pc}
 8000b74:	48000400 	.word	0x48000400
 8000b78:	48001c00 	.word	0x48001c00
 8000b7c:	48000800 	.word	0x48000800

08000b80 <MX_I2C1_Init>:
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b80:	4817      	ldr	r0, [pc, #92]	@ (8000be0 <MX_I2C1_Init+0x60>)
 8000b82:	4918      	ldr	r1, [pc, #96]	@ (8000be4 <MX_I2C1_Init+0x64>)
{
 8000b84:	b508      	push	{r3, lr}
  hi2c1.Init.Timing = 0x00000000;
 8000b86:	2201      	movs	r2, #1
 8000b88:	2300      	movs	r3, #0
 8000b8a:	e9c0 1300 	strd	r1, r3, [r0]
 8000b8e:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8000b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b96:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8000b9a:	6203      	str	r3, [r0, #32]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b9c:	f004 fd0a 	bl	80055b4 <HAL_I2C_Init>
 8000ba0:	b950      	cbnz	r0, 8000bb8 <MX_I2C1_Init+0x38>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ba2:	480f      	ldr	r0, [pc, #60]	@ (8000be0 <MX_I2C1_Init+0x60>)
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	f004 ffab 	bl	8005b00 <HAL_I2CEx_ConfigAnalogFilter>
 8000baa:	b968      	cbnz	r0, 8000bc8 <MX_I2C1_Init+0x48>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bac:	480c      	ldr	r0, [pc, #48]	@ (8000be0 <MX_I2C1_Init+0x60>)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	f004 ffd0 	bl	8005b54 <HAL_I2CEx_ConfigDigitalFilter>
 8000bb4:	b980      	cbnz	r0, 8000bd8 <MX_I2C1_Init+0x58>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bb6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000bb8:	f000 f92e 	bl	8000e18 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bbc:	4808      	ldr	r0, [pc, #32]	@ (8000be0 <MX_I2C1_Init+0x60>)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f004 ff9e 	bl	8005b00 <HAL_I2CEx_ConfigAnalogFilter>
 8000bc4:	2800      	cmp	r0, #0
 8000bc6:	d0f1      	beq.n	8000bac <MX_I2C1_Init+0x2c>
    Error_Handler();
 8000bc8:	f000 f926 	bl	8000e18 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bcc:	4804      	ldr	r0, [pc, #16]	@ (8000be0 <MX_I2C1_Init+0x60>)
 8000bce:	2100      	movs	r1, #0
 8000bd0:	f004 ffc0 	bl	8005b54 <HAL_I2CEx_ConfigDigitalFilter>
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d0ee      	beq.n	8000bb6 <MX_I2C1_Init+0x36>
}
 8000bd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000bdc:	f000 b91c 	b.w	8000e18 <Error_Handler>
 8000be0:	20000108 	.word	0x20000108
 8000be4:	40005400 	.word	0x40005400

08000be8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000be8:	b510      	push	{r4, lr}
 8000bea:	4604      	mov	r4, r0
 8000bec:	b096      	sub	sp, #88	@ 0x58

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf0:	2238      	movs	r2, #56	@ 0x38
 8000bf2:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000bf8:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000bfc:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bfe:	f00c f8f3 	bl	800cde8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c02:	4b1b      	ldr	r3, [pc, #108]	@ (8000c70 <HAL_I2C_MspInit+0x88>)
 8000c04:	6822      	ldr	r2, [r4, #0]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d001      	beq.n	8000c0e <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c0a:	b016      	add	sp, #88	@ 0x58
 8000c0c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c0e:	2240      	movs	r2, #64	@ 0x40
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c10:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c14:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c16:	9208      	str	r2, [sp, #32]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c18:	930d      	str	r3, [sp, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c1a:	f005 feb5 	bl	8006988 <HAL_RCCEx_PeriphCLKConfig>
 8000c1e:	bb18      	cbnz	r0, 8000c68 <HAL_I2C_MspInit+0x80>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c20:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c24:	22c0      	movs	r2, #192	@ 0xc0
 8000c26:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	4812      	ldr	r0, [pc, #72]	@ (8000c74 <HAL_I2C_MspInit+0x8c>)
 8000c2a:	f043 0302 	orr.w	r3, r3, #2
 8000c2e:	64e3      	str	r3, [r4, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c30:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c38:	2312      	movs	r3, #18
 8000c3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2300      	movs	r3, #0
 8000c42:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c48:	2304      	movs	r3, #4
 8000c4a:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 8000c4c:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4e:	f004 f9e5 	bl	800501c <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000c54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c58:	65a3      	str	r3, [r4, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000c5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000c5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c60:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000c62:	9b00      	ldr	r3, [sp, #0]
}
 8000c64:	b016      	add	sp, #88	@ 0x58
 8000c66:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000c68:	f000 f8d6 	bl	8000e18 <Error_Handler>
 8000c6c:	e7d8      	b.n	8000c20 <HAL_I2C_MspInit+0x38>
 8000c6e:	bf00      	nop
 8000c70:	40005400 	.word	0x40005400
 8000c74:	48000400 	.word	0x48000400

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b510      	push	{r4, lr}
 8000c7a:	b09a      	sub	sp, #104	@ 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c7c:	2400      	movs	r4, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7e:	2248      	movs	r2, #72	@ 0x48
 8000c80:	2100      	movs	r1, #0
 8000c82:	a808      	add	r0, sp, #32
 8000c84:	f00c f8b0 	bl	800cde8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c88:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000c8c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000c90:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c94:	f004 ff8a 	bl	8005bac <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000c98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9c:	a808      	add	r0, sp, #32
 8000c9e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8000ca2:	f023 0318 	bic.w	r3, r3, #24
 8000ca6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000caa:	f8d2 3400 	ldr.w	r3, [r2, #1024]	@ 0x400
 8000cae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000cb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cb6:	f8c2 3400 	str.w	r3, [r2, #1024]	@ 0x400
 8000cba:	f8d2 3400 	ldr.w	r3, [r2, #1024]	@ 0x400
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000cbe:	9411      	str	r4, [sp, #68]	@ 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cc0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000cc4:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000cc6:	2226      	movs	r2, #38	@ 0x26
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cc8:	9901      	ldr	r1, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000cca:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ccc:	2181      	movs	r1, #129	@ 0x81
 8000cce:	f44f 7280 	mov.w	r2, #256	@ 0x100
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cd2:	2340      	movs	r3, #64	@ 0x40
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cd4:	e9cd 120b 	strd	r1, r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cd8:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cda:	e9cd 3412 	strd	r3, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cde:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce0:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce2:	f005 f8cf 	bl	8005e84 <HAL_RCC_OscConfig>
 8000ce6:	b108      	cbz	r0, 8000cec <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cea:	e7fe      	b.n	8000cea <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000cec:	4601      	mov	r1, r0
 8000cee:	224f      	movs	r2, #79	@ 0x4f
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000cf0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000cf4:	e9cd 2102 	strd	r2, r1, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000cf8:	e9cd 1304 	strd	r1, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000cfc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000d00:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d02:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000d04:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d08:	f005 fb9e 	bl	8006448 <HAL_RCC_ClockConfig>
 8000d0c:	b108      	cbz	r0, 8000d12 <SystemClock_Config+0x9a>
 8000d0e:	b672      	cpsid	i
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <SystemClock_Config+0x98>
}
 8000d12:	b01a      	add	sp, #104	@ 0x68
 8000d14:	bd10      	pop	{r4, pc}
 8000d16:	bf00      	nop

08000d18 <main>:
{
 8000d18:	b508      	push	{r3, lr}
  HAL_Init();
 8000d1a:	f003 fc9b 	bl	8004654 <HAL_Init>
  SystemClock_Config();
 8000d1e:	f7ff ffab 	bl	8000c78 <SystemClock_Config>
  MX_GPIO_Init();
 8000d22:	f7ff feab 	bl	8000a7c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d26:	f7ff fe7f 	bl	8000a28 <MX_DMA_Init>
  MX_I2C1_Init();
 8000d2a:	f7ff ff29 	bl	8000b80 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000d2e:	f000 fe87 	bl	8001a40 <MX_LPUART1_UART_Init>
  MX_SubGHz_Phy_Init();
 8000d32:	f00a ffe5 	bl	800bd00 <MX_SubGHz_Phy_Init>
  MX_ADC_Init();
 8000d36:	f7ff fdd7 	bl	80008e8 <MX_ADC_Init>
  MX_TIM1_Init();
 8000d3a:	f000 fcdb 	bl	80016f4 <MX_TIM1_Init>
  MX_SPI1_Init();
 8000d3e:	f000 fb3f 	bl	80013c0 <MX_SPI1_Init>
  my_sensor_init(&hi2c1, 0);
 8000d42:	4809      	ldr	r0, [pc, #36]	@ (8000d68 <main+0x50>)
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000d44:	4e09      	ldr	r6, [pc, #36]	@ (8000d6c <main+0x54>)
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8000d46:	4d0a      	ldr	r5, [pc, #40]	@ (8000d70 <main+0x58>)
  my_sensor_init(&hi2c1, 0);
 8000d48:	2100      	movs	r1, #0
 8000d4a:	f000 f9f1 	bl	8001130 <my_sensor_init>
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000d4e:	2407      	movs	r4, #7
    MX_SubGHz_Phy_Process();
 8000d50:	f00a ffde 	bl	800bd10 <MX_SubGHz_Phy_Process>
  	  HAL_SuspendTick();
 8000d54:	f003 fc96 	bl	8004684 <HAL_SuspendTick>
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8000d58:	2304      	movs	r3, #4
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000d5a:	61b4      	str	r4, [r6, #24]
  	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000d5c:	2101      	movs	r1, #1
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8000d5e:	65eb      	str	r3, [r5, #92]	@ 0x5c
  	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000d60:	2000      	movs	r0, #0
 8000d62:	f004 ff2b 	bl	8005bbc <HAL_PWR_EnterSLEEPMode>
  while (1)
 8000d66:	e7f3      	b.n	8000d50 <main+0x38>
 8000d68:	20000108 	.word	0x20000108
 8000d6c:	58000400 	.word	0x58000400
 8000d70:	40002800 	.word	0x40002800

08000d74 <HAL_GPIO_EXTI_Callback>:
{
 8000d74:	b510      	push	{r4, lr}
 8000d76:	4604      	mov	r4, r0
	SystemClock_Config ();
 8000d78:	f7ff ff7e 	bl	8000c78 <SystemClock_Config>
	HAL_ResumeTick();
 8000d7c:	f003 fc8a 	bl	8004694 <HAL_ResumeTick>
	if(GPIO_Pin == Button1_Pin) {
 8000d80:	2c40      	cmp	r4, #64	@ 0x40
 8000d82:	d002      	beq.n	8000d8a <HAL_GPIO_EXTI_Callback+0x16>
	} else if (GPIO_Pin == Button2_Pin) {
 8000d84:	2c80      	cmp	r4, #128	@ 0x80
 8000d86:	d009      	beq.n	8000d9c <HAL_GPIO_EXTI_Callback+0x28>
}
 8000d88:	bd10      	pop	{r4, pc}
 8000d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)string, strlen(string), 0xFFFF);
 8000d8e:	4908      	ldr	r1, [pc, #32]	@ (8000db0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000d90:	4808      	ldr	r0, [pc, #32]	@ (8000db4 <HAL_GPIO_EXTI_Callback+0x40>)
 8000d92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d96:	220d      	movs	r2, #13
 8000d98:	f008 b972 	b.w	8009080 <HAL_UART_Transmit>
				bme_data = get_BME_data();
 8000d9c:	f000 fa14 	bl	80011c8 <get_BME_data>
 8000da0:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <HAL_GPIO_EXTI_Callback+0x44>)
 8000da2:	6018      	str	r0, [r3, #0]
				make_packet(bme_data);
 8000da4:	f000 f83a 	bl	8000e1c <make_packet>
}
 8000da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				send_packet();
 8000dac:	f000 b87e 	b.w	8000eac <send_packet>
 8000db0:	0800cf1c 	.word	0x0800cf1c
 8000db4:	20000398 	.word	0x20000398
 8000db8:	2000015c 	.word	0x2000015c

08000dbc <HAL_RTCEx_WakeUpTimerEventCallback>:
	send_sync_packet();
 8000dbc:	f000 b88c 	b.w	8000ed8 <send_sync_packet>

08000dc0 <change_SF>:
{
 8000dc0:	b510      	push	{r4, lr}
	if(++currentSF > 12) {
 8000dc2:	4c0f      	ldr	r4, [pc, #60]	@ (8000e00 <change_SF+0x40>)
	SubghzApp_SetLoRaConfig(currentTxPower, currentSF);
 8000dc4:	4a0f      	ldr	r2, [pc, #60]	@ (8000e04 <change_SF+0x44>)
	if(++currentSF > 12) {
 8000dc6:	6821      	ldr	r1, [r4, #0]
	SubghzApp_SetLoRaConfig(currentTxPower, currentSF);
 8000dc8:	6810      	ldr	r0, [r2, #0]
	if(++currentSF > 12) {
 8000dca:	3101      	adds	r1, #1
 8000dcc:	290c      	cmp	r1, #12
 8000dce:	bfc8      	it	gt
 8000dd0:	2307      	movgt	r3, #7
{
 8000dd2:	b082      	sub	sp, #8
	if(++currentSF > 12) {
 8000dd4:	bfd4      	ite	le
 8000dd6:	460b      	movle	r3, r1
 8000dd8:	4619      	movgt	r1, r3
 8000dda:	6023      	str	r3, [r4, #0]
	SubghzApp_SetLoRaConfig(currentTxPower, currentSF);
 8000ddc:	f00b f80a 	bl	800bdf4 <SubghzApp_SetLoRaConfig>
	APP_PRINTF("Radio in RX mode for %ds...\r\n", RXTIMEOUT/1000);
 8000de0:	2200      	movs	r2, #0
 8000de2:	20b4      	movs	r0, #180	@ 0xb4
 8000de4:	4611      	mov	r1, r2
 8000de6:	9000      	str	r0, [sp, #0]
 8000de8:	4b07      	ldr	r3, [pc, #28]	@ (8000e08 <change_SF+0x48>)
 8000dea:	4610      	mov	r0, r2
 8000dec:	f00b fe8a 	bl	800cb04 <UTIL_ADV_TRACE_COND_FSend>
	Radio.Rx(RXTIMEOUT);
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <change_SF+0x4c>)
 8000df2:	4807      	ldr	r0, [pc, #28]	@ (8000e10 <change_SF+0x50>)
 8000df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000df6:	4798      	blx	r3
}
 8000df8:	6820      	ldr	r0, [r4, #0]
 8000dfa:	b002      	add	sp, #8
 8000dfc:	bd10      	pop	{r4, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000000 	.word	0x20000000
 8000e04:	20000004 	.word	0x20000004
 8000e08:	0800cf2c 	.word	0x0800cf2c
 8000e0c:	0800d274 	.word	0x0800d274
 8000e10:	0002bf20 	.word	0x0002bf20

08000e14 <debug_print>:
}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop

08000e18 <Error_Handler>:
 8000e18:	b672      	cpsid	i
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <Error_Handler+0x2>

08000e1c <make_packet>:
void make_packet(struct bme68x_data *bme_data)
{
	packet_length = 0;
	packet_buffer[packet_length++] = (uint8_t) SENDER_ID;

	packet_buffer[packet_length++] = (uint8_t) ((bme_data->temperature >> 8) & mask);
 8000e1c:	4b20      	ldr	r3, [pc, #128]	@ (8000ea0 <make_packet+0x84>)
 8000e1e:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8000e22:	781b      	ldrb	r3, [r3, #0]
	packet_buffer[packet_length++] = (uint8_t) SENDER_ID;
 8000e24:	4a1f      	ldr	r2, [pc, #124]	@ (8000ea4 <make_packet+0x88>)
	packet_buffer[packet_length++] = (uint8_t) (bme_data->temperature & mask);

	packet_buffer[packet_length++] = (uint8_t) ((bme_data->pressure >> 24) & mask);
 8000e26:	6881      	ldr	r1, [r0, #8]
	packet_buffer[packet_length++] = (uint8_t) (bme_data->temperature & mask);
 8000e28:	ea03 0c0c 	and.w	ip, r3, ip
{
 8000e2c:	b410      	push	{r4}
	packet_buffer[packet_length++] = (uint8_t) (bme_data->temperature & mask);
 8000e2e:	f882 c002 	strb.w	ip, [r2, #2]
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->pressure >> 16) & mask);
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->pressure >> 8) & mask);
	packet_buffer[packet_length++] = (uint8_t) (bme_data->pressure & mask);
 8000e32:	ea03 0c01 	and.w	ip, r3, r1
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->pressure >> 24) & mask);
 8000e36:	ea03 6411 	and.w	r4, r3, r1, lsr #24
	packet_buffer[packet_length++] = (uint8_t) (bme_data->pressure & mask);
 8000e3a:	f882 c006 	strb.w	ip, [r2, #6]
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->temperature >> 8) & mask);
 8000e3e:	f990 c007 	ldrsb.w	ip, [r0, #7]
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->pressure >> 24) & mask);
 8000e42:	70d4      	strb	r4, [r2, #3]
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->pressure >> 16) & mask);
 8000e44:	ea03 4411 	and.w	r4, r3, r1, lsr #16
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->temperature >> 8) & mask);
 8000e48:	ea03 0c0c 	and.w	ip, r3, ip
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->pressure >> 16) & mask);
 8000e4c:	7114      	strb	r4, [r2, #4]
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->pressure >> 8) & mask);
 8000e4e:	ea03 2411 	and.w	r4, r3, r1, lsr #8

	packet_buffer[packet_length++] = (uint8_t) ((bme_data->humidity >> 24) & mask);
 8000e52:	68c1      	ldr	r1, [r0, #12]
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->temperature >> 8) & mask);
 8000e54:	f882 c001 	strb.w	ip, [r2, #1]
	packet_buffer[packet_length++] = (uint8_t) SENDER_ID;
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f882 c000 	strb.w	ip, [r2]
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->humidity >> 24) & mask);
 8000e60:	ea03 6c11 	and.w	ip, r3, r1, lsr #24
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->humidity >> 16) & mask);
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->humidity >> 8) & mask);
	packet_buffer[packet_length++] = (uint8_t) (bme_data->humidity & mask);

#if(SENSE_GAS)
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->gas_resistance >> 24) & mask);
 8000e64:	6900      	ldr	r0, [r0, #16]
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->humidity >> 24) & mask);
 8000e66:	f882 c007 	strb.w	ip, [r2, #7]
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->humidity >> 16) & mask);
 8000e6a:	ea03 4c11 	and.w	ip, r3, r1, lsr #16
 8000e6e:	f882 c008 	strb.w	ip, [r2, #8]
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->humidity >> 8) & mask);
 8000e72:	ea03 2c11 	and.w	ip, r3, r1, lsr #8
	packet_buffer[packet_length++] = (uint8_t) (bme_data->humidity & mask);
 8000e76:	4019      	ands	r1, r3
 8000e78:	7291      	strb	r1, [r2, #10]
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->gas_resistance >> 24) & mask);
 8000e7a:	ea03 6110 	and.w	r1, r3, r0, lsr #24
 8000e7e:	72d1      	strb	r1, [r2, #11]
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->gas_resistance >> 16) & mask);
 8000e80:	ea03 4110 	and.w	r1, r3, r0, lsr #16
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->pressure >> 8) & mask);
 8000e84:	7154      	strb	r4, [r2, #5]
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->gas_resistance >> 16) & mask);
 8000e86:	7311      	strb	r1, [r2, #12]
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->gas_resistance >> 8) & mask);
	packet_buffer[packet_length++] = (uint8_t) (bme_data->gas_resistance & mask);
 8000e88:	4c07      	ldr	r4, [pc, #28]	@ (8000ea8 <make_packet+0x8c>)
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->humidity >> 8) & mask);
 8000e8a:	f882 c009 	strb.w	ip, [r2, #9]
	packet_buffer[packet_length++] = (uint8_t) ((bme_data->gas_resistance >> 8) & mask);
 8000e8e:	ea03 2110 	and.w	r1, r3, r0, lsr #8
 8000e92:	7351      	strb	r1, [r2, #13]
	packet_buffer[packet_length++] = (uint8_t) (bme_data->gas_resistance & mask);
 8000e94:	4003      	ands	r3, r0
 8000e96:	210f      	movs	r1, #15
 8000e98:	7021      	strb	r1, [r4, #0]
 8000e9a:	7393      	strb	r3, [r2, #14]
#if(USE_MAX_LENGTH)
	for(; packet_length < PAYLOAD_MAX_LENGTH;) {
		packet_buffer[packet_length++] = 0;
	}
#endif
}
 8000e9c:	bc10      	pop	{r4}
 8000e9e:	4770      	bx	lr
 8000ea0:	2000000c 	.word	0x2000000c
 8000ea4:	20000168 	.word	0x20000168
 8000ea8:	20000160 	.word	0x20000160

08000eac <send_packet>:

void send_packet()
{
 8000eac:	b508      	push	{r3, lr}
//	APP_PRINTF("Status Radio: %d \r\n", Radio.GetStatus());
//	APP_PRINTF("Sending %d bytes...\r\n", packet_length);
	if(Radio.Send(packet_buffer, packet_length)) {
 8000eae:	4a06      	ldr	r2, [pc, #24]	@ (8000ec8 <send_packet+0x1c>)
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <send_packet+0x20>)
 8000eb2:	7811      	ldrb	r1, [r2, #0]
 8000eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eb6:	4806      	ldr	r0, [pc, #24]	@ (8000ed0 <send_packet+0x24>)
 8000eb8:	4798      	blx	r3
 8000eba:	b900      	cbnz	r0, 8000ebe <send_packet+0x12>
//	Radio.Standby();    // Packet not received correctly (just "HDR KO"). With Sleep, I have an CRC error
//	HAL_Delay(100);
//	APP_PRINTF("Status Radio is now: %d \r\n", Radio.GetStatus());
//
//	Radio.Sleep();   //or        Radio.Sleep();
}
 8000ebc:	bd08      	pop	{r3, pc}
 8000ebe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		debug_print("Send packet failed.\r\n");
 8000ec2:	4804      	ldr	r0, [pc, #16]	@ (8000ed4 <send_packet+0x28>)
 8000ec4:	f7ff bfa6 	b.w	8000e14 <debug_print>
 8000ec8:	20000160 	.word	0x20000160
 8000ecc:	0800d274 	.word	0x0800d274
 8000ed0:	20000168 	.word	0x20000168
 8000ed4:	0800cf4c 	.word	0x0800cf4c

08000ed8 <send_sync_packet>:
	send_packet();
}

#if(SEND_SYNC_PACKETS)
void send_sync_packet()
{
 8000ed8:	b530      	push	{r4, r5, lr}
	if(sync_num == 1) {
 8000eda:	4c1b      	ldr	r4, [pc, #108]	@ (8000f48 <send_sync_packet+0x70>)
 8000edc:	7823      	ldrb	r3, [r4, #0]
 8000ede:	2b01      	cmp	r3, #1
{
 8000ee0:	b085      	sub	sp, #20
	if(sync_num == 1) {
 8000ee2:	d023      	beq.n	8000f2c <send_sync_packet+0x54>
		myRTC_start(SYNC_PACKET_DELAY);
	}
	if(sync_num <= SYNC_PACKET_NUMBER) {
 8000ee4:	2b06      	cmp	r3, #6
 8000ee6:	d80d      	bhi.n	8000f04 <send_sync_packet+0x2c>
		packet_length = 1;
		packet_buffer[0] = sync_num;
 8000ee8:	4818      	ldr	r0, [pc, #96]	@ (8000f4c <send_sync_packet+0x74>)
	if(Radio.Send(packet_buffer, packet_length)) {
 8000eea:	4a19      	ldr	r2, [pc, #100]	@ (8000f50 <send_sync_packet+0x78>)
		packet_length = 1;
 8000eec:	4d19      	ldr	r5, [pc, #100]	@ (8000f54 <send_sync_packet+0x7c>)
		packet_buffer[0] = sync_num;
 8000eee:	7003      	strb	r3, [r0, #0]
		packet_length = 1;
 8000ef0:	2101      	movs	r1, #1
	if(Radio.Send(packet_buffer, packet_length)) {
 8000ef2:	6a93      	ldr	r3, [r2, #40]	@ 0x28
		packet_length = 1;
 8000ef4:	7029      	strb	r1, [r5, #0]
	if(Radio.Send(packet_buffer, packet_length)) {
 8000ef6:	4798      	blx	r3
 8000ef8:	b9f0      	cbnz	r0, 8000f38 <send_sync_packet+0x60>
		send_packet();
		sync_num++;
 8000efa:	7823      	ldrb	r3, [r4, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	7023      	strb	r3, [r4, #0]
		sync_num = 1;
		myRTC_stop();
		APP_PRINTF("Radio in RX mode for %ds...\r\n", RXTIMEOUT/1000);
		Radio.Rx(RXTIMEOUT);
	}
}
 8000f00:	b005      	add	sp, #20
 8000f02:	bd30      	pop	{r4, r5, pc}
		sync_num = 1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	7023      	strb	r3, [r4, #0]
		myRTC_stop();
 8000f08:	f000 fa44 	bl	8001394 <myRTC_stop>
		APP_PRINTF("Radio in RX mode for %ds...\r\n", RXTIMEOUT/1000);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	21b4      	movs	r1, #180	@ 0xb4
 8000f10:	9100      	str	r1, [sp, #0]
 8000f12:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <send_sync_packet+0x80>)
 8000f14:	4611      	mov	r1, r2
 8000f16:	4610      	mov	r0, r2
 8000f18:	f00b fdf4 	bl	800cb04 <UTIL_ADV_TRACE_COND_FSend>
		Radio.Rx(RXTIMEOUT);
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <send_sync_packet+0x78>)
 8000f1e:	480f      	ldr	r0, [pc, #60]	@ (8000f5c <send_sync_packet+0x84>)
 8000f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f22:	9303      	str	r3, [sp, #12]
}
 8000f24:	b005      	add	sp, #20
 8000f26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		Radio.Rx(RXTIMEOUT);
 8000f2a:	4718      	bx	r3
		myRTC_start(SYNC_PACKET_DELAY);
 8000f2c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f30:	f000 fa10 	bl	8001354 <myRTC_start>
	if(sync_num <= SYNC_PACKET_NUMBER) {
 8000f34:	7823      	ldrb	r3, [r4, #0]
 8000f36:	e7d5      	b.n	8000ee4 <send_sync_packet+0xc>
		debug_print("Send packet failed.\r\n");
 8000f38:	4809      	ldr	r0, [pc, #36]	@ (8000f60 <send_sync_packet+0x88>)
 8000f3a:	f7ff ff6b 	bl	8000e14 <debug_print>
		sync_num++;
 8000f3e:	7823      	ldrb	r3, [r4, #0]
 8000f40:	3301      	adds	r3, #1
 8000f42:	7023      	strb	r3, [r4, #0]
}
 8000f44:	b005      	add	sp, #20
 8000f46:	bd30      	pop	{r4, r5, pc}
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000168 	.word	0x20000168
 8000f50:	0800d274 	.word	0x0800d274
 8000f54:	20000160 	.word	0x20000160
 8000f58:	0800cf2c 	.word	0x0800cf2c
 8000f5c:	0002bf20 	.word	0x0002bf20
 8000f60:	0800cf4c 	.word	0x0800cf4c

08000f64 <decode_print_packet>:
#endif

void decode_print_packet(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 8000f64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f68:	4606      	mov	r6, r0
 8000f6a:	b089      	sub	sp, #36	@ 0x24
	float rssi_f = -((float)rssi)/2;
 8000f6c:	4610      	mov	r0, r2
{
 8000f6e:	4698      	mov	r8, r3
 8000f70:	4614      	mov	r4, r2
 8000f72:	460d      	mov	r5, r1
	float rssi_f = -((float)rssi)/2;
 8000f74:	f7ff fa76 	bl	8000464 <__aeabi_i2f>
 8000f78:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000f7c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8000f80:	f7ff f902 	bl	8000188 <__aeabi_fmul>
 8000f84:	4607      	mov	r7, r0
	float snr_f = ((float)LoraSnr_FskCfo)/4;
 8000f86:	4640      	mov	r0, r8
 8000f88:	f7ff fa6c 	bl	8000464 <__aeabi_i2f>
 8000f8c:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8000f90:	f7ff f8fa 	bl	8000188 <__aeabi_fmul>
	APP_PRINTF("PACKET RECEIVED --- RSSI = %d (%d.%d dBm)     SNR = %d (%d.%d dB)     SIZE=%d bytes\n                    PAYLOAD=0x",
 8000f94:	493e      	ldr	r1, [pc, #248]	@ (8001090 <decode_print_packet+0x12c>)
 8000f96:	9506      	str	r5, [sp, #24]
	float snr_f = ((float)LoraSnr_FskCfo)/4;
 8000f98:	4681      	mov	r9, r0
	APP_PRINTF("PACKET RECEIVED --- RSSI = %d (%d.%d dBm)     SNR = %d (%d.%d dB)     SIZE=%d bytes\n                    PAYLOAD=0x",
 8000f9a:	f7ff f8f5 	bl	8000188 <__aeabi_fmul>
 8000f9e:	f7ff fab5 	bl	800050c <__aeabi_f2iz>
 8000fa2:	4a3c      	ldr	r2, [pc, #240]	@ (8001094 <decode_print_packet+0x130>)
 8000fa4:	4601      	mov	r1, r0
 8000fa6:	fb82 3201 	smull	r3, r2, r2, r1
 8000faa:	17cb      	asrs	r3, r1, #31
 8000fac:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8000fb0:	2264      	movs	r2, #100	@ 0x64
 8000fb2:	fb02 1113 	mls	r1, r2, r3, r1
 8000fb6:	4648      	mov	r0, r9
 8000fb8:	9105      	str	r1, [sp, #20]
 8000fba:	f7ff faa7 	bl	800050c <__aeabi_f2iz>
 8000fbe:	4936      	ldr	r1, [pc, #216]	@ (8001098 <decode_print_packet+0x134>)
 8000fc0:	e9cd 8003 	strd	r8, r0, [sp, #12]
 8000fc4:	4638      	mov	r0, r7
 8000fc6:	f7ff f8df 	bl	8000188 <__aeabi_fmul>
 8000fca:	f7ff fa9f 	bl	800050c <__aeabi_f2iz>
 8000fce:	4933      	ldr	r1, [pc, #204]	@ (800109c <decode_print_packet+0x138>)
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	fb81 2103 	smull	r2, r1, r1, r3
 8000fd6:	17da      	asrs	r2, r3, #31
 8000fd8:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8000fdc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000fe0:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8000fe4:	4638      	mov	r0, r7
 8000fe6:	9302      	str	r3, [sp, #8]
 8000fe8:	f7ff fa90 	bl	800050c <__aeabi_f2iz>
 8000fec:	2200      	movs	r2, #0
 8000fee:	e9cd 4000 	strd	r4, r0, [sp]
 8000ff2:	4b2b      	ldr	r3, [pc, #172]	@ (80010a0 <decode_print_packet+0x13c>)
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	f00b fd84 	bl	800cb04 <UTIL_ADV_TRACE_COND_FSend>
			((int)(rssi_f*10))%10,
			LoraSnr_FskCfo,
			(int)(snr_f),
			((int)(snr_f*100))%100,
			size);
	for(uint16_t i = 0; i < size; ++i) {
 8000ffc:	b16d      	cbz	r5, 800101a <decode_print_packet+0xb6>
		APP_PRINTF("%02x", payload[i]);
 8000ffe:	4f29      	ldr	r7, [pc, #164]	@ (80010a4 <decode_print_packet+0x140>)
 8001000:	4634      	mov	r4, r6
 8001002:	4435      	add	r5, r6
 8001004:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	2200      	movs	r2, #0
 800100c:	463b      	mov	r3, r7
 800100e:	4611      	mov	r1, r2
 8001010:	4610      	mov	r0, r2
 8001012:	f00b fd77 	bl	800cb04 <UTIL_ADV_TRACE_COND_FSend>
	for(uint16_t i = 0; i < size; ++i) {
 8001016:	42ac      	cmp	r4, r5
 8001018:	d1f4      	bne.n	8001004 <decode_print_packet+0xa0>
	}
	APP_PRINTF("\r\n");
 800101a:	2200      	movs	r2, #0
 800101c:	4611      	mov	r1, r2
 800101e:	4b22      	ldr	r3, [pc, #136]	@ (80010a8 <decode_print_packet+0x144>)
 8001020:	4610      	mov	r0, r2
 8001022:	f00b fd6f 	bl	800cb04 <UTIL_ADV_TRACE_COND_FSend>
#if(PRINT_PACKET_DECODED)
	if(size == PACKET_LENGTH) {
		uint8_t id = payload[0];
 8001026:	f8b6 4001 	ldrh.w	r4, [r6, #1]
 800102a:	f8d6 5003 	ldr.w	r5, [r6, #3]
 800102e:	f8d6 7007 	ldr.w	r7, [r6, #7]
 8001032:	f8d6 800b 	ldr.w	r8, [r6, #11]
		uint16_t temp = (uint16_t) ((payload[1] << 8) | payload[2]);
		uint32_t press = (uint32_t) ((payload[3] << 24) | (payload[4] << 16) | (payload[5] << 8) | payload[6]);
		uint32_t hum = (uint32_t) ((payload[7] << 24) | (payload[8] << 16) | (payload[9] << 8) | payload[10]);
		if(SENSE_GAS){
			uint32_t gas = (uint32_t) ((payload[11] << 24) | (payload[12] << 16) | (payload[13] << 8) | payload[14]);
			APP_PRINTF("ID\t\tT [C*100]\t P [Pa]\t H [%%*1000]\t Gas R [ohm]\r\n")
 8001036:	4b1d      	ldr	r3, [pc, #116]	@ (80010ac <decode_print_packet+0x148>)
		uint8_t id = payload[0];
 8001038:	f896 9000 	ldrb.w	r9, [r6]
			APP_PRINTF("ID\t\tT [C*100]\t P [Pa]\t H [%%*1000]\t Gas R [ohm]\r\n")
 800103c:	2200      	movs	r2, #0
 800103e:	4611      	mov	r1, r2
 8001040:	4610      	mov	r0, r2
 8001042:	ba64      	rev16	r4, r4
 8001044:	f00b fd5e 	bl	800cb04 <UTIL_ADV_TRACE_COND_FSend>
 8001048:	b2a4      	uxth	r4, r4
			APP_PRINTF("%u\t\t%d\t\t %u\t\t %u\t\t %u\r\n", id, (int) temp, press, hum, gas);
 800104a:	2200      	movs	r2, #0
 800104c:	ba2d      	rev	r5, r5
		uint32_t hum = (uint32_t) ((payload[7] << 24) | (payload[8] << 16) | (payload[9] << 8) | payload[10]);
 800104e:	ba3f      	rev	r7, r7
			uint32_t gas = (uint32_t) ((payload[11] << 24) | (payload[12] << 16) | (payload[13] << 8) | payload[14]);
 8001050:	fa98 f888 	rev.w	r8, r8
			APP_PRINTF("%u\t\t%d\t\t %u\t\t %u\t\t %u\r\n", id, (int) temp, press, hum, gas);
 8001054:	4b16      	ldr	r3, [pc, #88]	@ (80010b0 <decode_print_packet+0x14c>)
 8001056:	f8cd 9000 	str.w	r9, [sp]
 800105a:	e9cd 7803 	strd	r7, r8, [sp, #12]
 800105e:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8001062:	4611      	mov	r1, r2
 8001064:	4610      	mov	r0, r2
 8001066:	f00b fd4d 	bl	800cb04 <UTIL_ADV_TRACE_COND_FSend>
		myRTC_start(RTC_DELAY);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	}
#endif
#if(SEND_SYNC_PACKETS)
	if(payload[0] == 0x06) {
 800106a:	7833      	ldrb	r3, [r6, #0]
 800106c:	2b06      	cmp	r3, #6
 800106e:	d002      	beq.n	8001076 <decode_print_packet+0x112>
		int sf = change_SF();
		APP_PRINTF("Changed LoRa config : SF=%d\r\n", sf);
	}
#endif
}
 8001070:	b009      	add	sp, #36	@ 0x24
 8001072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		int sf = change_SF();
 8001076:	f7ff fea3 	bl	8000dc0 <change_SF>
		APP_PRINTF("Changed LoRa config : SF=%d\r\n", sf);
 800107a:	2200      	movs	r2, #0
 800107c:	9000      	str	r0, [sp, #0]
 800107e:	4b0d      	ldr	r3, [pc, #52]	@ (80010b4 <decode_print_packet+0x150>)
 8001080:	4611      	mov	r1, r2
 8001082:	4610      	mov	r0, r2
 8001084:	f00b fd3e 	bl	800cb04 <UTIL_ADV_TRACE_COND_FSend>
}
 8001088:	b009      	add	sp, #36	@ 0x24
 800108a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800108e:	bf00      	nop
 8001090:	42c80000 	.word	0x42c80000
 8001094:	51eb851f 	.word	0x51eb851f
 8001098:	41200000 	.word	0x41200000
 800109c:	66666667 	.word	0x66666667
 80010a0:	0800cf64 	.word	0x0800cf64
 80010a4:	0800d024 	.word	0x0800d024
 80010a8:	0800d404 	.word	0x0800d404
 80010ac:	0800cfd8 	.word	0x0800cfd8
 80010b0:	0800d00c 	.word	0x0800d00c
 80010b4:	0800d02c 	.word	0x0800d02c

080010b8 <bme68x_i2c_read>:

/**************************/
/*** INTERFACE FUNCTIONS***/
/**************************/
BME68X_INTF_RET_TYPE bme68x_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 80010b8:	b530      	push	{r4, r5, lr}
	if(HAL_I2C_Mem_Read(my_hi2c, *((uint16_t *)intf_ptr), reg_addr, 1, (uint8_t *) reg_data, len, HAL_MAX_DELAY) == HAL_OK) {return BME68X_OK;}
 80010ba:	881c      	ldrh	r4, [r3, #0]
 80010bc:	4d0a      	ldr	r5, [pc, #40]	@ (80010e8 <bme68x_i2c_read+0x30>)
{
 80010be:	b085      	sub	sp, #20
	if(HAL_I2C_Mem_Read(my_hi2c, *((uint16_t *)intf_ptr), reg_addr, 1, (uint8_t *) reg_data, len, HAL_MAX_DELAY) == HAL_OK) {return BME68X_OK;}
 80010c0:	b292      	uxth	r2, r2
{
 80010c2:	4684      	mov	ip, r0
	if(HAL_I2C_Mem_Read(my_hi2c, *((uint16_t *)intf_ptr), reg_addr, 1, (uint8_t *) reg_data, len, HAL_MAX_DELAY) == HAL_OK) {return BME68X_OK;}
 80010c4:	9100      	str	r1, [sp, #0]
 80010c6:	9201      	str	r2, [sp, #4]
 80010c8:	4621      	mov	r1, r4
 80010ca:	f04f 34ff 	mov.w	r4, #4294967295
 80010ce:	6828      	ldr	r0, [r5, #0]
 80010d0:	9402      	str	r4, [sp, #8]
 80010d2:	2301      	movs	r3, #1
 80010d4:	4662      	mov	r2, ip
 80010d6:	f004 fbe9 	bl	80058ac <HAL_I2C_Mem_Read>
 80010da:	2800      	cmp	r0, #0
	else {return BME68X_E_COM_FAIL;}
}
 80010dc:	bf14      	ite	ne
 80010de:	f06f 0001 	mvnne.w	r0, #1
 80010e2:	2000      	moveq	r0, #0
 80010e4:	b005      	add	sp, #20
 80010e6:	bd30      	pop	{r4, r5, pc}
 80010e8:	200001dc 	.word	0x200001dc

080010ec <bme68x_i2c_write>:

BME68X_INTF_RET_TYPE bme68x_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 80010ec:	b530      	push	{r4, r5, lr}
	if(HAL_I2C_Mem_Write(my_hi2c, *((uint16_t *)intf_ptr), reg_addr, 1, (uint8_t *) reg_data, len, HAL_MAX_DELAY) == HAL_OK) {return BME68X_OK;}
 80010ee:	881c      	ldrh	r4, [r3, #0]
 80010f0:	4d0a      	ldr	r5, [pc, #40]	@ (800111c <bme68x_i2c_write+0x30>)
{
 80010f2:	b085      	sub	sp, #20
	if(HAL_I2C_Mem_Write(my_hi2c, *((uint16_t *)intf_ptr), reg_addr, 1, (uint8_t *) reg_data, len, HAL_MAX_DELAY) == HAL_OK) {return BME68X_OK;}
 80010f4:	b292      	uxth	r2, r2
{
 80010f6:	4684      	mov	ip, r0
	if(HAL_I2C_Mem_Write(my_hi2c, *((uint16_t *)intf_ptr), reg_addr, 1, (uint8_t *) reg_data, len, HAL_MAX_DELAY) == HAL_OK) {return BME68X_OK;}
 80010f8:	9100      	str	r1, [sp, #0]
 80010fa:	9201      	str	r2, [sp, #4]
 80010fc:	4621      	mov	r1, r4
 80010fe:	f04f 34ff 	mov.w	r4, #4294967295
 8001102:	6828      	ldr	r0, [r5, #0]
 8001104:	9402      	str	r4, [sp, #8]
 8001106:	2301      	movs	r3, #1
 8001108:	4662      	mov	r2, ip
 800110a:	f004 faa7 	bl	800565c <HAL_I2C_Mem_Write>
 800110e:	2800      	cmp	r0, #0
	else {return BME68X_E_COM_FAIL;}
}
 8001110:	bf14      	ite	ne
 8001112:	f06f 0001 	mvnne.w	r0, #1
 8001116:	2000      	moveq	r0, #0
 8001118:	b005      	add	sp, #20
 800111a:	bd30      	pop	{r4, r5, pc}
 800111c:	200001dc 	.word	0x200001dc

08001120 <bme68x_delay_us>:

void bme68x_delay_us(uint32_t period, void *intf_ptr)
{
	HAL_Delay(period/1000); // je crois que c est ok pcq la fonction est utilisee pour des delais de 5ms a 1s
 8001120:	4b02      	ldr	r3, [pc, #8]	@ (800112c <bme68x_delay_us+0xc>)
 8001122:	fba3 3000 	umull	r3, r0, r3, r0
 8001126:	0980      	lsrs	r0, r0, #6
 8001128:	f000 baca 	b.w	80016c0 <HAL_Delay>
 800112c:	10624dd3 	.word	0x10624dd3

08001130 <my_sensor_init>:
#endif
}

void my_sensor_init(I2C_HandleTypeDef *hi2c, uint8_t perform_selftest)
{
	my_hi2c = hi2c;
 8001130:	4a1a      	ldr	r2, [pc, #104]	@ (800119c <my_sensor_init+0x6c>)
{
 8001132:	b538      	push	{r3, r4, r5, lr}
    	bme->read = &bme68x_i2c_read;
 8001134:	4c1a      	ldr	r4, [pc, #104]	@ (80011a0 <my_sensor_init+0x70>)
    	dev_addr = BME68X_I2C_ADDR_LOW<<1;
 8001136:	4b1b      	ldr	r3, [pc, #108]	@ (80011a4 <my_sensor_init+0x74>)
	my_hi2c = hi2c;
 8001138:	6010      	str	r0, [r2, #0]
    	bme->read = &bme68x_i2c_read;
 800113a:	4a1b      	ldr	r2, [pc, #108]	@ (80011a8 <my_sensor_init+0x78>)
 800113c:	6422      	str	r2, [r4, #64]	@ 0x40
{
 800113e:	460d      	mov	r5, r1
    	bme->delay_us = &bme68x_delay_us;
 8001140:	4a1a      	ldr	r2, [pc, #104]	@ (80011ac <my_sensor_init+0x7c>)
    	bme->write = &bme68x_i2c_write;
 8001142:	491b      	ldr	r1, [pc, #108]	@ (80011b0 <my_sensor_init+0x80>)
    	bme->intf_ptr = &dev_addr;
 8001144:	6063      	str	r3, [r4, #4]
    	dev_addr = BME68X_I2C_ADDR_LOW<<1;
 8001146:	20ec      	movs	r0, #236	@ 0xec
 8001148:	7018      	strb	r0, [r3, #0]
    	bme->intf = BME68X_I2C_INTF;
 800114a:	2001      	movs	r0, #1
    	bme->delay_us = &bme68x_delay_us;
 800114c:	e9c4 1211 	strd	r1, r2, [r4, #68]	@ 0x44
    	bme->intf = BME68X_I2C_INTF;
 8001150:	7320      	strb	r0, [r4, #12]
    	bme->amb_temp = 20; /* The ambient temperature in deg C is used for defining the heater temperature */
 8001152:	2214      	movs	r2, #20
	int8_t rslt;

	rslt = bme68x_interface_init(&bme680_dev);
	bme68x_check_rslt("BME680 interface init", rslt);

	rslt = bme68x_init(&bme680_dev);
 8001154:	4620      	mov	r0, r4
    	bme->amb_temp = 20; /* The ambient temperature in deg C is used for defining the heater temperature */
 8001156:	73a2      	strb	r2, [r4, #14]
	rslt = bme68x_init(&bme680_dev);
 8001158:	f000 ff7c 	bl	8002054 <bme68x_init>
	bme68x_check_rslt("BME680 init", rslt);

	if(perform_selftest) {
 800115c:	b9b5      	cbnz	r5, 800118c <my_sensor_init+0x5c>
		rslt = bme68x_selftest_check(&bme680_dev);
		bme68x_check_rslt("BME680 selftest check", rslt);
	}

	conf.filter = FILTER;
	conf.odr = ODR;
 800115e:	4815      	ldr	r0, [pc, #84]	@ (80011b4 <my_sensor_init+0x84>)
	conf.os_hum  = OS_HUM;
 8001160:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <my_sensor_init+0x88>)
	conf.os_pres = OS_PRES;
	conf.os_temp = OS_TEMP;
	rslt = bme68x_set_conf(&conf, &bme680_dev);
 8001162:	490f      	ldr	r1, [pc, #60]	@ (80011a0 <my_sensor_init+0x70>)
	conf.os_hum  = OS_HUM;
 8001164:	6003      	str	r3, [r0, #0]
	conf.odr = ODR;
 8001166:	2208      	movs	r2, #8
 8001168:	7102      	strb	r2, [r0, #4]
	rslt = bme68x_set_conf(&conf, &bme680_dev);
 800116a:	f001 fafd 	bl	8002768 <bme68x_set_conf>
	bme68x_check_rslt("bme68x_set_conf", rslt);

#if(SENSE_GAS)
	heatr_conf.enable = BME68X_ENABLE;
 800116e:	4913      	ldr	r1, [pc, #76]	@ (80011bc <my_sensor_init+0x8c>)
	heatr_conf.heatr_temp = HEATR_TEMP;   // heater T° set to 300 °C
 8001170:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <my_sensor_init+0x90>)
	heatr_conf.heatr_dur = HEATR_DUR;     // heating duration set to 50 ms
	rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &bme680_dev);
 8001172:	4a0b      	ldr	r2, [pc, #44]	@ (80011a0 <my_sensor_init+0x70>)
	heatr_conf.heatr_temp = HEATR_TEMP;   // heater T° set to 300 °C
 8001174:	f8c1 3002 	str.w	r3, [r1, #2]
	heatr_conf.enable = BME68X_ENABLE;
 8001178:	2001      	movs	r0, #1
 800117a:	7008      	strb	r0, [r1, #0]
	rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &bme680_dev);
 800117c:	f002 fb24 	bl	80037c8 <bme68x_set_heatr_conf>
	bme68x_check_rslt("bme68x_set_heatr_conf", rslt);
#endif

	rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, &bme680_dev);
	bme68x_check_rslt("bme68x_set_op_mode", rslt);
}
 8001180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, &bme680_dev);
 8001184:	4906      	ldr	r1, [pc, #24]	@ (80011a0 <my_sensor_init+0x70>)
 8001186:	2000      	movs	r0, #0
 8001188:	f001 ba88 	b.w	800269c <bme68x_set_op_mode>
		debug_print("BME680 selftest check begin...\r\n");
 800118c:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <my_sensor_init+0x94>)
 800118e:	f7ff fe41 	bl	8000e14 <debug_print>
		rslt = bme68x_selftest_check(&bme680_dev);
 8001192:	4620      	mov	r0, r4
 8001194:	f002 ffec 	bl	8004170 <bme68x_selftest_check>
}
 8001198:	e7e1      	b.n	800115e <my_sensor_init+0x2e>
 800119a:	bf00      	nop
 800119c:	200001dc 	.word	0x200001dc
 80011a0:	200001e0 	.word	0x200001e0
 80011a4:	200001d9 	.word	0x200001d9
 80011a8:	080010b9 	.word	0x080010b9
 80011ac:	08001121 	.word	0x08001121
 80011b0:	080010ed 	.word	0x080010ed
 80011b4:	200001d4 	.word	0x200001d4
 80011b8:	00040404 	.word	0x00040404
 80011bc:	200001c0 	.word	0x200001c0
 80011c0:	0032012c 	.word	0x0032012c
 80011c4:	0800d04c 	.word	0x0800d04c

080011c8 <get_BME_data>:
	rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, &bme680_dev);
	bme68x_check_rslt("bme68x_set_op_mode", rslt);
}

struct bme68x_data *get_BME_data()
{
 80011c8:	b538      	push	{r3, r4, r5, lr}
	int8_t rslt;
	uint32_t del_period;
	rslt = bme68x_set_op_mode(BME68X_FORCED_MODE, &bme680_dev);
 80011ca:	4c0e      	ldr	r4, [pc, #56]	@ (8001204 <get_BME_data+0x3c>)
//	print_int(del_period);
//	debug_print("\r\n");

	bme680_dev.delay_us(del_period, bme680_dev.intf_ptr);
	// blink not functioning
	rslt = bme68x_get_data(BME68X_FORCED_MODE, &data, &n_fields, &bme680_dev);
 80011cc:	4d0e      	ldr	r5, [pc, #56]	@ (8001208 <get_BME_data+0x40>)
	rslt = bme68x_set_op_mode(BME68X_FORCED_MODE, &bme680_dev);
 80011ce:	4621      	mov	r1, r4
 80011d0:	2001      	movs	r0, #1
 80011d2:	f001 fa63 	bl	800269c <bme68x_set_op_mode>
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme680_dev) + (heatr_conf.heatr_dur * 1000);
 80011d6:	4622      	mov	r2, r4
 80011d8:	490c      	ldr	r1, [pc, #48]	@ (800120c <get_BME_data+0x44>)
 80011da:	2001      	movs	r0, #1
 80011dc:	f001 fe06 	bl	8002dec <bme68x_get_meas_dur>
 80011e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001210 <get_BME_data+0x48>)
	bme680_dev.delay_us(del_period, bme680_dev.intf_ptr);
 80011e2:	6861      	ldr	r1, [r4, #4]
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme680_dev) + (heatr_conf.heatr_dur * 1000);
 80011e4:	889b      	ldrh	r3, [r3, #4]
 80011e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
	bme680_dev.delay_us(del_period, bme680_dev.intf_ptr);
 80011ea:	fb02 0003 	mla	r0, r2, r3, r0
 80011ee:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80011f0:	4798      	blx	r3
	rslt = bme68x_get_data(BME68X_FORCED_MODE, &data, &n_fields, &bme680_dev);
 80011f2:	4a08      	ldr	r2, [pc, #32]	@ (8001214 <get_BME_data+0x4c>)
 80011f4:	4623      	mov	r3, r4
 80011f6:	4629      	mov	r1, r5
 80011f8:	2001      	movs	r0, #1
 80011fa:	f001 fe6f 	bl	8002edc <bme68x_get_data>
#if(VERBOSE)
	print_data_bme(n_fields);
#endif

	return &data;
}
 80011fe:	4628      	mov	r0, r5
 8001200:	bd38      	pop	{r3, r4, r5, pc}
 8001202:	bf00      	nop
 8001204:	200001e0 	.word	0x200001e0
 8001208:	200001ac 	.word	0x200001ac
 800120c:	200001d4 	.word	0x200001d4
 8001210:	200001c0 	.word	0x200001c0
 8001214:	200001a8 	.word	0x200001a8

08001218 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001218:	b510      	push	{r4, lr}
 800121a:	b08c      	sub	sp, #48	@ 0x30

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800121c:	222c      	movs	r2, #44	@ 0x2c
 800121e:	2100      	movs	r1, #0
 8001220:	4668      	mov	r0, sp
 8001222:	f00b fde1 	bl	800cde8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001226:	4825      	ldr	r0, [pc, #148]	@ (80012bc <MX_RTC_Init+0xa4>)
 8001228:	4925      	ldr	r1, [pc, #148]	@ (80012c0 <MX_RTC_Init+0xa8>)
 800122a:	6001      	str	r1, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800122c:	221f      	movs	r2, #31
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800122e:	2300      	movs	r3, #0
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001230:	6082      	str	r2, [r0, #8]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001232:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001236:	e9c0 3206 	strd	r3, r2, [r0, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800123a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001244:	e9c0 2308 	strd	r2, r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001248:	f005 fe46 	bl	8006ed8 <HAL_RTC_Init>
 800124c:	bb10      	cbnz	r0, 8001294 <MX_RTC_Init+0x7c>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800124e:	481b      	ldr	r0, [pc, #108]	@ (80012bc <MX_RTC_Init+0xa4>)
 8001250:	f005 ff96 	bl	8007180 <HAL_RTCEx_SetSSRU_IT>
 8001254:	bb28      	cbnz	r0, 80012a2 <MX_RTC_Init+0x8a>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_YES;
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001256:	2200      	movs	r2, #0
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001258:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800125c:	e9cd 2305 	strd	r2, r3, [sp, #20]
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_YES;
 8001260:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
  sAlarm.Alarm = RTC_ALARM_A;
 8001264:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001268:	4814      	ldr	r0, [pc, #80]	@ (80012bc <MX_RTC_Init+0xa4>)
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_YES;
 800126a:	9407      	str	r4, [sp, #28]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800126c:	4669      	mov	r1, sp
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800126e:	9201      	str	r2, [sp, #4]
  sAlarm.Alarm = RTC_ALARM_A;
 8001270:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001272:	f005 fca1 	bl	8006bb8 <HAL_RTC_SetAlarm_IT>
 8001276:	b9f0      	cbnz	r0, 80012b6 <MX_RTC_Init+0x9e>
    Error_Handler();
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 6143, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 8001278:	2300      	movs	r3, #0
 800127a:	4810      	ldr	r0, [pc, #64]	@ (80012bc <MX_RTC_Init+0xa4>)
 800127c:	461a      	mov	r2, r3
 800127e:	f241 71ff 	movw	r1, #6143	@ 0x17ff
 8001282:	f005 fe9b 	bl	8006fbc <HAL_RTCEx_SetWakeUpTimer_IT>
 8001286:	b998      	cbnz	r0, 80012b0 <MX_RTC_Init+0x98>
    Error_Handler();
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // deactivating is important because RTC is not stopped at reset
  if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc)) {
 8001288:	480c      	ldr	r0, [pc, #48]	@ (80012bc <MX_RTC_Init+0xa4>)
 800128a:	f005 ff07 	bl	800709c <HAL_RTCEx_DeactivateWakeUpTimer>
 800128e:	b958      	cbnz	r0, 80012a8 <MX_RTC_Init+0x90>
  		Error_Handler();
  	}
  /* USER CODE END RTC_Init 2 */

}
 8001290:	b00c      	add	sp, #48	@ 0x30
 8001292:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001294:	f7ff fdc0 	bl	8000e18 <Error_Handler>
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001298:	4808      	ldr	r0, [pc, #32]	@ (80012bc <MX_RTC_Init+0xa4>)
 800129a:	f005 ff71 	bl	8007180 <HAL_RTCEx_SetSSRU_IT>
 800129e:	2800      	cmp	r0, #0
 80012a0:	d0d9      	beq.n	8001256 <MX_RTC_Init+0x3e>
    Error_Handler();
 80012a2:	f7ff fdb9 	bl	8000e18 <Error_Handler>
 80012a6:	e7d6      	b.n	8001256 <MX_RTC_Init+0x3e>
  		Error_Handler();
 80012a8:	f7ff fdb6 	bl	8000e18 <Error_Handler>
}
 80012ac:	b00c      	add	sp, #48	@ 0x30
 80012ae:	bd10      	pop	{r4, pc}
    Error_Handler();
 80012b0:	f7ff fdb2 	bl	8000e18 <Error_Handler>
 80012b4:	e7e8      	b.n	8001288 <MX_RTC_Init+0x70>
    Error_Handler();
 80012b6:	f7ff fdaf 	bl	8000e18 <Error_Handler>
 80012ba:	e7dd      	b.n	8001278 <MX_RTC_Init+0x60>
 80012bc:	20000230 	.word	0x20000230
 80012c0:	40002800 	.word	0x40002800

080012c4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80012c4:	b510      	push	{r4, lr}
 80012c6:	4604      	mov	r4, r0
 80012c8:	b090      	sub	sp, #64	@ 0x40

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012ca:	2238      	movs	r2, #56	@ 0x38
 80012cc:	2100      	movs	r1, #0
 80012ce:	a802      	add	r0, sp, #8
 80012d0:	f00b fd8a 	bl	800cde8 <memset>
  if(rtcHandle->Instance==RTC)
 80012d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001350 <HAL_RTC_MspInit+0x8c>)
 80012d6:	6822      	ldr	r2, [r4, #0]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d001      	beq.n	80012e0 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80012dc:	b010      	add	sp, #64	@ 0x40
 80012de:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012e0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80012e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e8:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012ea:	9202      	str	r2, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80012ec:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ee:	f005 fb4b 	bl	8006988 <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	bb50      	cbnz	r0, 800134a <HAL_RTC_MspInit+0x86>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80012f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 80012fe:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8001302:	f8c3 0090 	str.w	r0, [r3, #144]	@ 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001306:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8001308:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
 800130c:	659c      	str	r4, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800130e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001314:	4611      	mov	r1, r2
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	2002      	movs	r0, #2
  (void)tmpreg;
 800131a:	9b01      	ldr	r3, [sp, #4]
 800131c:	f003 fbe4 	bl	8004ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001320:	2002      	movs	r0, #2
 8001322:	f003 fc1d 	bl	8004b60 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	4611      	mov	r1, r2
 800132a:	2003      	movs	r0, #3
 800132c:	f003 fbdc 	bl	8004ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001330:	2003      	movs	r0, #3
 8001332:	f003 fc15 	bl	8004b60 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	4611      	mov	r1, r2
 800133a:	202a      	movs	r0, #42	@ 0x2a
 800133c:	f003 fbd4 	bl	8004ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001340:	202a      	movs	r0, #42	@ 0x2a
 8001342:	f003 fc0d 	bl	8004b60 <HAL_NVIC_EnableIRQ>
}
 8001346:	b010      	add	sp, #64	@ 0x40
 8001348:	bd10      	pop	{r4, pc}
      Error_Handler();
 800134a:	f7ff fd65 	bl	8000e18 <Error_Handler>
 800134e:	e7d1      	b.n	80012f4 <HAL_RTC_MspInit+0x30>
 8001350:	40002800 	.word	0x40002800

08001354 <myRTC_start>:
  }
}

/* USER CODE BEGIN 1 */
void myRTC_start(int timems)
{
 8001354:	b508      	push	{r3, lr}
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, (uint32_t)(timems*2048/1000), RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK) {
 8001356:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <myRTC_start+0x34>)
 8001358:	02c0      	lsls	r0, r0, #11
 800135a:	fb83 3c00 	smull	r3, ip, r3, r0
 800135e:	17c1      	asrs	r1, r0, #31
 8001360:	2300      	movs	r3, #0
 8001362:	480a      	ldr	r0, [pc, #40]	@ (800138c <myRTC_start+0x38>)
 8001364:	461a      	mov	r2, r3
 8001366:	ebc1 11ac 	rsb	r1, r1, ip, asr #6
 800136a:	f005 fe27 	bl	8006fbc <HAL_RTCEx_SetWakeUpTimer_IT>
 800136e:	b920      	cbnz	r0, 800137a <myRTC_start+0x26>
	    Error_Handler();
	  }
	debug_print("myRTC start\r\n");
}
 8001370:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	debug_print("myRTC start\r\n");
 8001374:	4806      	ldr	r0, [pc, #24]	@ (8001390 <myRTC_start+0x3c>)
 8001376:	f7ff bd4d 	b.w	8000e14 <debug_print>
	    Error_Handler();
 800137a:	f7ff fd4d 	bl	8000e18 <Error_Handler>
}
 800137e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	debug_print("myRTC start\r\n");
 8001382:	4803      	ldr	r0, [pc, #12]	@ (8001390 <myRTC_start+0x3c>)
 8001384:	f7ff bd46 	b.w	8000e14 <debug_print>
 8001388:	10624dd3 	.word	0x10624dd3
 800138c:	20000230 	.word	0x20000230
 8001390:	0800d070 	.word	0x0800d070

08001394 <myRTC_stop>:

void myRTC_stop()
{
 8001394:	b508      	push	{r3, lr}
	if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc)) {
 8001396:	4808      	ldr	r0, [pc, #32]	@ (80013b8 <myRTC_stop+0x24>)
 8001398:	f005 fe80 	bl	800709c <HAL_RTCEx_DeactivateWakeUpTimer>
 800139c:	b920      	cbnz	r0, 80013a8 <myRTC_stop+0x14>
		Error_Handler();
	}
	debug_print("myRTC stop\r\n");
}
 800139e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	debug_print("myRTC stop\r\n");
 80013a2:	4806      	ldr	r0, [pc, #24]	@ (80013bc <myRTC_stop+0x28>)
 80013a4:	f7ff bd36 	b.w	8000e14 <debug_print>
		Error_Handler();
 80013a8:	f7ff fd36 	bl	8000e18 <Error_Handler>
}
 80013ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	debug_print("myRTC stop\r\n");
 80013b0:	4802      	ldr	r0, [pc, #8]	@ (80013bc <myRTC_stop+0x28>)
 80013b2:	f7ff bd2f 	b.w	8000e14 <debug_print>
 80013b6:	bf00      	nop
 80013b8:	20000230 	.word	0x20000230
 80013bc:	0800d080 	.word	0x0800d080

080013c0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80013c0:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80013c2:	4810      	ldr	r0, [pc, #64]	@ (8001404 <MX_SPI1_Init+0x44>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013c4:	4c10      	ldr	r4, [pc, #64]	@ (8001408 <MX_SPI1_Init+0x48>)
 80013c6:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80013ca:	e9c0 4100 	strd	r4, r1, [r0]
 80013ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013d2:	2300      	movs	r3, #0
 80013d4:	2208      	movs	r2, #8
 80013d6:	f44f 64e0 	mov.w	r4, #1792	@ 0x700
 80013da:	6181      	str	r1, [r0, #24]
 80013dc:	2107      	movs	r1, #7
 80013de:	e9c0 3402 	strd	r3, r4, [r0, #8]
 80013e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80013e6:	e9c0 2307 	strd	r2, r3, [r0, #28]
 80013ea:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
 80013ee:	e9c0 130b 	strd	r1, r3, [r0, #44]	@ 0x2c
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013f2:	6342      	str	r2, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013f4:	f005 ff14 	bl	8007220 <HAL_SPI_Init>
 80013f8:	b900      	cbnz	r0, 80013fc <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013fa:	bd10      	pop	{r4, pc}
 80013fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001400:	f7ff bd0a 	b.w	8000e18 <Error_Handler>
 8001404:	20000268 	.word	0x20000268
 8001408:	40013000 	.word	0x40013000

0800140c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800140c:	b5d0      	push	{r4, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 800140e:	4a23      	ldr	r2, [pc, #140]	@ (800149c <HAL_SPI_MspInit+0x90>)
 8001410:	6801      	ldr	r1, [r0, #0]
{
 8001412:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 8001416:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800141c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001420:	9308      	str	r3, [sp, #32]
  if(spiHandle->Instance==SPI1)
 8001422:	d001      	beq.n	8001428 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001424:	b00a      	add	sp, #40	@ 0x28
 8001426:	bdd0      	pop	{r4, r6, r7, pc}
  SET_BIT(RCC->APB2ENR, Periphs);
 8001428:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800142c:	2405      	movs	r4, #5
 800142e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	481b      	ldr	r0, [pc, #108]	@ (80014a0 <HAL_SPI_MspInit+0x94>)
 8001432:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001436:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001438:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800143a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800143e:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8001440:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001442:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001444:	f042 0202 	orr.w	r2, r2, #2
 8001448:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800144a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800144c:	f002 0202 	and.w	r2, r2, #2
 8001450:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001452:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001454:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001456:	f042 0201 	orr.w	r2, r2, #1
 800145a:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800145c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800145e:	9408      	str	r4, [sp, #32]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001466:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001468:	2230      	movs	r2, #48	@ 0x30
 800146a:	2601      	movs	r6, #1
 800146c:	2703      	movs	r7, #3
 800146e:	2302      	movs	r3, #2
 8001470:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001474:	e9cd 6706 	strd	r6, r7, [sp, #24]
  (void)tmpreg;
 8001478:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147a:	f003 fdcf 	bl	800501c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800147e:	2202      	movs	r2, #2
 8001480:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	a904      	add	r1, sp, #16
 8001484:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001488:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800148c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001490:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001492:	f003 fdc3 	bl	800501c <HAL_GPIO_Init>
}
 8001496:	b00a      	add	sp, #40	@ 0x28
 8001498:	bdd0      	pop	{r4, r6, r7, pc}
 800149a:	bf00      	nop
 800149c:	40013000 	.word	0x40013000
 80014a0:	48000400 	.word	0x48000400

080014a4 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop

080014a8 <PWR_EnterStopMode>:

  /* USER CODE END ExitOffMode_1 */
}

void PWR_EnterStopMode(void)
{
 80014a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80014aa:	f003 f8eb 	bl	8004684 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80014ae:	4b04      	ldr	r3, [pc, #16]	@ (80014c0 <PWR_EnterStopMode+0x18>)
 80014b0:	2001      	movs	r0, #1
 80014b2:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80014b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80014ba:	f004 bbdf 	b.w	8005c7c <HAL_PWREx_EnterSTOP2Mode>
 80014be:	bf00      	nop
 80014c0:	58000400 	.word	0x58000400

080014c4 <PWR_ExitSleepMode>:
{
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80014c4:	f003 b8e6 	b.w	8004694 <HAL_ResumeTick>

080014c8 <PWR_ExitStopMode>:
{
 80014c8:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 80014ca:	f003 f8e3 	bl	8004694 <HAL_ResumeTick>
}
 80014ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  vcom_Resume();
 80014d2:	f000 bbe3 	b.w	8001c9c <vcom_Resume>
 80014d6:	bf00      	nop

080014d8 <PWR_EnterSleepMode>:
{
 80014d8:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 80014da:	f003 f8d3 	bl	8004684 <HAL_SuspendTick>
}
 80014de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80014e2:	2101      	movs	r1, #1
 80014e4:	2000      	movs	r0, #0
 80014e6:	f004 bb69 	b.w	8005bbc <HAL_PWR_EnterSLEEPMode>
 80014ea:	bf00      	nop

080014ec <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop

080014f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b508      	push	{r3, lr}

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2005      	movs	r0, #5
 80014f6:	4611      	mov	r1, r2
 80014f8:	f003 faf6 	bl	8004ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001500:	2005      	movs	r0, #5
 8001502:	f003 bb2d 	b.w	8004b60 <HAL_NVIC_EnableIRQ>
 8001506:	bf00      	nop

08001508 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <NMI_Handler>
 800150a:	bf00      	nop

0800150c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <HardFault_Handler>
 800150e:	bf00      	nop

08001510 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <MemManage_Handler>
 8001512:	bf00      	nop

08001514 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <BusFault_Handler>
 8001516:	bf00      	nop

08001518 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <UsageFault_Handler>
 800151a:	bf00      	nop

0800151c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop

08001520 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop

08001524 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop

08001528 <SysTick_Handler>:
}

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop

0800152c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800152c:	4801      	ldr	r0, [pc, #4]	@ (8001534 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x8>)
 800152e:	f005 be51 	b.w	80071d4 <HAL_RTCEx_SSRUIRQHandler>
 8001532:	bf00      	nop
 8001534:	20000230 	.word	0x20000230

08001538 <RTC_WKUP_IRQHandler>:
void RTC_WKUP_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001538:	4801      	ldr	r0, [pc, #4]	@ (8001540 <RTC_WKUP_IRQHandler+0x8>)
 800153a:	f005 bdeb 	b.w	8007114 <HAL_RTCEx_WakeUpTimerIRQHandler>
 800153e:	bf00      	nop
 8001540:	20000230 	.word	0x20000230

08001544 <RCC_IRQHandler>:
}

/**
  * @brief This function handles RCC Interrupt.
  */
void RCC_IRQHandler(void)
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop

08001548 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001548:	4801      	ldr	r0, [pc, #4]	@ (8001550 <DMA1_Channel1_IRQHandler+0x8>)
 800154a:	f003 bd0f 	b.w	8004f6c <HAL_DMA_IRQHandler>
 800154e:	bf00      	nop
 8001550:	20000044 	.word	0x20000044

08001554 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001554:	4801      	ldr	r0, [pc, #4]	@ (800155c <DMA1_Channel2_IRQHandler+0x8>)
 8001556:	f003 bd09 	b.w	8004f6c <HAL_DMA_IRQHandler>
 800155a:	bf00      	nop
 800155c:	20000338 	.word	0x20000338

08001560 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001560:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button1_Pin);
 8001562:	2040      	movs	r0, #64	@ 0x40
 8001564:	f003 fec2 	bl	80052ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button2_Pin);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001568:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(Button2_Pin);
 800156c:	2080      	movs	r0, #128	@ 0x80
 800156e:	f003 bebd 	b.w	80052ec <HAL_GPIO_EXTI_IRQHandler>
 8001572:	bf00      	nop

08001574 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001574:	4801      	ldr	r0, [pc, #4]	@ (800157c <TIM1_UP_IRQHandler+0x8>)
 8001576:	f006 bcbf 	b.w	8007ef8 <HAL_TIM_IRQHandler>
 800157a:	bf00      	nop
 800157c:	200002e0 	.word	0x200002e0

08001580 <TIM1_TRG_COM_IRQHandler>:
}

/**
  * @brief This function handles TIM1 Trigger and Communication Interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
 8001580:	4801      	ldr	r0, [pc, #4]	@ (8001588 <TIM1_TRG_COM_IRQHandler+0x8>)
 8001582:	f006 bcb9 	b.w	8007ef8 <HAL_TIM_IRQHandler>
 8001586:	bf00      	nop
 8001588:	200002e0 	.word	0x200002e0

0800158c <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800158c:	4801      	ldr	r0, [pc, #4]	@ (8001594 <LPUART1_IRQHandler+0x8>)
 800158e:	f006 bf43 	b.w	8008418 <HAL_UART_IRQHandler>
 8001592:	bf00      	nop
 8001594:	20000398 	.word	0x20000398

08001598 <RTC_Alarm_IRQHandler>:
void RTC_Alarm_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001598:	4801      	ldr	r0, [pc, #4]	@ (80015a0 <RTC_Alarm_IRQHandler+0x8>)
 800159a:	f005 bc39 	b.w	8006e10 <HAL_RTC_AlarmIRQHandler>
 800159e:	bf00      	nop
 80015a0:	20000230 	.word	0x20000230

080015a4 <SUBGHZ_Radio_IRQHandler>:
void SUBGHZ_Radio_IRQHandler(void)
{
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80015a4:	4801      	ldr	r0, [pc, #4]	@ (80015ac <SUBGHZ_Radio_IRQHandler+0x8>)
 80015a6:	f006 b8e7 	b.w	8007778 <HAL_SUBGHZ_IRQHandler>
 80015aa:	bf00      	nop
 80015ac:	200002cc 	.word	0x200002cc

080015b0 <MX_SUBGHZ_Init>:
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80015b0:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <MX_SUBGHZ_Init+0x18>)
{
 80015b2:	b508      	push	{r3, lr}
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80015b4:	2308      	movs	r3, #8
 80015b6:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80015b8:	f005 fed2 	bl	8007360 <HAL_SUBGHZ_Init>
 80015bc:	b900      	cbnz	r0, 80015c0 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80015be:	bd08      	pop	{r3, pc}
 80015c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80015c4:	f7ff bc28 	b.w	8000e18 <Error_Handler>
 80015c8:	200002cc 	.word	0x200002cc

080015cc <HAL_SUBGHZ_MspInit>:
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80015cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80015d0:	b500      	push	{lr}
 80015d2:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 80015d4:	f041 0101 	orr.w	r1, r1, #1
 80015d8:	6659      	str	r1, [r3, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80015da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80015dc:	b083      	sub	sp, #12
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	9301      	str	r3, [sp, #4]
 80015e6:	2032      	movs	r0, #50	@ 0x32
 80015e8:	4611      	mov	r1, r2
  (void)tmpreg;
 80015ea:	9b01      	ldr	r3, [sp, #4]
 80015ec:	f003 fa7c 	bl	8004ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80015f0:	2032      	movs	r0, #50	@ 0x32
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80015f2:	b003      	add	sp, #12
 80015f4:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80015f8:	f003 bab2 	b.w	8004b60 <HAL_NVIC_EnableIRQ>

080015fc <tiny_snprintf_like.constprop.0>:
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 80015fc:	b40c      	push	{r2, r3}
 80015fe:	b500      	push	{lr}
 8001600:	b083      	sub	sp, #12
{
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001602:	ab05      	add	r3, sp, #20
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001604:	4a04      	ldr	r2, [pc, #16]	@ (8001618 <tiny_snprintf_like.constprop.0+0x1c>)
  va_start(vaArgs, strFormat);
 8001606:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001608:	2110      	movs	r1, #16
 800160a:	f00a fd51 	bl	800c0b0 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800160e:	b003      	add	sp, #12
 8001610:	f85d eb04 	ldr.w	lr, [sp], #4
 8001614:	b002      	add	sp, #8
 8001616:	4770      	bx	lr
 8001618:	0800d0a8 	.word	0x0800d0a8

0800161c <TimestampNow>:
{
 800161c:	b530      	push	{r4, r5, lr}
 800161e:	b085      	sub	sp, #20
 8001620:	4604      	mov	r4, r0
  SysTime_t curtime = SysTimeGet();
 8001622:	a802      	add	r0, sp, #8
{
 8001624:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001626:	f00a fd1d 	bl	800c064 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800162a:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800162e:	9b02      	ldr	r3, [sp, #8]
 8001630:	4a05      	ldr	r2, [pc, #20]	@ (8001648 <TimestampNow+0x2c>)
 8001632:	9100      	str	r1, [sp, #0]
 8001634:	4620      	mov	r0, r4
 8001636:	2110      	movs	r1, #16
 8001638:	f7ff ffe0 	bl	80015fc <tiny_snprintf_like.constprop.0>
  *size = strlen((char *)buff);
 800163c:	4620      	mov	r0, r4
 800163e:	f7fe fd9b 	bl	8000178 <strlen>
 8001642:	8028      	strh	r0, [r5, #0]
}
 8001644:	b005      	add	sp, #20
 8001646:	bd30      	pop	{r4, r5, pc}
 8001648:	0800d0a8 	.word	0x0800d0a8

0800164c <SystemApp_Init>:
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800164c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
{
 8001650:	b510      	push	{r4, lr}
 8001652:	6893      	ldr	r3, [r2, #8]
 8001654:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001658:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 800165a:	f00b f899 	bl	800c790 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800165e:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <SystemApp_Init+0x44>)
 8001660:	2401      	movs	r4, #1
 8001662:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001664:	f000 f832 	bl	80016cc <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001668:	f00b f9ca 	bl	800ca00 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800166c:	4809      	ldr	r0, [pc, #36]	@ (8001694 <SystemApp_Init+0x48>)
 800166e:	f00b f9e1 	bl	800ca34 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001672:	2002      	movs	r0, #2
 8001674:	f00b f9e4 	bl	800ca40 <UTIL_ADV_TRACE_SetVerboseLevel>
  UTIL_LPM_Init();
 8001678:	f00a fc40 	bl	800befc <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800167c:	4621      	mov	r1, r4
 800167e:	4620      	mov	r0, r4
 8001680:	f00a fc5e 	bl	800bf40 <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001684:	4621      	mov	r1, r4
 8001686:	4620      	mov	r0, r4
}
 8001688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800168c:	f00a bc40 	b.w	800bf10 <UTIL_LPM_SetStopMode>
 8001690:	200002d8 	.word	0x200002d8
 8001694:	0800161d 	.word	0x0800161d

08001698 <UTIL_SEQ_Idle>:
  UTIL_LPM_EnterLowPower();
 8001698:	f00a bc6a 	b.w	800bf70 <UTIL_LPM_EnterLowPower>

0800169c <UTIL_ADV_TRACE_PreSendHook>:
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800169c:	2101      	movs	r1, #1
 800169e:	2002      	movs	r0, #2
 80016a0:	f00a bc36 	b.w	800bf10 <UTIL_LPM_SetStopMode>

080016a4 <UTIL_ADV_TRACE_PostSendHook>:
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80016a4:	2100      	movs	r1, #0
 80016a6:	2002      	movs	r0, #2
 80016a8:	f00a bc32 	b.w	800bf10 <UTIL_LPM_SetStopMode>

080016ac <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80016ac:	2000      	movs	r0, #0
 80016ae:	4770      	bx	lr

080016b0 <HAL_GetTick>:
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80016b0:	4b02      	ldr	r3, [pc, #8]	@ (80016bc <HAL_GetTick+0xc>)
 80016b2:	7818      	ldrb	r0, [r3, #0]
 80016b4:	b900      	cbnz	r0, 80016b8 <HAL_GetTick+0x8>
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 80016b6:	4770      	bx	lr
    ret = TIMER_IF_GetTimerValue();
 80016b8:	f000 b93e 	b.w	8001938 <TIMER_IF_GetTimerValue>
 80016bc:	200002d8 	.word	0x200002d8

080016c0 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80016c0:	b082      	sub	sp, #8
 80016c2:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80016c4:	9801      	ldr	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80016c6:	b002      	add	sp, #8
  TIMER_IF_DelayMs(Delay);
 80016c8:	f000 b988 	b.w	80019dc <TIMER_IF_DelayMs>

080016cc <DBG_Init>:
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 80016cc:	4a07      	ldr	r2, [pc, #28]	@ (80016ec <DBG_Init+0x20>)

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80016ce:	b508      	push	{r3, lr}
 80016d0:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 80016dc:	f002 ffe2 	bl	80046a4 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80016e0:	f002 ffe8 	bl	80046b4 <HAL_DBGMCU_EnableDBGStopMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80016e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DBGMCU_EnableDBGStandbyMode();
 80016e8:	f002 bfec 	b.w	80046c4 <HAL_DBGMCU_EnableDBGStandbyMode>
 80016ec:	58000800 	.word	0x58000800

080016f0 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop

080016f4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016f4:	b530      	push	{r4, r5, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016f6:	481b      	ldr	r0, [pc, #108]	@ (8001764 <MX_TIM1_Init+0x70>)
 80016f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001768 <MX_TIM1_Init+0x74>)
 80016fa:	6002      	str	r2, [r0, #0]
{
 80016fc:	b089      	sub	sp, #36	@ 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fe:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 159;
 8001700:	229f      	movs	r2, #159	@ 0x9f
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001702:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001706:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170a:	e9cd 3300 	strd	r3, r3, [sp]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170e:	e9c0 3301 	strd	r3, r3, [r0, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001712:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim1.Init.RepetitionCounter = 0;
 8001716:	e9c0 3305 	strd	r3, r3, [r0, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171a:	9302      	str	r3, [sp, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800171c:	f006 fabe 	bl	8007c9c <HAL_TIM_Base_Init>
 8001720:	b9a8      	cbnz	r0, 800174e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001726:	480f      	ldr	r0, [pc, #60]	@ (8001764 <MX_TIM1_Init+0x70>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001728:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800172a:	a904      	add	r1, sp, #16
 800172c:	f006 fb28 	bl	8007d80 <HAL_TIM_ConfigClockSource>
 8001730:	b9a0      	cbnz	r0, 800175c <MX_TIM1_Init+0x68>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001732:	2420      	movs	r4, #32
 8001734:	f44f 1500 	mov.w	r5, #2097152	@ 0x200000
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001738:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800173a:	480a      	ldr	r0, [pc, #40]	@ (8001764 <MX_TIM1_Init+0x70>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173c:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800173e:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001740:	e9cd 4500 	strd	r4, r5, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001744:	f006 fc90 	bl	8008068 <HAL_TIMEx_MasterConfigSynchronization>
 8001748:	b920      	cbnz	r0, 8001754 <MX_TIM1_Init+0x60>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800174a:	b009      	add	sp, #36	@ 0x24
 800174c:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800174e:	f7ff fb63 	bl	8000e18 <Error_Handler>
 8001752:	e7e6      	b.n	8001722 <MX_TIM1_Init+0x2e>
    Error_Handler();
 8001754:	f7ff fb60 	bl	8000e18 <Error_Handler>
}
 8001758:	b009      	add	sp, #36	@ 0x24
 800175a:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800175c:	f7ff fb5c 	bl	8000e18 <Error_Handler>
 8001760:	e7e7      	b.n	8001732 <MX_TIM1_Init+0x3e>
 8001762:	bf00      	nop
 8001764:	200002e0 	.word	0x200002e0
 8001768:	40012c00 	.word	0x40012c00

0800176c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 800176c:	4b12      	ldr	r3, [pc, #72]	@ (80017b8 <HAL_TIM_Base_MspInit+0x4c>)
 800176e:	6802      	ldr	r2, [r0, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d000      	beq.n	8001776 <HAL_TIM_Base_MspInit+0xa>
 8001774:	4770      	bx	lr
  SET_BIT(RCC->APB2ENR, Periphs);
 8001776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
{
 800177a:	b500      	push	{lr}
 800177c:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 800177e:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
 8001782:	6618      	str	r0, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001786:	b083      	sub	sp, #12
  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800178e:	4611      	mov	r1, r2
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	2018      	movs	r0, #24
  (void)tmpreg;
 8001794:	9b01      	ldr	r3, [sp, #4]
 8001796:	f003 f9a7 	bl	8004ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800179a:	2018      	movs	r0, #24
 800179c:	f003 f9e0 	bl	8004b60 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2019      	movs	r0, #25
 80017a4:	4611      	mov	r1, r2
 80017a6:	f003 f99f 	bl	8004ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80017aa:	2019      	movs	r0, #25
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80017ac:	b003      	add	sp, #12
 80017ae:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80017b2:	f003 b9d5 	b.w	8004b60 <HAL_NVIC_EnableIRQ>
 80017b6:	bf00      	nop
 80017b8:	40012c00 	.word	0x40012c00

080017bc <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80017bc:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <TIMER_IF_SetTimerContext+0x14>)
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80017c2:	4282      	cmp	r2, r0
 80017c4:	d1fb      	bne.n	80017be <TIMER_IF_SetTimerContext+0x2>
  RtcTimerContext = GetTimerTicks();
 80017c6:	4b03      	ldr	r3, [pc, #12]	@ (80017d4 <TIMER_IF_SetTimerContext+0x18>)
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 80017c8:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 80017ca:	6018      	str	r0, [r3, #0]
}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40002800 	.word	0x40002800
 80017d4:	2000032c 	.word	0x2000032c

080017d8 <TIMER_IF_GetTimerContext>:
  return RtcTimerContext;
 80017d8:	4b01      	ldr	r3, [pc, #4]	@ (80017e0 <TIMER_IF_GetTimerContext+0x8>)
}
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	2000032c 	.word	0x2000032c

080017e4 <TIMER_IF_GetTimerElapsedTime>:
 80017e4:	4b04      	ldr	r3, [pc, #16]	@ (80017f8 <TIMER_IF_GetTimerElapsedTime+0x14>)
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80017ea:	4282      	cmp	r2, r0
 80017ec:	d1fb      	bne.n	80017e6 <TIMER_IF_GetTimerElapsedTime+0x2>
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80017ee:	4b03      	ldr	r3, [pc, #12]	@ (80017fc <TIMER_IF_GetTimerElapsedTime+0x18>)
 80017f0:	681b      	ldr	r3, [r3, #0]
  return UINT32_MAX - ssr;
 80017f2:	43c0      	mvns	r0, r0
}
 80017f4:	1ac0      	subs	r0, r0, r3
 80017f6:	4770      	bx	lr
 80017f8:	40002800 	.word	0x40002800
 80017fc:	2000032c 	.word	0x2000032c

08001800 <TIMER_IF_GetMinimumTimeout>:
}
 8001800:	2003      	movs	r0, #3
 8001802:	4770      	bx	lr

08001804 <TIMER_IF_Convert_ms2Tick>:
{
 8001804:	b508      	push	{r3, lr}
 8001806:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001808:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800180c:	2300      	movs	r3, #0
 800180e:	0280      	lsls	r0, r0, #10
 8001810:	0d89      	lsrs	r1, r1, #22
 8001812:	f7fe fef1 	bl	80005f8 <__aeabi_uldivmod>
}
 8001816:	bd08      	pop	{r3, pc}

08001818 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001818:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800181c:	fba0 0303 	umull	r0, r3, r0, r3
 8001820:	0a80      	lsrs	r0, r0, #10
}
 8001822:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 8001826:	4770      	bx	lr

08001828 <TIMER_IF_StopTimer>:
{
 8001828:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800182a:	4b07      	ldr	r3, [pc, #28]	@ (8001848 <TIMER_IF_StopTimer+0x20>)
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800182c:	4c07      	ldr	r4, [pc, #28]	@ (800184c <TIMER_IF_StopTimer+0x24>)
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800182e:	2201      	movs	r2, #1
 8001830:	65da      	str	r2, [r3, #92]	@ 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001832:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001836:	4620      	mov	r0, r4
 8001838:	f005 faac 	bl	8006d94 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800183c:	f04f 33ff 	mov.w	r3, #4294967295
 8001840:	6323      	str	r3, [r4, #48]	@ 0x30
}
 8001842:	2000      	movs	r0, #0
 8001844:	bd10      	pop	{r4, pc}
 8001846:	bf00      	nop
 8001848:	40002800 	.word	0x40002800
 800184c:	20000230 	.word	0x20000230

08001850 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001850:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001852:	2100      	movs	r1, #0
 8001854:	4801      	ldr	r0, [pc, #4]	@ (800185c <TIMER_IF_BkUp_Write_Seconds+0xc>)
 8001856:	f005 bcd3 	b.w	8007200 <HAL_RTCEx_BKUPWrite>
 800185a:	bf00      	nop
 800185c:	20000230 	.word	0x20000230

08001860 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001860:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001862:	2101      	movs	r1, #1
 8001864:	4801      	ldr	r0, [pc, #4]	@ (800186c <TIMER_IF_BkUp_Write_SubSeconds+0xc>)
 8001866:	f005 bccb 	b.w	8007200 <HAL_RTCEx_BKUPWrite>
 800186a:	bf00      	nop
 800186c:	20000230 	.word	0x20000230

08001870 <TIMER_IF_StartTimer>:
{
 8001870:	b570      	push	{r4, r5, r6, lr}
 8001872:	b08c      	sub	sp, #48	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8001874:	222c      	movs	r2, #44	@ 0x2c
{
 8001876:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8001878:	2100      	movs	r1, #0
 800187a:	4668      	mov	r0, sp
 800187c:	f00b fab4 	bl	800cde8 <memset>
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001880:	4d13      	ldr	r5, [pc, #76]	@ (80018d0 <TIMER_IF_StartTimer+0x60>)
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001882:	4b14      	ldr	r3, [pc, #80]	@ (80018d4 <TIMER_IF_StartTimer+0x64>)
 8001884:	2601      	movs	r6, #1
 8001886:	65de      	str	r6, [r3, #92]	@ 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001888:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800188c:	4628      	mov	r0, r5
 800188e:	f005 fa81 	bl	8006d94 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
 8001896:	632b      	str	r3, [r5, #48]	@ 0x30
  timeout += RtcTimerContext;
 8001898:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <TIMER_IF_StartTimer+0x68>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	441c      	add	r4, r3
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800189e:	43e4      	mvns	r4, r4
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80018a0:	2300      	movs	r3, #0
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80018a2:	9401      	str	r4, [sp, #4]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80018a4:	f04f 5400 	mov.w	r4, #536870912	@ 0x20000000
 80018a8:	e9cd 3405 	strd	r3, r4, [sp, #20]
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80018ac:	9307      	str	r3, [sp, #28]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80018ae:	4632      	mov	r2, r6
  sAlarm.Alarm = RTC_ALARM_A;
 80018b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80018b4:	4669      	mov	r1, sp
 80018b6:	4628      	mov	r0, r5
  sAlarm.Alarm = RTC_ALARM_A;
 80018b8:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80018ba:	f005 f97d 	bl	8006bb8 <HAL_RTC_SetAlarm_IT>
 80018be:	b910      	cbnz	r0, 80018c6 <TIMER_IF_StartTimer+0x56>
}
 80018c0:	2000      	movs	r0, #0
 80018c2:	b00c      	add	sp, #48	@ 0x30
 80018c4:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 80018c6:	f7ff faa7 	bl	8000e18 <Error_Handler>
}
 80018ca:	2000      	movs	r0, #0
 80018cc:	b00c      	add	sp, #48	@ 0x30
 80018ce:	bd70      	pop	{r4, r5, r6, pc}
 80018d0:	20000230 	.word	0x20000230
 80018d4:	40002800 	.word	0x40002800
 80018d8:	2000032c 	.word	0x2000032c

080018dc <TIMER_IF_GetTime>:
{
 80018dc:	b538      	push	{r3, r4, r5, lr}
 80018de:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <TIMER_IF_GetTime+0x3c>)
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80018e4:	42a2      	cmp	r2, r4
{
 80018e6:	4605      	mov	r5, r0
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80018e8:	d003      	beq.n	80018f2 <TIMER_IF_GetTime+0x16>
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	689c      	ldr	r4, [r3, #8]
 80018ee:	42a2      	cmp	r2, r4
 80018f0:	d1fb      	bne.n	80018ea <TIMER_IF_GetTime+0xe>
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80018f2:	2102      	movs	r1, #2
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80018f4:	43e4      	mvns	r4, r4
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80018f6:	4809      	ldr	r0, [pc, #36]	@ (800191c <TIMER_IF_GetTime+0x40>)
 80018f8:	f005 fc8a 	bl	8007210 <HAL_RTCEx_BKUPRead>
  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80018fc:	f3c4 0209 	ubfx	r2, r4, #0, #10
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001900:	0153      	lsls	r3, r2, #5
 8001902:	1a9b      	subs	r3, r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	189b      	adds	r3, r3, r2
 8001908:	f3c3 13d5 	ubfx	r3, r3, #7, #22
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800190c:	0aa4      	lsrs	r4, r4, #10
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 800190e:	802b      	strh	r3, [r5, #0]
}
 8001910:	ea44 5080 	orr.w	r0, r4, r0, lsl #22
 8001914:	bd38      	pop	{r3, r4, r5, pc}
 8001916:	bf00      	nop
 8001918:	40002800 	.word	0x40002800
 800191c:	20000230 	.word	0x20000230

08001920 <TIMER_IF_BkUp_Read_Seconds>:
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001920:	4801      	ldr	r0, [pc, #4]	@ (8001928 <TIMER_IF_BkUp_Read_Seconds+0x8>)
 8001922:	2100      	movs	r1, #0
 8001924:	f005 bc74 	b.w	8007210 <HAL_RTCEx_BKUPRead>
 8001928:	20000230 	.word	0x20000230

0800192c <TIMER_IF_BkUp_Read_SubSeconds>:
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800192c:	4801      	ldr	r0, [pc, #4]	@ (8001934 <TIMER_IF_BkUp_Read_SubSeconds+0x8>)
 800192e:	2101      	movs	r1, #1
 8001930:	f005 bc6e 	b.w	8007210 <HAL_RTCEx_BKUPRead>
 8001934:	20000230 	.word	0x20000230

08001938 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001938:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <TIMER_IF_GetTimerValue+0x1c>)
 800193a:	7818      	ldrb	r0, [r3, #0]
 800193c:	b148      	cbz	r0, 8001952 <TIMER_IF_GetTimerValue+0x1a>
 800193e:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <TIMER_IF_GetTimerValue+0x20>)
 8001940:	6898      	ldr	r0, [r3, #8]
 8001942:	689a      	ldr	r2, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001944:	4282      	cmp	r2, r0
 8001946:	d003      	beq.n	8001950 <TIMER_IF_GetTimerValue+0x18>
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	6898      	ldr	r0, [r3, #8]
 800194c:	4282      	cmp	r2, r0
 800194e:	d1fb      	bne.n	8001948 <TIMER_IF_GetTimerValue+0x10>
  return UINT32_MAX - ssr;
 8001950:	43c0      	mvns	r0, r0
}
 8001952:	4770      	bx	lr
 8001954:	20000330 	.word	0x20000330
 8001958:	40002800 	.word	0x40002800

0800195c <TIMER_IF_Init>:
{
 800195c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RTC_Initialized == false)
 8001960:	4e1a      	ldr	r6, [pc, #104]	@ (80019cc <TIMER_IF_Init+0x70>)
 8001962:	7837      	ldrb	r7, [r6, #0]
 8001964:	b117      	cbz	r7, 800196c <TIMER_IF_Init+0x10>
}
 8001966:	2000      	movs	r0, #0
 8001968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800196c:	4d18      	ldr	r5, [pc, #96]	@ (80019d0 <TIMER_IF_Init+0x74>)
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800196e:	4c19      	ldr	r4, [pc, #100]	@ (80019d4 <TIMER_IF_Init+0x78>)
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001970:	f04f 38ff 	mov.w	r8, #4294967295
 8001974:	f8c5 8030 	str.w	r8, [r5, #48]	@ 0x30
    MX_RTC_Init();
 8001978:	f7ff fc4e 	bl	8001218 <MX_RTC_Init>
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800197c:	2301      	movs	r3, #1
 800197e:	65e3      	str	r3, [r4, #92]	@ 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001980:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001984:	4628      	mov	r0, r5
 8001986:	f005 fa05 	bl	8006d94 <HAL_RTC_DeactivateAlarm>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800198a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800198e:	4628      	mov	r0, r5
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001990:	f8c5 8030 	str.w	r8, [r5, #48]	@ 0x30
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001994:	f005 f9fe 	bl	8006d94 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001998:	4628      	mov	r0, r5
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800199a:	f8c5 8030 	str.w	r8, [r5, #48]	@ 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800199e:	f005 fbcd 	bl	800713c <HAL_RTCEx_EnableBypassShadow>
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80019a2:	463a      	mov	r2, r7
 80019a4:	2102      	movs	r1, #2
 80019a6:	4628      	mov	r0, r5
 80019a8:	f005 fc2a 	bl	8007200 <HAL_RTCEx_BKUPWrite>
 80019ac:	68a3      	ldr	r3, [r4, #8]
 80019ae:	68a2      	ldr	r2, [r4, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d003      	beq.n	80019bc <TIMER_IF_Init+0x60>
 80019b4:	68a2      	ldr	r2, [r4, #8]
 80019b6:	68a3      	ldr	r3, [r4, #8]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d1fb      	bne.n	80019b4 <TIMER_IF_Init+0x58>
  RtcTimerContext = GetTimerTicks();
 80019bc:	4906      	ldr	r1, [pc, #24]	@ (80019d8 <TIMER_IF_Init+0x7c>)
  return UINT32_MAX - ssr;
 80019be:	43db      	mvns	r3, r3
    RTC_Initialized = true;
 80019c0:	2201      	movs	r2, #1
  RtcTimerContext = GetTimerTicks();
 80019c2:	600b      	str	r3, [r1, #0]
    RTC_Initialized = true;
 80019c4:	7032      	strb	r2, [r6, #0]
}
 80019c6:	2000      	movs	r0, #0
 80019c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019cc:	20000330 	.word	0x20000330
 80019d0:	20000230 	.word	0x20000230
 80019d4:	40002800 	.word	0x40002800
 80019d8:	2000032c 	.word	0x2000032c

080019dc <TIMER_IF_DelayMs>:
{
 80019dc:	4601      	mov	r1, r0
 80019de:	b508      	push	{r3, lr}
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80019e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019e4:	2300      	movs	r3, #0
 80019e6:	0280      	lsls	r0, r0, #10
 80019e8:	0d89      	lsrs	r1, r1, #22
 80019ea:	f7fe fe05 	bl	80005f8 <__aeabi_uldivmod>
 80019ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001a18 <TIMER_IF_DelayMs+0x3c>)
 80019f0:	6891      	ldr	r1, [r2, #8]
 80019f2:	6893      	ldr	r3, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80019f4:	4299      	cmp	r1, r3
 80019f6:	d1fb      	bne.n	80019f0 <TIMER_IF_DelayMs+0x14>
 80019f8:	4a07      	ldr	r2, [pc, #28]	@ (8001a18 <TIMER_IF_DelayMs+0x3c>)
  return UINT32_MAX - ssr;
 80019fa:	ea6f 0c03 	mvn.w	ip, r3
 80019fe:	6891      	ldr	r1, [r2, #8]
 8001a00:	6893      	ldr	r3, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001a02:	4299      	cmp	r1, r3
 8001a04:	d1fb      	bne.n	80019fe <TIMER_IF_DelayMs+0x22>
  return UINT32_MAX - ssr;
 8001a06:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001a08:	eba3 030c 	sub.w	r3, r3, ip
 8001a0c:	4283      	cmp	r3, r0
 8001a0e:	d201      	bcs.n	8001a14 <TIMER_IF_DelayMs+0x38>
    __NOP();
 8001a10:	bf00      	nop
 8001a12:	e7f4      	b.n	80019fe <TIMER_IF_DelayMs+0x22>
}
 8001a14:	bd08      	pop	{r3, pc}
 8001a16:	bf00      	nop
 8001a18:	40002800 	.word	0x40002800

08001a1c <HAL_RTC_AlarmAEventCallback>:
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001a1c:	f00a bf62 	b.w	800c8e4 <UTIL_TIMER_IRQ_Handler>

08001a20 <HAL_RTCEx_SSRUEventCallback>:
{
 8001a20:	b510      	push	{r4, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001a22:	4c06      	ldr	r4, [pc, #24]	@ (8001a3c <HAL_RTCEx_SSRUEventCallback+0x1c>)
 8001a24:	2102      	movs	r1, #2
 8001a26:	4620      	mov	r0, r4
 8001a28:	f005 fbf2 	bl	8007210 <HAL_RTCEx_BKUPRead>
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	1c42      	adds	r2, r0, #1
 8001a30:	4620      	mov	r0, r4
}
 8001a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001a36:	f005 bbe3 	b.w	8007200 <HAL_RTCEx_BKUPWrite>
 8001a3a:	bf00      	nop
 8001a3c:	20000230 	.word	0x20000230

08001a40 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001a40:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001a42:	4820      	ldr	r0, [pc, #128]	@ (8001ac4 <MX_LPUART1_UART_Init+0x84>)
 8001a44:	4c20      	ldr	r4, [pc, #128]	@ (8001ac8 <MX_LPUART1_UART_Init+0x88>)
  hlpuart1.Init.BaudRate = 115200;
 8001a46:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4a:	2300      	movs	r3, #0
  hlpuart1.Init.BaudRate = 115200;
 8001a4c:	e9c0 4100 	strd	r4, r1, [r0]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001a50:	220c      	movs	r2, #12
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a52:	2400      	movs	r4, #0
 8001a54:	2500      	movs	r5, #0
 8001a56:	e9c0 4508 	strd	r4, r5, [r0, #32]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001a5a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001a5e:	e9c0 3204 	strd	r3, r2, [r0, #16]
 8001a62:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a64:	6283      	str	r3, [r0, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001a66:	6643      	str	r3, [r0, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001a68:	f007 fbbe 	bl	80091e8 <HAL_UART_Init>
 8001a6c:	b970      	cbnz	r0, 8001a8c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a6e:	4815      	ldr	r0, [pc, #84]	@ (8001ac4 <MX_LPUART1_UART_Init+0x84>)
 8001a70:	2100      	movs	r1, #0
 8001a72:	f007 fca7 	bl	80093c4 <HAL_UARTEx_SetTxFifoThreshold>
 8001a76:	b988      	cbnz	r0, 8001a9c <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a78:	4812      	ldr	r0, [pc, #72]	@ (8001ac4 <MX_LPUART1_UART_Init+0x84>)
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	f007 fce4 	bl	8009448 <HAL_UARTEx_SetRxFifoThreshold>
 8001a80:	b9a0      	cbnz	r0, 8001aac <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001a82:	4810      	ldr	r0, [pc, #64]	@ (8001ac4 <MX_LPUART1_UART_Init+0x84>)
 8001a84:	f007 fc80 	bl	8009388 <HAL_UARTEx_DisableFifoMode>
 8001a88:	b9b8      	cbnz	r0, 8001aba <MX_LPUART1_UART_Init+0x7a>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001a8a:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler();
 8001a8c:	f7ff f9c4 	bl	8000e18 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a90:	480c      	ldr	r0, [pc, #48]	@ (8001ac4 <MX_LPUART1_UART_Init+0x84>)
 8001a92:	2100      	movs	r1, #0
 8001a94:	f007 fc96 	bl	80093c4 <HAL_UARTEx_SetTxFifoThreshold>
 8001a98:	2800      	cmp	r0, #0
 8001a9a:	d0ed      	beq.n	8001a78 <MX_LPUART1_UART_Init+0x38>
    Error_Handler();
 8001a9c:	f7ff f9bc 	bl	8000e18 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aa0:	4808      	ldr	r0, [pc, #32]	@ (8001ac4 <MX_LPUART1_UART_Init+0x84>)
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	f007 fcd0 	bl	8009448 <HAL_UARTEx_SetRxFifoThreshold>
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d0ea      	beq.n	8001a82 <MX_LPUART1_UART_Init+0x42>
    Error_Handler();
 8001aac:	f7ff f9b4 	bl	8000e18 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001ab0:	4804      	ldr	r0, [pc, #16]	@ (8001ac4 <MX_LPUART1_UART_Init+0x84>)
 8001ab2:	f007 fc69 	bl	8009388 <HAL_UARTEx_DisableFifoMode>
 8001ab6:	2800      	cmp	r0, #0
 8001ab8:	d0e7      	beq.n	8001a8a <MX_LPUART1_UART_Init+0x4a>
}
 8001aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8001abe:	f7ff b9ab 	b.w	8000e18 <Error_Handler>
 8001ac2:	bf00      	nop
 8001ac4:	20000398 	.word	0x20000398
 8001ac8:	40008000 	.word	0x40008000

08001acc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001acc:	b530      	push	{r4, r5, lr}
 8001ace:	4604      	mov	r4, r0
 8001ad0:	b097      	sub	sp, #92	@ 0x5c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad2:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad4:	2238      	movs	r2, #56	@ 0x38
 8001ad6:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001adc:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001ae0:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae2:	f00b f981 	bl	800cde8 <memset>
  if(uartHandle->Instance==LPUART1)
 8001ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8001b98 <HAL_UART_MspInit+0xcc>)
 8001ae8:	6822      	ldr	r2, [r4, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d001      	beq.n	8001af2 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001aee:	b017      	add	sp, #92	@ 0x5c
 8001af0:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001af2:	2220      	movs	r2, #32
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8001af4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001af8:	eb0d 0002 	add.w	r0, sp, r2
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001afc:	9208      	str	r2, [sp, #32]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8001afe:	930c      	str	r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b00:	f004 ff42 	bl	8006988 <HAL_RCCEx_PeriphCLKConfig>
 8001b04:	2800      	cmp	r0, #0
 8001b06:	d141      	bne.n	8001b8c <HAL_UART_MspInit+0xc0>
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0c:	a902      	add	r1, sp, #8
 8001b0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8001b10:	4d22      	ldr	r5, [pc, #136]	@ (8001b9c <HAL_UART_MspInit+0xd0>)
 8001b12:	f042 0201 	orr.w	r2, r2, #1
 8001b16:	65da      	str	r2, [r3, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001b18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b1a:	f002 0201 	and.w	r2, r2, #1
 8001b1e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001b20:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b24:	f042 0201 	orr.w	r2, r2, #1
 8001b28:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b32:	220c      	movs	r2, #12
 8001b34:	2302      	movs	r3, #2
 8001b36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b3a:	2200      	movs	r2, #0
  (void)tmpreg;
 8001b3c:	9b00      	ldr	r3, [sp, #0]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001b48:	2308      	movs	r3, #8
 8001b4a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	f003 fa66 	bl	800501c <HAL_GPIO_Init>
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001b50:	4913      	ldr	r1, [pc, #76]	@ (8001ba0 <HAL_UART_MspInit+0xd4>)
 8001b52:	2216      	movs	r2, #22
 8001b54:	2300      	movs	r3, #0
 8001b56:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001b5a:	4628      	mov	r0, r5
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001b5c:	2110      	movs	r1, #16
 8001b5e:	2280      	movs	r2, #128	@ 0x80
 8001b60:	e9c5 1302 	strd	r1, r3, [r5, #8]
 8001b64:	e9c5 3305 	strd	r3, r3, [r5, #20]
 8001b68:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8001b6c:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001b6e:	f003 f817 	bl	8004ba0 <HAL_DMA_Init>
 8001b72:	b970      	cbnz	r0, 8001b92 <HAL_UART_MspInit+0xc6>
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001b74:	2200      	movs	r2, #0
 8001b76:	4611      	mov	r1, r2
 8001b78:	2026      	movs	r0, #38	@ 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001b7a:	67e5      	str	r5, [r4, #124]	@ 0x7c
 8001b7c:	62ac      	str	r4, [r5, #40]	@ 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001b7e:	f002 ffb3 	bl	8004ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001b82:	2026      	movs	r0, #38	@ 0x26
 8001b84:	f002 ffec 	bl	8004b60 <HAL_NVIC_EnableIRQ>
}
 8001b88:	b017      	add	sp, #92	@ 0x5c
 8001b8a:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8001b8c:	f7ff f944 	bl	8000e18 <Error_Handler>
 8001b90:	e7ba      	b.n	8001b08 <HAL_UART_MspInit+0x3c>
      Error_Handler();
 8001b92:	f7ff f941 	bl	8000e18 <Error_Handler>
 8001b96:	e7ed      	b.n	8001b74 <HAL_UART_MspInit+0xa8>
 8001b98:	40008000 	.word	0x40008000
 8001b9c:	20000338 	.word	0x20000338
 8001ba0:	4002001c 	.word	0x4002001c

08001ba4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==LPUART1)
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <HAL_UART_MspDeInit+0x34>)
 8001ba6:	6802      	ldr	r2, [r0, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d000      	beq.n	8001bae <HAL_UART_MspDeInit+0xa>
 8001bac:	4770      	bx	lr
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8001bae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
{
 8001bb2:	b510      	push	{r4, lr}
 8001bb4:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8001bb6:	4604      	mov	r4, r0
 8001bb8:	f023 0301 	bic.w	r3, r3, #1

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001bbc:	210c      	movs	r1, #12
 8001bbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bc2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001bc4:	f003 fb0e 	bl	80051e4 <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001bc8:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8001bca:	f003 f881 	bl	8004cd0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }
}
 8001bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8001bd2:	2026      	movs	r0, #38	@ 0x26
 8001bd4:	f002 bfd2 	b.w	8004b7c <HAL_NVIC_DisableIRQ>
 8001bd8:	40008000 	.word	0x40008000

08001bdc <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001bdc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001bde:	4b07      	ldr	r3, [pc, #28]	@ (8001bfc <vcom_Init+0x20>)
 8001be0:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8001be2:	f7fe ff21 	bl	8000a28 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001be6:	f7ff ff2b 	bl	8001a40 <MX_LPUART1_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001bea:	4a05      	ldr	r2, [pc, #20]	@ (8001c00 <vcom_Init+0x24>)
 8001bec:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8001bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_28);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001bfa:	bd08      	pop	{r3, pc}
 8001bfc:	20000430 	.word	0x20000430
 8001c00:	58000800 	.word	0x58000800

08001c04 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001c04:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8001c06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_LPUART1_FORCE_RESET();
  __HAL_RCC_LPUART1_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&hlpuart1);
 8001c0a:	4808      	ldr	r0, [pc, #32]	@ (8001c2c <vcom_DeInit+0x28>)
 8001c0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	63da      	str	r2, [r3, #60]	@ 0x3c
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8001c14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c16:	f022 0201 	bic.w	r2, r2, #1
 8001c1a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c1c:	f7ff ffc2 	bl	8001ba4 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001c20:	200f      	movs	r0, #15
 8001c22:	f002 ffab 	bl	8004b7c <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001c26:	2000      	movs	r0, #0
 8001c28:	bd08      	pop	{r3, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000398 	.word	0x20000398

08001c30 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001c30:	b508      	push	{r3, lr}
 8001c32:	4603      	mov	r3, r0
 8001c34:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8001c36:	4803      	ldr	r0, [pc, #12]	@ (8001c44 <vcom_Trace_DMA+0x14>)
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f006 fb07 	bl	800824c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001c3e:	2000      	movs	r0, #0
 8001c40:	bd08      	pop	{r3, pc}
 8001c42:	bf00      	nop
 8001c44:	20000398 	.word	0x20000398

08001c48 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001c48:	b510      	push	{r4, lr}
 8001c4a:	b082      	sub	sp, #8

  /*record call back*/
  RxCpltCallback = RxCb;

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8001c4c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c50:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&hlpuart1, WakeUpSelection);
 8001c52:	4c0f      	ldr	r4, [pc, #60]	@ (8001c90 <vcom_ReceiveInit+0x48>)
  RxCpltCallback = RxCb;
 8001c54:	4b0f      	ldr	r3, [pc, #60]	@ (8001c94 <vcom_ReceiveInit+0x4c>)
  HAL_UARTEx_StopModeWakeUpSourceConfig(&hlpuart1, WakeUpSelection);
 8001c56:	aa02      	add	r2, sp, #8
  RxCpltCallback = RxCb;
 8001c58:	6018      	str	r0, [r3, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&hlpuart1, WakeUpSelection);
 8001c5a:	e912 0006 	ldmdb	r2, {r1, r2}
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f007 fb34 	bl	80092cc <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_BUSY) == SET);
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	69da      	ldr	r2, [r3, #28]
 8001c68:	03d1      	lsls	r1, r2, #15
 8001c6a:	d4fc      	bmi.n	8001c66 <vcom_ReceiveInit+0x1e>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_REACK) == RESET);
 8001c6c:	69da      	ldr	r2, [r3, #28]
 8001c6e:	0252      	lsls	r2, r2, #9
 8001c70:	d5fc      	bpl.n	8001c6c <vcom_ReceiveInit+0x24>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_WUF);
 8001c72:	689a      	ldr	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&hlpuart1);
 8001c74:	4806      	ldr	r0, [pc, #24]	@ (8001c90 <vcom_ReceiveInit+0x48>)
  __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_WUF);
 8001c76:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001c7a:	609a      	str	r2, [r3, #8]
  HAL_UARTEx_EnableStopMode(&hlpuart1);
 8001c7c:	f007 fb6e 	bl	800935c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&hlpuart1, &charRx, 1);
 8001c80:	4905      	ldr	r1, [pc, #20]	@ (8001c98 <vcom_ReceiveInit+0x50>)
 8001c82:	4803      	ldr	r0, [pc, #12]	@ (8001c90 <vcom_ReceiveInit+0x48>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	f006 fa27 	bl	80080d8 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	b002      	add	sp, #8
 8001c8e:	bd10      	pop	{r4, pc}
 8001c90:	20000398 	.word	0x20000398
 8001c94:	2000042c 	.word	0x2000042c
 8001c98:	20000434 	.word	0x20000434

08001c9c <vcom_Resume>:

void vcom_Resume(void)
{
 8001c9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001c9e:	4804      	ldr	r0, [pc, #16]	@ (8001cb0 <vcom_Resume+0x14>)
 8001ca0:	f002 ff7e 	bl	8004ba0 <HAL_DMA_Init>
 8001ca4:	b900      	cbnz	r0, 8001ca8 <vcom_Resume+0xc>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001ca6:	bd08      	pop	{r3, pc}
 8001ca8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001cac:	f7ff b8b4 	b.w	8000e18 <Error_Handler>
 8001cb0:	20000338 	.word	0x20000338

08001cb4 <HAL_UART_TxCpltCallback>:
{
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == LPUART1)
 8001cb4:	4b04      	ldr	r3, [pc, #16]	@ (8001cc8 <HAL_UART_TxCpltCallback+0x14>)
 8001cb6:	6802      	ldr	r2, [r0, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d000      	beq.n	8001cbe <HAL_UART_TxCpltCallback+0xa>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001cbc:	4770      	bx	lr
    TxCpltCallback(NULL);
 8001cbe:	4b03      	ldr	r3, [pc, #12]	@ (8001ccc <HAL_UART_TxCpltCallback+0x18>)
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4718      	bx	r3
 8001cc6:	bf00      	nop
 8001cc8:	40008000 	.word	0x40008000
 8001ccc:	20000430 	.word	0x20000430

08001cd0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == LPUART1)
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <HAL_UART_RxCpltCallback+0x30>)
 8001cd2:	6802      	ldr	r2, [r0, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d000      	beq.n	8001cda <HAL_UART_RxCpltCallback+0xa>
 8001cd8:	4770      	bx	lr
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8001cda:	4b0a      	ldr	r3, [pc, #40]	@ (8001d04 <HAL_UART_RxCpltCallback+0x34>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
{
 8001cde:	b510      	push	{r4, lr}
 8001ce0:	4604      	mov	r4, r0
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8001ce2:	b12b      	cbz	r3, 8001cf0 <HAL_UART_RxCpltCallback+0x20>
 8001ce4:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
 8001ce8:	b912      	cbnz	r2, 8001cf0 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 8001cea:	4807      	ldr	r0, [pc, #28]	@ (8001d08 <HAL_UART_RxCpltCallback+0x38>)
 8001cec:	2101      	movs	r1, #1
 8001cee:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	4905      	ldr	r1, [pc, #20]	@ (8001d08 <HAL_UART_RxCpltCallback+0x38>)
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f006 b9ed 	b.w	80080d8 <HAL_UART_Receive_IT>
 8001cfe:	bf00      	nop
 8001d00:	40008000 	.word	0x40008000
 8001d04:	2000042c 	.word	0x2000042c
 8001d08:	20000434 	.word	0x20000434

08001d0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d0c:	480d      	ldr	r0, [pc, #52]	@ (8001d44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d0e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d10:	f7ff fcee 	bl	80016f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d14:	480c      	ldr	r0, [pc, #48]	@ (8001d48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d16:	490d      	ldr	r1, [pc, #52]	@ (8001d4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d18:	4a0d      	ldr	r2, [pc, #52]	@ (8001d50 <LoopForever+0xe>)
  movs r3, #0
 8001d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d1c:	e002      	b.n	8001d24 <LoopCopyDataInit>

08001d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d22:	3304      	adds	r3, #4

08001d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d28:	d3f9      	bcc.n	8001d1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d2c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d58 <LoopForever+0x16>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d30:	e001      	b.n	8001d36 <LoopFillZerobss>

08001d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d34:	3204      	adds	r2, #4

08001d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d38:	d3fb      	bcc.n	8001d32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d3a:	f00b f85d 	bl	800cdf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d3e:	f7fe ffeb 	bl	8000d18 <main>

08001d42 <LoopForever>:

LoopForever:
    b LoopForever
 8001d42:	e7fe      	b.n	8001d42 <LoopForever>
  ldr   r0, =_estack
 8001d44:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d4c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001d50:	0800d480 	.word	0x0800d480
  ldr r2, =_sbss
 8001d54:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001d58:	20000934 	.word	0x20000934

08001d5c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d5c:	e7fe      	b.n	8001d5c <ADC_IRQHandler>
	...

08001d60 <calc_pressure>:
     * i.e Comparing value, pres_ovf_check = (1 << 31) >> 1
     */
    const int32_t pres_ovf_check = INT32_C(0x40000000);

    /*lint -save -e701 -e702 -e713 */
    var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8001d60:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
{
 8001d62:	b510      	push	{r4, lr}
    var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8001d64:	ea4f 0c63 	mov.w	ip, r3, asr #1
 8001d68:	f5ac 4c7a 	sub.w	ip, ip, #64000	@ 0xfa00
    var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) * (int32_t)dev->calib.par_p6) >> 2;
 8001d6c:	ea4f 03ac 	mov.w	r3, ip, asr #2
 8001d70:	fb03 f303 	mul.w	r3, r3, r3
    var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
    var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) * ((int32_t)dev->calib.par_p3 << 5)) >> 3) +
           (((int32_t)dev->calib.par_p2 * var1) >> 1);
    var1 = var1 >> 18;
    var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
    pressure_comp = 1048576 - pres_adc;
 8001d74:	f5c0 1280 	rsb	r2, r0, #1048576	@ 0x100000
    var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) * (int32_t)dev->calib.par_p6) >> 2;
 8001d78:	ea4f 2ee3 	mov.w	lr, r3, asr #11
    var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) * ((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8001d7c:	1358      	asrs	r0, r3, #13
 8001d7e:	f991 3028 	ldrsb.w	r3, [r1, #40]	@ 0x28
    var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) * (int32_t)dev->calib.par_p6) >> 2;
 8001d82:	f991 402e 	ldrsb.w	r4, [r1, #46]	@ 0x2e
    var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) * ((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8001d86:	015b      	lsls	r3, r3, #5
 8001d88:	fb00 f303 	mul.w	r3, r0, r3
    var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8001d8c:	f9b1 002c 	ldrsh.w	r0, [r1, #44]	@ 0x2c
 8001d90:	fb0c f000 	mul.w	r0, ip, r0
    var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) * (int32_t)dev->calib.par_p6) >> 2;
 8001d94:	fb04 fe0e 	mul.w	lr, r4, lr
    var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8001d98:	0040      	lsls	r0, r0, #1
 8001d9a:	eb00 00ae 	add.w	r0, r0, lr, asr #2
           (((int32_t)dev->calib.par_p2 * var1) >> 1);
 8001d9e:	f9b1 e026 	ldrsh.w	lr, [r1, #38]	@ 0x26
    var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) * ((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8001da2:	10db      	asrs	r3, r3, #3
           (((int32_t)dev->calib.par_p2 * var1) >> 1);
 8001da4:	fb0c fc0e 	mul.w	ip, ip, lr
    var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) * ((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8001da8:	eb03 036c 	add.w	r3, r3, ip, asr #1
    var1 = var1 >> 18;
 8001dac:	149b      	asrs	r3, r3, #18
    var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8001dae:	f8b1 c024 	ldrh.w	ip, [r1, #36]	@ 0x24
    {
        pressure_comp = ((pressure_comp << 1) / var1);
    }

    var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) * (pressure_comp >> 3)) >> 13)) >> 12;
    var2 = ((int32_t)(pressure_comp >> 2) * (int32_t)dev->calib.par_p8) >> 13;
 8001db2:	f9b1 e030 	ldrsh.w	lr, [r1, #48]	@ 0x30
    var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8001db6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001dba:	fb0c f303 	mul.w	r3, ip, r3
    var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8001dbe:	f9b1 c02a 	ldrsh.w	ip, [r1, #42]	@ 0x2a
 8001dc2:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8001dc6:	eb0c 00a0 	add.w	r0, ip, r0, asr #2
    pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8001dca:	eba2 3220 	sub.w	r2, r2, r0, asr #12
 8001dce:	f640 4035 	movw	r0, #3125	@ 0xc35
 8001dd2:	fb00 f202 	mul.w	r2, r0, r2
    var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8001dd6:	13db      	asrs	r3, r3, #15
    if (pressure_comp >= pres_ovf_check)
 8001dd8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
        pressure_comp = ((pressure_comp / var1) << 1);
 8001ddc:	bfa7      	ittee	ge
 8001dde:	fb92 f3f3 	sdivge	r3, r2, r3
 8001de2:	005b      	lslge	r3, r3, #1
        pressure_comp = ((pressure_comp << 1) / var1);
 8001de4:	0052      	lsllt	r2, r2, #1
 8001de6:	fb92 f3f3 	sdivlt	r3, r2, r3
    var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) * (pressure_comp >> 3)) >> 13)) >> 12;
 8001dea:	10da      	asrs	r2, r3, #3
 8001dec:	f9b1 0032 	ldrsh.w	r0, [r1, #50]	@ 0x32
 8001df0:	fb02 f202 	mul.w	r2, r2, r2
 8001df4:	1352      	asrs	r2, r2, #13
 8001df6:	fb00 f202 	mul.w	r2, r0, r2
    var2 = ((int32_t)(pressure_comp >> 2) * (int32_t)dev->calib.par_p8) >> 13;
 8001dfa:	1098      	asrs	r0, r3, #2
 8001dfc:	fb0e f000 	mul.w	r0, lr, r0
    var3 =
        ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001e00:	ea4f 2c23 	mov.w	ip, r3, asr #8
    var2 = ((int32_t)(pressure_comp >> 2) * (int32_t)dev->calib.par_p8) >> 13;
 8001e04:	1340      	asrs	r0, r0, #13
         (int32_t)dev->calib.par_p10) >> 17;
    pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 + ((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8001e06:	eb00 3022 	add.w	r0, r0, r2, asr #12
        ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001e0a:	fb0c f20c 	mul.w	r2, ip, ip
 8001e0e:	fb0c f202 	mul.w	r2, ip, r2
         (int32_t)dev->calib.par_p10) >> 17;
 8001e12:	f891 c034 	ldrb.w	ip, [r1, #52]	@ 0x34
    pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 + ((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8001e16:	f991 102f 	ldrsb.w	r1, [r1, #47]	@ 0x2f
        ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001e1a:	fb0c f202 	mul.w	r2, ip, r2
    pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 + ((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8001e1e:	eb00 4062 	add.w	r0, r0, r2, asr #17
 8001e22:	eb00 10c1 	add.w	r0, r0, r1, lsl #7

    /*lint -restore */
    return (uint32_t)pressure_comp;
}
 8001e26:	eb03 1020 	add.w	r0, r3, r0, asr #4
 8001e2a:	bd10      	pop	{r4, pc}

08001e2c <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8001e2c:	b570      	push	{r4, r5, r6, lr}
    int32_t var6;
    int32_t temp_scaled;
    int32_t calc_hum;

    /*lint -save -e702 -e704 */
    temp_scaled = (((int32_t)dev->calib.t_fine * 5) + 128) >> 8;
 8001e2e:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
    var1 = (int32_t)(hum_adc - ((int32_t)((int32_t)dev->calib.par_h1 * 16))) -
           (((temp_scaled * (int32_t)dev->calib.par_h3) / ((int32_t)100)) >> 1);
    var2 =
        ((int32_t)dev->calib.par_h2 *
         (((temp_scaled * (int32_t)dev->calib.par_h4) / ((int32_t)100)) +
          (((temp_scaled * ((temp_scaled * (int32_t)dev->calib.par_h5) / ((int32_t)100))) >> 6) / ((int32_t)100)) +
 8001e30:	f991 3016 	ldrsb.w	r3, [r1, #22]
 8001e34:	4c2d      	ldr	r4, [pc, #180]	@ (8001eec <calc_humidity+0xc0>)
         (((temp_scaled * (int32_t)dev->calib.par_h4) / ((int32_t)100)) +
 8001e36:	f991 e015 	ldrsb.w	lr, [r1, #21]
    temp_scaled = (((int32_t)dev->calib.t_fine * 5) + 128) >> 8;
 8001e3a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001e3e:	3280      	adds	r2, #128	@ 0x80
 8001e40:	1212      	asrs	r2, r2, #8
          (((temp_scaled * ((temp_scaled * (int32_t)dev->calib.par_h5) / ((int32_t)100))) >> 6) / ((int32_t)100)) +
 8001e42:	fb02 f303 	mul.w	r3, r2, r3
 8001e46:	fb84 6503 	smull	r6, r5, r4, r3
 8001e4a:	17db      	asrs	r3, r3, #31
 8001e4c:	ebc3 1365 	rsb	r3, r3, r5, asr #5
 8001e50:	fb02 f303 	mul.w	r3, r2, r3
         (((temp_scaled * (int32_t)dev->calib.par_h4) / ((int32_t)100)) +
 8001e54:	fb02 fe0e 	mul.w	lr, r2, lr
          (((temp_scaled * ((temp_scaled * (int32_t)dev->calib.par_h5) / ((int32_t)100))) >> 6) / ((int32_t)100)) +
 8001e58:	ea4f 1ca3 	mov.w	ip, r3, asr #6
 8001e5c:	fb84 5c0c 	smull	r5, ip, r4, ip
 8001e60:	17db      	asrs	r3, r3, #31
         (((temp_scaled * (int32_t)dev->calib.par_h4) / ((int32_t)100)) +
 8001e62:	fb84 650e 	smull	r6, r5, r4, lr
 8001e66:	ea4f 7eee 	mov.w	lr, lr, asr #31
 8001e6a:	ebce 1e65 	rsb	lr, lr, r5, asr #5
          (((temp_scaled * ((temp_scaled * (int32_t)dev->calib.par_h5) / ((int32_t)100))) >> 6) / ((int32_t)100)) +
 8001e6e:	ebc3 136c 	rsb	r3, r3, ip, asr #5
         (((temp_scaled * (int32_t)dev->calib.par_h4) / ((int32_t)100)) +
 8001e72:	4473      	add	r3, lr
        ((int32_t)dev->calib.par_h2 *
 8001e74:	f8b1 e012 	ldrh.w	lr, [r1, #18]
           (((temp_scaled * (int32_t)dev->calib.par_h3) / ((int32_t)100)) >> 1);
 8001e78:	f991 c014 	ldrsb.w	ip, [r1, #20]
          (((temp_scaled * ((temp_scaled * (int32_t)dev->calib.par_h5) / ((int32_t)100))) >> 6) / ((int32_t)100)) +
 8001e7c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
        ((int32_t)dev->calib.par_h2 *
 8001e80:	fb0e f303 	mul.w	r3, lr, r3
    var1 = (int32_t)(hum_adc - ((int32_t)((int32_t)dev->calib.par_h1 * 16))) -
 8001e84:	f8b1 e010 	ldrh.w	lr, [r1, #16]
 8001e88:	eba0 100e 	sub.w	r0, r0, lr, lsl #4
          (int32_t)(1 << 14))) >> 10;
    var3 = var1 * var2;
    var4 = (int32_t)dev->calib.par_h6 << 7;
    var4 = ((var4) + ((temp_scaled * (int32_t)dev->calib.par_h7) / ((int32_t)100))) >> 4;
 8001e8c:	f991 e018 	ldrsb.w	lr, [r1, #24]
           (((temp_scaled * (int32_t)dev->calib.par_h3) / ((int32_t)100)) >> 1);
 8001e90:	fb02 fc0c 	mul.w	ip, r2, ip
    var4 = ((var4) + ((temp_scaled * (int32_t)dev->calib.par_h7) / ((int32_t)100))) >> 4;
 8001e94:	fb02 f20e 	mul.w	r2, r2, lr
    var4 = (int32_t)dev->calib.par_h6 << 7;
 8001e98:	f891 e017 	ldrb.w	lr, [r1, #23]
           (((temp_scaled * (int32_t)dev->calib.par_h3) / ((int32_t)100)) >> 1);
 8001e9c:	fb84 510c 	smull	r5, r1, r4, ip
 8001ea0:	ea4f 7cec 	mov.w	ip, ip, asr #31
 8001ea4:	ebcc 1c61 	rsb	ip, ip, r1, asr #5
    var1 = (int32_t)(hum_adc - ((int32_t)((int32_t)dev->calib.par_h1 * 16))) -
 8001ea8:	eba0 006c 	sub.w	r0, r0, ip, asr #1
    var2 =
 8001eac:	129b      	asrs	r3, r3, #10
    var4 = ((var4) + ((temp_scaled * (int32_t)dev->calib.par_h7) / ((int32_t)100))) >> 4;
 8001eae:	fb84 1402 	smull	r1, r4, r4, r2
    var3 = var1 * var2;
 8001eb2:	fb00 f303 	mul.w	r3, r0, r3
    var4 = ((var4) + ((temp_scaled * (int32_t)dev->calib.par_h7) / ((int32_t)100))) >> 4;
 8001eb6:	17d2      	asrs	r2, r2, #31
 8001eb8:	ebc2 1264 	rsb	r2, r2, r4, asr #5
    var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8001ebc:	1399      	asrs	r1, r3, #14
    var4 = ((var4) + ((temp_scaled * (int32_t)dev->calib.par_h7) / ((int32_t)100))) >> 4;
 8001ebe:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
    var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8001ec2:	fb01 f101 	mul.w	r1, r1, r1
    var4 = ((var4) + ((temp_scaled * (int32_t)dev->calib.par_h7) / ((int32_t)100))) >> 4;
 8001ec6:	1112      	asrs	r2, r2, #4
    var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8001ec8:	1289      	asrs	r1, r1, #10
    var6 = (var4 * var5) >> 1;
 8001eca:	fb02 f101 	mul.w	r1, r2, r1
    calc_hum = (((var3 + var6) >> 10) * ((int32_t)1000)) >> 12;
 8001ece:	eb03 0061 	add.w	r0, r3, r1, asr #1
 8001ed2:	1280      	asrs	r0, r0, #10
 8001ed4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ed8:	fb03 f000 	mul.w	r0, r3, r0
 8001edc:	1300      	asrs	r0, r0, #12
    {
        calc_hum = 0;
    }

    /*lint -restore */
    return (uint32_t)calc_hum;
 8001ede:	4b04      	ldr	r3, [pc, #16]	@ (8001ef0 <calc_humidity+0xc4>)
    else if (calc_hum < 0)
 8001ee0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8001ee4:	4298      	cmp	r0, r3
 8001ee6:	bfa8      	it	ge
 8001ee8:	4618      	movge	r0, r3
 8001eea:	bd70      	pop	{r4, r5, r6, pc}
 8001eec:	51eb851f 	.word	0x51eb851f
 8001ef0:	000186a0 	.word	0x000186a0

08001ef4 <set_mem_page>:
/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
    int8_t rslt = BME68X_OK;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8001ef4:	2900      	cmp	r1, #0
 8001ef6:	d038      	beq.n	8001f6a <set_mem_page+0x76>
{
 8001ef8:	b530      	push	{r4, r5, lr}
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8001efa:	6c0d      	ldr	r5, [r1, #64]	@ 0x40
{
 8001efc:	b083      	sub	sp, #12
 8001efe:	460c      	mov	r4, r1
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8001f00:	b36d      	cbz	r5, 8001f5e <set_mem_page+0x6a>
 8001f02:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
 8001f04:	b35b      	cbz	r3, 8001f5e <set_mem_page+0x6a>
 8001f06:	6c8b      	ldr	r3, [r1, #72]	@ 0x48
 8001f08:	b34b      	cbz	r3, 8001f5e <set_mem_page+0x6a>
        if (mem_page != dev->mem_page)
 8001f0a:	7b4b      	ldrb	r3, [r1, #13]
        if (reg_addr > 0x7f)
 8001f0c:	43c0      	mvns	r0, r0
 8001f0e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
        if (mem_page != dev->mem_page)
 8001f12:	ebb3 1f00 	cmp.w	r3, r0, lsl #4
        if (reg_addr > 0x7f)
 8001f16:	ea4f 1200 	mov.w	r2, r0, lsl #4
        if (mem_page != dev->mem_page)
 8001f1a:	d01d      	beq.n	8001f58 <set_mem_page+0x64>
            dev->mem_page = mem_page;
 8001f1c:	734a      	strb	r2, [r1, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8001f1e:	684b      	ldr	r3, [r1, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f10d 0107 	add.w	r1, sp, #7
 8001f26:	20f3      	movs	r0, #243	@ 0xf3
 8001f28:	47a8      	blx	r5
 8001f2a:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
            if (dev->intf_rslt != 0)
 8001f2e:	b9c8      	cbnz	r0, 8001f64 <set_mem_page+0x70>
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8001f30:	f89d 2007 	ldrb.w	r2, [sp, #7]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8001f34:	7b63      	ldrb	r3, [r4, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8001f36:	6c65      	ldr	r5, [r4, #68]	@ 0x44
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8001f38:	f003 0310 	and.w	r3, r3, #16
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8001f3c:	f022 0210 	bic.w	r2, r2, #16
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8001f40:	431a      	orrs	r2, r3
 8001f42:	f88d 2007 	strb.w	r2, [sp, #7]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8001f46:	6863      	ldr	r3, [r4, #4]
 8001f48:	f10d 0107 	add.w	r1, sp, #7
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	2073      	movs	r0, #115	@ 0x73
 8001f50:	47a8      	blx	r5
 8001f52:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8001f56:	b928      	cbnz	r0, 8001f64 <set_mem_page+0x70>
    int8_t rslt = BME68X_OK;
 8001f58:	2000      	movs	r0, #0
}
 8001f5a:	b003      	add	sp, #12
 8001f5c:	bd30      	pop	{r4, r5, pc}
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 8001f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f62:	e7fa      	b.n	8001f5a <set_mem_page+0x66>
                rslt = BME68X_E_COM_FAIL;
 8001f64:	f06f 0001 	mvn.w	r0, #1
 8001f68:	e7f7      	b.n	8001f5a <set_mem_page+0x66>
        rslt = BME68X_E_NULL_PTR;
 8001f6a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001f6e:	4770      	bx	lr

08001f70 <bme68x_set_regs.constprop.0>:
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
 8001f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f74:	b086      	sub	sp, #24
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8001f76:	2300      	movs	r3, #0
 8001f78:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001f7c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001f80:	9305      	str	r3, [sp, #20]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8001f82:	2a00      	cmp	r2, #0
 8001f84:	d062      	beq.n	800204c <bme68x_set_regs.constprop.0+0xdc>
 8001f86:	f8d2 8040 	ldr.w	r8, [r2, #64]	@ 0x40
 8001f8a:	4614      	mov	r4, r2
 8001f8c:	f1b8 0f00 	cmp.w	r8, #0
 8001f90:	d05c      	beq.n	800204c <bme68x_set_regs.constprop.0+0xdc>
 8001f92:	6c57      	ldr	r7, [r2, #68]	@ 0x44
 8001f94:	2f00      	cmp	r7, #0
 8001f96:	d059      	beq.n	800204c <bme68x_set_regs.constprop.0+0xdc>
 8001f98:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d056      	beq.n	800204c <bme68x_set_regs.constprop.0+0xdc>
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8001f9e:	4605      	mov	r5, r0
 8001fa0:	2800      	cmp	r0, #0
 8001fa2:	d053      	beq.n	800204c <bme68x_set_regs.constprop.0+0xdc>
 8001fa4:	460e      	mov	r6, r1
 8001fa6:	2900      	cmp	r1, #0
 8001fa8:	d050      	beq.n	800204c <bme68x_set_regs.constprop.0+0xdc>
                if (dev->intf == BME68X_SPI_INTF)
 8001faa:	7b12      	ldrb	r2, [r2, #12]
                    rslt = set_mem_page(reg_addr[index], dev);
 8001fac:	7800      	ldrb	r0, [r0, #0]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8001fae:	6863      	ldr	r3, [r4, #4]
                if (dev->intf == BME68X_SPI_INTF)
 8001fb0:	b17a      	cbz	r2, 8001fd2 <bme68x_set_regs.constprop.0+0x62>
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8001fb2:	7832      	ldrb	r2, [r6, #0]
                    tmp_buff[(2 * index)] = reg_addr[index];
 8001fb4:	f88d 0004 	strb.w	r0, [sp, #4]
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8001fb8:	f88d 2005 	strb.w	r2, [sp, #5]
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f10d 0105 	add.w	r1, sp, #5
 8001fc2:	47b8      	blx	r7
 8001fc4:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8001fc8:	2800      	cmp	r0, #0
 8001fca:	d13c      	bne.n	8002046 <bme68x_set_regs.constprop.0+0xd6>
}
 8001fcc:	b006      	add	sp, #24
 8001fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (mem_page != dev->mem_page)
 8001fd2:	7b61      	ldrb	r1, [r4, #13]
        if (reg_addr > 0x7f)
 8001fd4:	43c2      	mvns	r2, r0
 8001fd6:	f3c2 12c0 	ubfx	r2, r2, #7, #1
        if (mem_page != dev->mem_page)
 8001fda:	ebb1 1f02 	cmp.w	r1, r2, lsl #4
        if (reg_addr > 0x7f)
 8001fde:	ea4f 1c02 	mov.w	ip, r2, lsl #4
        if (mem_page != dev->mem_page)
 8001fe2:	d028      	beq.n	8002036 <bme68x_set_regs.constprop.0+0xc6>
            dev->mem_page = mem_page;
 8001fe4:	f884 c00d 	strb.w	ip, [r4, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f10d 0103 	add.w	r1, sp, #3
 8001fee:	20f3      	movs	r0, #243	@ 0xf3
 8001ff0:	47c0      	blx	r8
 8001ff2:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
            if (dev->intf_rslt != 0)
 8001ff6:	bb30      	cbnz	r0, 8002046 <bme68x_set_regs.constprop.0+0xd6>
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8001ff8:	f89d 0003 	ldrb.w	r0, [sp, #3]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8001ffc:	7b63      	ldrb	r3, [r4, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8001ffe:	6c67      	ldr	r7, [r4, #68]	@ 0x44
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8002000:	f003 0310 	and.w	r3, r3, #16
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8002004:	f020 0010 	bic.w	r0, r0, #16
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8002008:	4318      	orrs	r0, r3
 800200a:	f88d 0003 	strb.w	r0, [sp, #3]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 800200e:	6863      	ldr	r3, [r4, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f10d 0103 	add.w	r1, sp, #3
 8002016:	2073      	movs	r0, #115	@ 0x73
 8002018:	47b8      	blx	r7
 800201a:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 800201e:	b990      	cbnz	r0, 8002046 <bme68x_set_regs.constprop.0+0xd6>
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002020:	7828      	ldrb	r0, [r5, #0]
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002022:	7832      	ldrb	r2, [r6, #0]
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8002024:	6c67      	ldr	r7, [r4, #68]	@ 0x44
 8002026:	6863      	ldr	r3, [r4, #4]
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002028:	f88d 2005 	strb.w	r2, [sp, #5]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 800202c:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8002030:	f88d 0004 	strb.w	r0, [sp, #4]
            if (rslt == BME68X_OK)
 8002034:	e7c2      	b.n	8001fbc <bme68x_set_regs.constprop.0+0x4c>
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002036:	7832      	ldrb	r2, [r6, #0]
 8002038:	f88d 2005 	strb.w	r2, [sp, #5]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 800203c:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8002040:	f88d 0004 	strb.w	r0, [sp, #4]
            if (rslt == BME68X_OK)
 8002044:	e7ba      	b.n	8001fbc <bme68x_set_regs.constprop.0+0x4c>
                rslt = BME68X_E_COM_FAIL;
 8002046:	f06f 0001 	mvn.w	r0, #1
 800204a:	e7bf      	b.n	8001fcc <bme68x_set_regs.constprop.0+0x5c>
        rslt = BME68X_E_NULL_PTR;
 800204c:	f04f 30ff 	mov.w	r0, #4294967295
 8002050:	e7bc      	b.n	8001fcc <bme68x_set_regs.constprop.0+0x5c>
 8002052:	bf00      	nop

08002054 <bme68x_init>:
{
 8002054:	b570      	push	{r4, r5, r6, lr}
 8002056:	b08c      	sub	sp, #48	@ 0x30
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8002058:	22e0      	movs	r2, #224	@ 0xe0
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 800205a:	23b6      	movs	r3, #182	@ 0xb6
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 800205c:	f88d 2002 	strb.w	r2, [sp, #2]
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8002060:	f88d 3003 	strb.w	r3, [sp, #3]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002064:	2800      	cmp	r0, #0
 8002066:	f000 8140 	beq.w	80022ea <bme68x_init+0x296>
 800206a:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800206c:	4604      	mov	r4, r0
 800206e:	2d00      	cmp	r5, #0
 8002070:	f000 813b 	beq.w	80022ea <bme68x_init+0x296>
 8002074:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 8137 	beq.w	80022ea <bme68x_init+0x296>
 800207c:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8133 	beq.w	80022ea <bme68x_init+0x296>
        if (dev->intf == BME68X_SPI_INTF)
 8002084:	7b03      	ldrb	r3, [r0, #12]
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 80f5 	beq.w	8002276 <bme68x_init+0x222>
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800208c:	f10d 0103 	add.w	r1, sp, #3
 8002090:	4622      	mov	r2, r4
 8002092:	f10d 0002 	add.w	r0, sp, #2
 8002096:	f7ff ff6b 	bl	8001f70 <bme68x_set_regs.constprop.0>
            dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 800209a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800209c:	6861      	ldr	r1, [r4, #4]
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800209e:	4605      	mov	r5, r0
            dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 80020a0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80020a4:	4798      	blx	r3
            if (rslt == BME68X_OK)
 80020a6:	2d00      	cmp	r5, #0
 80020a8:	f040 80e2 	bne.w	8002270 <bme68x_init+0x21c>
                if (dev->intf == BME68X_SPI_INTF)
 80020ac:	7b23      	ldrb	r3, [r4, #12]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80020ae:	6c25      	ldr	r5, [r4, #64]	@ 0x40
                if (dev->intf == BME68X_SPI_INTF)
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 80ee 	beq.w	8002292 <bme68x_init+0x23e>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80020b6:	2d00      	cmp	r5, #0
 80020b8:	f000 8117 	beq.w	80022ea <bme68x_init+0x296>
 80020bc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 8113 	beq.w	80022ea <bme68x_init+0x296>
 80020c4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 810f 	beq.w	80022ea <bme68x_init+0x296>
        if (dev->intf == BME68X_SPI_INTF)
 80020cc:	7b23      	ldrb	r3, [r4, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 80f6 	beq.w	80022c0 <bme68x_init+0x26c>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80020d4:	6863      	ldr	r3, [r4, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	4621      	mov	r1, r4
 80020da:	20d0      	movs	r0, #208	@ 0xd0
 80020dc:	47a8      	blx	r5
 80020de:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 80020e2:	2800      	cmp	r0, #0
 80020e4:	f040 80e9 	bne.w	80022ba <bme68x_init+0x266>
            if (dev->chip_id == BME68X_CHIP_ID)
 80020e8:	7823      	ldrb	r3, [r4, #0]
 80020ea:	2b61      	cmp	r3, #97	@ 0x61
 80020ec:	f040 8126 	bne.w	800233c <bme68x_init+0x2e8>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80020f0:	6c25      	ldr	r5, [r4, #64]	@ 0x40

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
    int8_t rslt;
    uint8_t reg_data = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f88d 3004 	strb.w	r3, [sp, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80020f8:	2d00      	cmp	r5, #0
 80020fa:	f000 80f6 	beq.w	80022ea <bme68x_init+0x296>
 80020fe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80f2 	beq.w	80022ea <bme68x_init+0x296>
 8002106:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80ee 	beq.w	80022ea <bme68x_init+0x296>
        if (dev->intf == BME68X_SPI_INTF)
 800210e:	7b23      	ldrb	r3, [r4, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80ed 	beq.w	80022f0 <bme68x_init+0x29c>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8002116:	ae01      	add	r6, sp, #4
 8002118:	6863      	ldr	r3, [r4, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	4631      	mov	r1, r6
 800211e:	20f0      	movs	r0, #240	@ 0xf0
 8002120:	47a8      	blx	r5
 8002122:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8002126:	2800      	cmp	r0, #0
 8002128:	f040 80c7 	bne.w	80022ba <bme68x_init+0x266>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800212c:	6c25      	ldr	r5, [r4, #64]	@ 0x40
    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);

    if (rslt == BME68X_OK)
    {
        dev->variant_id = reg_data;
 800212e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002132:	60a3      	str	r3, [r4, #8]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002134:	2d00      	cmp	r5, #0
 8002136:	f000 80d8 	beq.w	80022ea <bme68x_init+0x296>
 800213a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 80d4 	beq.w	80022ea <bme68x_init+0x296>
 8002142:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80d0 	beq.w	80022ea <bme68x_init+0x296>
        if (dev->intf == BME68X_SPI_INTF)
 800214a:	7b23      	ldrb	r3, [r4, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80e3 	beq.w	8002318 <bme68x_init+0x2c4>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8002152:	6863      	ldr	r3, [r4, #4]
 8002154:	2217      	movs	r2, #23
 8002156:	4631      	mov	r1, r6
 8002158:	208a      	movs	r0, #138	@ 0x8a
 800215a:	47a8      	blx	r5
 800215c:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8002160:	2800      	cmp	r0, #0
 8002162:	f040 80aa 	bne.w	80022ba <bme68x_init+0x266>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002166:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8002168:	2d00      	cmp	r5, #0
 800216a:	f000 80be 	beq.w	80022ea <bme68x_init+0x296>
 800216e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80ba 	beq.w	80022ea <bme68x_init+0x296>
 8002176:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 80b6 	beq.w	80022ea <bme68x_init+0x296>
        if (dev->intf == BME68X_SPI_INTF)
 800217e:	7b23      	ldrb	r3, [r4, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80de 	beq.w	8002342 <bme68x_init+0x2ee>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8002186:	6863      	ldr	r3, [r4, #4]
 8002188:	220e      	movs	r2, #14
 800218a:	f10d 011b 	add.w	r1, sp, #27
 800218e:	20e1      	movs	r0, #225	@ 0xe1
 8002190:	47a8      	blx	r5
 8002192:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8002196:	2800      	cmp	r0, #0
 8002198:	f040 808f 	bne.w	80022ba <bme68x_init+0x266>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800219c:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800219e:	2d00      	cmp	r5, #0
 80021a0:	f000 80a3 	beq.w	80022ea <bme68x_init+0x296>
 80021a4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 809f 	beq.w	80022ea <bme68x_init+0x296>
 80021ac:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 809b 	beq.w	80022ea <bme68x_init+0x296>
        if (dev->intf == BME68X_SPI_INTF)
 80021b4:	7b20      	ldrb	r0, [r4, #12]
 80021b6:	2800      	cmp	r0, #0
 80021b8:	f000 80d6 	beq.w	8002368 <bme68x_init+0x314>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80021bc:	6863      	ldr	r3, [r4, #4]
 80021be:	2205      	movs	r2, #5
 80021c0:	f10d 0129 	add.w	r1, sp, #41	@ 0x29
 80021c4:	2000      	movs	r0, #0
 80021c6:	47a8      	blx	r5
 80021c8:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 80021cc:	2800      	cmp	r0, #0
 80021ce:	d174      	bne.n	80022ba <bme68x_init+0x266>
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 80021d0:	f89d 301c 	ldrb.w	r3, [sp, #28]
        dev->calib.par_t1 =
 80021d4:	f8bd 0023 	ldrh.w	r0, [sp, #35]	@ 0x23
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 80021d8:	f89d 501d 	ldrb.w	r5, [sp, #29]
        dev->calib.par_t1 =
 80021dc:	83e0      	strh	r0, [r4, #30]
        dev->calib.par_t2 =
 80021de:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80021e2:	8420      	strh	r0, [r4, #32]
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 80021e4:	f003 020f 	and.w	r2, r3, #15
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 80021e8:	f89d 0006 	ldrb.w	r0, [sp, #6]
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 80021ec:	f8bd 1012 	ldrh.w	r1, [sp, #18]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 80021f0:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 80021f4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
        dev->calib.par_p1 =
 80021f8:	9802      	ldr	r0, [sp, #8]
 80021fa:	6260      	str	r0, [r4, #36]	@ 0x24
        dev->calib.par_h1 =
 80021fc:	8222      	strh	r2, [r4, #16]
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 80021fe:	f89d 000c 	ldrb.w	r0, [sp, #12]
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8002202:	f89d 201b 	ldrb.w	r2, [sp, #27]
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8002206:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 800220a:	ba49      	rev16	r1, r1
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 800220c:	f8dd 000e 	ldr.w	r0, [sp, #14]
        dev->calib.par_p4 =
 8002210:	f8c4 002a 	str.w	r0, [r4, #42]	@ 0x2a
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8002214:	091b      	lsrs	r3, r3, #4
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 8002216:	f8dd 0016 	ldr.w	r0, [sp, #22]
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 800221a:	85e1      	strh	r1, [r4, #46]	@ 0x2e
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 800221c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 8002220:	f89d 101a 	ldrb.w	r1, [sp, #26]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8002224:	f8bd 201e 	ldrh.w	r2, [sp, #30]
        dev->calib.par_p8 =
 8002228:	6320      	str	r0, [r4, #48]	@ 0x30
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 800222a:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 800222e:	f8bd 0020 	ldrh.w	r0, [sp, #32]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8002232:	f89d 1022 	ldrb.w	r1, [sp, #34]	@ 0x22
        dev->calib.par_h2 =
 8002236:	8263      	strh	r3, [r4, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8002238:	82a2      	strh	r2, [r4, #20]
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 800223a:	f8bd 3025 	ldrh.w	r3, [sp, #37]	@ 0x25
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 800223e:	f89d 2027 	ldrb.w	r2, [sp, #39]	@ 0x27
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8002242:	82e0      	strh	r0, [r4, #22]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8002244:	7621      	strb	r1, [r4, #24]
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8002246:	7662      	strb	r2, [r4, #25]
        dev->calib.par_gh2 =
 8002248:	8363      	strh	r3, [r4, #26]
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 800224a:	f89d 202b 	ldrb.w	r2, [sp, #43]	@ 0x2b
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 800224e:	f99d 302d 	ldrsb.w	r3, [sp, #45]	@ 0x2d
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8002252:	f89d 0028 	ldrb.w	r0, [sp, #40]	@ 0x28
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8002256:	f89d 1029 	ldrb.w	r1, [sp, #41]	@ 0x29
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 800225a:	7720      	strb	r0, [r4, #28]
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 800225c:	f3c2 1201 	ubfx	r2, r2, #4, #2
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8002260:	111b      	asrs	r3, r3, #4
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8002262:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8002266:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 800226a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800226e:	2500      	movs	r5, #0
}
 8002270:	4628      	mov	r0, r5
 8002272:	b00c      	add	sp, #48	@ 0x30
 8002274:	bd70      	pop	{r4, r5, r6, pc}
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8002276:	6843      	ldr	r3, [r0, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	a901      	add	r1, sp, #4
 800227c:	20f3      	movs	r0, #243	@ 0xf3
 800227e:	47a8      	blx	r5
 8002280:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8002284:	b9c8      	cbnz	r0, 80022ba <bme68x_init+0x266>
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 8002286:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	7363      	strb	r3, [r4, #13]
        if (rslt == BME68X_OK)
 8002290:	e6fc      	b.n	800208c <bme68x_init+0x38>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002292:	b355      	cbz	r5, 80022ea <bme68x_init+0x296>
 8002294:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002296:	b343      	cbz	r3, 80022ea <bme68x_init+0x296>
 8002298:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800229a:	b333      	cbz	r3, 80022ea <bme68x_init+0x296>
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 800229c:	6863      	ldr	r3, [r4, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	a901      	add	r1, sp, #4
 80022a2:	20f3      	movs	r0, #243	@ 0xf3
 80022a4:	47a8      	blx	r5
 80022a6:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 80022aa:	b930      	cbnz	r0, 80022ba <bme68x_init+0x266>
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 80022ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80022b0:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	7363      	strb	r3, [r4, #13]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80022b8:	e6fd      	b.n	80020b6 <bme68x_init+0x62>
            rslt = BME68X_E_COM_FAIL;
 80022ba:	f06f 0501 	mvn.w	r5, #1
 80022be:	e7d7      	b.n	8002270 <bme68x_init+0x21c>
            rslt = set_mem_page(reg_addr, dev);
 80022c0:	4621      	mov	r1, r4
 80022c2:	20d0      	movs	r0, #208	@ 0xd0
 80022c4:	f7ff fe16 	bl	8001ef4 <set_mem_page>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80022c8:	6863      	ldr	r3, [r4, #4]
 80022ca:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 80022cc:	2201      	movs	r2, #1
            rslt = set_mem_page(reg_addr, dev);
 80022ce:	4605      	mov	r5, r0
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80022d0:	4621      	mov	r1, r4
 80022d2:	20d0      	movs	r0, #208	@ 0xd0
 80022d4:	47b0      	blx	r6
 80022d6:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 80022da:	2800      	cmp	r0, #0
 80022dc:	d1ed      	bne.n	80022ba <bme68x_init+0x266>
        if (rslt == BME68X_OK)
 80022de:	2d00      	cmp	r5, #0
 80022e0:	f43f af02 	beq.w	80020e8 <bme68x_init+0x94>
}
 80022e4:	4628      	mov	r0, r5
 80022e6:	b00c      	add	sp, #48	@ 0x30
 80022e8:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BME68X_E_NULL_PTR;
 80022ea:	f04f 35ff 	mov.w	r5, #4294967295
                if (rslt == BME68X_OK)
 80022ee:	e7bf      	b.n	8002270 <bme68x_init+0x21c>
            rslt = set_mem_page(reg_addr, dev);
 80022f0:	4621      	mov	r1, r4
 80022f2:	20f0      	movs	r0, #240	@ 0xf0
 80022f4:	f7ff fdfe 	bl	8001ef4 <set_mem_page>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80022f8:	ae01      	add	r6, sp, #4
 80022fa:	6863      	ldr	r3, [r4, #4]
 80022fc:	f8d4 c040 	ldr.w	ip, [r4, #64]	@ 0x40
            rslt = set_mem_page(reg_addr, dev);
 8002300:	4605      	mov	r5, r0
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8002302:	2201      	movs	r2, #1
 8002304:	4631      	mov	r1, r6
 8002306:	20f0      	movs	r0, #240	@ 0xf0
 8002308:	47e0      	blx	ip
 800230a:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 800230e:	2800      	cmp	r0, #0
 8002310:	d1d3      	bne.n	80022ba <bme68x_init+0x266>
    if (rslt == BME68X_OK)
 8002312:	2d00      	cmp	r5, #0
 8002314:	d1ac      	bne.n	8002270 <bme68x_init+0x21c>
 8002316:	e709      	b.n	800212c <bme68x_init+0xd8>
            rslt = set_mem_page(reg_addr, dev);
 8002318:	4621      	mov	r1, r4
 800231a:	208a      	movs	r0, #138	@ 0x8a
 800231c:	f7ff fdea 	bl	8001ef4 <set_mem_page>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8002320:	4631      	mov	r1, r6
 8002322:	6863      	ldr	r3, [r4, #4]
 8002324:	6c26      	ldr	r6, [r4, #64]	@ 0x40
            rslt = set_mem_page(reg_addr, dev);
 8002326:	4605      	mov	r5, r0
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8002328:	2217      	movs	r2, #23
 800232a:	208a      	movs	r0, #138	@ 0x8a
 800232c:	47b0      	blx	r6
 800232e:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8002332:	2800      	cmp	r0, #0
 8002334:	d1c1      	bne.n	80022ba <bme68x_init+0x266>
    if (rslt == BME68X_OK)
 8002336:	2d00      	cmp	r5, #0
 8002338:	d19a      	bne.n	8002270 <bme68x_init+0x21c>
 800233a:	e714      	b.n	8002166 <bme68x_init+0x112>
                rslt = BME68X_E_DEV_NOT_FOUND;
 800233c:	f06f 0502 	mvn.w	r5, #2
    return rslt;
 8002340:	e796      	b.n	8002270 <bme68x_init+0x21c>
            rslt = set_mem_page(reg_addr, dev);
 8002342:	4621      	mov	r1, r4
 8002344:	20e1      	movs	r0, #225	@ 0xe1
 8002346:	f7ff fdd5 	bl	8001ef4 <set_mem_page>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800234a:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 800234c:	6863      	ldr	r3, [r4, #4]
 800234e:	220e      	movs	r2, #14
            rslt = set_mem_page(reg_addr, dev);
 8002350:	4605      	mov	r5, r0
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8002352:	f10d 011b 	add.w	r1, sp, #27
 8002356:	20e1      	movs	r0, #225	@ 0xe1
 8002358:	47b0      	blx	r6
 800235a:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 800235e:	2800      	cmp	r0, #0
 8002360:	d1ab      	bne.n	80022ba <bme68x_init+0x266>
    if (rslt == BME68X_OK)
 8002362:	2d00      	cmp	r5, #0
 8002364:	d184      	bne.n	8002270 <bme68x_init+0x21c>
 8002366:	e719      	b.n	800219c <bme68x_init+0x148>
            rslt = set_mem_page(reg_addr, dev);
 8002368:	4621      	mov	r1, r4
 800236a:	f7ff fdc3 	bl	8001ef4 <set_mem_page>
 800236e:	4605      	mov	r5, r0
            if (rslt == BME68X_OK)
 8002370:	fab0 f080 	clz	r0, r0
 8002374:	0940      	lsrs	r0, r0, #5
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8002376:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8002378:	6863      	ldr	r3, [r4, #4]
 800237a:	01c0      	lsls	r0, r0, #7
 800237c:	2205      	movs	r2, #5
 800237e:	f10d 0129 	add.w	r1, sp, #41	@ 0x29
 8002382:	47b0      	blx	r6
 8002384:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8002388:	2800      	cmp	r0, #0
 800238a:	d196      	bne.n	80022ba <bme68x_init+0x266>
    if (rslt == BME68X_OK)
 800238c:	2d00      	cmp	r5, #0
 800238e:	f47f af6f 	bne.w	8002270 <bme68x_init+0x21c>
 8002392:	e71d      	b.n	80021d0 <bme68x_init+0x17c>

08002394 <bme68x_set_regs>:
{
 8002394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002398:	b089      	sub	sp, #36	@ 0x24
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 800239a:	2500      	movs	r5, #0
 800239c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80023a0:	e9cd 5505 	strd	r5, r5, [sp, #20]
 80023a4:	9507      	str	r5, [sp, #28]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 816a 	beq.w	8002680 <bme68x_set_regs+0x2ec>
 80023ac:	461c      	mov	r4, r3
 80023ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 8165 	beq.w	8002680 <bme68x_set_regs+0x2ec>
 80023b6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 8161 	beq.w	8002680 <bme68x_set_regs+0x2ec>
 80023be:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 815d 	beq.w	8002680 <bme68x_set_regs+0x2ec>
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 80023c6:	4682      	mov	sl, r0
 80023c8:	2800      	cmp	r0, #0
 80023ca:	f000 8159 	beq.w	8002680 <bme68x_set_regs+0x2ec>
 80023ce:	468b      	mov	fp, r1
 80023d0:	2900      	cmp	r1, #0
 80023d2:	f000 8155 	beq.w	8002680 <bme68x_set_regs+0x2ec>
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 80023d6:	1e53      	subs	r3, r2, #1
 80023d8:	2b09      	cmp	r3, #9
 80023da:	4691      	mov	r9, r2
 80023dc:	f200 815b 	bhi.w	8002696 <bme68x_set_regs+0x302>
    int8_t rslt = BME68X_OK;
 80023e0:	4628      	mov	r0, r5
 80023e2:	f10a 38ff 	add.w	r8, sl, #4294967295
 80023e6:	ae03      	add	r6, sp, #12
 80023e8:	1e4f      	subs	r7, r1, #1
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 80023ea:	2501      	movs	r5, #1
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80023ec:	f8cd a004 	str.w	sl, [sp, #4]
                if (dev->intf == BME68X_SPI_INTF)
 80023f0:	7b21      	ldrb	r1, [r4, #12]
                    rslt = set_mem_page(reg_addr[index], dev);
 80023f2:	f818 3f01 	ldrb.w	r3, [r8, #1]!
                if (dev->intf == BME68X_SPI_INTF)
 80023f6:	2900      	cmp	r1, #0
 80023f8:	f000 8089 	beq.w	800250e <bme68x_set_regs+0x17a>
                tmp_buff[(2 * index) + 1] = reg_data[index];
 80023fc:	787a      	ldrb	r2, [r7, #1]
 80023fe:	f8dd a004 	ldr.w	sl, [sp, #4]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002402:	7033      	strb	r3, [r6, #0]
            for (index = 0; index < len; index++)
 8002404:	45a9      	cmp	r9, r5
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002406:	7072      	strb	r2, [r6, #1]
            for (index = 0; index < len; index++)
 8002408:	b2a9      	uxth	r1, r5
 800240a:	f000 80cb 	beq.w	80025a4 <bme68x_set_regs+0x210>
                tmp_buff[(2 * index) + 1] = reg_data[index];
 800240e:	aa08      	add	r2, sp, #32
 8002410:	1c6b      	adds	r3, r5, #1
 8002412:	eb02 0245 	add.w	r2, r2, r5, lsl #1
 8002416:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800241a:	f802 6c13 	strb.w	r6, [r2, #-19]
            for (index = 0; index < len; index++)
 800241e:	4599      	cmp	r9, r3
 8002420:	f240 80bc 	bls.w	800259c <bme68x_set_regs+0x208>
 8002424:	1c4e      	adds	r6, r1, #1
 8002426:	b2b6      	uxth	r6, r6
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002428:	af08      	add	r7, sp, #32
 800242a:	eb07 0e46 	add.w	lr, r7, r6, lsl #1
 800242e:	f81b 8003 	ldrb.w	r8, [fp, r3]
 8002432:	f80e 8c13 	strb.w	r8, [lr, #-19]
 8002436:	0077      	lsls	r7, r6, #1
            for (index = 0; index < len; index++)
 8002438:	1c8e      	adds	r6, r1, #2
 800243a:	fa1f fe86 	uxth.w	lr, r6
 800243e:	45f1      	cmp	r9, lr
 8002440:	f240 80c6 	bls.w	80025d0 <bme68x_set_regs+0x23c>
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002444:	f10d 0c20 	add.w	ip, sp, #32
 8002448:	eb0c 084e 	add.w	r8, ip, lr, lsl #1
 800244c:	f81b e00e 	ldrb.w	lr, [fp, lr]
 8002450:	f808 ec13 	strb.w	lr, [r8, #-19]
            for (index = 0; index < len; index++)
 8002454:	f101 0e03 	add.w	lr, r1, #3
 8002458:	fa1f f88e 	uxth.w	r8, lr
 800245c:	45c1      	cmp	r9, r8
 800245e:	f240 80b7 	bls.w	80025d0 <bme68x_set_regs+0x23c>
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002462:	eb0c 0c48 	add.w	ip, ip, r8, lsl #1
 8002466:	f81b 8008 	ldrb.w	r8, [fp, r8]
 800246a:	f80c 8c13 	strb.w	r8, [ip, #-19]
            for (index = 0; index < len; index++)
 800246e:	f101 0804 	add.w	r8, r1, #4
 8002472:	fa1f f888 	uxth.w	r8, r8
 8002476:	45c1      	cmp	r9, r8
 8002478:	f240 80aa 	bls.w	80025d0 <bme68x_set_regs+0x23c>
                tmp_buff[(2 * index) + 1] = reg_data[index];
 800247c:	f10d 0c20 	add.w	ip, sp, #32
 8002480:	eb0c 0c48 	add.w	ip, ip, r8, lsl #1
 8002484:	f81b 8008 	ldrb.w	r8, [fp, r8]
 8002488:	f80c 8c13 	strb.w	r8, [ip, #-19]
            for (index = 0; index < len; index++)
 800248c:	f101 0805 	add.w	r8, r1, #5
 8002490:	fa1f f888 	uxth.w	r8, r8
 8002494:	45c1      	cmp	r9, r8
 8002496:	f240 809b 	bls.w	80025d0 <bme68x_set_regs+0x23c>
                tmp_buff[(2 * index) + 1] = reg_data[index];
 800249a:	f10d 0c20 	add.w	ip, sp, #32
 800249e:	eb0c 0c48 	add.w	ip, ip, r8, lsl #1
 80024a2:	f81b 8008 	ldrb.w	r8, [fp, r8]
 80024a6:	f80c 8c13 	strb.w	r8, [ip, #-19]
            for (index = 0; index < len; index++)
 80024aa:	f101 0806 	add.w	r8, r1, #6
 80024ae:	fa1f f888 	uxth.w	r8, r8
 80024b2:	45c1      	cmp	r9, r8
 80024b4:	f240 808c 	bls.w	80025d0 <bme68x_set_regs+0x23c>
                tmp_buff[(2 * index) + 1] = reg_data[index];
 80024b8:	f10d 0c20 	add.w	ip, sp, #32
 80024bc:	eb0c 0c48 	add.w	ip, ip, r8, lsl #1
 80024c0:	f81b 8008 	ldrb.w	r8, [fp, r8]
 80024c4:	f80c 8c13 	strb.w	r8, [ip, #-19]
            for (index = 0; index < len; index++)
 80024c8:	f101 0807 	add.w	r8, r1, #7
 80024cc:	fa1f f888 	uxth.w	r8, r8
 80024d0:	45c1      	cmp	r9, r8
 80024d2:	d97d      	bls.n	80025d0 <bme68x_set_regs+0x23c>
                tmp_buff[(2 * index) + 1] = reg_data[index];
 80024d4:	f10d 0c20 	add.w	ip, sp, #32
 80024d8:	eb0c 0c48 	add.w	ip, ip, r8, lsl #1
 80024dc:	f81b 8008 	ldrb.w	r8, [fp, r8]
 80024e0:	f80c 8c13 	strb.w	r8, [ip, #-19]
            for (index = 0; index < len; index++)
 80024e4:	f101 0808 	add.w	r8, r1, #8
 80024e8:	fa1f f888 	uxth.w	r8, r8
 80024ec:	45c1      	cmp	r9, r8
 80024ee:	d96f      	bls.n	80025d0 <bme68x_set_regs+0x23c>
                tmp_buff[(2 * index) + 1] = reg_data[index];
 80024f0:	f89b 6009 	ldrb.w	r6, [fp, #9]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 80024f4:	f81a 5005 	ldrb.w	r5, [sl, r5]
 80024f8:	f81a 3003 	ldrb.w	r3, [sl, r3]
                tmp_buff[(2 * index) + 1] = reg_data[index];
 80024fc:	f88d 601f 	strb.w	r6, [sp, #31]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002500:	f802 5c14 	strb.w	r5, [r2, #-20]
            for (index = 0; index < len; index++)
 8002504:	2203      	movs	r2, #3
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002506:	f88d 3010 	strb.w	r3, [sp, #16]
            for (index = 0; index < len; index++)
 800250a:	4613      	mov	r3, r2
 800250c:	e070      	b.n	80025f0 <bme68x_set_regs+0x25c>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800250e:	f8d4 a040 	ldr.w	sl, [r4, #64]	@ 0x40
 8002512:	f1ba 0f00 	cmp.w	sl, #0
 8002516:	f000 80b0 	beq.w	800267a <bme68x_set_regs+0x2e6>
 800251a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800251c:	2a00      	cmp	r2, #0
 800251e:	f000 80ac 	beq.w	800267a <bme68x_set_regs+0x2e6>
 8002522:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002524:	2a00      	cmp	r2, #0
 8002526:	f000 80a8 	beq.w	800267a <bme68x_set_regs+0x2e6>
        if (mem_page != dev->mem_page)
 800252a:	7b60      	ldrb	r0, [r4, #13]
        if (reg_addr > 0x7f)
 800252c:	43da      	mvns	r2, r3
 800252e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
        if (mem_page != dev->mem_page)
 8002532:	ebb0 1f02 	cmp.w	r0, r2, lsl #4
        if (reg_addr > 0x7f)
 8002536:	ea4f 1c02 	mov.w	ip, r2, lsl #4
        if (mem_page != dev->mem_page)
 800253a:	d047      	beq.n	80025cc <bme68x_set_regs+0x238>
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 800253c:	6863      	ldr	r3, [r4, #4]
            dev->mem_page = mem_page;
 800253e:	f884 c00d 	strb.w	ip, [r4, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8002542:	2201      	movs	r2, #1
 8002544:	f10d 010b 	add.w	r1, sp, #11
 8002548:	20f3      	movs	r0, #243	@ 0xf3
 800254a:	47d0      	blx	sl
 800254c:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
            if (dev->intf_rslt != 0)
 8002550:	2800      	cmp	r0, #0
 8002552:	f040 809b 	bne.w	800268c <bme68x_set_regs+0x2f8>
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8002556:	f89d 300b 	ldrb.w	r3, [sp, #11]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 800255a:	7b62      	ldrb	r2, [r4, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 800255c:	f8d4 c044 	ldr.w	ip, [r4, #68]	@ 0x44
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8002560:	f002 0210 	and.w	r2, r2, #16
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8002564:	f023 0310 	bic.w	r3, r3, #16
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8002568:	4313      	orrs	r3, r2
 800256a:	f88d 300b 	strb.w	r3, [sp, #11]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 800256e:	2201      	movs	r2, #1
 8002570:	6863      	ldr	r3, [r4, #4]
 8002572:	f10d 010b 	add.w	r1, sp, #11
 8002576:	2073      	movs	r0, #115	@ 0x73
 8002578:	47e0      	blx	ip
 800257a:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 800257e:	f898 3000 	ldrb.w	r3, [r8]
                if (dev->intf_rslt != 0)
 8002582:	2800      	cmp	r0, #0
 8002584:	d17f      	bne.n	8002686 <bme68x_set_regs+0x2f2>
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800258a:	7033      	strb	r3, [r6, #0]
            for (index = 0; index < len; index++)
 800258c:	45a9      	cmp	r9, r5
                tmp_buff[(2 * index) + 1] = reg_data[index];
 800258e:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8002592:	7073      	strb	r3, [r6, #1]
            for (index = 0; index < len; index++)
 8002594:	d006      	beq.n	80025a4 <bme68x_set_regs+0x210>
 8002596:	3501      	adds	r5, #1
 8002598:	3602      	adds	r6, #2
 800259a:	e729      	b.n	80023f0 <bme68x_set_regs+0x5c>
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 800259c:	f81a 3005 	ldrb.w	r3, [sl, r5]
 80025a0:	f802 3c14 	strb.w	r3, [r2, #-20]
            if (rslt == BME68X_OK)
 80025a4:	b978      	cbnz	r0, 80025c6 <bme68x_set_regs+0x232>
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 80025a6:	ea4f 0249 	mov.w	r2, r9, lsl #1
 80025aa:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 80025ac:	6863      	ldr	r3, [r4, #4]
 80025ae:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80025b2:	3a01      	subs	r2, #1
 80025b4:	f10d 010d 	add.w	r1, sp, #13
 80025b8:	47a8      	blx	r5
                    rslt = BME68X_E_COM_FAIL;
 80025ba:	2800      	cmp	r0, #0
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 80025bc:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
                    rslt = BME68X_E_COM_FAIL;
 80025c0:	bf18      	it	ne
 80025c2:	f06f 0001 	mvnne.w	r0, #1
}
 80025c6:	b009      	add	sp, #36	@ 0x24
 80025c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int8_t rslt = BME68X_OK;
 80025cc:	4608      	mov	r0, r1
 80025ce:	e7da      	b.n	8002586 <bme68x_set_regs+0x1f2>
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 80025d0:	3720      	adds	r7, #32
 80025d2:	446f      	add	r7, sp
 80025d4:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80025d8:	f81a 5005 	ldrb.w	r5, [sl, r5]
 80025dc:	f802 5c14 	strb.w	r5, [r2, #-20]
 80025e0:	f807 3c14 	strb.w	r3, [r7, #-20]
            for (index = 0; index < len; index++)
 80025e4:	b2b3      	uxth	r3, r6
 80025e6:	4599      	cmp	r9, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	d9db      	bls.n	80025a4 <bme68x_set_regs+0x210>
 80025ec:	f101 0e03 	add.w	lr, r1, #3
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 80025f0:	ad08      	add	r5, sp, #32
 80025f2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
            for (index = 0; index < len; index++)
 80025f6:	fa1f fe8e 	uxth.w	lr, lr
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 80025fa:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80025fe:	f803 2c14 	strb.w	r2, [r3, #-20]
            for (index = 0; index < len; index++)
 8002602:	45f1      	cmp	r9, lr
 8002604:	d9ce      	bls.n	80025a4 <bme68x_set_regs+0x210>
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002606:	eb05 034e 	add.w	r3, r5, lr, lsl #1
 800260a:	f81a 200e 	ldrb.w	r2, [sl, lr]
 800260e:	f803 2c14 	strb.w	r2, [r3, #-20]
            for (index = 0; index < len; index++)
 8002612:	1d0b      	adds	r3, r1, #4
 8002614:	b29b      	uxth	r3, r3
 8002616:	4599      	cmp	r9, r3
 8002618:	d9c4      	bls.n	80025a4 <bme68x_set_regs+0x210>
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 800261a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 800261e:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8002622:	f802 3c14 	strb.w	r3, [r2, #-20]
            for (index = 0; index < len; index++)
 8002626:	1d4b      	adds	r3, r1, #5
 8002628:	b29b      	uxth	r3, r3
 800262a:	4599      	cmp	r9, r3
 800262c:	d9ba      	bls.n	80025a4 <bme68x_set_regs+0x210>
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 800262e:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 8002632:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8002636:	f802 3c14 	strb.w	r3, [r2, #-20]
            for (index = 0; index < len; index++)
 800263a:	1d8b      	adds	r3, r1, #6
 800263c:	b29b      	uxth	r3, r3
 800263e:	4599      	cmp	r9, r3
 8002640:	d9b0      	bls.n	80025a4 <bme68x_set_regs+0x210>
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002642:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 8002646:	f81a 3003 	ldrb.w	r3, [sl, r3]
 800264a:	f802 3c14 	strb.w	r3, [r2, #-20]
            for (index = 0; index < len; index++)
 800264e:	1dcb      	adds	r3, r1, #7
 8002650:	b29b      	uxth	r3, r3
 8002652:	4599      	cmp	r9, r3
 8002654:	d9a6      	bls.n	80025a4 <bme68x_set_regs+0x210>
 8002656:	f101 0208 	add.w	r2, r1, #8
 800265a:	b292      	uxth	r2, r2
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 800265c:	eb05 0143 	add.w	r1, r5, r3, lsl #1
            for (index = 0; index < len; index++)
 8002660:	4591      	cmp	r9, r2
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002662:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8002666:	f801 3c14 	strb.w	r3, [r1, #-20]
 800266a:	bf84      	itt	hi
 800266c:	f89a 3009 	ldrbhi.w	r3, [sl, #9]
 8002670:	f88d 301e 	strbhi.w	r3, [sp, #30]
            if (rslt == BME68X_OK)
 8002674:	2800      	cmp	r0, #0
 8002676:	d1a6      	bne.n	80025c6 <bme68x_set_regs+0x232>
 8002678:	e795      	b.n	80025a6 <bme68x_set_regs+0x212>
        rslt = BME68X_E_NULL_PTR;
 800267a:	f04f 30ff 	mov.w	r0, #4294967295
 800267e:	e782      	b.n	8002586 <bme68x_set_regs+0x1f2>
        rslt = BME68X_E_NULL_PTR;
 8002680:	f04f 30ff 	mov.w	r0, #4294967295
 8002684:	e79f      	b.n	80025c6 <bme68x_set_regs+0x232>
                rslt = BME68X_E_COM_FAIL;
 8002686:	f06f 0001 	mvn.w	r0, #1
 800268a:	e77c      	b.n	8002586 <bme68x_set_regs+0x1f2>
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 800268c:	f898 3000 	ldrb.w	r3, [r8]
                rslt = BME68X_E_COM_FAIL;
 8002690:	f06f 0001 	mvn.w	r0, #1
 8002694:	e777      	b.n	8002586 <bme68x_set_regs+0x1f2>
            rslt = BME68X_E_INVALID_LENGTH;
 8002696:	f06f 0003 	mvn.w	r0, #3
 800269a:	e794      	b.n	80025c6 <bme68x_set_regs+0x232>

0800269c <bme68x_set_op_mode>:
{
 800269c:	b570      	push	{r4, r5, r6, lr}
 800269e:	b082      	sub	sp, #8
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 80026a0:	2374      	movs	r3, #116	@ 0x74
 80026a2:	f88d 3007 	strb.w	r3, [sp, #7]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80026a6:	2900      	cmp	r1, #0
 80026a8:	d049      	beq.n	800273e <bme68x_set_op_mode+0xa2>
 80026aa:	4606      	mov	r6, r0
 80026ac:	460c      	mov	r4, r1
 80026ae:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 80026b0:	2074      	movs	r0, #116	@ 0x74
 80026b2:	2d00      	cmp	r5, #0
 80026b4:	d043      	beq.n	800273e <bme68x_set_op_mode+0xa2>
 80026b6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d040      	beq.n	800273e <bme68x_set_op_mode+0xa2>
 80026bc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d03d      	beq.n	800273e <bme68x_set_op_mode+0xa2>
        if (dev->intf == BME68X_SPI_INTF)
 80026c2:	7b23      	ldrb	r3, [r4, #12]
 80026c4:	b31b      	cbz	r3, 800270e <bme68x_set_op_mode+0x72>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80026c6:	2201      	movs	r2, #1
 80026c8:	f10d 0106 	add.w	r1, sp, #6
 80026cc:	6863      	ldr	r3, [r4, #4]
 80026ce:	47a8      	blx	r5
 80026d0:	4605      	mov	r5, r0
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80026d2:	f10d 0106 	add.w	r1, sp, #6
 80026d6:	4622      	mov	r2, r4
 80026d8:	f10d 0007 	add.w	r0, sp, #7
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80026dc:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 80026e0:	bb45      	cbnz	r5, 8002734 <bme68x_set_op_mode+0x98>
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 80026e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
            if (pow_mode != BME68X_SLEEP_MODE)
 80026e6:	f013 0f03 	tst.w	r3, #3
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 80026ea:	f023 0c03 	bic.w	ip, r3, #3
            if (pow_mode != BME68X_SLEEP_MODE)
 80026ee:	d029      	beq.n	8002744 <bme68x_set_op_mode+0xa8>
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 80026f0:	f88d c006 	strb.w	ip, [sp, #6]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80026f4:	f7ff fc3c 	bl	8001f70 <bme68x_set_regs.constprop.0>
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 80026f8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80026fa:	6861      	ldr	r1, [r4, #4]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80026fc:	4605      	mov	r5, r0
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 80026fe:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002702:	4798      	blx	r3
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 8002704:	2d00      	cmp	r5, #0
 8002706:	d0d2      	beq.n	80026ae <bme68x_set_op_mode+0x12>
}
 8002708:	4628      	mov	r0, r5
 800270a:	b002      	add	sp, #8
 800270c:	bd70      	pop	{r4, r5, r6, pc}
            rslt = set_mem_page(reg_addr, dev);
 800270e:	4621      	mov	r1, r4
 8002710:	f7ff fbf0 	bl	8001ef4 <set_mem_page>
            if (rslt == BME68X_OK)
 8002714:	4605      	mov	r5, r0
 8002716:	b910      	cbnz	r0, 800271e <bme68x_set_op_mode+0x82>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8002718:	6c25      	ldr	r5, [r4, #64]	@ 0x40
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 800271a:	20f4      	movs	r0, #244	@ 0xf4
 800271c:	e7d3      	b.n	80026c6 <bme68x_set_op_mode+0x2a>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800271e:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8002720:	6863      	ldr	r3, [r4, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f10d 0106 	add.w	r1, sp, #6
 8002728:	2074      	movs	r0, #116	@ 0x74
 800272a:	47b0      	blx	r6
 800272c:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8002730:	2800      	cmp	r0, #0
 8002732:	d0e9      	beq.n	8002708 <bme68x_set_op_mode+0x6c>
            rslt = BME68X_E_COM_FAIL;
 8002734:	f06f 0501 	mvn.w	r5, #1
}
 8002738:	4628      	mov	r0, r5
 800273a:	b002      	add	sp, #8
 800273c:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BME68X_E_NULL_PTR;
 800273e:	f04f 35ff 	mov.w	r5, #4294967295
    return rslt;
 8002742:	e7e1      	b.n	8002708 <bme68x_set_op_mode+0x6c>
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8002744:	2e00      	cmp	r6, #0
 8002746:	d0df      	beq.n	8002708 <bme68x_set_op_mode+0x6c>
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 8002748:	f023 0303 	bic.w	r3, r3, #3
 800274c:	f006 0603 	and.w	r6, r6, #3
 8002750:	4333      	orrs	r3, r6
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8002752:	4622      	mov	r2, r4
 8002754:	f10d 0106 	add.w	r1, sp, #6
 8002758:	f10d 0007 	add.w	r0, sp, #7
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 800275c:	f88d 3006 	strb.w	r3, [sp, #6]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8002760:	f7ff fc06 	bl	8001f70 <bme68x_set_regs.constprop.0>
 8002764:	4605      	mov	r5, r0
 8002766:	e7cf      	b.n	8002708 <bme68x_set_op_mode+0x6c>

08002768 <bme68x_set_conf>:
{
 8002768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 800276c:	4bc3      	ldr	r3, [pc, #780]	@ (8002a7c <bme68x_set_conf+0x314>)
{
 800276e:	4606      	mov	r6, r0
 8002770:	460c      	mov	r4, r1
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8002772:	e893 0003 	ldmia.w	r3, {r0, r1}
{
 8002776:	b08b      	sub	sp, #44	@ 0x2c
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8002778:	2300      	movs	r3, #0
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 800277a:	9001      	str	r0, [sp, #4]
 800277c:	f88d 1008 	strb.w	r1, [sp, #8]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8002780:	9303      	str	r3, [sp, #12]
 8002782:	f88d 3010 	strb.w	r3, [sp, #16]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002786:	2c00      	cmp	r4, #0
 8002788:	f000 8160 	beq.w	8002a4c <bme68x_set_conf+0x2e4>
 800278c:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800278e:	2d00      	cmp	r5, #0
 8002790:	f000 81e6 	beq.w	8002b60 <bme68x_set_conf+0x3f8>
 8002794:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 81e2 	beq.w	8002b60 <bme68x_set_conf+0x3f8>
 800279c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 81de 	beq.w	8002b60 <bme68x_set_conf+0x3f8>
        if (dev->intf == BME68X_SPI_INTF)
 80027a4:	7b23      	ldrb	r3, [r4, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 8139 	beq.w	8002a1e <bme68x_set_conf+0x2b6>
 80027ac:	2074      	movs	r0, #116	@ 0x74
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80027ae:	6863      	ldr	r3, [r4, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	a905      	add	r1, sp, #20
 80027b4:	47a8      	blx	r5
 80027b6:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 80027ba:	b140      	cbz	r0, 80027ce <bme68x_set_conf+0x66>
            rslt = BME68X_E_COM_FAIL;
 80027bc:	f06f 0501 	mvn.w	r5, #1
    if (conf == NULL)
 80027c0:	2e00      	cmp	r6, #0
 80027c2:	f000 8143 	beq.w	8002a4c <bme68x_set_conf+0x2e4>
}
 80027c6:	4628      	mov	r0, r5
 80027c8:	b00b      	add	sp, #44	@ 0x2c
 80027ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 80027ce:	4621      	mov	r1, r4
        *op_mode = mode & BME68X_MODE_MSK;
 80027d0:	f89d 8014 	ldrb.w	r8, [sp, #20]
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 80027d4:	f7ff ff62 	bl	800269c <bme68x_set_op_mode>
 80027d8:	4605      	mov	r5, r0
    if (conf == NULL)
 80027da:	2e00      	cmp	r6, #0
 80027dc:	f000 8136 	beq.w	8002a4c <bme68x_set_conf+0x2e4>
    else if (rslt == BME68X_OK)
 80027e0:	2d00      	cmp	r5, #0
 80027e2:	d1f0      	bne.n	80027c6 <bme68x_set_conf+0x5e>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80027e4:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 80027e6:	2d00      	cmp	r5, #0
 80027e8:	f000 82d6 	beq.w	8002d98 <bme68x_set_conf+0x630>
 80027ec:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 82d2 	beq.w	8002d98 <bme68x_set_conf+0x630>
 80027f4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 82ce 	beq.w	8002d98 <bme68x_set_conf+0x630>
        if (dev->intf == BME68X_SPI_INTF)
 80027fc:	7b23      	ldrb	r3, [r4, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 8127 	beq.w	8002a52 <bme68x_set_conf+0x2ea>
 8002804:	2071      	movs	r0, #113	@ 0x71
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8002806:	6863      	ldr	r3, [r4, #4]
 8002808:	2205      	movs	r2, #5
 800280a:	a903      	add	r1, sp, #12
 800280c:	47a8      	blx	r5
 800280e:	4607      	mov	r7, r0
 8002810:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8002814:	2800      	cmp	r0, #0
 8002816:	f040 815c 	bne.w	8002ad2 <bme68x_set_conf+0x36a>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800281a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
        dev->info_msg = BME68X_OK;
 800281c:	f884 704d 	strb.w	r7, [r4, #77]	@ 0x4d
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002820:	2d00      	cmp	r5, #0
 8002822:	f000 8113 	beq.w	8002a4c <bme68x_set_conf+0x2e4>
 8002826:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 810f 	beq.w	8002a4c <bme68x_set_conf+0x2e4>
 800282e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 810b 	beq.w	8002a4c <bme68x_set_conf+0x2e4>
        if (*value > max)
 8002836:	78f1      	ldrb	r1, [r6, #3]
 8002838:	2907      	cmp	r1, #7
 800283a:	f200 8121 	bhi.w	8002a80 <bme68x_set_conf+0x318>
 800283e:	f896 c001 	ldrb.w	ip, [r6, #1]
 8002842:	f1bc 0f05 	cmp.w	ip, #5
 8002846:	f200 8132 	bhi.w	8002aae <bme68x_set_conf+0x346>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80fe 	beq.w	8002a4c <bme68x_set_conf+0x2e4>
        if (*value > max)
 8002850:	f896 e002 	ldrb.w	lr, [r6, #2]
 8002854:	f1be 0f05 	cmp.w	lr, #5
 8002858:	d915      	bls.n	8002886 <bme68x_set_conf+0x11e>
            *value = max;
 800285a:	f04f 0e05 	mov.w	lr, #5
 800285e:	f886 e002 	strb.w	lr, [r6, #2]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8002862:	f894 304d 	ldrb.w	r3, [r4, #77]	@ 0x4d
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002866:	6c25      	ldr	r5, [r4, #64]	@ 0x40
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002870:	2d00      	cmp	r5, #0
 8002872:	f000 80eb 	beq.w	8002a4c <bme68x_set_conf+0x2e4>
 8002876:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80e7 	beq.w	8002a4c <bme68x_set_conf+0x2e4>
 800287e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80e3 	beq.w	8002a4c <bme68x_set_conf+0x2e4>
        if (*value > max)
 8002886:	7830      	ldrb	r0, [r6, #0]
 8002888:	2805      	cmp	r0, #5
 800288a:	d913      	bls.n	80028b4 <bme68x_set_conf+0x14c>
            *value = max;
 800288c:	2005      	movs	r0, #5
 800288e:	7030      	strb	r0, [r6, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8002890:	f894 304d 	ldrb.w	r3, [r4, #77]	@ 0x4d
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002894:	6c25      	ldr	r5, [r4, #64]	@ 0x40
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800289e:	2d00      	cmp	r5, #0
 80028a0:	f000 80d4 	beq.w	8002a4c <bme68x_set_conf+0x2e4>
 80028a4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 80d0 	beq.w	8002a4c <bme68x_set_conf+0x2e4>
 80028ac:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 80cc 	beq.w	8002a4c <bme68x_set_conf+0x2e4>
        if (*value > max)
 80028b4:	7933      	ldrb	r3, [r6, #4]
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d908      	bls.n	80028cc <bme68x_set_conf+0x164>
            *value = max;
 80028ba:	2308      	movs	r3, #8
 80028bc:	7133      	strb	r3, [r6, #4]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 80028be:	f894 204d 	ldrb.w	r2, [r4, #77]	@ 0x4d
 80028c2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 80028c4:	f042 0201 	orr.w	r2, r2, #1
 80028c8:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 80028cc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80028d0:	f002 021f 	and.w	r2, r2, #31
 80028d4:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 80028d8:	f022 021c 	bic.w	r2, r2, #28
 80028dc:	ea42 028e 	orr.w	r2, r2, lr, lsl #2
 80028e0:	f88d 200f 	strb.w	r2, [sp, #15]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 80028e4:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80028e8:	f022 0207 	bic.w	r2, r2, #7
 80028ec:	4310      	orrs	r0, r2
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 80028ee:	f89d 2010 	ldrb.w	r2, [sp, #16]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 80028f2:	f88d 000d 	strb.w	r0, [sp, #13]
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 80028f6:	f022 021c 	bic.w	r2, r2, #28
 80028fa:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
            if (conf->odr != BME68X_ODR_NONE)
 80028fe:	2b08      	cmp	r3, #8
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 8002900:	b2d2      	uxtb	r2, r2
            if (conf->odr != BME68X_ODR_NONE)
 8002902:	f000 812a 	beq.w	8002b5a <bme68x_set_conf+0x3f2>
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8002906:	015b      	lsls	r3, r3, #5
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2100      	movs	r1, #0
 800290c:	f002 021f 	and.w	r2, r2, #31
 8002910:	4313      	orrs	r3, r2
 8002912:	f88d 3010 	strb.w	r3, [sp, #16]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8002916:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800291a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800291e:	4319      	orrs	r1, r3
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8002920:	2300      	movs	r3, #0
 8002922:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002926:	e9cd 3307 	strd	r3, r3, [sp, #28]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 800292a:	f88d 100c 	strb.w	r1, [sp, #12]
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 800292e:	9309      	str	r3, [sp, #36]	@ 0x24
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002930:	2d00      	cmp	r5, #0
 8002932:	f000 808b 	beq.w	8002a4c <bme68x_set_conf+0x2e4>
 8002936:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 8002938:	2e00      	cmp	r6, #0
 800293a:	f000 8087 	beq.w	8002a4c <bme68x_set_conf+0x2e4>
 800293e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002940:	2a00      	cmp	r2, #0
 8002942:	f000 8083 	beq.w	8002a4c <bme68x_set_conf+0x2e4>
                if (dev->intf == BME68X_SPI_INTF)
 8002946:	7b22      	ldrb	r2, [r4, #12]
 8002948:	2a00      	cmp	r2, #0
 800294a:	f000 80cb 	beq.w	8002ae4 <bme68x_set_conf+0x37c>
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 800294e:	2271      	movs	r2, #113	@ 0x71
 8002950:	f88d 2014 	strb.w	r2, [sp, #20]
            for (index = 0; index < len; index++)
 8002954:	2201      	movs	r2, #1
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002956:	f88d 1015 	strb.w	r1, [sp, #21]
    int8_t rslt = BME68X_OK;
 800295a:	461d      	mov	r5, r3
            for (index = 0; index < len; index++)
 800295c:	4610      	mov	r0, r2
                tmp_buff[(2 * index) + 1] = reg_data[index];
 800295e:	f100 0328 	add.w	r3, r0, #40	@ 0x28
 8002962:	f102 0129 	add.w	r1, r2, #41	@ 0x29
 8002966:	eb0d 0003 	add.w	r0, sp, r3
 800296a:	eb0d 0601 	add.w	r6, sp, r1
            for (index = 0; index < len; index++)
 800296e:	1c53      	adds	r3, r2, #1
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002970:	a90a      	add	r1, sp, #40	@ 0x28
 8002972:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8002976:	ab0a      	add	r3, sp, #40	@ 0x28
 8002978:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 800297c:	f810 3c1c 	ldrb.w	r3, [r0, #-28]
 8002980:	f807 3c13 	strb.w	r3, [r7, #-19]
            for (index = 0; index < len; index++)
 8002984:	2a03      	cmp	r2, #3
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002986:	f816 3c1c 	ldrb.w	r3, [r6, #-28]
 800298a:	f801 3c13 	strb.w	r3, [r1, #-19]
            for (index = 0; index < len; index++)
 800298e:	f102 0302 	add.w	r3, r2, #2
 8002992:	f000 81f8 	beq.w	8002d86 <bme68x_set_conf+0x61e>
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002996:	f103 0c28 	add.w	ip, r3, #40	@ 0x28
 800299a:	44ec      	add	ip, sp
 800299c:	f10d 0e28 	add.w	lr, sp, #40	@ 0x28
 80029a0:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
 80029a4:	f81c 9c1c 	ldrb.w	r9, [ip, #-28]
 80029a8:	f80e 9c13 	strb.w	r9, [lr, #-19]
            for (index = 0; index < len; index++)
 80029ac:	2a02      	cmp	r2, #2
                tmp_buff[(2 * index) + 1] = reg_data[index];
 80029ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
            for (index = 0; index < len; index++)
 80029b2:	f000 81f5 	beq.w	8002da0 <bme68x_set_conf+0x638>
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 80029b6:	f810 ec24 	ldrb.w	lr, [r0, #-36]
                    tmp_buff[(2 * index)] = reg_addr[index];
 80029ba:	f816 0c24 	ldrb.w	r0, [r6, #-36]
                tmp_buff[(2 * index) + 1] = reg_data[index];
 80029be:	f89d 6010 	ldrb.w	r6, [sp, #16]
 80029c2:	f88d 601d 	strb.w	r6, [sp, #29]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 80029c6:	f807 ec14 	strb.w	lr, [r7, #-20]
 80029ca:	3328      	adds	r3, #40	@ 0x28
 80029cc:	446b      	add	r3, sp
 80029ce:	f801 0c14 	strb.w	r0, [r1, #-20]
            for (index = 0; index < len; index++)
 80029d2:	2a02      	cmp	r2, #2
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 80029d4:	f81c 1c24 	ldrb.w	r1, [ip, #-36]
 80029d8:	f803 1c14 	strb.w	r1, [r3, #-20]
 80029dc:	bf1c      	itt	ne
 80029de:	f89d 3008 	ldrbne.w	r3, [sp, #8]
 80029e2:	f88d 301c 	strbne.w	r3, [sp, #28]
            if (rslt == BME68X_OK)
 80029e6:	2d00      	cmp	r5, #0
 80029e8:	f47f aeed 	bne.w	80027c6 <bme68x_set_conf+0x5e>
 80029ec:	6c66      	ldr	r6, [r4, #68]	@ 0x44
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 80029ee:	6863      	ldr	r3, [r4, #4]
 80029f0:	f89d 0014 	ldrb.w	r0, [sp, #20]
 80029f4:	2209      	movs	r2, #9
 80029f6:	f10d 0115 	add.w	r1, sp, #21
 80029fa:	47b0      	blx	r6
 80029fc:	4605      	mov	r5, r0
 80029fe:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8002a02:	2800      	cmp	r0, #0
 8002a04:	d168      	bne.n	8002ad8 <bme68x_set_conf+0x370>
    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8002a06:	f018 0003 	ands.w	r0, r8, #3
 8002a0a:	f43f aedc 	beq.w	80027c6 <bme68x_set_conf+0x5e>
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8002a0e:	4621      	mov	r1, r4
 8002a10:	f7ff fe44 	bl	800269c <bme68x_set_op_mode>
 8002a14:	4605      	mov	r5, r0
}
 8002a16:	4628      	mov	r0, r5
 8002a18:	b00b      	add	sp, #44	@ 0x2c
 8002a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            rslt = set_mem_page(reg_addr, dev);
 8002a1e:	4621      	mov	r1, r4
 8002a20:	2074      	movs	r0, #116	@ 0x74
 8002a22:	f7ff fa67 	bl	8001ef4 <set_mem_page>
            if (rslt == BME68X_OK)
 8002a26:	4605      	mov	r5, r0
 8002a28:	b910      	cbnz	r0, 8002a30 <bme68x_set_conf+0x2c8>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8002a2a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8002a2c:	20f4      	movs	r0, #244	@ 0xf4
 8002a2e:	e6be      	b.n	80027ae <bme68x_set_conf+0x46>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8002a30:	6c27      	ldr	r7, [r4, #64]	@ 0x40
 8002a32:	6863      	ldr	r3, [r4, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	a905      	add	r1, sp, #20
 8002a38:	2074      	movs	r0, #116	@ 0x74
 8002a3a:	47b8      	blx	r7
 8002a3c:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8002a40:	2800      	cmp	r0, #0
 8002a42:	f47f aebb 	bne.w	80027bc <bme68x_set_conf+0x54>
    if (conf == NULL)
 8002a46:	2e00      	cmp	r6, #0
 8002a48:	f47f aebd 	bne.w	80027c6 <bme68x_set_conf+0x5e>
        rslt = BME68X_E_NULL_PTR;
 8002a4c:	f04f 35ff 	mov.w	r5, #4294967295
 8002a50:	e6b9      	b.n	80027c6 <bme68x_set_conf+0x5e>
            rslt = set_mem_page(reg_addr, dev);
 8002a52:	4621      	mov	r1, r4
 8002a54:	2071      	movs	r0, #113	@ 0x71
 8002a56:	f7ff fa4d 	bl	8001ef4 <set_mem_page>
            if (rslt == BME68X_OK)
 8002a5a:	4605      	mov	r5, r0
 8002a5c:	2800      	cmp	r0, #0
 8002a5e:	d03e      	beq.n	8002ade <bme68x_set_conf+0x376>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8002a60:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8002a62:	6863      	ldr	r3, [r4, #4]
 8002a64:	2205      	movs	r2, #5
 8002a66:	a903      	add	r1, sp, #12
 8002a68:	2071      	movs	r0, #113	@ 0x71
 8002a6a:	47b0      	blx	r6
 8002a6c:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8002a70:	2800      	cmp	r0, #0
 8002a72:	d12e      	bne.n	8002ad2 <bme68x_set_conf+0x36a>
        dev->info_msg = BME68X_OK;
 8002a74:	f884 004d 	strb.w	r0, [r4, #77]	@ 0x4d
    return rslt;
 8002a78:	e6a5      	b.n	80027c6 <bme68x_set_conf+0x5e>
 8002a7a:	bf00      	nop
 8002a7c:	0800d1a4 	.word	0x0800d1a4
            *value = max;
 8002a80:	2107      	movs	r1, #7
 8002a82:	70f1      	strb	r1, [r6, #3]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8002a84:	f894 304d 	ldrb.w	r3, [r4, #77]	@ 0x4d
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002a88:	6c25      	ldr	r5, [r4, #64]	@ 0x40
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002a92:	2d00      	cmp	r5, #0
 8002a94:	d0da      	beq.n	8002a4c <bme68x_set_conf+0x2e4>
 8002a96:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0d7      	beq.n	8002a4c <bme68x_set_conf+0x2e4>
 8002a9c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0d4      	beq.n	8002a4c <bme68x_set_conf+0x2e4>
        if (*value > max)
 8002aa2:	f896 c001 	ldrb.w	ip, [r6, #1]
 8002aa6:	f1bc 0f05 	cmp.w	ip, #5
 8002aaa:	f67f aed1 	bls.w	8002850 <bme68x_set_conf+0xe8>
            *value = max;
 8002aae:	f04f 0c05 	mov.w	ip, #5
 8002ab2:	f886 c001 	strb.w	ip, [r6, #1]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8002ab6:	f894 304d 	ldrb.w	r3, [r4, #77]	@ 0x4d
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002aba:	6c25      	ldr	r5, [r4, #64]	@ 0x40
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002ac4:	2d00      	cmp	r5, #0
 8002ac6:	d0c1      	beq.n	8002a4c <bme68x_set_conf+0x2e4>
 8002ac8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0be      	beq.n	8002a4c <bme68x_set_conf+0x2e4>
 8002ace:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002ad0:	e6bb      	b.n	800284a <bme68x_set_conf+0xe2>
        dev->info_msg = BME68X_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
                    rslt = BME68X_E_COM_FAIL;
 8002ad8:	f06f 0501 	mvn.w	r5, #1
 8002adc:	e673      	b.n	80027c6 <bme68x_set_conf+0x5e>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8002ade:	6c25      	ldr	r5, [r4, #64]	@ 0x40
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8002ae0:	20f1      	movs	r0, #241	@ 0xf1
 8002ae2:	e690      	b.n	8002806 <bme68x_set_conf+0x9e>
        if (mem_page != dev->mem_page)
 8002ae4:	7b63      	ldrb	r3, [r4, #13]
 8002ae6:	2b10      	cmp	r3, #16
 8002ae8:	f000 8161 	beq.w	8002dae <bme68x_set_conf+0x646>
            dev->mem_page = mem_page;
 8002aec:	2310      	movs	r3, #16
 8002aee:	7363      	strb	r3, [r4, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8002af0:	2201      	movs	r2, #1
 8002af2:	6863      	ldr	r3, [r4, #4]
 8002af4:	f10d 0103 	add.w	r1, sp, #3
 8002af8:	20f3      	movs	r0, #243	@ 0xf3
 8002afa:	47a8      	blx	r5
 8002afc:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
            if (dev->intf_rslt != 0)
 8002b00:	2800      	cmp	r0, #0
 8002b02:	f040 815a 	bne.w	8002dba <bme68x_set_conf+0x652>
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8002b06:	f89d 3003 	ldrb.w	r3, [sp, #3]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8002b0a:	7b62      	ldrb	r2, [r4, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8002b0c:	6c65      	ldr	r5, [r4, #68]	@ 0x44
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8002b0e:	f002 0210 	and.w	r2, r2, #16
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8002b12:	f023 0310 	bic.w	r3, r3, #16
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f88d 3003 	strb.w	r3, [sp, #3]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8002b1c:	f10d 0103 	add.w	r1, sp, #3
 8002b20:	6863      	ldr	r3, [r4, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	2073      	movs	r0, #115	@ 0x73
 8002b26:	47a8      	blx	r5
 8002b28:	4605      	mov	r5, r0
 8002b2a:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8002b2e:	2800      	cmp	r0, #0
 8002b30:	f040 8143 	bne.w	8002dba <bme68x_set_conf+0x652>
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002b34:	2371      	movs	r3, #113	@ 0x71
                if (dev->intf == BME68X_SPI_INTF)
 8002b36:	7b22      	ldrb	r2, [r4, #12]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002b38:	f88d 3014 	strb.w	r3, [sp, #20]
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002b3c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002b40:	f88d 3015 	strb.w	r3, [sp, #21]
                if (dev->intf == BME68X_SPI_INTF)
 8002b44:	b17a      	cbz	r2, 8002b66 <bme68x_set_conf+0x3fe>
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002b46:	2272      	movs	r2, #114	@ 0x72
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002b48:	f89d 300d 	ldrb.w	r3, [sp, #13]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002b4c:	f88d 2016 	strb.w	r2, [sp, #22]
            for (index = 0; index < len; index++)
 8002b50:	2202      	movs	r2, #2
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002b52:	f88d 3017 	strb.w	r3, [sp, #23]
            for (index = 0; index < len; index++)
 8002b56:	4610      	mov	r0, r2
 8002b58:	e701      	b.n	800295e <bme68x_set_conf+0x1f6>
 8002b5a:	2180      	movs	r1, #128	@ 0x80
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	e6d5      	b.n	800290c <bme68x_set_conf+0x1a4>
        rslt = BME68X_E_NULL_PTR;
 8002b60:	f04f 35ff 	mov.w	r5, #4294967295
 8002b64:	e62c      	b.n	80027c0 <bme68x_set_conf+0x58>
 8002b66:	6c25      	ldr	r5, [r4, #64]	@ 0x40
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002b68:	2d00      	cmp	r5, #0
 8002b6a:	f43f af6f 	beq.w	8002a4c <bme68x_set_conf+0x2e4>
 8002b6e:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 8002b70:	2e00      	cmp	r6, #0
 8002b72:	f000 8131 	beq.w	8002dd8 <bme68x_set_conf+0x670>
 8002b76:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 812d 	beq.w	8002dd8 <bme68x_set_conf+0x670>
        if (mem_page != dev->mem_page)
 8002b7e:	7b63      	ldrb	r3, [r4, #13]
 8002b80:	2b10      	cmp	r3, #16
 8002b82:	d023      	beq.n	8002bcc <bme68x_set_conf+0x464>
            dev->mem_page = mem_page;
 8002b84:	2310      	movs	r3, #16
 8002b86:	7363      	strb	r3, [r4, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8002b88:	2201      	movs	r2, #1
 8002b8a:	6863      	ldr	r3, [r4, #4]
 8002b8c:	f10d 0103 	add.w	r1, sp, #3
 8002b90:	20f3      	movs	r0, #243	@ 0xf3
 8002b92:	47a8      	blx	r5
 8002b94:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
            if (dev->intf_rslt != 0)
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	f040 8115 	bne.w	8002dc8 <bme68x_set_conf+0x660>
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8002b9e:	f89d 3003 	ldrb.w	r3, [sp, #3]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8002ba2:	7b62      	ldrb	r2, [r4, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8002ba4:	6c65      	ldr	r5, [r4, #68]	@ 0x44
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8002ba6:	f002 0210 	and.w	r2, r2, #16
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8002baa:	f023 0310 	bic.w	r3, r3, #16
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f88d 3003 	strb.w	r3, [sp, #3]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8002bb4:	f10d 0103 	add.w	r1, sp, #3
 8002bb8:	6863      	ldr	r3, [r4, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	2073      	movs	r0, #115	@ 0x73
 8002bbe:	47a8      	blx	r5
 8002bc0:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8002bc4:	2800      	cmp	r0, #0
 8002bc6:	f040 80ff 	bne.w	8002dc8 <bme68x_set_conf+0x660>
 8002bca:	7b22      	ldrb	r2, [r4, #12]
    int8_t rslt = BME68X_OK;
 8002bcc:	2500      	movs	r5, #0
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002bce:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8002bd2:	f88d 3017 	strb.w	r3, [sp, #23]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002bd6:	2372      	movs	r3, #114	@ 0x72
 8002bd8:	f88d 3016 	strb.w	r3, [sp, #22]
                if (dev->intf == BME68X_SPI_INTF)
 8002bdc:	b14a      	cbz	r2, 8002bf2 <bme68x_set_conf+0x48a>
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002bde:	2273      	movs	r2, #115	@ 0x73
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002be0:	f89d 300e 	ldrb.w	r3, [sp, #14]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002be4:	f88d 2018 	strb.w	r2, [sp, #24]
            for (index = 0; index < len; index++)
 8002be8:	2203      	movs	r2, #3
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002bea:	f88d 3019 	strb.w	r3, [sp, #25]
            for (index = 0; index < len; index++)
 8002bee:	4610      	mov	r0, r2
 8002bf0:	e6b5      	b.n	800295e <bme68x_set_conf+0x1f6>
 8002bf2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002bf4:	2d00      	cmp	r5, #0
 8002bf6:	f43f af29 	beq.w	8002a4c <bme68x_set_conf+0x2e4>
 8002bfa:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 8002bfc:	2e00      	cmp	r6, #0
 8002bfe:	f000 80ee 	beq.w	8002dde <bme68x_set_conf+0x676>
 8002c02:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 80ea 	beq.w	8002dde <bme68x_set_conf+0x676>
        if (mem_page != dev->mem_page)
 8002c0a:	7b63      	ldrb	r3, [r4, #13]
 8002c0c:	2b10      	cmp	r3, #16
 8002c0e:	d023      	beq.n	8002c58 <bme68x_set_conf+0x4f0>
            dev->mem_page = mem_page;
 8002c10:	2310      	movs	r3, #16
 8002c12:	7363      	strb	r3, [r4, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8002c14:	2201      	movs	r2, #1
 8002c16:	6863      	ldr	r3, [r4, #4]
 8002c18:	f10d 0103 	add.w	r1, sp, #3
 8002c1c:	20f3      	movs	r0, #243	@ 0xf3
 8002c1e:	47a8      	blx	r5
 8002c20:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
            if (dev->intf_rslt != 0)
 8002c24:	2800      	cmp	r0, #0
 8002c26:	f040 80d3 	bne.w	8002dd0 <bme68x_set_conf+0x668>
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8002c2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8002c2e:	7b62      	ldrb	r2, [r4, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8002c30:	6c65      	ldr	r5, [r4, #68]	@ 0x44
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8002c32:	f002 0210 	and.w	r2, r2, #16
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8002c36:	f023 0310 	bic.w	r3, r3, #16
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f88d 3003 	strb.w	r3, [sp, #3]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8002c40:	f10d 0103 	add.w	r1, sp, #3
 8002c44:	6863      	ldr	r3, [r4, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	2073      	movs	r0, #115	@ 0x73
 8002c4a:	47a8      	blx	r5
 8002c4c:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8002c50:	2800      	cmp	r0, #0
 8002c52:	f040 80bd 	bne.w	8002dd0 <bme68x_set_conf+0x668>
 8002c56:	7b22      	ldrb	r2, [r4, #12]
    int8_t rslt = BME68X_OK;
 8002c58:	2500      	movs	r5, #0
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002c5a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002c5e:	f88d 3019 	strb.w	r3, [sp, #25]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002c62:	f04f 0973 	mov.w	r9, #115	@ 0x73
 8002c66:	f88d 9018 	strb.w	r9, [sp, #24]
                if (dev->intf == BME68X_SPI_INTF)
 8002c6a:	b17a      	cbz	r2, 8002c8c <bme68x_set_conf+0x524>
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002c6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002c70:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8002c74:	f88d 301b 	strb.w	r3, [sp, #27]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002c78:	2174      	movs	r1, #116	@ 0x74
 8002c7a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002c7e:	f88d 101a 	strb.w	r1, [sp, #26]
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002c82:	f88d 201d 	strb.w	r2, [sp, #29]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002c86:	f88d 301c 	strb.w	r3, [sp, #28]
            for (index = 0; index < len; index++)
 8002c8a:	e6ac      	b.n	80029e6 <bme68x_set_conf+0x27e>
 8002c8c:	6c25      	ldr	r5, [r4, #64]	@ 0x40
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002c8e:	2d00      	cmp	r5, #0
 8002c90:	f43f aedc 	beq.w	8002a4c <bme68x_set_conf+0x2e4>
 8002c94:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 8002c96:	2e00      	cmp	r6, #0
 8002c98:	f000 80a4 	beq.w	8002de4 <bme68x_set_conf+0x67c>
 8002c9c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 80a0 	beq.w	8002de4 <bme68x_set_conf+0x67c>
        if (mem_page != dev->mem_page)
 8002ca4:	7b63      	ldrb	r3, [r4, #13]
 8002ca6:	2b10      	cmp	r3, #16
 8002ca8:	d021      	beq.n	8002cee <bme68x_set_conf+0x586>
            dev->mem_page = mem_page;
 8002caa:	2310      	movs	r3, #16
 8002cac:	7363      	strb	r3, [r4, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8002cae:	2201      	movs	r2, #1
 8002cb0:	6863      	ldr	r3, [r4, #4]
 8002cb2:	f10d 0103 	add.w	r1, sp, #3
 8002cb6:	20f3      	movs	r0, #243	@ 0xf3
 8002cb8:	47a8      	blx	r5
 8002cba:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
            if (dev->intf_rslt != 0)
 8002cbe:	2800      	cmp	r0, #0
 8002cc0:	d17e      	bne.n	8002dc0 <bme68x_set_conf+0x658>
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8002cc2:	f89d 3003 	ldrb.w	r3, [sp, #3]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8002cc6:	7b62      	ldrb	r2, [r4, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8002cc8:	6c65      	ldr	r5, [r4, #68]	@ 0x44
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8002cca:	f002 0210 	and.w	r2, r2, #16
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8002cce:	f023 0310 	bic.w	r3, r3, #16
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f88d 3003 	strb.w	r3, [sp, #3]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8002cd8:	f10d 0103 	add.w	r1, sp, #3
 8002cdc:	6863      	ldr	r3, [r4, #4]
 8002cde:	4648      	mov	r0, r9
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	47a8      	blx	r5
 8002ce4:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8002ce8:	2800      	cmp	r0, #0
 8002cea:	d169      	bne.n	8002dc0 <bme68x_set_conf+0x658>
 8002cec:	7b22      	ldrb	r2, [r4, #12]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002cee:	2374      	movs	r3, #116	@ 0x74
 8002cf0:	f88d 301a 	strb.w	r3, [sp, #26]
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002cf4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002cf8:	f88d 301b 	strb.w	r3, [sp, #27]
                if (dev->intf == BME68X_SPI_INTF)
 8002cfc:	b142      	cbz	r2, 8002d10 <bme68x_set_conf+0x5a8>
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002cfe:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002d02:	f88d 301d 	strb.w	r3, [sp, #29]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002d06:	2275      	movs	r2, #117	@ 0x75
 8002d08:	f88d 201c 	strb.w	r2, [sp, #28]
            for (index = 0; index < len; index++)
 8002d0c:	463d      	mov	r5, r7
 8002d0e:	e66a      	b.n	80029e6 <bme68x_set_conf+0x27e>
 8002d10:	6c25      	ldr	r5, [r4, #64]	@ 0x40
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002d12:	2d00      	cmp	r5, #0
 8002d14:	f43f ae9a 	beq.w	8002a4c <bme68x_set_conf+0x2e4>
 8002d18:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 8002d1a:	2e00      	cmp	r6, #0
 8002d1c:	f43f ae96 	beq.w	8002a4c <bme68x_set_conf+0x2e4>
 8002d20:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f43f ae92 	beq.w	8002a4c <bme68x_set_conf+0x2e4>
        if (mem_page != dev->mem_page)
 8002d28:	7b63      	ldrb	r3, [r4, #13]
 8002d2a:	2b10      	cmp	r3, #16
 8002d2c:	d023      	beq.n	8002d76 <bme68x_set_conf+0x60e>
            dev->mem_page = mem_page;
 8002d2e:	2310      	movs	r3, #16
 8002d30:	7363      	strb	r3, [r4, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8002d32:	2201      	movs	r2, #1
 8002d34:	6863      	ldr	r3, [r4, #4]
 8002d36:	f10d 0103 	add.w	r1, sp, #3
 8002d3a:	20f3      	movs	r0, #243	@ 0xf3
 8002d3c:	47a8      	blx	r5
 8002d3e:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
            if (dev->intf_rslt != 0)
 8002d42:	2800      	cmp	r0, #0
 8002d44:	f47f aec8 	bne.w	8002ad8 <bme68x_set_conf+0x370>
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8002d48:	f89d 3003 	ldrb.w	r3, [sp, #3]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8002d4c:	7b62      	ldrb	r2, [r4, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8002d4e:	6c65      	ldr	r5, [r4, #68]	@ 0x44
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8002d50:	f002 0210 	and.w	r2, r2, #16
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8002d54:	f023 0310 	bic.w	r3, r3, #16
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f88d 3003 	strb.w	r3, [sp, #3]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8002d5e:	f10d 0103 	add.w	r1, sp, #3
 8002d62:	6863      	ldr	r3, [r4, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	2073      	movs	r0, #115	@ 0x73
 8002d68:	47a8      	blx	r5
 8002d6a:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8002d6e:	2800      	cmp	r0, #0
 8002d70:	f47f aeb2 	bne.w	8002ad8 <bme68x_set_conf+0x370>
 8002d74:	6c66      	ldr	r6, [r4, #68]	@ 0x44
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002d76:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002d7a:	f88d 301d 	strb.w	r3, [sp, #29]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002d7e:	2275      	movs	r2, #117	@ 0x75
 8002d80:	f88d 201c 	strb.w	r2, [sp, #28]
            if (rslt == BME68X_OK)
 8002d84:	e633      	b.n	80029ee <bme68x_set_conf+0x286>
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002d86:	f810 3c24 	ldrb.w	r3, [r0, #-36]
 8002d8a:	f807 3c14 	strb.w	r3, [r7, #-20]
 8002d8e:	f816 3c24 	ldrb.w	r3, [r6, #-36]
 8002d92:	f801 3c14 	strb.w	r3, [r1, #-20]
            for (index = 0; index < len; index++)
 8002d96:	e626      	b.n	80029e6 <bme68x_set_conf+0x27e>
        dev->info_msg = BME68X_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        if (rslt == BME68X_OK)
 8002d9e:	e655      	b.n	8002a4c <bme68x_set_conf+0x2e4>
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002da0:	f810 0c24 	ldrb.w	r0, [r0, #-36]
 8002da4:	f807 0c14 	strb.w	r0, [r7, #-20]
                    tmp_buff[(2 * index)] = reg_addr[index];
 8002da8:	f816 0c24 	ldrb.w	r0, [r6, #-36]
            for (index = 0; index < len; index++)
 8002dac:	e60d      	b.n	80029ca <bme68x_set_conf+0x262>
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002dae:	2371      	movs	r3, #113	@ 0x71
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8002db0:	f88d 1015 	strb.w	r1, [sp, #21]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002db4:	f88d 3014 	strb.w	r3, [sp, #20]
                if (dev->intf == BME68X_SPI_INTF)
 8002db8:	e6d6      	b.n	8002b68 <bme68x_set_conf+0x400>
                rslt = BME68X_E_COM_FAIL;
 8002dba:	f06f 0501 	mvn.w	r5, #1
 8002dbe:	e6b9      	b.n	8002b34 <bme68x_set_conf+0x3cc>
 8002dc0:	7b22      	ldrb	r2, [r4, #12]
 8002dc2:	f06f 0701 	mvn.w	r7, #1
 8002dc6:	e792      	b.n	8002cee <bme68x_set_conf+0x586>
 8002dc8:	7b22      	ldrb	r2, [r4, #12]
 8002dca:	f06f 0501 	mvn.w	r5, #1
 8002dce:	e6fe      	b.n	8002bce <bme68x_set_conf+0x466>
 8002dd0:	7b22      	ldrb	r2, [r4, #12]
 8002dd2:	f06f 0501 	mvn.w	r5, #1
 8002dd6:	e740      	b.n	8002c5a <bme68x_set_conf+0x4f2>
        rslt = BME68X_E_NULL_PTR;
 8002dd8:	f04f 35ff 	mov.w	r5, #4294967295
 8002ddc:	e6f7      	b.n	8002bce <bme68x_set_conf+0x466>
 8002dde:	f04f 35ff 	mov.w	r5, #4294967295
 8002de2:	e73a      	b.n	8002c5a <bme68x_set_conf+0x4f2>
 8002de4:	f04f 37ff 	mov.w	r7, #4294967295
 8002de8:	e781      	b.n	8002cee <bme68x_set_conf+0x586>
 8002dea:	bf00      	nop

08002dec <bme68x_get_meas_dur>:
{
 8002dec:	b510      	push	{r4, lr}
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8002dee:	4b3a      	ldr	r3, [pc, #232]	@ (8002ed8 <bme68x_get_meas_dur+0xec>)
{
 8002df0:	4684      	mov	ip, r0
 8002df2:	460c      	mov	r4, r1
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8002df4:	e893 0003 	ldmia.w	r3, {r0, r1}
{
 8002df8:	b082      	sub	sp, #8
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8002dfa:	9000      	str	r0, [sp, #0]
 8002dfc:	f8ad 1004 	strh.w	r1, [sp, #4]
    if (conf != NULL)
 8002e00:	2c00      	cmp	r4, #0
 8002e02:	d05c      	beq.n	8002ebe <bme68x_get_meas_dur+0xd2>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002e04:	2a00      	cmp	r2, #0
 8002e06:	d05a      	beq.n	8002ebe <bme68x_get_meas_dur+0xd2>
 8002e08:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d057      	beq.n	8002ebe <bme68x_get_meas_dur+0xd2>
 8002e0e:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d054      	beq.n	8002ebe <bme68x_get_meas_dur+0xd2>
 8002e14:	4621      	mov	r1, r4
 8002e16:	6c94      	ldr	r4, [r2, #72]	@ 0x48
 8002e18:	2c00      	cmp	r4, #0
 8002e1a:	d050      	beq.n	8002ebe <bme68x_get_meas_dur+0xd2>
        if (*value > max)
 8002e1c:	7848      	ldrb	r0, [r1, #1]
 8002e1e:	2805      	cmp	r0, #5
 8002e20:	d949      	bls.n	8002eb6 <bme68x_get_meas_dur+0xca>
            *value = max;
 8002e22:	2305      	movs	r3, #5
 8002e24:	704b      	strb	r3, [r1, #1]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8002e26:	f892 304d 	ldrb.w	r3, [r2, #77]	@ 0x4d
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002e2a:	6c10      	ldr	r0, [r2, #64]	@ 0x40
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	f882 304d 	strb.w	r3, [r2, #77]	@ 0x4d
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002e34:	2800      	cmp	r0, #0
 8002e36:	d042      	beq.n	8002ebe <bme68x_get_meas_dur+0xd2>
 8002e38:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d03f      	beq.n	8002ebe <bme68x_get_meas_dur+0xd2>
 8002e3e:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d03c      	beq.n	8002ebe <bme68x_get_meas_dur+0xd2>
        if (*value > max)
 8002e44:	788b      	ldrb	r3, [r1, #2]
 8002e46:	2b05      	cmp	r3, #5
 8002e48:	f04f 0005 	mov.w	r0, #5
 8002e4c:	d90d      	bls.n	8002e6a <bme68x_get_meas_dur+0x7e>
            *value = max;
 8002e4e:	2305      	movs	r3, #5
 8002e50:	708b      	strb	r3, [r1, #2]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8002e52:	f892 404d 	ldrb.w	r4, [r2, #77]	@ 0x4d
 8002e56:	f044 0401 	orr.w	r4, r4, #1
 8002e5a:	f882 404d 	strb.w	r4, [r2, #77]	@ 0x4d
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002e5e:	6c14      	ldr	r4, [r2, #64]	@ 0x40
 8002e60:	b36c      	cbz	r4, 8002ebe <bme68x_get_meas_dur+0xd2>
 8002e62:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8002e64:	b35c      	cbz	r4, 8002ebe <bme68x_get_meas_dur+0xd2>
 8002e66:	6c94      	ldr	r4, [r2, #72]	@ 0x48
 8002e68:	b34c      	cbz	r4, 8002ebe <bme68x_get_meas_dur+0xd2>
        if (*value > max)
 8002e6a:	f891 e000 	ldrb.w	lr, [r1]
 8002e6e:	f1be 0f05 	cmp.w	lr, #5
 8002e72:	d827      	bhi.n	8002ec4 <bme68x_get_meas_dur+0xd8>
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 8002e74:	f10e 0208 	add.w	r2, lr, #8
 8002e78:	eb0d 0e02 	add.w	lr, sp, r2
 8002e7c:	f81e 1c08 	ldrb.w	r1, [lr, #-8]
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 8002e80:	f100 0208 	add.w	r2, r0, #8
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8002e84:	3308      	adds	r3, #8
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 8002e86:	eb0d 0002 	add.w	r0, sp, r2
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8002e8a:	446b      	add	r3, sp
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 8002e8c:	f810 0c08 	ldrb.w	r0, [r0, #-8]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8002e90:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002e94:	4403      	add	r3, r0
            meas_dur = meas_cycles * UINT32_C(1963);
 8002e96:	f240 72ab 	movw	r2, #1963	@ 0x7ab
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 8002e9a:	440b      	add	r3, r1
            if (op_mode != BME68X_PARALLEL_MODE)
 8002e9c:	f1bc 0f02 	cmp.w	ip, #2
            meas_dur = meas_cycles * UINT32_C(1963);
 8002ea0:	fb02 f303 	mul.w	r3, r2, r3
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8002ea4:	bf0b      	itete	eq
 8002ea6:	f503 5086 	addeq.w	r0, r3, #4288	@ 0x10c0
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 8002eaa:	f503 50a5 	addne.w	r0, r3, #5280	@ 0x14a0
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8002eae:	3005      	addeq	r0, #5
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 8002eb0:	300d      	addne	r0, #13
}
 8002eb2:	b002      	add	sp, #8
 8002eb4:	bd10      	pop	{r4, pc}
        if (*value > max)
 8002eb6:	788b      	ldrb	r3, [r1, #2]
 8002eb8:	2b05      	cmp	r3, #5
 8002eba:	d8c8      	bhi.n	8002e4e <bme68x_get_meas_dur+0x62>
 8002ebc:	e7d4      	b.n	8002e68 <bme68x_get_meas_dur+0x7c>
    uint32_t meas_dur = 0; /* Calculate in us */
 8002ebe:	2000      	movs	r0, #0
}
 8002ec0:	b002      	add	sp, #8
 8002ec2:	bd10      	pop	{r4, pc}
            *value = max;
 8002ec4:	2405      	movs	r4, #5
 8002ec6:	700c      	strb	r4, [r1, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8002ec8:	f892 104d 	ldrb.w	r1, [r2, #77]	@ 0x4d
 8002ecc:	f041 0101 	orr.w	r1, r1, #1
 8002ed0:	f882 104d 	strb.w	r1, [r2, #77]	@ 0x4d
 8002ed4:	2110      	movs	r1, #16
 8002ed6:	e7d3      	b.n	8002e80 <bme68x_get_meas_dur+0x94>
 8002ed8:	0800ce58 	.word	0x0800ce58

08002edc <bme68x_get_data>:
{
 8002edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ee0:	b0d5      	sub	sp, #340	@ 0x154
 8002ee2:	4606      	mov	r6, r0
 8002ee4:	460d      	mov	r5, r1
 8002ee6:	4614      	mov	r4, r2
    struct bme68x_data field_data[3] = { { 0 } };
 8002ee8:	2100      	movs	r1, #0
 8002eea:	223c      	movs	r2, #60	@ 0x3c
 8002eec:	a825      	add	r0, sp, #148	@ 0x94
{
 8002eee:	469b      	mov	fp, r3
    struct bme68x_data field_data[3] = { { 0 } };
 8002ef0:	f009 ff7a 	bl	800cde8 <memset>
    field_ptr[0] = &field_data[0];
 8002ef4:	ab25      	add	r3, sp, #148	@ 0x94
 8002ef6:	930c      	str	r3, [sp, #48]	@ 0x30
    field_ptr[1] = &field_data[1];
 8002ef8:	ab2a      	add	r3, sp, #168	@ 0xa8
 8002efa:	930d      	str	r3, [sp, #52]	@ 0x34
    field_ptr[2] = &field_data[2];
 8002efc:	ab2f      	add	r3, sp, #188	@ 0xbc
 8002efe:	930e      	str	r3, [sp, #56]	@ 0x38
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002f00:	f1bb 0f00 	cmp.w	fp, #0
 8002f04:	f000 8380 	beq.w	8003608 <bme68x_get_data+0x72c>
 8002f08:	f8db 9040 	ldr.w	r9, [fp, #64]	@ 0x40
 8002f0c:	f1b9 0f00 	cmp.w	r9, #0
 8002f10:	f000 837a 	beq.w	8003608 <bme68x_get_data+0x72c>
 8002f14:	f8db 3044 	ldr.w	r3, [fp, #68]	@ 0x44
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 8375 	beq.w	8003608 <bme68x_get_data+0x72c>
 8002f1e:	f8db 3048 	ldr.w	r3, [fp, #72]	@ 0x48
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 8370 	beq.w	8003608 <bme68x_get_data+0x72c>
    if ((rslt == BME68X_OK) && (data != NULL))
 8002f28:	2d00      	cmp	r5, #0
 8002f2a:	f000 836d 	beq.w	8003608 <bme68x_get_data+0x72c>
        if (op_mode == BME68X_FORCED_MODE)
 8002f2e:	2e01      	cmp	r6, #1
 8002f30:	d02f      	beq.n	8002f92 <bme68x_get_data+0xb6>
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 8002f32:	3e02      	subs	r6, #2
 8002f34:	2e01      	cmp	r6, #1
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 8002f36:	f04f 0600 	mov.w	r6, #0
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 8002f3a:	d908      	bls.n	8002f4e <bme68x_get_data+0x72>
            rslt = BME68X_W_DEFINE_OP_MODE;
 8002f3c:	2701      	movs	r7, #1
        if (n_data == NULL)
 8002f3e:	2c00      	cmp	r4, #0
 8002f40:	f000 8362 	beq.w	8003608 <bme68x_get_data+0x72c>
            *n_data = new_fields;
 8002f44:	7026      	strb	r6, [r4, #0]
}
 8002f46:	4638      	mov	r0, r7
 8002f48:	b055      	add	sp, #340	@ 0x154
 8002f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 8002f4e:	222f      	movs	r2, #47	@ 0x2f
 8002f50:	4631      	mov	r1, r6
 8002f52:	a819      	add	r0, sp, #100	@ 0x64
 8002f54:	9618      	str	r6, [sp, #96]	@ 0x60
 8002f56:	f009 ff47 	bl	800cde8 <memset>
        if (dev->intf == BME68X_SPI_INTF)
 8002f5a:	f89b 300c 	ldrb.w	r3, [fp, #12]
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 8002f5e:	f8ad 605c 	strh.w	r6, [sp, #92]	@ 0x5c
 8002f62:	e9cd 6615 	strd	r6, r6, [sp, #84]	@ 0x54
 8002f66:	e9cd 6611 	strd	r6, r6, [sp, #68]	@ 0x44
 8002f6a:	e9cd 6613 	strd	r6, r6, [sp, #76]	@ 0x4c
 8002f6e:	9610      	str	r6, [sp, #64]	@ 0x40
        if (dev->intf == BME68X_SPI_INTF)
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 8340 	beq.w	80035f6 <bme68x_get_data+0x71a>
 8002f76:	201d      	movs	r0, #29
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8002f78:	f8db 3004 	ldr.w	r3, [fp, #4]
 8002f7c:	2233      	movs	r2, #51	@ 0x33
 8002f7e:	a918      	add	r1, sp, #96	@ 0x60
 8002f80:	47c8      	blx	r9
 8002f82:	f88b 004c 	strb.w	r0, [fp, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8002f86:	2800      	cmp	r0, #0
 8002f88:	f000 81b8 	beq.w	80032fc <bme68x_get_data+0x420>
            rslt = read_field_data(0, data, dev);
 8002f8c:	2600      	movs	r6, #0
                rslt = BME68X_W_NO_NEW_DATA;
 8002f8e:	2702      	movs	r7, #2
 8002f90:	e7d5      	b.n	8002f3e <bme68x_get_data+0x62>
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 8002f92:	2300      	movs	r3, #0
 8002f94:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 8002f98:	e9cd 331a 	strd	r3, r3, [sp, #104]	@ 0x68
 8002f9c:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8002fa0:	f04f 0805 	mov.w	r8, #5
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002fa4:	f1b9 0f00 	cmp.w	r9, #0
 8002fa8:	f000 83c5 	beq.w	8003736 <bme68x_get_data+0x85a>
 8002fac:	f8db 3044 	ldr.w	r3, [fp, #68]	@ 0x44
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 83c0 	beq.w	8003736 <bme68x_get_data+0x85a>
 8002fb6:	f8db 3048 	ldr.w	r3, [fp, #72]	@ 0x48
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 83bb 	beq.w	8003736 <bme68x_get_data+0x85a>
        if (dev->intf == BME68X_SPI_INTF)
 8002fc0:	f89b 300c 	ldrb.w	r3, [fp, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d06e      	beq.n	80030a6 <bme68x_get_data+0x1ca>
    int8_t rslt = BME68X_OK;
 8002fc8:	2700      	movs	r7, #0
 8002fca:	201d      	movs	r0, #29
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8002fcc:	f8db 3004 	ldr.w	r3, [fp, #4]
 8002fd0:	2211      	movs	r2, #17
 8002fd2:	a918      	add	r1, sp, #96	@ 0x60
 8002fd4:	47c8      	blx	r9
            rslt = BME68X_E_COM_FAIL;
 8002fd6:	2800      	cmp	r0, #0
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8002fd8:	f88b 004c 	strb.w	r0, [fp, #76]	@ 0x4c
            rslt = BME68X_E_COM_FAIL;
 8002fdc:	bf18      	it	ne
 8002fde:	f06f 0701 	mvnne.w	r7, #1
        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8002fe2:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
        data->meas_index = buff[1];
 8002fe6:	f89d 2061 	ldrb.w	r2, [sp, #97]	@ 0x61
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8002fea:	f89d 1062 	ldrb.w	r1, [sp, #98]	@ 0x62
        data->meas_index = buff[1];
 8002fee:	70aa      	strb	r2, [r5, #2]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 8002ff0:	f003 000f 	and.w	r0, r3, #15
 8002ff4:	7068      	strb	r0, [r5, #1]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002ff6:	f8db 2008 	ldr.w	r2, [fp, #8]
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8002ffa:	9101      	str	r1, [sp, #4]
 8002ffc:	f89d 1063 	ldrb.w	r1, [sp, #99]	@ 0x63
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8003000:	f89d 906e 	ldrb.w	r9, [sp, #110]	@ 0x6e
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8003004:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8003008:	9102      	str	r1, [sp, #8]
 800300a:	f89d 1064 	ldrb.w	r1, [sp, #100]	@ 0x64
 800300e:	9103      	str	r1, [sp, #12]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8003010:	2a01      	cmp	r2, #1
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8003012:	f89d 1065 	ldrb.w	r1, [sp, #101]	@ 0x65
 8003016:	9104      	str	r1, [sp, #16]
 8003018:	bf08      	it	eq
 800301a:	f00a 0230 	andeq.w	r2, sl, #48	@ 0x30
 800301e:	f89d 1066 	ldrb.w	r1, [sp, #102]	@ 0x66
 8003022:	9105      	str	r1, [sp, #20]
 8003024:	bf18      	it	ne
 8003026:	f009 0230 	andne.w	r2, r9, #48	@ 0x30
        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 800302a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 800302e:	f89d 1067 	ldrb.w	r1, [sp, #103]	@ 0x67
 8003032:	9106      	str	r1, [sp, #24]
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 8003034:	4313      	orrs	r3, r2
 8003036:	f89d 1068 	ldrb.w	r1, [sp, #104]	@ 0x68
 800303a:	702b      	strb	r3, [r5, #0]
        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 800303c:	061b      	lsls	r3, r3, #24
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 800303e:	9107      	str	r1, [sp, #28]
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8003040:	f89d c06d 	ldrb.w	ip, [sp, #109]	@ 0x6d
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 8003044:	f89d 1069 	ldrb.w	r1, [sp, #105]	@ 0x69
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8003048:	f89d e06f 	ldrb.w	lr, [sp, #111]	@ 0x6f
        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 800304c:	d402      	bmi.n	8003054 <bme68x_get_data+0x178>
        if (rslt == BME68X_OK)
 800304e:	b3af      	cbz	r7, 80030bc <bme68x_get_data+0x1e0>
    uint8_t i = 0, j = 0, new_fields = 0;
 8003050:	2600      	movs	r6, #0
 8003052:	e774      	b.n	8002f3e <bme68x_get_data+0x62>
        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 8003054:	e9cd 1c08 	strd	r1, ip, [sp, #32]
 8003058:	f8cd e028 	str.w	lr, [sp, #40]	@ 0x28
 800305c:	2f00      	cmp	r7, #0
 800305e:	d1f7      	bne.n	8003050 <bme68x_get_data+0x174>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8003060:	f8db 7040 	ldr.w	r7, [fp, #64]	@ 0x40
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 8003064:	f100 085a 	add.w	r8, r0, #90	@ 0x5a
 8003068:	1ceb      	adds	r3, r5, #3
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800306a:	2f00      	cmp	r7, #0
 800306c:	f000 837f 	beq.w	800376e <bme68x_get_data+0x892>
 8003070:	f8db 2044 	ldr.w	r2, [fp, #68]	@ 0x44
 8003074:	2a00      	cmp	r2, #0
 8003076:	f000 837a 	beq.w	800376e <bme68x_get_data+0x892>
 800307a:	f8db 2048 	ldr.w	r2, [fp, #72]	@ 0x48
 800307e:	2a00      	cmp	r2, #0
 8003080:	f000 8375 	beq.w	800376e <bme68x_get_data+0x892>
        if (dev->intf == BME68X_SPI_INTF)
 8003084:	f89b 200c 	ldrb.w	r2, [fp, #12]
 8003088:	2a00      	cmp	r2, #0
 800308a:	f000 8339 	beq.w	8003700 <bme68x_get_data+0x824>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800308e:	4619      	mov	r1, r3
 8003090:	4640      	mov	r0, r8
 8003092:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	47b8      	blx	r7
 800309a:	f88b 004c 	strb.w	r0, [fp, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 800309e:	b1e8      	cbz	r0, 80030dc <bme68x_get_data+0x200>
            rslt = BME68X_E_COM_FAIL;
 80030a0:	f06f 0701 	mvn.w	r7, #1
 80030a4:	e7d4      	b.n	8003050 <bme68x_get_data+0x174>
            rslt = set_mem_page(reg_addr, dev);
 80030a6:	4659      	mov	r1, fp
 80030a8:	201d      	movs	r0, #29
 80030aa:	f7fe ff23 	bl	8001ef4 <set_mem_page>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80030ae:	f8db 9040 	ldr.w	r9, [fp, #64]	@ 0x40
            if (rslt == BME68X_OK)
 80030b2:	4607      	mov	r7, r0
 80030b4:	2800      	cmp	r0, #0
 80030b6:	d188      	bne.n	8002fca <bme68x_get_data+0xee>
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 80030b8:	209d      	movs	r0, #157	@ 0x9d
 80030ba:	e787      	b.n	8002fcc <bme68x_get_data+0xf0>
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 80030bc:	f8db 3048 	ldr.w	r3, [fp, #72]	@ 0x48
 80030c0:	f8db 1004 	ldr.w	r1, [fp, #4]
 80030c4:	f242 7010 	movw	r0, #10000	@ 0x2710
    while ((tries) && (rslt == BME68X_OK))
 80030c8:	f108 38ff 	add.w	r8, r8, #4294967295
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 80030cc:	4798      	blx	r3
    while ((tries) && (rslt == BME68X_OK))
 80030ce:	f018 08ff 	ands.w	r8, r8, #255	@ 0xff
 80030d2:	f000 810a 	beq.w	80032ea <bme68x_get_data+0x40e>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80030d6:	f8db 9040 	ldr.w	r9, [fp, #64]	@ 0x40
 80030da:	e763      	b.n	8002fa4 <bme68x_get_data+0xc8>
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 80030dc:	f895 8001 	ldrb.w	r8, [r5, #1]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80030e0:	f8db 7040 	ldr.w	r7, [fp, #64]	@ 0x40
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 80030e4:	f108 0850 	add.w	r8, r8, #80	@ 0x50
 80030e8:	fa5f f888 	uxtb.w	r8, r8
 80030ec:	1d2b      	adds	r3, r5, #4
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80030ee:	2f00      	cmp	r7, #0
 80030f0:	f000 833d 	beq.w	800376e <bme68x_get_data+0x892>
 80030f4:	f8db 2044 	ldr.w	r2, [fp, #68]	@ 0x44
 80030f8:	2a00      	cmp	r2, #0
 80030fa:	f000 8338 	beq.w	800376e <bme68x_get_data+0x892>
 80030fe:	f8db 2048 	ldr.w	r2, [fp, #72]	@ 0x48
 8003102:	2a00      	cmp	r2, #0
 8003104:	f000 8333 	beq.w	800376e <bme68x_get_data+0x892>
        if (dev->intf == BME68X_SPI_INTF)
 8003108:	f89b 200c 	ldrb.w	r2, [fp, #12]
 800310c:	2a00      	cmp	r2, #0
 800310e:	f000 8320 	beq.w	8003752 <bme68x_get_data+0x876>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8003112:	4619      	mov	r1, r3
 8003114:	4640      	mov	r0, r8
 8003116:	f8db 3004 	ldr.w	r3, [fp, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	47b8      	blx	r7
 800311e:	f88b 004c 	strb.w	r0, [fp, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8003122:	2800      	cmp	r0, #0
 8003124:	d1bc      	bne.n	80030a0 <bme68x_get_data+0x1c4>
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 8003126:	f895 8001 	ldrb.w	r8, [r5, #1]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800312a:	f8db 7040 	ldr.w	r7, [fp, #64]	@ 0x40
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 800312e:	f108 0864 	add.w	r8, r8, #100	@ 0x64
 8003132:	fa5f f888 	uxtb.w	r8, r8
 8003136:	1d6b      	adds	r3, r5, #5
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8003138:	2f00      	cmp	r7, #0
 800313a:	f000 8318 	beq.w	800376e <bme68x_get_data+0x892>
 800313e:	f8db 2044 	ldr.w	r2, [fp, #68]	@ 0x44
 8003142:	2a00      	cmp	r2, #0
 8003144:	f000 8313 	beq.w	800376e <bme68x_get_data+0x892>
 8003148:	f8db 2048 	ldr.w	r2, [fp, #72]	@ 0x48
 800314c:	2a00      	cmp	r2, #0
 800314e:	f000 830e 	beq.w	800376e <bme68x_get_data+0x892>
        if (dev->intf == BME68X_SPI_INTF)
 8003152:	f89b 200c 	ldrb.w	r2, [fp, #12]
 8003156:	2a00      	cmp	r2, #0
 8003158:	f000 830c 	beq.w	8003774 <bme68x_get_data+0x898>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800315c:	4619      	mov	r1, r3
 800315e:	4640      	mov	r0, r8
 8003160:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	47b8      	blx	r7
 8003168:	4607      	mov	r7, r0
 800316a:	f88b 004c 	strb.w	r0, [fp, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 800316e:	2800      	cmp	r0, #0
 8003170:	d196      	bne.n	80030a0 <bme68x_get_data+0x1c4>
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8003172:	9b06      	ldr	r3, [sp, #24]
 8003174:	9a05      	ldr	r2, [sp, #20]
    var3 = ((var3) * ((int32_t)dev->calib.par_t3 << 4)) >> 14;
 8003176:	f99b e022 	ldrsb.w	lr, [fp, #34]	@ 0x22
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 800317a:	091b      	lsrs	r3, r3, #4
 800317c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003180:	9a04      	ldr	r2, [sp, #16]
 8003182:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8003186:	9a03      	ldr	r2, [sp, #12]
 8003188:	0910      	lsrs	r0, r2, #4
 800318a:	9a02      	ldr	r2, [sp, #8]
 800318c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
                data->pressure = calc_pressure(adc_pres, dev);
 8003190:	9a01      	ldr	r2, [sp, #4]
 8003192:	ea40 3002 	orr.w	r0, r0, r2, lsl #12
    var1 = ((int32_t)temp_adc >> 3) - ((int32_t)dev->calib.par_t1 << 1);
 8003196:	f8bb 201e 	ldrh.w	r2, [fp, #30]
 800319a:	0052      	lsls	r2, r2, #1
 800319c:	ebc2 02d3 	rsb	r2, r2, r3, lsr #3
 80031a0:	ea4f 7ce2 	mov.w	ip, r2, asr #31
    var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 80031a4:	0853      	lsrs	r3, r2, #1
 80031a6:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
 80031aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80031ae:	fba3 3103 	umull	r3, r1, r3, r3
 80031b2:	eb01 014c 	add.w	r1, r1, ip, lsl #1
 80031b6:	0b1b      	lsrs	r3, r3, #12
 80031b8:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 80031bc:	ea4f 3821 	mov.w	r8, r1, asr #12
    var2 = (var1 * (int32_t)dev->calib.par_t2) >> 11;
 80031c0:	f9bb 1020 	ldrsh.w	r1, [fp, #32]
 80031c4:	fb81 1202 	smull	r1, r2, r1, r2
 80031c8:	0ac9      	lsrs	r1, r1, #11
 80031ca:	ea41 5142 	orr.w	r1, r1, r2, lsl #21
    var3 = ((var3) * ((int32_t)dev->calib.par_t3 << 4)) >> 14;
 80031ce:	ea4f 72ee 	mov.w	r2, lr, asr #31
 80031d2:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
 80031d6:	fb03 f202 	mul.w	r2, r3, r2
 80031da:	fb0c 2208 	mla	r2, ip, r8, r2
 80031de:	fba3 c30c 	umull	ip, r3, r3, ip
 80031e2:	441a      	add	r2, r3
 80031e4:	ea4f 339c 	mov.w	r3, ip, lsr #14
 80031e8:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
    dev->calib.t_fine = (int32_t)(var2 + var3);
 80031ec:	4419      	add	r1, r3
 80031ee:	f8cb 1038 	str.w	r1, [fp, #56]	@ 0x38
    calc_temp = (int16_t)(((dev->calib.t_fine * 5) + 128) >> 8);
 80031f2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80031f6:	f101 0380 	add.w	r3, r1, #128	@ 0x80
 80031fa:	121b      	asrs	r3, r3, #8
 80031fc:	80eb      	strh	r3, [r5, #6]
                data->pressure = calc_pressure(adc_pres, dev);
 80031fe:	4659      	mov	r1, fp
 8003200:	f7fe fdae 	bl	8001d60 <calc_pressure>
                data->humidity = calc_humidity(adc_hum, dev);
 8003204:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
                data->pressure = calc_pressure(adc_pres, dev);
 8003208:	60a8      	str	r0, [r5, #8]
                data->humidity = calc_humidity(adc_hum, dev);
 800320a:	4659      	mov	r1, fp
 800320c:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
 8003210:	f7fe fe0c 	bl	8001e2c <calc_humidity>
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8003214:	f8db 3008 	ldr.w	r3, [fp, #8]
                data->humidity = calc_humidity(adc_hum, dev);
 8003218:	60e8      	str	r0, [r5, #12]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800321a:	2b01      	cmp	r3, #1
 800321c:	f000 82ba 	beq.w	8003794 <bme68x_get_data+0x8b8>
    var2 = (((int64_t)((int64_t)gas_res_adc << 15) - (int64_t)(16777216)) + var1);
 8003220:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003222:	f99b 203e 	ldrsb.w	r2, [fp, #62]	@ 0x3e
    uint32_t lookup_table1[16] = {
 8003226:	f8df c0d0 	ldr.w	ip, [pc, #208]	@ 80032f8 <bme68x_get_data+0x41c>
    var1 = (int64_t)((1340 + (5 * (int64_t)dev->calib.range_sw_err)) * ((int64_t)lookup_table1[gas_range])) >> 16;
 800322a:	f009 0a0f 	and.w	sl, r9, #15
 800322e:	ab54      	add	r3, sp, #336	@ 0x150
 8003230:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8003234:	ea4f 1399 	mov.w	r3, r9, lsr #6
    var2 = (((int64_t)((int64_t)gas_res_adc << 15) - (int64_t)(16777216)) + var1);
 8003238:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 800323c:	03db      	lsls	r3, r3, #15
 800323e:	f113 437f 	adds.w	r3, r3, #4278190080	@ 0xff000000
 8003242:	9301      	str	r3, [sp, #4]
    var1 = (int64_t)((1340 + (5 * (int64_t)dev->calib.range_sw_err)) * ((int64_t)lookup_table1[gas_range])) >> 16;
 8003244:	f240 593c 	movw	r9, #1340	@ 0x53c
 8003248:	f04f 0305 	mov.w	r3, #5
 800324c:	fbc3 9702 	smlal	r9, r7, r3, r2
    var2 = (((int64_t)((int64_t)gas_res_adc << 15) - (int64_t)(16777216)) + var1);
 8003250:	eb62 0202 	sbc.w	r2, r2, r2
 8003254:	9202      	str	r2, [sp, #8]
    uint32_t lookup_table1[16] = {
 8003256:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800325a:	f10d 08d0 	add.w	r8, sp, #208	@ 0xd0
 800325e:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8003262:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003266:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800326a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800326e:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8003272:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
    uint32_t lookup_table2[16] = {
 8003276:	f10c 0b10 	add.w	fp, ip, #16
    uint32_t lookup_table1[16] = {
 800327a:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
    uint32_t lookup_table2[16] = {
 800327e:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8003282:	f50d 7e88 	add.w	lr, sp, #272	@ 0x110
 8003286:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800328a:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800328e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003292:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8003296:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800329a:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800329e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    var1 = (int64_t)((1340 + (5 * (int64_t)dev->calib.range_sw_err)) * ((int64_t)lookup_table1[gas_range])) >> 16;
 80032a2:	f85a 3c80 	ldr.w	r3, [sl, #-128]
    var3 = (((int64_t)lookup_table2[gas_range] * (int64_t)var1) >> 9);
 80032a6:	f85a cc40 	ldr.w	ip, [sl, #-64]
    var1 = (int64_t)((1340 + (5 * (int64_t)dev->calib.range_sw_err)) * ((int64_t)lookup_table1[gas_range])) >> 16;
 80032aa:	fba9 1003 	umull	r1, r0, r9, r3
 80032ae:	fb03 0007 	mla	r0, r3, r7, r0
 80032b2:	0c09      	lsrs	r1, r1, #16
    var2 = (((int64_t)((int64_t)gas_res_adc << 15) - (int64_t)(16777216)) + var1);
 80032b4:	9b01      	ldr	r3, [sp, #4]
    var1 = (int64_t)((1340 + (5 * (int64_t)dev->calib.range_sw_err)) * ((int64_t)lookup_table1[gas_range])) >> 16;
 80032b6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    var2 = (((int64_t)((int64_t)gas_res_adc << 15) - (int64_t)(16777216)) + var1);
 80032ba:	185a      	adds	r2, r3, r1
 80032bc:	9b02      	ldr	r3, [sp, #8]
    var1 = (int64_t)((1340 + (5 * (int64_t)dev->calib.range_sw_err)) * ((int64_t)lookup_table1[gas_range])) >> 16;
 80032be:	ea4f 4720 	mov.w	r7, r0, asr #16
    var2 = (((int64_t)((int64_t)gas_res_adc << 15) - (int64_t)(16777216)) + var1);
 80032c2:	eb43 4320 	adc.w	r3, r3, r0, asr #16
    var3 = (((int64_t)lookup_table2[gas_range] * (int64_t)var1) >> 9);
 80032c6:	fbac 0101 	umull	r0, r1, ip, r1
 80032ca:	fb0c 1107 	mla	r1, ip, r7, r1
 80032ce:	0a40      	lsrs	r0, r0, #9
    calc_gas_res = (uint32_t)((var3 + ((int64_t)var2 >> 1)) / (int64_t)var2);
 80032d0:	0857      	lsrs	r7, r2, #1
 80032d2:	ea47 77c3 	orr.w	r7, r7, r3, lsl #31
    var3 = (((int64_t)lookup_table2[gas_range] * (int64_t)var1) >> 9);
 80032d6:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    calc_gas_res = (uint32_t)((var3 + ((int64_t)var2 >> 1)) / (int64_t)var2);
 80032da:	19c0      	adds	r0, r0, r7
 80032dc:	ea4f 0763 	mov.w	r7, r3, asr #1
 80032e0:	eb47 2161 	adc.w	r1, r7, r1, asr #9
 80032e4:	f7fd f938 	bl	8000558 <__aeabi_ldivmod>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 80032e8:	6128      	str	r0, [r5, #16]
                if (data->status & BME68X_NEW_DATA_MSK)
 80032ea:	f995 3000 	ldrsb.w	r3, [r5]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f6bf ae4c 	bge.w	8002f8c <bme68x_get_data+0xb0>
            rslt = read_field_data(0, data, dev);
 80032f4:	2700      	movs	r7, #0
 80032f6:	e622      	b.n	8002f3e <bme68x_get_data+0x62>
 80032f8:	0800ce60 	.word	0x0800ce60
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80032fc:	f8db 6040 	ldr.w	r6, [fp, #64]	@ 0x40
 8003300:	2e00      	cmp	r6, #0
 8003302:	f43f ae43 	beq.w	8002f8c <bme68x_get_data+0xb0>
 8003306:	f8db 3044 	ldr.w	r3, [fp, #68]	@ 0x44
 800330a:	2b00      	cmp	r3, #0
 800330c:	f43f ae3e 	beq.w	8002f8c <bme68x_get_data+0xb0>
 8003310:	f8db 3048 	ldr.w	r3, [fp, #72]	@ 0x48
 8003314:	2b00      	cmp	r3, #0
 8003316:	f43f ae39 	beq.w	8002f8c <bme68x_get_data+0xb0>
        if (dev->intf == BME68X_SPI_INTF)
 800331a:	f89b 300c 	ldrb.w	r3, [fp, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 8180 	beq.w	8003624 <bme68x_get_data+0x748>
 8003324:	2050      	movs	r0, #80	@ 0x50
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8003326:	f8db 3004 	ldr.w	r3, [fp, #4]
 800332a:	221e      	movs	r2, #30
 800332c:	a910      	add	r1, sp, #64	@ 0x40
 800332e:	47b0      	blx	r6
 8003330:	f88b 004c 	strb.w	r0, [fp, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8003334:	2800      	cmp	r0, #0
 8003336:	f47f ae29 	bne.w	8002f8c <bme68x_get_data+0xb0>
    var1 = ((int32_t)temp_adc >> 3) - ((int32_t)dev->calib.par_t1 << 1);
 800333a:	f8bb 201e 	ldrh.w	r2, [fp, #30]
    var3 = ((var3) * ((int32_t)dev->calib.par_t3 << 4)) >> 14;
 800333e:	f99b 3022 	ldrsb.w	r3, [fp, #34]	@ 0x22
    var1 = (int64_t)((1340 + (5 * (int64_t)dev->calib.range_sw_err)) * ((int64_t)lookup_table1[gas_range])) >> 16;
 8003342:	9009      	str	r0, [sp, #36]	@ 0x24
    var1 = ((int32_t)temp_adc >> 3) - ((int32_t)dev->calib.par_t1 << 1);
 8003344:	0052      	lsls	r2, r2, #1
 8003346:	9205      	str	r2, [sp, #20]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8003348:	f8db 2008 	ldr.w	r2, [fp, #8]
 800334c:	9201      	str	r2, [sp, #4]
    var2 = (var1 * (int32_t)dev->calib.par_t2) >> 11;
 800334e:	f9bb 2020 	ldrsh.w	r2, [fp, #32]
 8003352:	9206      	str	r2, [sp, #24]
    calc_gas_res = calc_gas_res * 100;
 8003354:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
    var3 = ((var3) * ((int32_t)dev->calib.par_t3 << 4)) >> 14;
 8003358:	011a      	lsls	r2, r3, #4
 800335a:	17db      	asrs	r3, r3, #31
 800335c:	9308      	str	r3, [sp, #32]
 800335e:	ab0c      	add	r3, sp, #48	@ 0x30
 8003360:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 8003364:	9207      	str	r2, [sp, #28]
 8003366:	9302      	str	r3, [sp, #8]
    calc_gas_res = calc_gas_res * 100;
 8003368:	46d9      	mov	r9, fp
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 800336a:	f89a 0003 	ldrb.w	r0, [sl, #3]
 800336e:	f89a 1002 	ldrb.w	r1, [sl, #2]
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 8003372:	f89a 3006 	ldrb.w	r3, [sl, #6]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 8003376:	f89a 500f 	ldrb.w	r5, [sl, #15]
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 800337a:	f89a 4009 	ldrb.w	r4, [sl, #9]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 800337e:	9503      	str	r5, [sp, #12]
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 8003380:	0100      	lsls	r0, r0, #4
 8003382:	ea40 3001 	orr.w	r0, r0, r1, lsl #12
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 8003386:	f89a 1005 	ldrb.w	r1, [sl, #5]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800338a:	9d01      	ldr	r5, [sp, #4]
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 800338c:	f89a 2000 	ldrb.w	r2, [sl]
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 8003390:	f89a b00e 	ldrb.w	fp, [sl, #14]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 8003394:	f89a 7010 	ldrb.w	r7, [sl, #16]
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 8003398:	f89a 600d 	ldrb.w	r6, [sl, #13]
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 80033a2:	9902      	ldr	r1, [sp, #8]
 80033a4:	f851 8b04 	ldr.w	r8, [r1], #4
 80033a8:	9102      	str	r1, [sp, #8]
                        ((uint32_t) buff[off + 4] / 16));
 80033aa:	f89a 1004 	ldrb.w	r1, [sl, #4]
        adc_pres =
 80033ae:	ea40 1011 	orr.w	r0, r0, r1, lsr #4
                        ((uint32_t) buff[off + 7] / 16));
 80033b2:	f89a 1007 	ldrb.w	r1, [sl, #7]
        adc_temp =
 80033b6:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 80033ba:	f89a 1008 	ldrb.w	r1, [sl, #8]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80033be:	2d01      	cmp	r5, #1
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 80033c0:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
        data[i]->meas_index = buff[off + 1];
 80033c4:	f89a 1001 	ldrb.w	r1, [sl, #1]
 80033c8:	f888 1002 	strb.w	r1, [r8, #2]
 80033cc:	bf08      	it	eq
 80033ce:	f007 0c30 	andeq.w	ip, r7, #48	@ 0x30
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 80033d2:	f002 010f 	and.w	r1, r2, #15
 80033d6:	bf18      	it	ne
 80033d8:	f00b 0c30 	andne.w	ip, fp, #48	@ 0x30
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 80033dc:	f002 0280 	and.w	r2, r2, #128	@ 0x80
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 80033e0:	ea42 020c 	orr.w	r2, r2, ip
 80033e4:	f888 2000 	strb.w	r2, [r8]
    var1 = ((int32_t)temp_adc >> 3) - ((int32_t)dev->calib.par_t1 << 1);
 80033e8:	9a05      	ldr	r2, [sp, #20]
    var3 = ((var3) * ((int32_t)dev->calib.par_t3 << 4)) >> 14;
 80033ea:	9d08      	ldr	r5, [sp, #32]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 80033ec:	f888 1001 	strb.w	r1, [r8, #1]
    var1 = ((int32_t)temp_adc >> 3) - ((int32_t)dev->calib.par_t1 << 1);
 80033f0:	ebc2 03d3 	rsb	r3, r2, r3, lsr #3
 80033f4:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 80033f8:	085a      	lsrs	r2, r3, #1
 80033fa:	ea42 72ce 	orr.w	r2, r2, lr, lsl #31
 80033fe:	fb02 fe0e 	mul.w	lr, r2, lr
 8003402:	fba2 c202 	umull	ip, r2, r2, r2
 8003406:	eb02 024e 	add.w	r2, r2, lr, lsl #1
 800340a:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
 800340e:	ea4c 5c02 	orr.w	ip, ip, r2, lsl #20
    var3 = ((var3) * ((int32_t)dev->calib.par_t3 << 4)) >> 14;
 8003412:	fb0c fe05 	mul.w	lr, ip, r5
 8003416:	9d07      	ldr	r5, [sp, #28]
    var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8003418:	1312      	asrs	r2, r2, #12
    var3 = ((var3) * ((int32_t)dev->calib.par_t3 << 4)) >> 14;
 800341a:	fb05 e202 	mla	r2, r5, r2, lr
 800341e:	fbac ce05 	umull	ip, lr, ip, r5
 8003422:	4496      	add	lr, r2
    var2 = (var1 * (int32_t)dev->calib.par_t2) >> 11;
 8003424:	9a06      	ldr	r2, [sp, #24]
 8003426:	fb82 3203 	smull	r3, r2, r2, r3
    var3 = ((var3) * ((int32_t)dev->calib.par_t3 << 4)) >> 14;
 800342a:	ea4f 3c9c 	mov.w	ip, ip, lsr #14
    var2 = (var1 * (int32_t)dev->calib.par_t2) >> 11;
 800342e:	0adb      	lsrs	r3, r3, #11
    var3 = ((var3) * ((int32_t)dev->calib.par_t3 << 4)) >> 14;
 8003430:	ea4c 4c8e 	orr.w	ip, ip, lr, lsl #18
    var2 = (var1 * (int32_t)dev->calib.par_t2) >> 11;
 8003434:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
    dev->calib.t_fine = (int32_t)(var2 + var3);
 8003438:	4463      	add	r3, ip
 800343a:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
    calc_temp = (int16_t)(((dev->calib.t_fine * 5) + 128) >> 8);
 800343e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003442:	3380      	adds	r3, #128	@ 0x80
 8003444:	121b      	asrs	r3, r3, #8
 8003446:	f8a8 3006 	strh.w	r3, [r8, #6]
        data[i]->idac = set_val[data[i]->gas_index];
 800344a:	aa10      	add	r2, sp, #64	@ 0x40
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 800344c:	ab10      	add	r3, sp, #64	@ 0x40
 800344e:	440b      	add	r3, r1
        data[i]->idac = set_val[data[i]->gas_index];
 8003450:	5c52      	ldrb	r2, [r2, r1]
 8003452:	f888 2004 	strb.w	r2, [r8, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 8003456:	7a9a      	ldrb	r2, [r3, #10]
 8003458:	f888 2003 	strb.w	r2, [r8, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 800345c:	7d1b      	ldrb	r3, [r3, #20]
 800345e:	f888 3005 	strb.w	r3, [r8, #5]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 8003462:	4649      	mov	r1, r9
 8003464:	f7fe fc7c 	bl	8001d60 <calc_pressure>
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8003468:	4649      	mov	r1, r9
        data[i]->pressure = calc_pressure(adc_pres, dev);
 800346a:	f8c8 0008 	str.w	r0, [r8, #8]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 800346e:	4620      	mov	r0, r4
 8003470:	f7fe fcdc 	bl	8001e2c <calc_humidity>
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8003474:	9b01      	ldr	r3, [sp, #4]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8003476:	f8c8 000c 	str.w	r0, [r8, #12]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800347a:	2b01      	cmp	r3, #1
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800347c:	f10a 0a11 	add.w	sl, sl, #17
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8003480:	f000 80db 	beq.w	800363a <bme68x_get_data+0x75e>
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 8003484:	ea4f 1c9b 	mov.w	ip, fp, lsr #6
    var2 = (((int64_t)((int64_t)gas_res_adc << 15) - (int64_t)(16777216)) + var1);
 8003488:	ea4c 0c86 	orr.w	ip, ip, r6, lsl #2
 800348c:	f999 303e 	ldrsb.w	r3, [r9, #62]	@ 0x3e
    uint32_t lookup_table1[16] = {
 8003490:	4cbf      	ldr	r4, [pc, #764]	@ (8003790 <bme68x_get_data+0x8b4>)
    var1 = (int64_t)((1340 + (5 * (int64_t)dev->calib.range_sw_err)) * ((int64_t)lookup_table1[gas_range])) >> 16;
 8003492:	f00b 020f 	and.w	r2, fp, #15
 8003496:	a954      	add	r1, sp, #336	@ 0x150
 8003498:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
    var2 = (((int64_t)((int64_t)gas_res_adc << 15) - (int64_t)(16777216)) + var1);
 800349c:	ea4f 3ccc 	mov.w	ip, ip, lsl #15
    var1 = (int64_t)((1340 + (5 * (int64_t)dev->calib.range_sw_err)) * ((int64_t)lookup_table1[gas_range])) >> 16;
 80034a0:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
    var2 = (((int64_t)((int64_t)gas_res_adc << 15) - (int64_t)(16777216)) + var1);
 80034a4:	f11c 4c7f 	adds.w	ip, ip, #4278190080	@ 0xff000000
    var1 = (int64_t)((1340 + (5 * (int64_t)dev->calib.range_sw_err)) * ((int64_t)lookup_table1[gas_range])) >> 16;
 80034a8:	f04f 0105 	mov.w	r1, #5
 80034ac:	f240 523c 	movw	r2, #1340	@ 0x53c
 80034b0:	fbc1 2b03 	smlal	r2, fp, r1, r3
    var2 = (((int64_t)((int64_t)gas_res_adc << 15) - (int64_t)(16777216)) + var1);
 80034b4:	eb63 0303 	sbc.w	r3, r3, r3
    var1 = (int64_t)((1340 + (5 * (int64_t)dev->calib.range_sw_err)) * ((int64_t)lookup_table1[gas_range])) >> 16;
 80034b8:	9203      	str	r2, [sp, #12]
    var2 = (((int64_t)((int64_t)gas_res_adc << 15) - (int64_t)(16777216)) + var1);
 80034ba:	9304      	str	r3, [sp, #16]
    uint32_t lookup_table1[16] = {
 80034bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034be:	af34      	add	r7, sp, #208	@ 0xd0
 80034c0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80034c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034c4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80034c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034c8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80034ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    uint32_t lookup_table2[16] = {
 80034ce:	f104 0610 	add.w	r6, r4, #16
    uint32_t lookup_table1[16] = {
 80034d2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    uint32_t lookup_table2[16] = {
 80034d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80034d8:	ad44      	add	r5, sp, #272	@ 0x110
 80034da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80034de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80034e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034e4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80034e8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    var1 = (int64_t)((1340 + (5 * (int64_t)dev->calib.range_sw_err)) * ((int64_t)lookup_table1[gas_range])) >> 16;
 80034ec:	f85e 3c80 	ldr.w	r3, [lr, #-128]
 80034f0:	9a03      	ldr	r2, [sp, #12]
    var3 = (((int64_t)lookup_table2[gas_range] * (int64_t)var1) >> 9);
 80034f2:	f85e 4c40 	ldr.w	r4, [lr, #-64]
    var1 = (int64_t)((1340 + (5 * (int64_t)dev->calib.range_sw_err)) * ((int64_t)lookup_table1[gas_range])) >> 16;
 80034f6:	fba2 1003 	umull	r1, r0, r2, r3
 80034fa:	fb03 000b 	mla	r0, r3, fp, r0
 80034fe:	0c09      	lsrs	r1, r1, #16
 8003500:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    var2 = (((int64_t)((int64_t)gas_res_adc << 15) - (int64_t)(16777216)) + var1);
 8003504:	9b04      	ldr	r3, [sp, #16]
 8003506:	eb1c 0201 	adds.w	r2, ip, r1
 800350a:	eb43 4320 	adc.w	r3, r3, r0, asr #16
    var1 = (int64_t)((1340 + (5 * (int64_t)dev->calib.range_sw_err)) * ((int64_t)lookup_table1[gas_range])) >> 16;
 800350e:	1405      	asrs	r5, r0, #16
    var3 = (((int64_t)lookup_table2[gas_range] * (int64_t)var1) >> 9);
 8003510:	fba4 0101 	umull	r0, r1, r4, r1
 8003514:	fb04 1105 	mla	r1, r4, r5, r1
 8003518:	0a40      	lsrs	r0, r0, #9
    calc_gas_res = (uint32_t)((var3 + ((int64_t)var2 >> 1)) / (int64_t)var2);
 800351a:	0854      	lsrs	r4, r2, #1
 800351c:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    var3 = (((int64_t)lookup_table2[gas_range] * (int64_t)var1) >> 9);
 8003520:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    calc_gas_res = (uint32_t)((var3 + ((int64_t)var2 >> 1)) / (int64_t)var2);
 8003524:	1900      	adds	r0, r0, r4
 8003526:	ea4f 0463 	mov.w	r4, r3, asr #1
 800352a:	eb44 2161 	adc.w	r1, r4, r1, asr #9
 800352e:	f7fd f813 	bl	8000558 <__aeabi_ldivmod>
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8003532:	f10d 0393 	add.w	r3, sp, #147	@ 0x93
 8003536:	459a      	cmp	sl, r3
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8003538:	f8c8 0010 	str.w	r0, [r8, #16]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800353c:	f47f af15 	bne.w	800336a <bme68x_get_data+0x48e>
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 8003540:	f99d 3094 	ldrsb.w	r3, [sp, #148]	@ 0x94
 8003544:	f99d 20a8 	ldrsb.w	r2, [sp, #168]	@ 0xa8
 8003548:	f99d 10bc 	ldrsb.w	r1, [sp, #188]	@ 0xbc
    meas_index1 = (int16_t)field[low_index]->meas_index;
 800354c:	f89d 7096 	ldrb.w	r7, [sp, #150]	@ 0x96
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8003550:	f89d 00aa 	ldrb.w	r0, [sp, #170]	@ 0xaa
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 8003554:	0fde      	lsrs	r6, r3, #31
 8003556:	2a00      	cmp	r2, #0
                    new_fields++;
 8003558:	bfb8      	it	lt
 800355a:	3601      	addlt	r6, #1
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 800355c:	2900      	cmp	r1, #0
                    new_fields++;
 800355e:	bfbc      	itt	lt
 8003560:	3601      	addlt	r6, #1
 8003562:	b2f6      	uxtblt	r6, r6
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8003564:	2b00      	cmp	r3, #0
 8003566:	e9dd 540a 	ldrd	r5, r4, [sp, #40]	@ 0x28
 800356a:	f2c0 8085 	blt.w	8003678 <bme68x_get_data+0x79c>
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 800356e:	2a00      	cmp	r2, #0
 8003570:	da03      	bge.n	800357a <bme68x_get_data+0x69e>
    field[index1] = field[index2];
 8003572:	ab2a      	add	r3, sp, #168	@ 0xa8
 8003574:	930c      	str	r3, [sp, #48]	@ 0x30
    field[index2] = temp;
 8003576:	ab25      	add	r3, sp, #148	@ 0x94
 8003578:	930d      	str	r3, [sp, #52]	@ 0x34
    meas_index1 = (int16_t)field[low_index]->meas_index;
 800357a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    meas_index2 = (int16_t)field[high_index]->meas_index;
 800357c:	f89d 00be 	ldrb.w	r0, [sp, #190]	@ 0xbe
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8003580:	f993 2000 	ldrsb.w	r2, [r3]
    meas_index1 = (int16_t)field[low_index]->meas_index;
 8003584:	789f      	ldrb	r7, [r3, #2]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8003586:	2a00      	cmp	r2, #0
 8003588:	f2c0 80a1 	blt.w	80036ce <bme68x_get_data+0x7f2>
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 800358c:	2900      	cmp	r1, #0
 800358e:	f280 8082 	bge.w	8003696 <bme68x_get_data+0x7ba>
    field[index1] = field[index2];
 8003592:	aa2f      	add	r2, sp, #188	@ 0xbc
 8003594:	920c      	str	r2, [sp, #48]	@ 0x30
    meas_index1 = (int16_t)field[low_index]->meas_index;
 8003596:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
    field[index2] = temp;
 8003598:	930e      	str	r3, [sp, #56]	@ 0x38
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 800359a:	f992 1000 	ldrsb.w	r1, [r2]
 800359e:	2900      	cmp	r1, #0
 80035a0:	db06      	blt.n	80035b0 <bme68x_get_data+0x6d4>
    meas_index2 = (int16_t)field[high_index]->meas_index;
 80035a2:	4619      	mov	r1, r3
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 80035a4:	f991 3000 	ldrsb.w	r3, [r1]
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	da01      	bge.n	80035b0 <bme68x_get_data+0x6d4>
    field[index1] = field[index2];
 80035ac:	e9cd 120d 	strd	r1, r2, [sp, #52]	@ 0x34
                data[i] = *field_ptr[i];
 80035b0:	e9dd a90c 	ldrd	sl, r9, [sp, #48]	@ 0x30
 80035b4:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 80035b8:	f105 0814 	add.w	r8, r5, #20
 80035bc:	f105 0c28 	add.w	ip, r5, #40	@ 0x28
 80035c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035c2:	f8da 3000 	ldr.w	r3, [sl]
 80035c6:	602b      	str	r3, [r5, #0]
 80035c8:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 80035cc:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80035d0:	f8dd e038 	ldr.w	lr, [sp, #56]	@ 0x38
 80035d4:	f8d9 3000 	ldr.w	r3, [r9]
 80035d8:	f8c8 3000 	str.w	r3, [r8]
 80035dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80035e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
            if (new_fields == 0)
 80035e4:	fab6 f786 	clz	r7, r6
                data[i] = *field_ptr[i];
 80035e8:	f8de 3000 	ldr.w	r3, [lr]
 80035ec:	f8cc 3000 	str.w	r3, [ip]
            if (new_fields == 0)
 80035f0:	097f      	lsrs	r7, r7, #5
 80035f2:	007f      	lsls	r7, r7, #1
 80035f4:	e4a3      	b.n	8002f3e <bme68x_get_data+0x62>
            rslt = set_mem_page(reg_addr, dev);
 80035f6:	4659      	mov	r1, fp
 80035f8:	201d      	movs	r0, #29
 80035fa:	f7fe fc7b 	bl	8001ef4 <set_mem_page>
            if (rslt == BME68X_OK)
 80035fe:	b930      	cbnz	r0, 800360e <bme68x_get_data+0x732>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8003600:	f8db 9040 	ldr.w	r9, [fp, #64]	@ 0x40
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8003604:	209d      	movs	r0, #157	@ 0x9d
 8003606:	e4b7      	b.n	8002f78 <bme68x_get_data+0x9c>
        rslt = BME68X_E_NULL_PTR;
 8003608:	f04f 37ff 	mov.w	r7, #4294967295
 800360c:	e49b      	b.n	8002f46 <bme68x_get_data+0x6a>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800360e:	f8db 5040 	ldr.w	r5, [fp, #64]	@ 0x40
 8003612:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003616:	2233      	movs	r2, #51	@ 0x33
 8003618:	a918      	add	r1, sp, #96	@ 0x60
 800361a:	201d      	movs	r0, #29
 800361c:	47a8      	blx	r5
 800361e:	f88b 004c 	strb.w	r0, [fp, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8003622:	e4b3      	b.n	8002f8c <bme68x_get_data+0xb0>
            rslt = set_mem_page(reg_addr, dev);
 8003624:	4659      	mov	r1, fp
 8003626:	2050      	movs	r0, #80	@ 0x50
 8003628:	f7fe fc64 	bl	8001ef4 <set_mem_page>
            if (rslt == BME68X_OK)
 800362c:	2800      	cmp	r0, #0
 800362e:	f040 8085 	bne.w	800373c <bme68x_get_data+0x860>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8003632:	f8db 6040 	ldr.w	r6, [fp, #64]	@ 0x40
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8003636:	20d0      	movs	r0, #208	@ 0xd0
 8003638:	e675      	b.n	8003326 <bme68x_get_data+0x44a>
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 800363a:	9b03      	ldr	r3, [sp, #12]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 800363c:	09ba      	lsrs	r2, r7, #6
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 800363e:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8003642:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 8003646:	f007 030f 	and.w	r3, r7, #15
 800364a:	fa21 f303 	lsr.w	r3, r1, r3
    var2 *= INT32_C(3);
 800364e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    calc_gas_res = (UINT32_C(10000) * var1) / (uint32_t)var2;
 8003652:	f242 7110 	movw	r1, #10000	@ 0x2710
    var2 = INT32_C(4096) + var2;
 8003656:	f502 6220 	add.w	r2, r2, #2560	@ 0xa00
    calc_gas_res = (UINT32_C(10000) * var1) / (uint32_t)var2;
 800365a:	fb01 f303 	mul.w	r3, r1, r3
 800365e:	fbb3 f3f2 	udiv	r3, r3, r2
    calc_gas_res = calc_gas_res * 100;
 8003662:	2264      	movs	r2, #100	@ 0x64
 8003664:	fb02 f303 	mul.w	r3, r2, r3
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8003668:	f8c8 3010 	str.w	r3, [r8, #16]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800366c:	f10d 0393 	add.w	r3, sp, #147	@ 0x93
 8003670:	4553      	cmp	r3, sl
 8003672:	f47f ae7a 	bne.w	800336a <bme68x_get_data+0x48e>
 8003676:	e763      	b.n	8003540 <bme68x_get_data+0x664>
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8003678:	2a00      	cmp	r2, #0
 800367a:	f6bf af7e 	bge.w	800357a <bme68x_get_data+0x69e>
        int16_t diff = meas_index2 - meas_index1;
 800367e:	1bc0      	subs	r0, r0, r7
 8003680:	b280      	uxth	r0, r0
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8003682:	1c83      	adds	r3, r0, #2
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	f67f af73 	bls.w	8003572 <bme68x_get_data+0x696>
 800368c:	b200      	sxth	r0, r0
 800368e:	2802      	cmp	r0, #2
 8003690:	f77f af73 	ble.w	800357a <bme68x_get_data+0x69e>
 8003694:	e76d      	b.n	8003572 <bme68x_get_data+0x696>
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8003696:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 800369a:	f992 7000 	ldrsb.w	r7, [r2]
    meas_index1 = (int16_t)field[low_index]->meas_index;
 800369e:	f892 c002 	ldrb.w	ip, [r2, #2]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 80036a2:	7888      	ldrb	r0, [r1, #2]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 80036a4:	f991 3000 	ldrsb.w	r3, [r1]
 80036a8:	2f00      	cmp	r7, #0
 80036aa:	f6bf af7d 	bge.w	80035a8 <bme68x_get_data+0x6cc>
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f6bf af7e 	bge.w	80035b0 <bme68x_get_data+0x6d4>
        int16_t diff = meas_index2 - meas_index1;
 80036b4:	eba0 000c 	sub.w	r0, r0, ip
 80036b8:	b280      	uxth	r0, r0
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 80036ba:	1c83      	adds	r3, r0, #2
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b01      	cmp	r3, #1
 80036c0:	f67f af74 	bls.w	80035ac <bme68x_get_data+0x6d0>
 80036c4:	b200      	sxth	r0, r0
 80036c6:	2802      	cmp	r0, #2
 80036c8:	f73f af70 	bgt.w	80035ac <bme68x_get_data+0x6d0>
 80036cc:	e770      	b.n	80035b0 <bme68x_get_data+0x6d4>
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 80036ce:	2900      	cmp	r1, #0
 80036d0:	dae1      	bge.n	8003696 <bme68x_get_data+0x7ba>
        int16_t diff = meas_index2 - meas_index1;
 80036d2:	1bc0      	subs	r0, r0, r7
 80036d4:	b280      	uxth	r0, r0
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 80036d6:	1c82      	adds	r2, r0, #2
 80036d8:	b292      	uxth	r2, r2
 80036da:	2a01      	cmp	r2, #1
 80036dc:	d902      	bls.n	80036e4 <bme68x_get_data+0x808>
 80036de:	b200      	sxth	r0, r0
 80036e0:	2802      	cmp	r0, #2
 80036e2:	ddd8      	ble.n	8003696 <bme68x_get_data+0x7ba>
    field[index1] = field[index2];
 80036e4:	aa2f      	add	r2, sp, #188	@ 0xbc
 80036e6:	920c      	str	r2, [sp, #48]	@ 0x30
    meas_index1 = (int16_t)field[low_index]->meas_index;
 80036e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
    field[index2] = temp;
 80036ea:	930e      	str	r3, [sp, #56]	@ 0x38
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 80036ec:	f992 7000 	ldrsb.w	r7, [r2]
    meas_index1 = (int16_t)field[low_index]->meas_index;
 80036f0:	f892 c002 	ldrb.w	ip, [r2, #2]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 80036f4:	7898      	ldrb	r0, [r3, #2]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 80036f6:	2f00      	cmp	r7, #0
    meas_index2 = (int16_t)field[high_index]->meas_index;
 80036f8:	4619      	mov	r1, r3
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 80036fa:	f6bf af53 	bge.w	80035a4 <bme68x_get_data+0x6c8>
 80036fe:	e7d9      	b.n	80036b4 <bme68x_get_data+0x7d8>
            rslt = set_mem_page(reg_addr, dev);
 8003700:	4659      	mov	r1, fp
 8003702:	4640      	mov	r0, r8
 8003704:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003706:	f7fe fbf5 	bl	8001ef4 <set_mem_page>
            if (rslt == BME68X_OK)
 800370a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800370c:	4607      	mov	r7, r0
 800370e:	b920      	cbnz	r0, 800371a <bme68x_get_data+0x83e>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8003710:	f8db 7040 	ldr.w	r7, [fp, #64]	@ 0x40
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8003714:	f048 0880 	orr.w	r8, r8, #128	@ 0x80
 8003718:	e4b9      	b.n	800308e <bme68x_get_data+0x1b2>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800371a:	4619      	mov	r1, r3
 800371c:	f8db 5040 	ldr.w	r5, [fp, #64]	@ 0x40
 8003720:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003724:	4640      	mov	r0, r8
 8003726:	2201      	movs	r2, #1
 8003728:	47a8      	blx	r5
 800372a:	f88b 004c 	strb.w	r0, [fp, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 800372e:	2800      	cmp	r0, #0
 8003730:	f43f ac8e 	beq.w	8003050 <bme68x_get_data+0x174>
 8003734:	e4b4      	b.n	80030a0 <bme68x_get_data+0x1c4>
        rslt = BME68X_E_NULL_PTR;
 8003736:	f04f 37ff 	mov.w	r7, #4294967295
 800373a:	e452      	b.n	8002fe2 <bme68x_get_data+0x106>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800373c:	f8db 5040 	ldr.w	r5, [fp, #64]	@ 0x40
 8003740:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003744:	a910      	add	r1, sp, #64	@ 0x40
 8003746:	221e      	movs	r2, #30
 8003748:	2050      	movs	r0, #80	@ 0x50
 800374a:	47a8      	blx	r5
 800374c:	f88b 004c 	strb.w	r0, [fp, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8003750:	e41c      	b.n	8002f8c <bme68x_get_data+0xb0>
            rslt = set_mem_page(reg_addr, dev);
 8003752:	4659      	mov	r1, fp
 8003754:	4640      	mov	r0, r8
 8003756:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003758:	f7fe fbcc 	bl	8001ef4 <set_mem_page>
            if (rslt == BME68X_OK)
 800375c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800375e:	4607      	mov	r7, r0
 8003760:	2800      	cmp	r0, #0
 8003762:	d1da      	bne.n	800371a <bme68x_get_data+0x83e>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8003764:	f8db 7040 	ldr.w	r7, [fp, #64]	@ 0x40
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8003768:	f048 0880 	orr.w	r8, r8, #128	@ 0x80
 800376c:	e4d1      	b.n	8003112 <bme68x_get_data+0x236>
        rslt = BME68X_E_NULL_PTR;
 800376e:	f04f 37ff 	mov.w	r7, #4294967295
 8003772:	e46d      	b.n	8003050 <bme68x_get_data+0x174>
            rslt = set_mem_page(reg_addr, dev);
 8003774:	4659      	mov	r1, fp
 8003776:	4640      	mov	r0, r8
 8003778:	930b      	str	r3, [sp, #44]	@ 0x2c
 800377a:	f7fe fbbb 	bl	8001ef4 <set_mem_page>
            if (rslt == BME68X_OK)
 800377e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003780:	4607      	mov	r7, r0
 8003782:	2800      	cmp	r0, #0
 8003784:	d1c9      	bne.n	800371a <bme68x_get_data+0x83e>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8003786:	f8db 7040 	ldr.w	r7, [fp, #64]	@ 0x40
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 800378a:	f048 0880 	orr.w	r8, r8, #128	@ 0x80
 800378e:	e4e5      	b.n	800315c <bme68x_get_data+0x280>
 8003790:	0800ce60 	.word	0x0800ce60
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8003794:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8003796:	ea4f 139a 	mov.w	r3, sl, lsr #6
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 800379a:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
    var2 *= INT32_C(3);
 800379e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    var2 = INT32_C(4096) + var2;
 80037a2:	f503 6220 	add.w	r2, r3, #2560	@ 0xa00
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 80037a6:	f00a 0a0f 	and.w	sl, sl, #15
 80037aa:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80037ae:	fa23 f30a 	lsr.w	r3, r3, sl
    calc_gas_res = (UINT32_C(10000) * var1) / (uint32_t)var2;
 80037b2:	f242 7110 	movw	r1, #10000	@ 0x2710
 80037b6:	fb01 f303 	mul.w	r3, r1, r3
 80037ba:	fbb3 f3f2 	udiv	r3, r3, r2
    calc_gas_res = calc_gas_res * 100;
 80037be:	2264      	movs	r2, #100	@ 0x64
 80037c0:	fb02 f303 	mul.w	r3, r2, r3
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 80037c4:	612b      	str	r3, [r5, #16]
            if (rslt == BME68X_OK)
 80037c6:	e590      	b.n	80032ea <bme68x_get_data+0x40e>

080037c8 <bme68x_set_heatr_conf>:
{
 80037c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037cc:	b095      	sub	sp, #84	@ 0x54
    if (conf != NULL)
 80037ce:	2900      	cmp	r1, #0
 80037d0:	f000 8447 	beq.w	8004062 <bme68x_set_heatr_conf+0x89a>
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 80037d4:	4606      	mov	r6, r0
 80037d6:	468b      	mov	fp, r1
 80037d8:	2000      	movs	r0, #0
 80037da:	4611      	mov	r1, r2
 80037dc:	4614      	mov	r4, r2
 80037de:	f7fe ff5d 	bl	800269c <bme68x_set_op_mode>
        if (rslt == BME68X_OK)
 80037e2:	4605      	mov	r5, r0
 80037e4:	b118      	cbz	r0, 80037ee <bme68x_set_heatr_conf+0x26>
}
 80037e6:	4628      	mov	r0, r5
 80037e8:	b015      	add	sp, #84	@ 0x54
 80037ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 80037ee:	236e      	movs	r3, #110	@ 0x6e
 80037f0:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80037f4:	4b10      	ldr	r3, [pc, #64]	@ (8003838 <bme68x_set_heatr_conf+0x70>)
 80037f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80037fa:	f10d 0818 	add.w	r8, sp, #24
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80037fe:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8003802:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8003806:	af0f      	add	r7, sp, #60	@ 0x3c
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8003808:	e8a8 0003 	stmia.w	r8!, {r0, r1}
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800380c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8003810:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8003814:	c703      	stmia	r7!, {r0, r1}
    switch (op_mode)
 8003816:	2e02      	cmp	r6, #2
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8003818:	f8a8 2000 	strh.w	r2, [r8]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800381c:	f8ae 2000 	strh.w	r2, [lr]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8003820:	f8ac 2000 	strh.w	r2, [ip]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8003824:	803a      	strh	r2, [r7, #0]
    switch (op_mode)
 8003826:	d009      	beq.n	800383c <bme68x_set_heatr_conf+0x74>
 8003828:	2e03      	cmp	r6, #3
 800382a:	f000 82e3 	beq.w	8003df4 <bme68x_set_heatr_conf+0x62c>
 800382e:	2e01      	cmp	r6, #1
 8003830:	f000 8277 	beq.w	8003d22 <bme68x_set_heatr_conf+0x55a>
            rslt = BME68X_W_DEFINE_OP_MODE;
 8003834:	2501      	movs	r5, #1
 8003836:	e7d6      	b.n	80037e6 <bme68x_set_heatr_conf+0x1e>
 8003838:	0800cee0 	.word	0x0800cee0
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 800383c:	f8db 000c 	ldr.w	r0, [fp, #12]
 8003840:	2800      	cmp	r0, #0
 8003842:	f000 840e 	beq.w	8004062 <bme68x_set_heatr_conf+0x89a>
 8003846:	f8db 8008 	ldr.w	r8, [fp, #8]
 800384a:	f1b8 0f00 	cmp.w	r8, #0
 800384e:	f000 8408 	beq.w	8004062 <bme68x_set_heatr_conf+0x89a>
            if (conf->shared_heatr_dur == 0)
 8003852:	f8bb 3012 	ldrh.w	r3, [fp, #18]
            for (i = 0; i < conf->profile_len; i++)
 8003856:	f89b a010 	ldrb.w	sl, [fp, #16]
            if (conf->shared_heatr_dur == 0)
 800385a:	9302      	str	r3, [sp, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 83c6 	beq.w	8003fee <bme68x_set_heatr_conf+0x826>
            for (i = 0; i < conf->profile_len; i++)
 8003862:	f1ba 0f00 	cmp.w	sl, #0
 8003866:	f000 83d9 	beq.w	800401c <bme68x_set_heatr_conf+0x854>
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 800386a:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 800386e:	4ae5      	ldr	r2, [pc, #916]	@ (8003c04 <bme68x_set_heatr_conf+0x43c>)
    var1 = (((int32_t)dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8003870:	f994 601c 	ldrsb.w	r6, [r4, #28]
 8003874:	4fe4      	ldr	r7, [pc, #912]	@ (8003c08 <bme68x_set_heatr_conf+0x440>)
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003876:	f503 3e16 	add.w	lr, r3, #153600	@ 0x25800
    if (temp > 400) /* Cap temperature */
 800387a:	f8b8 3000 	ldrh.w	r3, [r8]
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 800387e:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003882:	bf28      	it	cs
 8003884:	f44f 73c8 	movcs.w	r3, #400	@ 0x190
 8003888:	f20e 1e99 	addw	lr, lr, #409	@ 0x199
 800388c:	fb0e f303 	mul.w	r3, lr, r3
 8003890:	fba2 1303 	umull	r1, r3, r2, r3
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f503 1348 	add.w	r3, r3, #3276800	@ 0x320000
 800389a:	fba2 1303 	umull	r1, r3, r2, r3
    var1 = (((int32_t)dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 800389e:	f994 100e 	ldrsb.w	r1, [r4, #14]
 80038a2:	fb11 f106 	smulbb	r1, r1, r6
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 80038a6:	f994 6019 	ldrsb.w	r6, [r4, #25]
 80038aa:	08db      	lsrs	r3, r3, #3
 80038ac:	f506 7944 	add.w	r9, r6, #784	@ 0x310
    var1 = (((int32_t)dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 80038b0:	fb87 7c01 	smull	r7, ip, r7, r1
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 80038b4:	fb09 f303 	mul.w	r3, r9, r3
    var1 = (((int32_t)dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 80038b8:	17c9      	asrs	r1, r1, #31
 80038ba:	ebc1 11ac 	rsb	r1, r1, ip, asr #6
    var3 = var1 + (var2 / 2);
 80038be:	105b      	asrs	r3, r3, #1
 80038c0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    var1 = (((int32_t)dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 80038c4:	0209      	lsls	r1, r1, #8
 80038c6:	9100      	str	r1, [sp, #0]
    var4 = (var3 / (dev->calib.res_heat_range + 4));
 80038c8:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
    var5 = (131 * dev->calib.res_heat_val) + 65536;
 80038cc:	f994 603d 	ldrsb.w	r6, [r4, #61]	@ 0x3d
    var4 = (var3 / (dev->calib.res_heat_range + 4));
 80038d0:	3104      	adds	r1, #4
 80038d2:	9101      	str	r1, [sp, #4]
 80038d4:	fbb3 f3f1 	udiv	r3, r3, r1
    var5 = (131 * dev->calib.res_heat_val) + 65536;
 80038d8:	eb06 1186 	add.w	r1, r6, r6, lsl #6
 80038dc:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 80038e0:	f506 3c80 	add.w	ip, r6, #65536	@ 0x10000
    heatr_res_x100 = (int32_t)(((var4 / var5) - 250) * 34);
 80038e4:	fbb3 f3fc 	udiv	r3, r3, ip
 80038e8:	3bfa      	subs	r3, #250	@ 0xfa
 80038ea:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
 80038ee:	4ec7      	ldr	r6, [pc, #796]	@ (8003c0c <bme68x_set_heatr_conf+0x444>)
    heatr_res_x100 = (int32_t)(((var4 / var5) - 250) * 34);
 80038f0:	005b      	lsls	r3, r3, #1
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
 80038f2:	3332      	adds	r3, #50	@ 0x32
 80038f4:	17d9      	asrs	r1, r3, #31
 80038f6:	fb86 7303 	smull	r7, r3, r6, r3
 80038fa:	ebc1 1163 	rsb	r1, r1, r3, asr #5
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 80038fe:	2364      	movs	r3, #100	@ 0x64
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
 8003900:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8003904:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8003908:	8803      	ldrh	r3, [r0, #0]
 800390a:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
            for (i = 0; i < conf->profile_len; i++)
 800390e:	f1ba 0f01 	cmp.w	sl, #1
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8003912:	f04f 035a 	mov.w	r3, #90	@ 0x5a
 8003916:	f88d 3018 	strb.w	r3, [sp, #24]
            for (i = 0; i < conf->profile_len; i++)
 800391a:	f240 81dd 	bls.w	8003cd8 <bme68x_set_heatr_conf+0x510>
    if (temp > 400) /* Cap temperature */
 800391e:	f8b8 1002 	ldrh.w	r1, [r8, #2]
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003922:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 8003926:	bf28      	it	cs
 8003928:	f44f 71c8 	movcs.w	r1, #400	@ 0x190
 800392c:	fb0e f101 	mul.w	r1, lr, r1
 8003930:	fba2 1301 	umull	r1, r3, r2, r1
 8003934:	0919      	lsrs	r1, r3, #4
 8003936:	f501 1148 	add.w	r1, r1, #3276800	@ 0x320000
 800393a:	fba2 1301 	umull	r1, r3, r2, r1
 800393e:	08db      	lsrs	r3, r3, #3
    var3 = var1 + (var2 / 2);
 8003940:	9900      	ldr	r1, [sp, #0]
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003942:	fb09 f303 	mul.w	r3, r9, r3
    var3 = var1 + (var2 / 2);
 8003946:	eb01 0363 	add.w	r3, r1, r3, asr #1
    var4 = (var3 / (dev->calib.res_heat_range + 4));
 800394a:	9901      	ldr	r1, [sp, #4]
 800394c:	fbb3 f3f1 	udiv	r3, r3, r1
    heatr_res_x100 = (int32_t)(((var4 / var5) - 250) * 34);
 8003950:	fbb3 f3fc 	udiv	r3, r3, ip
 8003954:	3bfa      	subs	r3, #250	@ 0xfa
 8003956:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800395a:	005b      	lsls	r3, r3, #1
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
 800395c:	3332      	adds	r3, #50	@ 0x32
 800395e:	fb86 7103 	smull	r7, r1, r6, r3
 8003962:	17db      	asrs	r3, r3, #31
 8003964:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 8003968:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 800396c:	2365      	movs	r3, #101	@ 0x65
 800396e:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8003972:	8843      	ldrh	r3, [r0, #2]
 8003974:	f88d 303d 	strb.w	r3, [sp, #61]	@ 0x3d
            for (i = 0; i < conf->profile_len; i++)
 8003978:	f1ba 0f02 	cmp.w	sl, #2
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 800397c:	f04f 035b 	mov.w	r3, #91	@ 0x5b
 8003980:	f88d 3019 	strb.w	r3, [sp, #25]
            for (i = 0; i < conf->profile_len; i++)
 8003984:	f000 81a8 	beq.w	8003cd8 <bme68x_set_heatr_conf+0x510>
    if (temp > 400) /* Cap temperature */
 8003988:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 800398c:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 8003990:	bf28      	it	cs
 8003992:	f44f 71c8 	movcs.w	r1, #400	@ 0x190
 8003996:	fb0e f101 	mul.w	r1, lr, r1
 800399a:	fba2 1301 	umull	r1, r3, r2, r1
 800399e:	0919      	lsrs	r1, r3, #4
 80039a0:	f501 1148 	add.w	r1, r1, #3276800	@ 0x320000
 80039a4:	fba2 1301 	umull	r1, r3, r2, r1
 80039a8:	08db      	lsrs	r3, r3, #3
    var3 = var1 + (var2 / 2);
 80039aa:	9900      	ldr	r1, [sp, #0]
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 80039ac:	fb09 f303 	mul.w	r3, r9, r3
    var3 = var1 + (var2 / 2);
 80039b0:	eb01 0363 	add.w	r3, r1, r3, asr #1
    var4 = (var3 / (dev->calib.res_heat_range + 4));
 80039b4:	9901      	ldr	r1, [sp, #4]
 80039b6:	fbb3 f3f1 	udiv	r3, r3, r1
    heatr_res_x100 = (int32_t)(((var4 / var5) - 250) * 34);
 80039ba:	fbb3 f3fc 	udiv	r3, r3, ip
 80039be:	3bfa      	subs	r3, #250	@ 0xfa
 80039c0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80039c4:	005b      	lsls	r3, r3, #1
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
 80039c6:	3332      	adds	r3, #50	@ 0x32
 80039c8:	fb86 7103 	smull	r7, r1, r6, r3
 80039cc:	17db      	asrs	r3, r3, #31
 80039ce:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 80039d2:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 80039d6:	2366      	movs	r3, #102	@ 0x66
 80039d8:	f88d 3032 	strb.w	r3, [sp, #50]	@ 0x32
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 80039dc:	8883      	ldrh	r3, [r0, #4]
 80039de:	f88d 303e 	strb.w	r3, [sp, #62]	@ 0x3e
            for (i = 0; i < conf->profile_len; i++)
 80039e2:	f1ba 0f03 	cmp.w	sl, #3
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 80039e6:	f04f 035c 	mov.w	r3, #92	@ 0x5c
 80039ea:	f88d 301a 	strb.w	r3, [sp, #26]
            for (i = 0; i < conf->profile_len; i++)
 80039ee:	f000 8173 	beq.w	8003cd8 <bme68x_set_heatr_conf+0x510>
    if (temp > 400) /* Cap temperature */
 80039f2:	f8b8 1006 	ldrh.w	r1, [r8, #6]
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 80039f6:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 80039fa:	bf28      	it	cs
 80039fc:	f44f 71c8 	movcs.w	r1, #400	@ 0x190
 8003a00:	fb0e f101 	mul.w	r1, lr, r1
 8003a04:	fba2 1301 	umull	r1, r3, r2, r1
 8003a08:	0919      	lsrs	r1, r3, #4
 8003a0a:	f501 1148 	add.w	r1, r1, #3276800	@ 0x320000
 8003a0e:	fba2 1301 	umull	r1, r3, r2, r1
 8003a12:	08db      	lsrs	r3, r3, #3
    var3 = var1 + (var2 / 2);
 8003a14:	9900      	ldr	r1, [sp, #0]
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003a16:	fb09 f303 	mul.w	r3, r9, r3
    var3 = var1 + (var2 / 2);
 8003a1a:	eb01 0363 	add.w	r3, r1, r3, asr #1
    var4 = (var3 / (dev->calib.res_heat_range + 4));
 8003a1e:	9901      	ldr	r1, [sp, #4]
 8003a20:	fbb3 f3f1 	udiv	r3, r3, r1
    heatr_res_x100 = (int32_t)(((var4 / var5) - 250) * 34);
 8003a24:	fbb3 f3fc 	udiv	r3, r3, ip
 8003a28:	3bfa      	subs	r3, #250	@ 0xfa
 8003a2a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8003a2e:	005b      	lsls	r3, r3, #1
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
 8003a30:	3332      	adds	r3, #50	@ 0x32
 8003a32:	fb86 7103 	smull	r7, r1, r6, r3
 8003a36:	17db      	asrs	r3, r3, #31
 8003a38:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 8003a3c:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8003a40:	2367      	movs	r3, #103	@ 0x67
 8003a42:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8003a46:	88c3      	ldrh	r3, [r0, #6]
 8003a48:	f88d 303f 	strb.w	r3, [sp, #63]	@ 0x3f
            for (i = 0; i < conf->profile_len; i++)
 8003a4c:	f1ba 0f04 	cmp.w	sl, #4
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8003a50:	f04f 035d 	mov.w	r3, #93	@ 0x5d
 8003a54:	f88d 301b 	strb.w	r3, [sp, #27]
            for (i = 0; i < conf->profile_len; i++)
 8003a58:	f000 813e 	beq.w	8003cd8 <bme68x_set_heatr_conf+0x510>
    if (temp > 400) /* Cap temperature */
 8003a5c:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003a60:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 8003a64:	bf28      	it	cs
 8003a66:	f44f 71c8 	movcs.w	r1, #400	@ 0x190
 8003a6a:	fb0e f101 	mul.w	r1, lr, r1
 8003a6e:	fba2 1301 	umull	r1, r3, r2, r1
 8003a72:	0919      	lsrs	r1, r3, #4
 8003a74:	f501 1148 	add.w	r1, r1, #3276800	@ 0x320000
 8003a78:	fba2 1301 	umull	r1, r3, r2, r1
 8003a7c:	08db      	lsrs	r3, r3, #3
    var3 = var1 + (var2 / 2);
 8003a7e:	9900      	ldr	r1, [sp, #0]
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003a80:	fb09 f303 	mul.w	r3, r9, r3
    var3 = var1 + (var2 / 2);
 8003a84:	eb01 0363 	add.w	r3, r1, r3, asr #1
    var4 = (var3 / (dev->calib.res_heat_range + 4));
 8003a88:	9901      	ldr	r1, [sp, #4]
 8003a8a:	fbb3 f3f1 	udiv	r3, r3, r1
    heatr_res_x100 = (int32_t)(((var4 / var5) - 250) * 34);
 8003a8e:	fbb3 f3fc 	udiv	r3, r3, ip
 8003a92:	3bfa      	subs	r3, #250	@ 0xfa
 8003a94:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8003a98:	005b      	lsls	r3, r3, #1
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
 8003a9a:	3332      	adds	r3, #50	@ 0x32
 8003a9c:	fb86 7103 	smull	r7, r1, r6, r3
 8003aa0:	17db      	asrs	r3, r3, #31
 8003aa2:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 8003aa6:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8003aaa:	2368      	movs	r3, #104	@ 0x68
 8003aac:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8003ab0:	8903      	ldrh	r3, [r0, #8]
 8003ab2:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
            for (i = 0; i < conf->profile_len; i++)
 8003ab6:	f1ba 0f05 	cmp.w	sl, #5
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8003aba:	f04f 035e 	mov.w	r3, #94	@ 0x5e
 8003abe:	f88d 301c 	strb.w	r3, [sp, #28]
            for (i = 0; i < conf->profile_len; i++)
 8003ac2:	f000 8109 	beq.w	8003cd8 <bme68x_set_heatr_conf+0x510>
    if (temp > 400) /* Cap temperature */
 8003ac6:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003aca:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 8003ace:	bf28      	it	cs
 8003ad0:	f44f 71c8 	movcs.w	r1, #400	@ 0x190
 8003ad4:	fb0e f101 	mul.w	r1, lr, r1
 8003ad8:	fba2 1301 	umull	r1, r3, r2, r1
 8003adc:	0919      	lsrs	r1, r3, #4
 8003ade:	f501 1148 	add.w	r1, r1, #3276800	@ 0x320000
 8003ae2:	fba2 1301 	umull	r1, r3, r2, r1
 8003ae6:	08db      	lsrs	r3, r3, #3
    var3 = var1 + (var2 / 2);
 8003ae8:	9900      	ldr	r1, [sp, #0]
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003aea:	fb09 f303 	mul.w	r3, r9, r3
    var3 = var1 + (var2 / 2);
 8003aee:	eb01 0363 	add.w	r3, r1, r3, asr #1
    var4 = (var3 / (dev->calib.res_heat_range + 4));
 8003af2:	9901      	ldr	r1, [sp, #4]
 8003af4:	fbb3 f3f1 	udiv	r3, r3, r1
    heatr_res_x100 = (int32_t)(((var4 / var5) - 250) * 34);
 8003af8:	fbb3 f3fc 	udiv	r3, r3, ip
 8003afc:	3bfa      	subs	r3, #250	@ 0xfa
 8003afe:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8003b02:	005b      	lsls	r3, r3, #1
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
 8003b04:	3332      	adds	r3, #50	@ 0x32
 8003b06:	fb86 7103 	smull	r7, r1, r6, r3
 8003b0a:	17db      	asrs	r3, r3, #31
 8003b0c:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 8003b10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8003b14:	2369      	movs	r3, #105	@ 0x69
 8003b16:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8003b1a:	8943      	ldrh	r3, [r0, #10]
 8003b1c:	f88d 3041 	strb.w	r3, [sp, #65]	@ 0x41
            for (i = 0; i < conf->profile_len; i++)
 8003b20:	f1ba 0f06 	cmp.w	sl, #6
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8003b24:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8003b28:	f88d 301d 	strb.w	r3, [sp, #29]
            for (i = 0; i < conf->profile_len; i++)
 8003b2c:	f000 80d4 	beq.w	8003cd8 <bme68x_set_heatr_conf+0x510>
    if (temp > 400) /* Cap temperature */
 8003b30:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003b34:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 8003b38:	bf28      	it	cs
 8003b3a:	f44f 71c8 	movcs.w	r1, #400	@ 0x190
 8003b3e:	fb0e f101 	mul.w	r1, lr, r1
 8003b42:	fba2 1301 	umull	r1, r3, r2, r1
 8003b46:	0919      	lsrs	r1, r3, #4
 8003b48:	f501 1148 	add.w	r1, r1, #3276800	@ 0x320000
 8003b4c:	fba2 1301 	umull	r1, r3, r2, r1
 8003b50:	08db      	lsrs	r3, r3, #3
    var3 = var1 + (var2 / 2);
 8003b52:	9900      	ldr	r1, [sp, #0]
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003b54:	fb09 f303 	mul.w	r3, r9, r3
    var3 = var1 + (var2 / 2);
 8003b58:	eb01 0363 	add.w	r3, r1, r3, asr #1
    var4 = (var3 / (dev->calib.res_heat_range + 4));
 8003b5c:	9901      	ldr	r1, [sp, #4]
 8003b5e:	fbb3 f3f1 	udiv	r3, r3, r1
    heatr_res_x100 = (int32_t)(((var4 / var5) - 250) * 34);
 8003b62:	fbb3 f3fc 	udiv	r3, r3, ip
 8003b66:	3bfa      	subs	r3, #250	@ 0xfa
 8003b68:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8003b6c:	005b      	lsls	r3, r3, #1
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
 8003b6e:	3332      	adds	r3, #50	@ 0x32
 8003b70:	fb86 7103 	smull	r7, r1, r6, r3
 8003b74:	17db      	asrs	r3, r3, #31
 8003b76:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 8003b7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8003b7e:	236a      	movs	r3, #106	@ 0x6a
 8003b80:	f88d 3036 	strb.w	r3, [sp, #54]	@ 0x36
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8003b84:	8983      	ldrh	r3, [r0, #12]
 8003b86:	f88d 3042 	strb.w	r3, [sp, #66]	@ 0x42
            for (i = 0; i < conf->profile_len; i++)
 8003b8a:	f1ba 0f07 	cmp.w	sl, #7
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8003b8e:	f04f 0360 	mov.w	r3, #96	@ 0x60
 8003b92:	f88d 301e 	strb.w	r3, [sp, #30]
            for (i = 0; i < conf->profile_len; i++)
 8003b96:	f000 809f 	beq.w	8003cd8 <bme68x_set_heatr_conf+0x510>
    if (temp > 400) /* Cap temperature */
 8003b9a:	f8b8 100e 	ldrh.w	r1, [r8, #14]
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003b9e:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 8003ba2:	bf28      	it	cs
 8003ba4:	f44f 71c8 	movcs.w	r1, #400	@ 0x190
 8003ba8:	fb0e f101 	mul.w	r1, lr, r1
 8003bac:	fba2 1301 	umull	r1, r3, r2, r1
 8003bb0:	0919      	lsrs	r1, r3, #4
 8003bb2:	f501 1148 	add.w	r1, r1, #3276800	@ 0x320000
 8003bb6:	fba2 1301 	umull	r1, r3, r2, r1
 8003bba:	08db      	lsrs	r3, r3, #3
    var3 = var1 + (var2 / 2);
 8003bbc:	9900      	ldr	r1, [sp, #0]
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003bbe:	fb09 f303 	mul.w	r3, r9, r3
    var3 = var1 + (var2 / 2);
 8003bc2:	eb01 0363 	add.w	r3, r1, r3, asr #1
    var4 = (var3 / (dev->calib.res_heat_range + 4));
 8003bc6:	9901      	ldr	r1, [sp, #4]
 8003bc8:	fbb3 f3f1 	udiv	r3, r3, r1
    heatr_res_x100 = (int32_t)(((var4 / var5) - 250) * 34);
 8003bcc:	fbb3 f3fc 	udiv	r3, r3, ip
 8003bd0:	3bfa      	subs	r3, #250	@ 0xfa
 8003bd2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8003bd6:	005b      	lsls	r3, r3, #1
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
 8003bd8:	3332      	adds	r3, #50	@ 0x32
 8003bda:	fb86 7103 	smull	r7, r1, r6, r3
 8003bde:	17db      	asrs	r3, r3, #31
 8003be0:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 8003be4:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8003be8:	236b      	movs	r3, #107	@ 0x6b
 8003bea:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8003bee:	89c3      	ldrh	r3, [r0, #14]
 8003bf0:	f88d 3043 	strb.w	r3, [sp, #67]	@ 0x43
            for (i = 0; i < conf->profile_len; i++)
 8003bf4:	f1ba 0f08 	cmp.w	sl, #8
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8003bf8:	f04f 0361 	mov.w	r3, #97	@ 0x61
 8003bfc:	f88d 301f 	strb.w	r3, [sp, #31]
            for (i = 0; i < conf->profile_len; i++)
 8003c00:	d06a      	beq.n	8003cd8 <bme68x_set_heatr_conf+0x510>
 8003c02:	e005      	b.n	8003c10 <bme68x_set_heatr_conf+0x448>
 8003c04:	cccccccd 	.word	0xcccccccd
 8003c08:	10624dd3 	.word	0x10624dd3
 8003c0c:	51eb851f 	.word	0x51eb851f
    if (temp > 400) /* Cap temperature */
 8003c10:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003c14:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 8003c18:	bf28      	it	cs
 8003c1a:	f44f 71c8 	movcs.w	r1, #400	@ 0x190
 8003c1e:	fb0e f101 	mul.w	r1, lr, r1
 8003c22:	fba2 1301 	umull	r1, r3, r2, r1
 8003c26:	0919      	lsrs	r1, r3, #4
 8003c28:	f501 1148 	add.w	r1, r1, #3276800	@ 0x320000
 8003c2c:	fba2 1301 	umull	r1, r3, r2, r1
 8003c30:	08db      	lsrs	r3, r3, #3
    var3 = var1 + (var2 / 2);
 8003c32:	9900      	ldr	r1, [sp, #0]
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003c34:	fb09 f303 	mul.w	r3, r9, r3
    var3 = var1 + (var2 / 2);
 8003c38:	eb01 0363 	add.w	r3, r1, r3, asr #1
    var4 = (var3 / (dev->calib.res_heat_range + 4));
 8003c3c:	9901      	ldr	r1, [sp, #4]
 8003c3e:	fbb3 f3f1 	udiv	r3, r3, r1
    heatr_res_x100 = (int32_t)(((var4 / var5) - 250) * 34);
 8003c42:	fbb3 f3fc 	udiv	r3, r3, ip
 8003c46:	3bfa      	subs	r3, #250	@ 0xfa
 8003c48:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8003c4c:	005b      	lsls	r3, r3, #1
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
 8003c4e:	3332      	adds	r3, #50	@ 0x32
 8003c50:	fb86 7103 	smull	r7, r1, r6, r3
 8003c54:	17db      	asrs	r3, r3, #31
 8003c56:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 8003c5a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8003c5e:	236c      	movs	r3, #108	@ 0x6c
 8003c60:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8003c64:	8a03      	ldrh	r3, [r0, #16]
 8003c66:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
            for (i = 0; i < conf->profile_len; i++)
 8003c6a:	f1ba 0f09 	cmp.w	sl, #9
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8003c6e:	f04f 0362 	mov.w	r3, #98	@ 0x62
 8003c72:	f88d 3020 	strb.w	r3, [sp, #32]
            for (i = 0; i < conf->profile_len; i++)
 8003c76:	d02f      	beq.n	8003cd8 <bme68x_set_heatr_conf+0x510>
    if (temp > 400) /* Cap temperature */
 8003c78:	f8b8 3012 	ldrh.w	r3, [r8, #18]
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003c7c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003c80:	bf28      	it	cs
 8003c82:	f44f 73c8 	movcs.w	r3, #400	@ 0x190
 8003c86:	fb0e f303 	mul.w	r3, lr, r3
 8003c8a:	fba2 1303 	umull	r1, r3, r2, r3
 8003c8e:	091b      	lsrs	r3, r3, #4
 8003c90:	f503 1348 	add.w	r3, r3, #3276800	@ 0x320000
 8003c94:	fba2 2303 	umull	r2, r3, r2, r3
    var3 = var1 + (var2 / 2);
 8003c98:	9900      	ldr	r1, [sp, #0]
    var4 = (var3 / (dev->calib.res_heat_range + 4));
 8003c9a:	9a01      	ldr	r2, [sp, #4]
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003c9c:	08db      	lsrs	r3, r3, #3
 8003c9e:	fb09 f303 	mul.w	r3, r9, r3
    var3 = var1 + (var2 / 2);
 8003ca2:	eb01 0363 	add.w	r3, r1, r3, asr #1
    var4 = (var3 / (dev->calib.res_heat_range + 4));
 8003ca6:	fbb3 f3f2 	udiv	r3, r3, r2
    heatr_res_x100 = (int32_t)(((var4 / var5) - 250) * 34);
 8003caa:	fbb3 f3fc 	udiv	r3, r3, ip
 8003cae:	3bfa      	subs	r3, #250	@ 0xfa
 8003cb0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8003cb4:	005b      	lsls	r3, r3, #1
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
 8003cb6:	3332      	adds	r3, #50	@ 0x32
 8003cb8:	fb86 2103 	smull	r2, r1, r6, r3
 8003cbc:	17db      	asrs	r3, r3, #31
 8003cbe:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 8003cc2:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8003cc6:	236d      	movs	r3, #109	@ 0x6d
 8003cc8:	f88d 3039 	strb.w	r3, [sp, #57]	@ 0x39
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8003ccc:	8a43      	ldrh	r3, [r0, #18]
 8003cce:	f88d 3045 	strb.w	r3, [sp, #69]	@ 0x45
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8003cd2:	2363      	movs	r3, #99	@ 0x63
 8003cd4:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
    if (dur >= 0x783)
 8003cd8:	9a02      	ldr	r2, [sp, #8]
 8003cda:	f240 7382 	movw	r3, #1922	@ 0x782
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	f200 81bd 	bhi.w	800405e <bme68x_set_heatr_conf+0x896>
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 8003ce4:	9902      	ldr	r1, [sp, #8]
 8003ce6:	4ac9      	ldr	r2, [pc, #804]	@ (800400c <bme68x_set_heatr_conf+0x844>)
 8003ce8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cec:	fb03 f101 	mul.w	r1, r3, r1
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	fb82 1203 	smull	r1, r2, r2, r3
        while (dur > 0x3F)
 8003cf6:	f247 713f 	movw	r1, #30527	@ 0x773f
 8003cfa:	428b      	cmp	r3, r1
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 8003cfc:	f3c2 120f 	ubfx	r2, r2, #4, #16
    uint8_t factor = 0;
 8003d00:	f04f 0300 	mov.w	r3, #0
        while (dur > 0x3F)
 8003d04:	d906      	bls.n	8003d14 <bme68x_set_heatr_conf+0x54c>
            dur = dur >> 2;
 8003d06:	0892      	lsrs	r2, r2, #2
            factor += 1;
 8003d08:	3301      	adds	r3, #1
        while (dur > 0x3F)
 8003d0a:	2a3f      	cmp	r2, #63	@ 0x3f
            factor += 1;
 8003d0c:	b2db      	uxtb	r3, r3
        while (dur > 0x3F)
 8003d0e:	d8fa      	bhi.n	8003d06 <bme68x_set_heatr_conf+0x53e>
        heatdurval = (uint8_t)(dur + (factor * 64));
 8003d10:	019b      	lsls	r3, r3, #6
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	4413      	add	r3, r2
 8003d16:	b2db      	uxtb	r3, r3
            if (rslt == BME68X_OK)
 8003d18:	2d00      	cmp	r5, #0
 8003d1a:	f000 8186 	beq.w	800402a <bme68x_set_heatr_conf+0x862>
        if (rslt == BME68X_OK)
 8003d1e:	2503      	movs	r5, #3
 8003d20:	e561      	b.n	80037e6 <bme68x_set_heatr_conf+0x1e>
    if (temp > 400) /* Cap temperature */
 8003d22:	f8bb 2002 	ldrh.w	r2, [fp, #2]
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003d26:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8003d2a:	f5b2 7fc8 	cmp.w	r2, #400	@ 0x190
 8003d2e:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 8003d32:	bf28      	it	cs
 8003d34:	f44f 72c8 	movcs.w	r2, #400	@ 0x190
 8003d38:	f203 1399 	addw	r3, r3, #409	@ 0x199
 8003d3c:	fb02 f303 	mul.w	r3, r2, r3
 8003d40:	4ab3      	ldr	r2, [pc, #716]	@ (8004010 <bme68x_set_heatr_conf+0x848>)
 8003d42:	fba2 1303 	umull	r1, r3, r2, r3
 8003d46:	091b      	lsrs	r3, r3, #4
 8003d48:	f503 1348 	add.w	r3, r3, #3276800	@ 0x320000
 8003d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d50:	08d9      	lsrs	r1, r3, #3
    var1 = (((int32_t)dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8003d52:	f994 201c 	ldrsb.w	r2, [r4, #28]
 8003d56:	f994 300e 	ldrsb.w	r3, [r4, #14]
 8003d5a:	fb13 f302 	smulbb	r3, r3, r2
 8003d5e:	4aad      	ldr	r2, [pc, #692]	@ (8004014 <bme68x_set_heatr_conf+0x84c>)
 8003d60:	fb82 0203 	smull	r0, r2, r2, r3
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003d64:	f994 0019 	ldrsb.w	r0, [r4, #25]
    var1 = (((int32_t)dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8003d68:	17db      	asrs	r3, r3, #31
 8003d6a:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003d6e:	f500 7044 	add.w	r0, r0, #784	@ 0x310
 8003d72:	fb00 f101 	mul.w	r1, r0, r1
    var1 = (((int32_t)dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8003d76:	021b      	lsls	r3, r3, #8
    var5 = (131 * dev->calib.res_heat_val) + 65536;
 8003d78:	f994 203d 	ldrsb.w	r2, [r4, #61]	@ 0x3d
    var3 = var1 + (var2 / 2);
 8003d7c:	eb03 0361 	add.w	r3, r3, r1, asr #1
    var4 = (var3 / (dev->calib.res_heat_range + 4));
 8003d80:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
 8003d84:	3104      	adds	r1, #4
 8003d86:	fbb3 f3f1 	udiv	r3, r3, r1
    var5 = (131 * dev->calib.res_heat_val) + 65536;
 8003d8a:	eb02 1182 	add.w	r1, r2, r2, lsl #6
 8003d8e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8003d92:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
    heatr_res_x100 = (int32_t)(((var4 / var5) - 250) * 34);
 8003d96:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d9a:	3bfa      	subs	r3, #250	@ 0xfa
 8003d9c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
 8003da0:	4a9d      	ldr	r2, [pc, #628]	@ (8004018 <bme68x_set_heatr_conf+0x850>)
    heatr_res_x100 = (int32_t)(((var4 / var5) - 250) * 34);
 8003da2:	005b      	lsls	r3, r3, #1
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
 8003da4:	3332      	adds	r3, #50	@ 0x32
 8003da6:	fb82 1203 	smull	r1, r2, r2, r3
 8003daa:	17db      	asrs	r3, r3, #31
 8003dac:	ebc3 1362 	rsb	r3, r3, r2, asr #5
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 8003db0:	f8bb 2004 	ldrh.w	r2, [fp, #4]
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
 8003db4:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 8003db8:	235a      	movs	r3, #90	@ 0x5a
 8003dba:	f88d 3018 	strb.w	r3, [sp, #24]
    if (dur >= 0xfc0)
 8003dbe:	f5b2 6f7c 	cmp.w	r2, #4032	@ 0xfc0
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8003dc2:	f04f 0364 	mov.w	r3, #100	@ 0x64
 8003dc6:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
    if (dur >= 0xfc0)
 8003dca:	f080 8146 	bcs.w	800405a <bme68x_set_heatr_conf+0x892>
        while (dur > 0x3F)
 8003dce:	2a3f      	cmp	r2, #63	@ 0x3f
 8003dd0:	f240 811a 	bls.w	8004008 <bme68x_set_heatr_conf+0x840>
    uint8_t factor = 0;
 8003dd4:	4628      	mov	r0, r5
            dur = dur / 4;
 8003dd6:	0892      	lsrs	r2, r2, #2
            factor += 1;
 8003dd8:	3001      	adds	r0, #1
        while (dur > 0x3F)
 8003dda:	2a3f      	cmp	r2, #63	@ 0x3f
            factor += 1;
 8003ddc:	b2c0      	uxtb	r0, r0
        while (dur > 0x3F)
 8003dde:	d8fa      	bhi.n	8003dd6 <bme68x_set_heatr_conf+0x60e>
        durval = (uint8_t)(dur + (factor * 64));
 8003de0:	0183      	lsls	r3, r0, #6
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	4413      	add	r3, r2
 8003de6:	b2db      	uxtb	r3, r3
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 8003de8:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8003dec:	2701      	movs	r7, #1
            (*nb_conv) = 0;
 8003dee:	f04f 0a00 	mov.w	sl, #0
 8003df2:	e088      	b.n	8003f06 <bme68x_set_heatr_conf+0x73e>
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8003df4:	f8db 200c 	ldr.w	r2, [fp, #12]
 8003df8:	2a00      	cmp	r2, #0
 8003dfa:	f000 8132 	beq.w	8004062 <bme68x_set_heatr_conf+0x89a>
 8003dfe:	f8db 1008 	ldr.w	r1, [fp, #8]
 8003e02:	2900      	cmp	r1, #0
 8003e04:	f000 812d 	beq.w	8004062 <bme68x_set_heatr_conf+0x89a>
            for (i = 0; i < conf->profile_len; i++)
 8003e08:	f89b a010 	ldrb.w	sl, [fp, #16]
 8003e0c:	f1ba 0f00 	cmp.w	sl, #0
 8003e10:	f000 8118 	beq.w	8004044 <bme68x_set_heatr_conf+0x87c>
    var1 = (((int32_t)dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8003e14:	f994 300e 	ldrsb.w	r3, [r4, #14]
    var5 = (131 * dev->calib.res_heat_val) + 65536;
 8003e18:	f994 803d 	ldrsb.w	r8, [r4, #61]	@ 0x3d
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003e1c:	f9b4 901a 	ldrsh.w	r9, [r4, #26]
 8003e20:	9403      	str	r4, [sp, #12]
    var5 = (131 * dev->calib.res_heat_val) + 65536;
 8003e22:	4628      	mov	r0, r5
    var1 = (((int32_t)dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8003e24:	f994 501c 	ldrsb.w	r5, [r4, #28]
 8003e28:	fb13 f305 	smulbb	r3, r3, r5
 8003e2c:	4d79      	ldr	r5, [pc, #484]	@ (8004014 <bme68x_set_heatr_conf+0x84c>)
 8003e2e:	fb85 6503 	smull	r6, r5, r5, r3
 8003e32:	17de      	asrs	r6, r3, #31
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003e34:	f994 3019 	ldrsb.w	r3, [r4, #25]
 8003e38:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8003e3c:	9300      	str	r3, [sp, #0]
    var4 = (var3 / (dev->calib.res_heat_range + 4));
 8003e3e:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8003e42:	3304      	adds	r3, #4
 8003e44:	9301      	str	r3, [sp, #4]
 8003e46:	f8dd c004 	ldr.w	ip, [sp, #4]
    var5 = (131 * dev->calib.res_heat_val) + 65536;
 8003e4a:	eb08 1388 	add.w	r3, r8, r8, lsl #6
 8003e4e:	e9cd ab01 	strd	sl, fp, [sp, #4]
    var1 = (((int32_t)dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8003e52:	ebc6 16a5 	rsb	r6, r6, r5, asr #6
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003e56:	f509 3916 	add.w	r9, r9, #153600	@ 0x25800
    var5 = (131 * dev->calib.res_heat_val) + 65536;
 8003e5a:	eb08 0843 	add.w	r8, r8, r3, lsl #1
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003e5e:	4d6c      	ldr	r5, [pc, #432]	@ (8004010 <bme68x_set_heatr_conf+0x848>)
 8003e60:	3902      	subs	r1, #2
 8003e62:	3a02      	subs	r2, #2
    var1 = (((int32_t)dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8003e64:	0236      	lsls	r6, r6, #8
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003e66:	f209 1999 	addw	r9, r9, #409	@ 0x199
    var5 = (131 * dev->calib.res_heat_val) + 65536;
 8003e6a:	f508 3880 	add.w	r8, r8, #65536	@ 0x10000
 8003e6e:	f10d 0e18 	add.w	lr, sp, #24
    if (temp > 400) /* Cap temperature */
 8003e72:	f831 4f02 	ldrh.w	r4, [r1, #2]!
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
 8003e76:	4f68      	ldr	r7, [pc, #416]	@ (8004018 <bme68x_set_heatr_conf+0x850>)
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003e78:	f5b4 7fc8 	cmp.w	r4, #400	@ 0x190
 8003e7c:	bf28      	it	cs
 8003e7e:	f44f 74c8 	movcs.w	r4, #400	@ 0x190
 8003e82:	fb09 f404 	mul.w	r4, r9, r4
 8003e86:	fba5 4304 	umull	r4, r3, r5, r4
 8003e8a:	091c      	lsrs	r4, r3, #4
 8003e8c:	f504 1448 	add.w	r4, r4, #3276800	@ 0x320000
 8003e90:	fba5 4304 	umull	r4, r3, r5, r4
 8003e94:	9c00      	ldr	r4, [sp, #0]
 8003e96:	08db      	lsrs	r3, r3, #3
 8003e98:	fb04 f303 	mul.w	r3, r4, r3
    var3 = var1 + (var2 / 2);
 8003e9c:	eb06 0363 	add.w	r3, r6, r3, asr #1
    var4 = (var3 / (dev->calib.res_heat_range + 4));
 8003ea0:	fbb3 f3fc 	udiv	r3, r3, ip
    heatr_res_x100 = (int32_t)(((var4 / var5) - 250) * 34);
 8003ea4:	fbb3 f3f8 	udiv	r3, r3, r8
 8003ea8:	3bfa      	subs	r3, #250	@ 0xfa
 8003eaa:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8003eae:	005b      	lsls	r3, r3, #1
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
 8003eb0:	3332      	adds	r3, #50	@ 0x32
 8003eb2:	fb87 b703 	smull	fp, r7, r7, r3
 8003eb6:	17db      	asrs	r3, r3, #31
 8003eb8:	ebc3 1367 	rsb	r3, r3, r7, asr #5
 8003ebc:	af09      	add	r7, sp, #36	@ 0x24
 8003ebe:	b2c4      	uxtb	r4, r0
 8003ec0:	543b      	strb	r3, [r7, r0]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8003ec2:	af0c      	add	r7, sp, #48	@ 0x30
 8003ec4:	f104 0364 	add.w	r3, r4, #100	@ 0x64
 8003ec8:	543b      	strb	r3, [r7, r0]
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8003eca:	345a      	adds	r4, #90	@ 0x5a
 8003ecc:	f80e 4b01 	strb.w	r4, [lr], #1
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8003ed0:	f832 4f02 	ldrh.w	r4, [r2, #2]!
    if (dur >= 0xfc0)
 8003ed4:	f5b4 6f7c 	cmp.w	r4, #4032	@ 0xfc0
 8003ed8:	f080 8087 	bcs.w	8003fea <bme68x_set_heatr_conf+0x822>
        while (dur > 0x3F)
 8003edc:	2c3f      	cmp	r4, #63	@ 0x3f
    uint8_t factor = 0;
 8003ede:	f04f 0300 	mov.w	r3, #0
        while (dur > 0x3F)
 8003ee2:	d906      	bls.n	8003ef2 <bme68x_set_heatr_conf+0x72a>
            dur = dur / 4;
 8003ee4:	08a4      	lsrs	r4, r4, #2
            factor += 1;
 8003ee6:	3301      	adds	r3, #1
        while (dur > 0x3F)
 8003ee8:	2c3f      	cmp	r4, #63	@ 0x3f
            factor += 1;
 8003eea:	b2db      	uxtb	r3, r3
        while (dur > 0x3F)
 8003eec:	d8fa      	bhi.n	8003ee4 <bme68x_set_heatr_conf+0x71c>
        durval = (uint8_t)(dur + (factor * 64));
 8003eee:	019b      	lsls	r3, r3, #6
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	4423      	add	r3, r4
 8003ef4:	b2db      	uxtb	r3, r3
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8003ef6:	ac0f      	add	r4, sp, #60	@ 0x3c
 8003ef8:	5423      	strb	r3, [r4, r0]
            for (i = 0; i < conf->profile_len; i++)
 8003efa:	3001      	adds	r0, #1
 8003efc:	4582      	cmp	sl, r0
 8003efe:	d1b8      	bne.n	8003e72 <bme68x_set_heatr_conf+0x6aa>
 8003f00:	e9dd 7b01 	ldrd	r7, fp, [sp, #4]
 8003f04:	9c03      	ldr	r4, [sp, #12]
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8003f06:	a806      	add	r0, sp, #24
 8003f08:	4623      	mov	r3, r4
 8003f0a:	463a      	mov	r2, r7
 8003f0c:	a909      	add	r1, sp, #36	@ 0x24
 8003f0e:	f7fe fa41 	bl	8002394 <bme68x_set_regs>
    if (rslt == BME68X_OK)
 8003f12:	4605      	mov	r5, r0
 8003f14:	2800      	cmp	r0, #0
 8003f16:	f47f ac66 	bne.w	80037e6 <bme68x_set_heatr_conf+0x1e>
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8003f1a:	463a      	mov	r2, r7
 8003f1c:	a90f      	add	r1, sp, #60	@ 0x3c
 8003f1e:	4623      	mov	r3, r4
 8003f20:	a80c      	add	r0, sp, #48	@ 0x30
 8003f22:	f7fe fa37 	bl	8002394 <bme68x_set_regs>
        if (rslt == BME68X_OK)
 8003f26:	4605      	mov	r5, r0
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	f47f ac5c 	bne.w	80037e6 <bme68x_set_heatr_conf+0x1e>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8003f2e:	2c00      	cmp	r4, #0
 8003f30:	f000 8097 	beq.w	8004062 <bme68x_set_heatr_conf+0x89a>
 8003f34:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8003f36:	2d00      	cmp	r5, #0
 8003f38:	f000 8093 	beq.w	8004062 <bme68x_set_heatr_conf+0x89a>
 8003f3c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 808f 	beq.w	8004062 <bme68x_set_heatr_conf+0x89a>
 8003f44:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 808b 	beq.w	8004062 <bme68x_set_heatr_conf+0x89a>
        if (dev->intf == BME68X_SPI_INTF)
 8003f4c:	7b23      	ldrb	r3, [r4, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d07a      	beq.n	8004048 <bme68x_set_heatr_conf+0x880>
 8003f52:	2070      	movs	r0, #112	@ 0x70
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8003f54:	6863      	ldr	r3, [r4, #4]
 8003f56:	a90c      	add	r1, sp, #48	@ 0x30
 8003f58:	2202      	movs	r2, #2
 8003f5a:	47a8      	blx	r5
 8003f5c:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8003f60:	2800      	cmp	r0, #0
 8003f62:	d13e      	bne.n	8003fe2 <bme68x_set_heatr_conf+0x81a>
                if (conf->enable == BME68X_ENABLE)
 8003f64:	f89b 3000 	ldrb.w	r3, [fp]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d046      	beq.n	8003ffa <bme68x_set_heatr_conf+0x832>
 8003f6c:	2108      	movs	r1, #8
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 8003f6e:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8003f72:	6c25      	ldr	r5, [r4, #64]	@ 0x40
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 8003f74:	f00a 020f 	and.w	r2, sl, #15
 8003f78:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f7c:	4313      	orrs	r3, r2
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8003f7e:	2200      	movs	r2, #0
 8003f80:	e9cd 220f 	strd	r2, r2, [sp, #60]	@ 0x3c
 8003f84:	e9cd 2211 	strd	r2, r2, [sp, #68]	@ 0x44
 8003f88:	9213      	str	r2, [sp, #76]	@ 0x4c
                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 8003f8a:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
 8003f8e:	f022 0208 	bic.w	r2, r2, #8
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 8003f92:	4303      	orrs	r3, r0
                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 8003f94:	430a      	orrs	r2, r1
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 8003f96:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 8003f9a:	f88d 2030 	strb.w	r2, [sp, #48]	@ 0x30
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8003f9e:	2d00      	cmp	r5, #0
 8003fa0:	d05f      	beq.n	8004062 <bme68x_set_heatr_conf+0x89a>
 8003fa2:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 8003fa4:	2e00      	cmp	r6, #0
 8003fa6:	d05c      	beq.n	8004062 <bme68x_set_heatr_conf+0x89a>
 8003fa8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003faa:	2900      	cmp	r1, #0
 8003fac:	d059      	beq.n	8004062 <bme68x_set_heatr_conf+0x89a>
                if (dev->intf == BME68X_SPI_INTF)
 8003fae:	7b21      	ldrb	r1, [r4, #12]
 8003fb0:	2900      	cmp	r1, #0
 8003fb2:	d066      	beq.n	8004082 <bme68x_set_heatr_conf+0x8ba>
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8003fb4:	2170      	movs	r1, #112	@ 0x70
 8003fb6:	f88d 103c 	strb.w	r1, [sp, #60]	@ 0x3c
 8003fba:	2171      	movs	r1, #113	@ 0x71
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8003fbc:	f88d 203d 	strb.w	r2, [sp, #61]	@ 0x3d
 8003fc0:	f88d 303f 	strb.w	r3, [sp, #63]	@ 0x3f
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8003fc4:	f88d 103e 	strb.w	r1, [sp, #62]	@ 0x3e
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8003fc8:	6863      	ldr	r3, [r4, #4]
 8003fca:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
 8003fce:	2203      	movs	r2, #3
 8003fd0:	f10d 013d 	add.w	r1, sp, #61	@ 0x3d
 8003fd4:	47b0      	blx	r6
 8003fd6:	4605      	mov	r5, r0
 8003fd8:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	f43f ac02 	beq.w	80037e6 <bme68x_set_heatr_conf+0x1e>
                rslt = BME68X_E_COM_FAIL;
 8003fe2:	f06f 0501 	mvn.w	r5, #1
 8003fe6:	f7ff bbfe 	b.w	80037e6 <bme68x_set_heatr_conf+0x1e>
        durval = 0xff; /* Max duration*/
 8003fea:	23ff      	movs	r3, #255	@ 0xff
 8003fec:	e783      	b.n	8003ef6 <bme68x_set_heatr_conf+0x72e>
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8003fee:	2503      	movs	r5, #3
            for (i = 0; i < conf->profile_len; i++)
 8003ff0:	f1ba 0f00 	cmp.w	sl, #0
 8003ff4:	f47f ac39 	bne.w	800386a <bme68x_set_heatr_conf+0xa2>
 8003ff8:	e691      	b.n	8003d1e <bme68x_set_heatr_conf+0x556>
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8003ffa:	68a3      	ldr	r3, [r4, #8]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	4601      	mov	r1, r0
 8004000:	bf14      	ite	ne
 8004002:	2010      	movne	r0, #16
 8004004:	2020      	moveq	r0, #32
 8004006:	e7b2      	b.n	8003f6e <bme68x_set_heatr_conf+0x7a6>
        while (dur > 0x3F)
 8004008:	462b      	mov	r3, r5
 800400a:	e6eb      	b.n	8003de4 <bme68x_set_heatr_conf+0x61c>
 800400c:	089645c5 	.word	0x089645c5
 8004010:	cccccccd 	.word	0xcccccccd
 8004014:	10624dd3 	.word	0x10624dd3
 8004018:	51eb851f 	.word	0x51eb851f
 800401c:	461a      	mov	r2, r3
    if (dur >= 0x783)
 800401e:	f240 7382 	movw	r3, #1922	@ 0x782
 8004022:	429a      	cmp	r2, r3
 8004024:	f67f ae5e 	bls.w	8003ce4 <bme68x_set_heatr_conf+0x51c>
 8004028:	23ff      	movs	r3, #255	@ 0xff
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 800402a:	4622      	mov	r2, r4
 800402c:	f10d 0116 	add.w	r1, sp, #22
 8004030:	f10d 0017 	add.w	r0, sp, #23
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8004034:	f88d 3016 	strb.w	r3, [sp, #22]
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8004038:	f7fd ff9a 	bl	8001f70 <bme68x_set_regs.constprop.0>
    if (rslt == BME68X_OK)
 800403c:	4605      	mov	r5, r0
 800403e:	2800      	cmp	r0, #0
 8004040:	f47f abd1 	bne.w	80037e6 <bme68x_set_heatr_conf+0x1e>
            for (i = 0; i < conf->profile_len; i++)
 8004044:	4657      	mov	r7, sl
 8004046:	e75e      	b.n	8003f06 <bme68x_set_heatr_conf+0x73e>
            rslt = set_mem_page(reg_addr, dev);
 8004048:	4621      	mov	r1, r4
 800404a:	2070      	movs	r0, #112	@ 0x70
 800404c:	f7fd ff52 	bl	8001ef4 <set_mem_page>
            if (rslt == BME68X_OK)
 8004050:	4605      	mov	r5, r0
 8004052:	b950      	cbnz	r0, 800406a <bme68x_set_heatr_conf+0x8a2>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8004054:	6c25      	ldr	r5, [r4, #64]	@ 0x40
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8004056:	20f0      	movs	r0, #240	@ 0xf0
 8004058:	e77c      	b.n	8003f54 <bme68x_set_heatr_conf+0x78c>
        durval = 0xff; /* Max duration*/
 800405a:	23ff      	movs	r3, #255	@ 0xff
 800405c:	e6c4      	b.n	8003de8 <bme68x_set_heatr_conf+0x620>
        heatdurval = 0xff; /* Max duration */
 800405e:	23ff      	movs	r3, #255	@ 0xff
 8004060:	e65a      	b.n	8003d18 <bme68x_set_heatr_conf+0x550>
        rslt = BME68X_E_NULL_PTR;
 8004062:	f04f 35ff 	mov.w	r5, #4294967295
 8004066:	f7ff bbbe 	b.w	80037e6 <bme68x_set_heatr_conf+0x1e>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800406a:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 800406c:	6863      	ldr	r3, [r4, #4]
 800406e:	a90c      	add	r1, sp, #48	@ 0x30
 8004070:	2202      	movs	r2, #2
 8004072:	2070      	movs	r0, #112	@ 0x70
 8004074:	47b0      	blx	r6
 8004076:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 800407a:	2800      	cmp	r0, #0
 800407c:	f43f abb3 	beq.w	80037e6 <bme68x_set_heatr_conf+0x1e>
 8004080:	e7af      	b.n	8003fe2 <bme68x_set_heatr_conf+0x81a>
        if (mem_page != dev->mem_page)
 8004082:	7b63      	ldrb	r3, [r4, #13]
 8004084:	2b10      	cmp	r3, #16
 8004086:	d069      	beq.n	800415c <bme68x_set_heatr_conf+0x994>
            dev->mem_page = mem_page;
 8004088:	2210      	movs	r2, #16
 800408a:	7362      	strb	r2, [r4, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 800408c:	6863      	ldr	r3, [r4, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	a909      	add	r1, sp, #36	@ 0x24
 8004092:	20f3      	movs	r0, #243	@ 0xf3
 8004094:	47a8      	blx	r5
 8004096:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
            if (dev->intf_rslt != 0)
 800409a:	2800      	cmp	r0, #0
 800409c:	d164      	bne.n	8004168 <bme68x_set_heatr_conf+0x9a0>
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 800409e:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 80040a2:	7b62      	ldrb	r2, [r4, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 80040a4:	6c65      	ldr	r5, [r4, #68]	@ 0x44
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 80040a6:	f023 0310 	bic.w	r3, r3, #16
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 80040aa:	f002 0210 	and.w	r2, r2, #16
 80040ae:	431a      	orrs	r2, r3
 80040b0:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 80040b4:	6863      	ldr	r3, [r4, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	a909      	add	r1, sp, #36	@ 0x24
 80040ba:	2073      	movs	r0, #115	@ 0x73
 80040bc:	47a8      	blx	r5
 80040be:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 80040c2:	2800      	cmp	r0, #0
 80040c4:	d150      	bne.n	8004168 <bme68x_set_heatr_conf+0x9a0>
                if (dev->intf == BME68X_SPI_INTF)
 80040c6:	7b23      	ldrb	r3, [r4, #12]
                tmp_buff[(2 * index) + 1] = reg_data[index];
 80040c8:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
 80040cc:	f88d 203d 	strb.w	r2, [sp, #61]	@ 0x3d
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 80040d0:	2170      	movs	r1, #112	@ 0x70
 80040d2:	f88d 103c 	strb.w	r1, [sp, #60]	@ 0x3c
                if (dev->intf == BME68X_SPI_INTF)
 80040d6:	b15b      	cbz	r3, 80040f0 <bme68x_set_heatr_conf+0x928>
                tmp_buff[(2 * index) + 1] = reg_data[index];
 80040d8:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 80040dc:	f88d 303f 	strb.w	r3, [sp, #63]	@ 0x3f
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 80040e0:	2271      	movs	r2, #113	@ 0x71
 80040e2:	f88d 203e 	strb.w	r2, [sp, #62]	@ 0x3e
            if (rslt == BME68X_OK)
 80040e6:	2800      	cmp	r0, #0
 80040e8:	f47f af7b 	bne.w	8003fe2 <bme68x_set_heatr_conf+0x81a>
 80040ec:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 80040ee:	e76b      	b.n	8003fc8 <bme68x_set_heatr_conf+0x800>
 80040f0:	6c25      	ldr	r5, [r4, #64]	@ 0x40
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80040f2:	2d00      	cmp	r5, #0
 80040f4:	d0b5      	beq.n	8004062 <bme68x_set_heatr_conf+0x89a>
 80040f6:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 80040f8:	2e00      	cmp	r6, #0
 80040fa:	d0b2      	beq.n	8004062 <bme68x_set_heatr_conf+0x89a>
 80040fc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0af      	beq.n	8004062 <bme68x_set_heatr_conf+0x89a>
        if (mem_page != dev->mem_page)
 8004102:	7b63      	ldrb	r3, [r4, #13]
 8004104:	2b10      	cmp	r3, #16
 8004106:	d021      	beq.n	800414c <bme68x_set_heatr_conf+0x984>
            dev->mem_page = mem_page;
 8004108:	2210      	movs	r2, #16
 800410a:	7362      	strb	r2, [r4, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 800410c:	6863      	ldr	r3, [r4, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	a909      	add	r1, sp, #36	@ 0x24
 8004112:	20f3      	movs	r0, #243	@ 0xf3
 8004114:	47a8      	blx	r5
 8004116:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
            if (dev->intf_rslt != 0)
 800411a:	2800      	cmp	r0, #0
 800411c:	f47f af61 	bne.w	8003fe2 <bme68x_set_heatr_conf+0x81a>
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8004120:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8004124:	7b63      	ldrb	r3, [r4, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8004126:	6c65      	ldr	r5, [r4, #68]	@ 0x44
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8004128:	f003 0310 	and.w	r3, r3, #16
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 800412c:	f022 0210 	bic.w	r2, r2, #16
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8004130:	431a      	orrs	r2, r3
 8004132:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8004136:	6863      	ldr	r3, [r4, #4]
 8004138:	a909      	add	r1, sp, #36	@ 0x24
 800413a:	2201      	movs	r2, #1
 800413c:	2073      	movs	r0, #115	@ 0x73
 800413e:	47a8      	blx	r5
 8004140:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8004144:	2800      	cmp	r0, #0
 8004146:	f47f af4c 	bne.w	8003fe2 <bme68x_set_heatr_conf+0x81a>
 800414a:	6c66      	ldr	r6, [r4, #68]	@ 0x44
                tmp_buff[(2 * index) + 1] = reg_data[index];
 800414c:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8004150:	f88d 303f 	strb.w	r3, [sp, #63]	@ 0x3f
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8004154:	2271      	movs	r2, #113	@ 0x71
 8004156:	f88d 203e 	strb.w	r2, [sp, #62]	@ 0x3e
            if (rslt == BME68X_OK)
 800415a:	e735      	b.n	8003fc8 <bme68x_set_heatr_conf+0x800>
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 800415c:	2370      	movs	r3, #112	@ 0x70
 800415e:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8004162:	f88d 203d 	strb.w	r2, [sp, #61]	@ 0x3d
                if (dev->intf == BME68X_SPI_INTF)
 8004166:	e7c4      	b.n	80040f2 <bme68x_set_heatr_conf+0x92a>
                rslt = BME68X_E_COM_FAIL;
 8004168:	f06f 0001 	mvn.w	r0, #1
 800416c:	e7ab      	b.n	80040c6 <bme68x_set_heatr_conf+0x8fe>
 800416e:	bf00      	nop

08004170 <bme68x_selftest_check>:
{
 8004170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004174:	4604      	mov	r4, r0
 8004176:	b0c9      	sub	sp, #292	@ 0x124
    struct bme68x_data data[BME68X_N_MEAS] = { { 0 } };
 8004178:	2278      	movs	r2, #120	@ 0x78
 800417a:	2100      	movs	r1, #0
 800417c:	a82a      	add	r0, sp, #168	@ 0xa8
 800417e:	f008 fe33 	bl	800cde8 <memset>
    t_dev.read = dev->read;
 8004182:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    t_dev.intf_ptr = dev->intf_ptr;
 8004184:	6861      	ldr	r1, [r4, #4]
    t_dev.read = dev->read;
 8004186:	9326      	str	r3, [sp, #152]	@ 0x98
 8004188:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
    t_dev.intf_ptr = dev->intf_ptr;
 800418c:	9117      	str	r1, [sp, #92]	@ 0x5c
    t_dev.intf = dev->intf;
 800418e:	7b21      	ldrb	r1, [r4, #12]
 8004190:	f88d 1064 	strb.w	r1, [sp, #100]	@ 0x64
    rslt = bme68x_init(&t_dev);
 8004194:	a816      	add	r0, sp, #88	@ 0x58
    t_dev.amb_temp = 25;
 8004196:	2119      	movs	r1, #25
    t_dev.read = dev->read;
 8004198:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
    t_dev.amb_temp = 25;
 800419c:	f88d 1066 	strb.w	r1, [sp, #102]	@ 0x66
    rslt = bme68x_init(&t_dev);
 80041a0:	f7fd ff58 	bl	8002054 <bme68x_init>
    if (rslt == BME68X_OK)
 80041a4:	4606      	mov	r6, r0
 80041a6:	b118      	cbz	r0, 80041b0 <bme68x_selftest_check+0x40>
}
 80041a8:	4630      	mov	r0, r6
 80041aa:	b049      	add	sp, #292	@ 0x124
 80041ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        heatr_conf.heatr_temp = BME68X_HIGH_TEMP;
 80041b0:	4bae      	ldr	r3, [pc, #696]	@ (800446c <bme68x_selftest_check+0x2fc>)
 80041b2:	f8cd 3032 	str.w	r3, [sp, #50]	@ 0x32
        heatr_conf.enable = BME68X_ENABLE;
 80041b6:	2401      	movs	r4, #1
        conf.os_pres = BME68X_OS_16X;
 80041b8:	2205      	movs	r2, #5
 80041ba:	f88d 2006 	strb.w	r2, [sp, #6]
        conf.os_hum = BME68X_OS_1X;
 80041be:	f240 2301 	movw	r3, #513	@ 0x201
        rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &t_dev);
 80041c2:	aa16      	add	r2, sp, #88	@ 0x58
 80041c4:	a90c      	add	r1, sp, #48	@ 0x30
 80041c6:	4620      	mov	r0, r4
        heatr_conf.enable = BME68X_ENABLE;
 80041c8:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
        conf.os_hum = BME68X_OS_1X;
 80041cc:	f8ad 3004 	strh.w	r3, [sp, #4]
        rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &t_dev);
 80041d0:	f7ff fafa 	bl	80037c8 <bme68x_set_heatr_conf>
        if (rslt == BME68X_OK)
 80041d4:	4606      	mov	r6, r0
 80041d6:	2800      	cmp	r0, #0
 80041d8:	d1e6      	bne.n	80041a8 <bme68x_selftest_check+0x38>
            rslt = bme68x_set_conf(&conf, &t_dev);
 80041da:	a916      	add	r1, sp, #88	@ 0x58
 80041dc:	a801      	add	r0, sp, #4
 80041de:	f7fe fac3 	bl	8002768 <bme68x_set_conf>
            if (rslt == BME68X_OK)
 80041e2:	4606      	mov	r6, r0
 80041e4:	2800      	cmp	r0, #0
 80041e6:	d1df      	bne.n	80041a8 <bme68x_selftest_check+0x38>
                rslt = bme68x_set_op_mode(BME68X_FORCED_MODE, &t_dev); /* Trigger a measurement */
 80041e8:	a916      	add	r1, sp, #88	@ 0x58
 80041ea:	4620      	mov	r0, r4
 80041ec:	f7fe fa56 	bl	800269c <bme68x_set_op_mode>
                if (rslt == BME68X_OK)
 80041f0:	4606      	mov	r6, r0
 80041f2:	2800      	cmp	r0, #0
 80041f4:	d1d8      	bne.n	80041a8 <bme68x_selftest_check+0x38>
                    t_dev.delay_us(BME68X_HEATR_DUR1_DELAY, t_dev.intf_ptr);
 80041f6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80041f8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80041fa:	489d      	ldr	r0, [pc, #628]	@ (8004470 <bme68x_selftest_check+0x300>)
 80041fc:	4798      	blx	r3
                    rslt = bme68x_get_data(BME68X_FORCED_MODE, &data[0], &n_fields, &t_dev);
 80041fe:	4620      	mov	r0, r4
 8004200:	ab16      	add	r3, sp, #88	@ 0x58
 8004202:	f10d 0203 	add.w	r2, sp, #3
 8004206:	a92a      	add	r1, sp, #168	@ 0xa8
 8004208:	f7fe fe68 	bl	8002edc <bme68x_get_data>
                    if (rslt == BME68X_OK)
 800420c:	4606      	mov	r6, r0
 800420e:	2800      	cmp	r0, #0
 8004210:	d1ca      	bne.n	80041a8 <bme68x_selftest_check+0x38>
                        if ((data[0].idac != 0x00) && (data[0].idac != 0xFF) &&
 8004212:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 8004216:	3b01      	subs	r3, #1
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2bfd      	cmp	r3, #253	@ 0xfd
 800421c:	f200 8173 	bhi.w	8004506 <bme68x_selftest_check+0x396>
 8004220:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 8004224:	069a      	lsls	r2, r3, #26
 8004226:	f140 816e 	bpl.w	8004506 <bme68x_selftest_check+0x396>
        heatr_conf.heatr_dur = BME68X_HEATR_DUR2;
 800422a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800422e:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004474 <bme68x_selftest_check+0x304>
        heatr_conf.heatr_dur = BME68X_HEATR_DUR2;
 8004232:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
        while ((rslt == BME68X_OK) && (i < BME68X_N_MEAS))
 8004236:	ad2a      	add	r5, sp, #168	@ 0xa8
        heatr_conf.heatr_dur = BME68X_HEATR_DUR2;
 8004238:	4604      	mov	r4, r0
            if (i % 2 == 0)
 800423a:	07e3      	lsls	r3, r4, #31
 800423c:	bf54      	ite	pl
 800423e:	f44f 77af 	movpl.w	r7, #350	@ 0x15e
 8004242:	2796      	movmi	r7, #150	@ 0x96
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8004244:	a916      	add	r1, sp, #88	@ 0x58
 8004246:	2000      	movs	r0, #0
 8004248:	f8ad 7032 	strh.w	r7, [sp, #50]	@ 0x32
 800424c:	f7fe fa26 	bl	800269c <bme68x_set_op_mode>
        if (rslt == BME68X_OK)
 8004250:	4606      	mov	r6, r0
 8004252:	2800      	cmp	r0, #0
 8004254:	d1a8      	bne.n	80041a8 <bme68x_selftest_check+0x38>
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8004256:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	@ 0x72
 800425a:	f99d 0071 	ldrsb.w	r0, [sp, #113]	@ 0x71
 800425e:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 8004262:	f203 1399 	addw	r3, r3, #409	@ 0x199
 8004266:	fb07 f203 	mul.w	r2, r7, r3
 800426a:	4b83      	ldr	r3, [pc, #524]	@ (8004478 <bme68x_selftest_check+0x308>)
 800426c:	fba3 1202 	umull	r1, r2, r3, r2
 8004270:	0912      	lsrs	r2, r2, #4
 8004272:	f502 1248 	add.w	r2, r2, #3276800	@ 0x320000
 8004276:	fba3 3202 	umull	r3, r2, r3, r2
    var1 = (((int32_t)dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 800427a:	f99d 1074 	ldrsb.w	r1, [sp, #116]	@ 0x74
 800427e:	f99d 3066 	ldrsb.w	r3, [sp, #102]	@ 0x66
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8004282:	f500 7044 	add.w	r0, r0, #784	@ 0x310
 8004286:	08d2      	lsrs	r2, r2, #3
 8004288:	fb00 f202 	mul.w	r2, r0, r2
    var1 = (((int32_t)dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 800428c:	487b      	ldr	r0, [pc, #492]	@ (800447c <bme68x_selftest_check+0x30c>)
 800428e:	fb13 f301 	smulbb	r3, r3, r1
 8004292:	fb80 6003 	smull	r6, r0, r0, r3
 8004296:	17de      	asrs	r6, r3, #31
    var5 = (131 * dev->calib.res_heat_val) + 65536;
 8004298:	f99d 1095 	ldrsb.w	r1, [sp, #149]	@ 0x95
    var4 = (var3 / (dev->calib.res_heat_range + 4));
 800429c:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
    var1 = (((int32_t)dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 80042a0:	ebc6 16a0 	rsb	r6, r6, r0, asr #6
 80042a4:	0236      	lsls	r6, r6, #8
    var3 = var1 + (var2 / 2);
 80042a6:	eb06 0662 	add.w	r6, r6, r2, asr #1
    var4 = (var3 / (dev->calib.res_heat_range + 4));
 80042aa:	3304      	adds	r3, #4
 80042ac:	fbb6 f6f3 	udiv	r6, r6, r3
    var5 = (131 * dev->calib.res_heat_val) + 65536;
 80042b0:	eb01 1381 	add.w	r3, r1, r1, lsl #6
 80042b4:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80042b8:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
    heatr_res_x100 = (int32_t)(((var4 / var5) - 250) * 34);
 80042bc:	fbb6 f6f1 	udiv	r6, r6, r1
 80042c0:	3efa      	subs	r6, #250	@ 0xfa
 80042c2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
 80042c6:	4b6e      	ldr	r3, [pc, #440]	@ (8004480 <bme68x_selftest_check+0x310>)
    heatr_res_x100 = (int32_t)(((var4 / var5) - 250) * 34);
 80042c8:	0076      	lsls	r6, r6, #1
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
 80042ca:	3632      	adds	r6, #50	@ 0x32
 80042cc:	fb83 2306 	smull	r2, r3, r3, r6
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80042d0:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 80042d4:	f10d 080c 	add.w	r8, sp, #12
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80042d8:	f10d 0e18 	add.w	lr, sp, #24
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80042dc:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80042e0:	af11      	add	r7, sp, #68	@ 0x44
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80042e2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80042e6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80042ea:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80042ee:	c703      	stmia	r7!, {r0, r1}
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80042f0:	f8ae 2000 	strh.w	r2, [lr]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80042f4:	f8ac 2000 	strh.w	r2, [ip]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80042f8:	803a      	strh	r2, [r7, #0]
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80042fa:	f8a8 2000 	strh.w	r2, [r8]
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
 80042fe:	17f6      	asrs	r6, r6, #31
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 8004300:	f06f 0220 	mvn.w	r2, #32
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
 8004304:	ebc6 1663 	rsb	r6, r6, r3, asr #5
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 8004308:	f88d 2044 	strb.w	r2, [sp, #68]	@ 0x44
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 800430c:	f04f 0b5a 	mov.w	fp, #90	@ 0x5a
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8004310:	f04f 0964 	mov.w	r9, #100	@ 0x64
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8004314:	ab16      	add	r3, sp, #88	@ 0x58
 8004316:	a803      	add	r0, sp, #12
 8004318:	2201      	movs	r2, #1
 800431a:	a906      	add	r1, sp, #24
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
 800431c:	f88d 6018 	strb.w	r6, [sp, #24]
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 8004320:	f88d b00c 	strb.w	fp, [sp, #12]
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8004324:	f88d 9024 	strb.w	r9, [sp, #36]	@ 0x24
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8004328:	f7fe f834 	bl	8002394 <bme68x_set_regs>
    if (rslt == BME68X_OK)
 800432c:	4606      	mov	r6, r0
 800432e:	2800      	cmp	r0, #0
 8004330:	f47f af3a 	bne.w	80041a8 <bme68x_selftest_check+0x38>
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8004334:	a911      	add	r1, sp, #68	@ 0x44
 8004336:	ab16      	add	r3, sp, #88	@ 0x58
 8004338:	2201      	movs	r2, #1
 800433a:	a809      	add	r0, sp, #36	@ 0x24
 800433c:	f7fe f82a 	bl	8002394 <bme68x_set_regs>
        if (rslt == BME68X_OK)
 8004340:	4606      	mov	r6, r0
 8004342:	2800      	cmp	r0, #0
 8004344:	f47f af30 	bne.w	80041a8 <bme68x_selftest_check+0x38>
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8004348:	9e26      	ldr	r6, [sp, #152]	@ 0x98
 800434a:	2e00      	cmp	r6, #0
 800434c:	f000 817f 	beq.w	800464e <bme68x_selftest_check+0x4de>
 8004350:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 817b 	beq.w	800464e <bme68x_selftest_check+0x4de>
 8004358:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 8177 	beq.w	800464e <bme68x_selftest_check+0x4de>
        if (dev->intf == BME68X_SPI_INTF)
 8004360:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 80d1 	beq.w	800450c <bme68x_selftest_check+0x39c>
 800436a:	2070      	movs	r0, #112	@ 0x70
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800436c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800436e:	a909      	add	r1, sp, #36	@ 0x24
 8004370:	2202      	movs	r2, #2
 8004372:	47b0      	blx	r6
 8004374:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
        if (dev->intf_rslt != 0)
 8004378:	2800      	cmp	r0, #0
 800437a:	f040 80d9 	bne.w	8004530 <bme68x_selftest_check+0x3c0>
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800437e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 8004380:	f89d 1025 	ldrb.w	r1, [sp, #37]	@ 0x25
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8004384:	9f26      	ldr	r7, [sp, #152]	@ 0x98
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8004386:	9015      	str	r0, [sp, #84]	@ 0x54
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8004388:	2b01      	cmp	r3, #1
 800438a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 800438e:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8004392:	bf14      	ite	ne
 8004394:	2210      	movne	r2, #16
 8004396:	2220      	moveq	r2, #32
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 8004398:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
 800439c:	430a      	orrs	r2, r1
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 800439e:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
 80043a2:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 80043a6:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 80043aa:	f88d 2025 	strb.w	r2, [sp, #37]	@ 0x25
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80043ae:	2f00      	cmp	r7, #0
 80043b0:	f000 814d 	beq.w	800464e <bme68x_selftest_check+0x4de>
 80043b4:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 80043b6:	4630      	mov	r0, r6
 80043b8:	2e00      	cmp	r6, #0
 80043ba:	f000 8148 	beq.w	800464e <bme68x_selftest_check+0x4de>
 80043be:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80043c0:	2900      	cmp	r1, #0
 80043c2:	f000 8144 	beq.w	800464e <bme68x_selftest_check+0x4de>
                if (dev->intf == BME68X_SPI_INTF)
 80043c6:	f89d 1064 	ldrb.w	r1, [sp, #100]	@ 0x64
 80043ca:	2900      	cmp	r1, #0
 80043cc:	f000 80b3 	beq.w	8004536 <bme68x_selftest_check+0x3c6>
                tmp_buff[(2 * index) + 1] = reg_data[index];
 80043d0:	f88d 3045 	strb.w	r3, [sp, #69]	@ 0x45
                    tmp_buff[(2 * index)] = reg_addr[index];
 80043d4:	2371      	movs	r3, #113	@ 0x71
 80043d6:	2070      	movs	r0, #112	@ 0x70
 80043d8:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80043dc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
                tmp_buff[(2 * index) + 1] = reg_data[index];
 80043de:	f88d 2047 	strb.w	r2, [sp, #71]	@ 0x47
                    tmp_buff[(2 * index)] = reg_addr[index];
 80043e2:	f88d 0044 	strb.w	r0, [sp, #68]	@ 0x44
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 80043e6:	2203      	movs	r2, #3
 80043e8:	f10d 0145 	add.w	r1, sp, #69	@ 0x45
 80043ec:	47b0      	blx	r6
 80043ee:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
                if (dev->intf_rslt != 0)
 80043f2:	2800      	cmp	r0, #0
 80043f4:	f040 809c 	bne.w	8004530 <bme68x_selftest_check+0x3c0>
                rslt = bme68x_set_conf(&conf, &t_dev);
 80043f8:	a916      	add	r1, sp, #88	@ 0x58
 80043fa:	a801      	add	r0, sp, #4
 80043fc:	f7fe f9b4 	bl	8002768 <bme68x_set_conf>
                if (rslt == BME68X_OK)
 8004400:	4606      	mov	r6, r0
 8004402:	2800      	cmp	r0, #0
 8004404:	f47f aed0 	bne.w	80041a8 <bme68x_selftest_check+0x38>
                    rslt = bme68x_set_op_mode(BME68X_FORCED_MODE, &t_dev); /* Trigger a measurement */
 8004408:	a916      	add	r1, sp, #88	@ 0x58
 800440a:	2001      	movs	r0, #1
 800440c:	f7fe f946 	bl	800269c <bme68x_set_op_mode>
                    if (rslt == BME68X_OK)
 8004410:	4606      	mov	r6, r0
 8004412:	2800      	cmp	r0, #0
 8004414:	f47f aec8 	bne.w	80041a8 <bme68x_selftest_check+0x38>
                        t_dev.delay_us(BME68X_HEATR_DUR2_DELAY, t_dev.intf_ptr);
 8004418:	481a      	ldr	r0, [pc, #104]	@ (8004484 <bme68x_selftest_check+0x314>)
 800441a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800441c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800441e:	4798      	blx	r3
                        rslt = bme68x_get_data(BME68X_FORCED_MODE, &data[i], &n_fields, &t_dev);
 8004420:	ab16      	add	r3, sp, #88	@ 0x58
 8004422:	f10d 0203 	add.w	r2, sp, #3
 8004426:	4629      	mov	r1, r5
 8004428:	2001      	movs	r0, #1
 800442a:	f7fe fd57 	bl	8002edc <bme68x_get_data>
        while ((rslt == BME68X_OK) && (i < BME68X_N_MEAS))
 800442e:	4606      	mov	r6, r0
 8004430:	2800      	cmp	r0, #0
 8004432:	f47f aeb9 	bne.w	80041a8 <bme68x_selftest_check+0x38>
 8004436:	3401      	adds	r4, #1
 8004438:	2c06      	cmp	r4, #6
 800443a:	f105 0514 	add.w	r5, r5, #20
 800443e:	f47f aefc 	bne.w	800423a <bme68x_selftest_check+0xca>
    if ((data[0].pressure < BME68X_MIN_PRESSURE) || (data[0].pressure > BME68X_MAX_PRESSURE))
 8004442:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
    if ((data[0].temperature < BME68X_MIN_TEMPERATURE) || (data[0].temperature > BME68X_MAX_TEMPERATURE))
 8004444:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	@ 0xae
    if ((data[0].pressure < BME68X_MIN_PRESSURE) || (data[0].pressure > BME68X_MAX_PRESSURE))
 8004448:	f5a2 32af 	sub.w	r2, r2, #89600	@ 0x15e00
    if ((data[0].temperature < BME68X_MIN_TEMPERATURE) || (data[0].temperature > BME68X_MAX_TEMPERATURE))
 800444c:	f241 7070 	movw	r0, #6000	@ 0x1770
 8004450:	4283      	cmp	r3, r0
    if ((data[0].pressure < BME68X_MIN_PRESSURE) || (data[0].pressure > BME68X_MAX_PRESSURE))
 8004452:	f5a2 72c8 	sub.w	r2, r2, #400	@ 0x190
 8004456:	f644 6120 	movw	r1, #20000	@ 0x4e20
    if ((data[0].temperature < BME68X_MIN_TEMPERATURE) || (data[0].temperature > BME68X_MAX_TEMPERATURE))
 800445a:	bf94      	ite	ls
 800445c:	2300      	movls	r3, #0
 800445e:	2301      	movhi	r3, #1
    if ((data[0].pressure < BME68X_MIN_PRESSURE) || (data[0].pressure > BME68X_MAX_PRESSURE))
 8004460:	428a      	cmp	r2, r1
 8004462:	d911      	bls.n	8004488 <bme68x_selftest_check+0x318>
        self_test_failed++;
 8004464:	3301      	adds	r3, #1
 8004466:	b2db      	uxtb	r3, r3
 8004468:	e00e      	b.n	8004488 <bme68x_selftest_check+0x318>
 800446a:	bf00      	nop
 800446c:	03e8015e 	.word	0x03e8015e
 8004470:	000f4240 	.word	0x000f4240
 8004474:	0800cee0 	.word	0x0800cee0
 8004478:	cccccccd 	.word	0xcccccccd
 800447c:	10624dd3 	.word	0x10624dd3
 8004480:	51eb851f 	.word	0x51eb851f
 8004484:	001e8480 	.word	0x001e8480
    if ((data[0].humidity < BME68X_MIN_HUMIDITY) || (data[0].humidity > BME68X_MAX_HUMIDITY))
 8004488:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800448a:	f5a2 429c 	sub.w	r2, r2, #19968	@ 0x4e00
 800448e:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8004492:	3a20      	subs	r2, #32
 8004494:	428a      	cmp	r2, r1
        if (!(data[i].status & BME68X_GASM_VALID_MSK))
 8004496:	f89d 20a8 	ldrb.w	r2, [sp, #168]	@ 0xa8
        self_test_failed++;
 800449a:	bf84      	itt	hi
 800449c:	3301      	addhi	r3, #1
 800449e:	b2db      	uxtbhi	r3, r3
        if (!(data[i].status & BME68X_GASM_VALID_MSK))
 80044a0:	0697      	lsls	r7, r2, #26
 80044a2:	f89d 20bc 	ldrb.w	r2, [sp, #188]	@ 0xbc
            self_test_failed++;
 80044a6:	bf5c      	itt	pl
 80044a8:	3301      	addpl	r3, #1
 80044aa:	b2db      	uxtbpl	r3, r3
        if (!(data[i].status & BME68X_GASM_VALID_MSK))
 80044ac:	0695      	lsls	r5, r2, #26
 80044ae:	f89d 20d0 	ldrb.w	r2, [sp, #208]	@ 0xd0
            self_test_failed++;
 80044b2:	bf5c      	itt	pl
 80044b4:	3301      	addpl	r3, #1
 80044b6:	b2db      	uxtbpl	r3, r3
        if (!(data[i].status & BME68X_GASM_VALID_MSK))
 80044b8:	0694      	lsls	r4, r2, #26
 80044ba:	f89d 20e4 	ldrb.w	r2, [sp, #228]	@ 0xe4
            self_test_failed++;
 80044be:	bf5c      	itt	pl
 80044c0:	3301      	addpl	r3, #1
 80044c2:	b2db      	uxtbpl	r3, r3
        if (!(data[i].status & BME68X_GASM_VALID_MSK))
 80044c4:	0690      	lsls	r0, r2, #26
 80044c6:	f89d 20f8 	ldrb.w	r2, [sp, #248]	@ 0xf8
            self_test_failed++;
 80044ca:	bf5c      	itt	pl
 80044cc:	3301      	addpl	r3, #1
 80044ce:	b2db      	uxtbpl	r3, r3
        if (!(data[i].status & BME68X_GASM_VALID_MSK))
 80044d0:	0691      	lsls	r1, r2, #26
 80044d2:	f89d 210c 	ldrb.w	r2, [sp, #268]	@ 0x10c
            self_test_failed++;
 80044d6:	bf5c      	itt	pl
 80044d8:	3301      	addpl	r3, #1
 80044da:	b2db      	uxtbpl	r3, r3
        if (!(data[i].status & BME68X_GASM_VALID_MSK))
 80044dc:	0692      	lsls	r2, r2, #26
 80044de:	d512      	bpl.n	8004506 <bme68x_selftest_check+0x396>
        cent_res = (uint32_t)((5 * (data[3].gas_resistance + data[5].gas_resistance)) / (2 * data[4].gas_resistance));
 80044e0:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 80044e2:	9847      	ldr	r0, [sp, #284]	@ 0x11c
 80044e4:	9942      	ldr	r1, [sp, #264]	@ 0x108
 80044e6:	4402      	add	r2, r0
 80044e8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80044ec:	0049      	lsls	r1, r1, #1
 80044ee:	fbb2 f2f1 	udiv	r2, r2, r1
    if (cent_res < 6)
 80044f2:	2a05      	cmp	r2, #5
 80044f4:	d907      	bls.n	8004506 <bme68x_selftest_check+0x396>
        rslt = BME68X_E_SELF_TEST;
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	bf18      	it	ne
 80044fa:	f06f 0604 	mvnne.w	r6, #4
}
 80044fe:	4630      	mov	r0, r6
 8004500:	b049      	add	sp, #292	@ 0x124
 8004502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rslt = BME68X_E_SELF_TEST;
 8004506:	f06f 0604 	mvn.w	r6, #4
 800450a:	e64d      	b.n	80041a8 <bme68x_selftest_check+0x38>
            rslt = set_mem_page(reg_addr, dev);
 800450c:	a916      	add	r1, sp, #88	@ 0x58
 800450e:	2070      	movs	r0, #112	@ 0x70
 8004510:	f7fd fcf0 	bl	8001ef4 <set_mem_page>
            if (rslt == BME68X_OK)
 8004514:	4606      	mov	r6, r0
 8004516:	b910      	cbnz	r0, 800451e <bme68x_selftest_check+0x3ae>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8004518:	9e26      	ldr	r6, [sp, #152]	@ 0x98
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 800451a:	20f0      	movs	r0, #240	@ 0xf0
 800451c:	e726      	b.n	800436c <bme68x_selftest_check+0x1fc>
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800451e:	9c26      	ldr	r4, [sp, #152]	@ 0x98
 8004520:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004522:	2202      	movs	r2, #2
 8004524:	a909      	add	r1, sp, #36	@ 0x24
 8004526:	2070      	movs	r0, #112	@ 0x70
 8004528:	47a0      	blx	r4
        if (dev->intf_rslt != 0)
 800452a:	2800      	cmp	r0, #0
 800452c:	f43f ae3c 	beq.w	80041a8 <bme68x_selftest_check+0x38>
        rslt = BME68X_E_NULL_PTR;
 8004530:	f06f 0601 	mvn.w	r6, #1
        if (rslt == BME68X_OK)
 8004534:	e638      	b.n	80041a8 <bme68x_selftest_check+0x38>
        if (mem_page != dev->mem_page)
 8004536:	f89d 2065 	ldrb.w	r2, [sp, #101]	@ 0x65
 800453a:	2a10      	cmp	r2, #16
 800453c:	d078      	beq.n	8004630 <bme68x_selftest_check+0x4c0>
            dev->mem_page = mem_page;
 800453e:	2310      	movs	r3, #16
 8004540:	f88d 3065 	strb.w	r3, [sp, #101]	@ 0x65
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8004544:	2201      	movs	r2, #1
 8004546:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004548:	a906      	add	r1, sp, #24
 800454a:	20f3      	movs	r0, #243	@ 0xf3
 800454c:	47b8      	blx	r7
 800454e:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
            if (dev->intf_rslt != 0)
 8004552:	bb38      	cbnz	r0, 80045a4 <bme68x_selftest_check+0x434>
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8004554:	f89d 2018 	ldrb.w	r2, [sp, #24]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8004558:	f89d 3065 	ldrb.w	r3, [sp, #101]	@ 0x65
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 800455c:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 800455e:	f022 0210 	bic.w	r2, r2, #16
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8004562:	f003 0310 	and.w	r3, r3, #16
 8004566:	4313      	orrs	r3, r2
 8004568:	f88d 3018 	strb.w	r3, [sp, #24]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 800456c:	2201      	movs	r2, #1
 800456e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004570:	a906      	add	r1, sp, #24
 8004572:	2073      	movs	r0, #115	@ 0x73
 8004574:	47b0      	blx	r6
 8004576:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
                if (dev->intf_rslt != 0)
 800457a:	b998      	cbnz	r0, 80045a4 <bme68x_selftest_check+0x434>
                if (dev->intf == BME68X_SPI_INTF)
 800457c:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8004580:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 8004584:	f88d 2045 	strb.w	r2, [sp, #69]	@ 0x45
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8004588:	2070      	movs	r0, #112	@ 0x70
 800458a:	f88d 0044 	strb.w	r0, [sp, #68]	@ 0x44
                if (dev->intf == BME68X_SPI_INTF)
 800458e:	b1a3      	cbz	r3, 80045ba <bme68x_selftest_check+0x44a>
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8004590:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8004594:	f88d 3047 	strb.w	r3, [sp, #71]	@ 0x47
                    tmp_buff[(2 * index)] = reg_addr[index];
 8004598:	2371      	movs	r3, #113	@ 0x71
 800459a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800459e:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 80045a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80045a2:	e720      	b.n	80043e6 <bme68x_selftest_check+0x276>
                if (dev->intf == BME68X_SPI_INTF)
 80045a4:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
                tmp_buff[(2 * index) + 1] = reg_data[index];
 80045a8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 80045ac:	2170      	movs	r1, #112	@ 0x70
 80045ae:	f88d 1044 	strb.w	r1, [sp, #68]	@ 0x44
                if (dev->intf == BME68X_SPI_INTF)
 80045b2:	2a00      	cmp	r2, #0
 80045b4:	d1bc      	bne.n	8004530 <bme68x_selftest_check+0x3c0>
                tmp_buff[(2 * index) + 1] = reg_data[index];
 80045b6:	f88d 3045 	strb.w	r3, [sp, #69]	@ 0x45
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80045ba:	9f26      	ldr	r7, [sp, #152]	@ 0x98
 80045bc:	2f00      	cmp	r7, #0
 80045be:	d046      	beq.n	800464e <bme68x_selftest_check+0x4de>
 80045c0:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80045c2:	4606      	mov	r6, r0
 80045c4:	2800      	cmp	r0, #0
 80045c6:	d042      	beq.n	800464e <bme68x_selftest_check+0x4de>
 80045c8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d03f      	beq.n	800464e <bme68x_selftest_check+0x4de>
        if (mem_page != dev->mem_page)
 80045ce:	f89d 2065 	ldrb.w	r2, [sp, #101]	@ 0x65
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80045d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
        if (mem_page != dev->mem_page)
 80045d4:	2a10      	cmp	r2, #16
 80045d6:	d031      	beq.n	800463c <bme68x_selftest_check+0x4cc>
            dev->mem_page = mem_page;
 80045d8:	2210      	movs	r2, #16
 80045da:	f88d 2065 	strb.w	r2, [sp, #101]	@ 0x65
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80045de:	a906      	add	r1, sp, #24
 80045e0:	2201      	movs	r2, #1
 80045e2:	20f3      	movs	r0, #243	@ 0xf3
 80045e4:	47b8      	blx	r7
 80045e6:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
            if (dev->intf_rslt != 0)
 80045ea:	2800      	cmp	r0, #0
 80045ec:	d1a0      	bne.n	8004530 <bme68x_selftest_check+0x3c0>
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 80045ee:	f89d 2018 	ldrb.w	r2, [sp, #24]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 80045f2:	f89d 3065 	ldrb.w	r3, [sp, #101]	@ 0x65
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 80045f6:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 80045f8:	f022 0210 	bic.w	r2, r2, #16
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 80045fc:	f003 0310 	and.w	r3, r3, #16
 8004600:	4313      	orrs	r3, r2
 8004602:	f88d 3018 	strb.w	r3, [sp, #24]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8004606:	a906      	add	r1, sp, #24
 8004608:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800460a:	2201      	movs	r2, #1
 800460c:	2073      	movs	r0, #115	@ 0x73
 800460e:	47b0      	blx	r6
 8004610:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
                if (dev->intf_rslt != 0)
 8004614:	2800      	cmp	r0, #0
 8004616:	d18b      	bne.n	8004530 <bme68x_selftest_check+0x3c0>
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8004618:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800461c:	f88d 3047 	strb.w	r3, [sp, #71]	@ 0x47
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8004620:	2371      	movs	r3, #113	@ 0x71
 8004622:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8004626:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 8004628:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800462c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800462e:	e6da      	b.n	80043e6 <bme68x_selftest_check+0x276>
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8004630:	f88d 3045 	strb.w	r3, [sp, #69]	@ 0x45
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8004634:	2370      	movs	r3, #112	@ 0x70
 8004636:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800463a:	e7c2      	b.n	80045c2 <bme68x_selftest_check+0x452>
                tmp_buff[(2 * index) + 1] = reg_data[index];
 800463c:	f89d 2025 	ldrb.w	r2, [sp, #37]	@ 0x25
 8004640:	f88d 2047 	strb.w	r2, [sp, #71]	@ 0x47
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8004644:	2271      	movs	r2, #113	@ 0x71
 8004646:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
                tmp_buff[(2 * index) + 1] = reg_data[index];
 800464a:	2070      	movs	r0, #112	@ 0x70
 800464c:	e6cb      	b.n	80043e6 <bme68x_selftest_check+0x276>
        rslt = BME68X_E_NULL_PTR;
 800464e:	f04f 36ff 	mov.w	r6, #4294967295
 8004652:	e5a9      	b.n	80041a8 <bme68x_selftest_check+0x38>

08004654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004654:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004656:	2003      	movs	r0, #3
 8004658:	f000 fa34 	bl	8004ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800465c:	f001 fffa 	bl	8006654 <HAL_RCC_GetHCLKFreq>
 8004660:	4b07      	ldr	r3, [pc, #28]	@ (8004680 <HAL_Init+0x2c>)
 8004662:	4602      	mov	r2, r0
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004664:	200f      	movs	r0, #15
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004666:	601a      	str	r2, [r3, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004668:	f7fd f820 	bl	80016ac <HAL_InitTick>
 800466c:	b110      	cbz	r0, 8004674 <HAL_Init+0x20>
  {
    status = HAL_ERROR;
 800466e:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8004670:	4620      	mov	r0, r4
 8004672:	bd10      	pop	{r4, pc}
 8004674:	4604      	mov	r4, r0
    HAL_MspInit();
 8004676:	f7fc ff3b 	bl	80014f0 <HAL_MspInit>
}
 800467a:	4620      	mov	r0, r4
 800467c:	bd10      	pop	{r4, pc}
 800467e:	bf00      	nop
 8004680:	20000010 	.word	0x20000010

08004684 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004684:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8004688:	6913      	ldr	r3, [r2, #16]
 800468a:	f023 0302 	bic.w	r3, r3, #2
 800468e:	6113      	str	r3, [r2, #16]
}
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop

08004694 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004694:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8004698:	6913      	ldr	r3, [r2, #16]
 800469a:	f043 0302 	orr.w	r3, r3, #2
 800469e:	6113      	str	r3, [r2, #16]
}
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop

080046a4 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80046a4:	4a02      	ldr	r2, [pc, #8]	@ (80046b0 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 80046a6:	6853      	ldr	r3, [r2, #4]
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 80046ae:	4770      	bx	lr
 80046b0:	e0042000 	.word	0xe0042000

080046b4 <HAL_DBGMCU_EnableDBGStopMode>:
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80046b4:	4a02      	ldr	r2, [pc, #8]	@ (80046c0 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80046b6:	6853      	ldr	r3, [r2, #4]
 80046b8:	f043 0302 	orr.w	r3, r3, #2
 80046bc:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 80046be:	4770      	bx	lr
 80046c0:	e0042000 	.word	0xe0042000

080046c4 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_EnableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80046c4:	4a02      	ldr	r2, [pc, #8]	@ (80046d0 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80046c6:	6853      	ldr	r3, [r2, #4]
 80046c8:	f043 0304 	orr.w	r3, r3, #4
 80046cc:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 80046ce:	4770      	bx	lr
 80046d0:	e0042000 	.word	0xe0042000

080046d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80046d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046d6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80046d8:	2300      	movs	r3, #0
 80046da:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80046dc:	2800      	cmp	r0, #0
 80046de:	f000 80c0 	beq.w	8004862 <HAL_ADC_Init+0x18e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80046e2:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 80046e4:	4604      	mov	r4, r0
 80046e6:	2d00      	cmp	r5, #0
 80046e8:	f000 80cb 	beq.w	8004882 <HAL_ADC_Init+0x1ae>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046ec:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80046ee:	6893      	ldr	r3, [r2, #8]
 80046f0:	00dd      	lsls	r5, r3, #3
 80046f2:	d419      	bmi.n	8004728 <HAL_ADC_Init+0x54>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046f4:	4b7a      	ldr	r3, [pc, #488]	@ (80048e0 <HAL_ADC_Init+0x20c>)
 80046f6:	487b      	ldr	r0, [pc, #492]	@ (80048e4 <HAL_ADC_Init+0x210>)
 80046f8:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80046fa:	6891      	ldr	r1, [r2, #8]
 80046fc:	099b      	lsrs	r3, r3, #6
 80046fe:	fba0 0303 	umull	r0, r3, r0, r3
 8004702:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8004706:	099b      	lsrs	r3, r3, #6
 8004708:	f021 0117 	bic.w	r1, r1, #23
 800470c:	3301      	adds	r3, #1
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8004714:	6091      	str	r1, [r2, #8]
 8004716:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004718:	9b01      	ldr	r3, [sp, #4]
 800471a:	b12b      	cbz	r3, 8004728 <HAL_ADC_Init+0x54>
    {
      wait_loop_index--;
 800471c:	9b01      	ldr	r3, [sp, #4]
 800471e:	3b01      	subs	r3, #1
 8004720:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004722:	9b01      	ldr	r3, [sp, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f9      	bne.n	800471c <HAL_ADC_Init+0x48>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004728:	6893      	ldr	r3, [r2, #8]
 800472a:	00d8      	lsls	r0, r3, #3
 800472c:	f100 809c 	bmi.w	8004868 <HAL_ADC_Init+0x194>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004730:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004732:	f043 0310 	orr.w	r3, r3, #16
 8004736:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004738:	6de3      	ldr	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800473a:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800473c:	4303      	orrs	r3, r0
 800473e:	65e3      	str	r3, [r4, #92]	@ 0x5c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004740:	6893      	ldr	r3, [r2, #8]
 8004742:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004746:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004748:	f040 8096 	bne.w	8004878 <HAL_ADC_Init+0x1a4>
 800474c:	06d9      	lsls	r1, r3, #27
 800474e:	f100 8093 	bmi.w	8004878 <HAL_ADC_Init+0x1a4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004752:	6da3      	ldr	r3, [r4, #88]	@ 0x58
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
                   hadc->Init.DataAlign                                           |
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004754:	6921      	ldr	r1, [r4, #16]
    ADC_STATE_CLR_SET(hadc->State,
 8004756:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800475a:	f043 0302 	orr.w	r3, r3, #2
 800475e:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004760:	6893      	ldr	r3, [r2, #8]
 8004762:	07db      	lsls	r3, r3, #31
 8004764:	d45c      	bmi.n	8004820 <HAL_ADC_Init+0x14c>
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004766:	e9d4 3502 	ldrd	r3, r5, [r4, #8]
 800476a:	432b      	orrs	r3, r5
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800476c:	7e25      	ldrb	r5, [r4, #24]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800476e:	7e66      	ldrb	r6, [r4, #25]
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004770:	f894 c01a 	ldrb.w	ip, [r4, #26]
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004774:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8004778:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800477c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800477e:	ea43 33c6 	orr.w	r3, r3, r6, lsl #15
 8004782:	3d00      	subs	r5, #0
 8004784:	bf18      	it	ne
 8004786:	2501      	movne	r5, #1
 8004788:	ea43 334c 	orr.w	r3, r3, ip, lsl #13
 800478c:	032d      	lsls	r5, r5, #12
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800478e:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 8004792:	432b      	orrs	r3, r5

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004794:	f894 5020 	ldrb.w	r5, [r4, #32]
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004798:	2900      	cmp	r1, #0
 800479a:	bfb4      	ite	lt
 800479c:	f021 4600 	biclt.w	r6, r1, #2147483648	@ 0x80000000
 80047a0:	f44f 1600 	movge.w	r6, #2097152	@ 0x200000
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80047a4:	2d01      	cmp	r5, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80047a6:	ea43 0306 	orr.w	r3, r3, r6
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80047aa:	f000 808a 	beq.w	80048c2 <HAL_ADC_Init+0x1ee>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047ae:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80047b0:	b125      	cbz	r5, 80047bc <HAL_ADC_Init+0xe8>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80047b2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80047b4:	f405 75e0 	and.w	r5, r5, #448	@ 0x1c0
 80047b8:	4335      	orrs	r5, r6
 80047ba:	432b      	orrs	r3, r5
                     hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80047bc:	68d5      	ldr	r5, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80047be:	6866      	ldr	r6, [r4, #4]
      MODIFY_REG(hadc->Instance->CFGR1,
 80047c0:	f425 35fe 	bic.w	r5, r5, #130048	@ 0x1fc00
 80047c4:	f425 75ff 	bic.w	r5, r5, #510	@ 0x1fe
 80047c8:	431d      	orrs	r5, r3
 80047ca:	60d5      	str	r5, [r2, #12]
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80047cc:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80047d0:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
 80047d2:	f006 4c40 	and.w	ip, r6, #3221225472	@ 0xc0000000
      if (hadc->Init.OversamplingMode == ENABLE)
 80047d6:	2b01      	cmp	r3, #1
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80047d8:	ea4c 0505 	orr.w	r5, ip, r5
      if (hadc->Init.OversamplingMode == ENABLE)
 80047dc:	d109      	bne.n	80047f2 <HAL_ADC_Init+0x11e>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80047de:	e9d4 3710 	ldrd	r3, r7, [r4, #64]	@ 0x40
 80047e2:	433b      	orrs	r3, r7
 80047e4:	432b      	orrs	r3, r5
 80047e6:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 80047e8:	432b      	orrs	r3, r5
 80047ea:	ea43 030c 	orr.w	r3, r3, ip
 80047ee:	f043 0501 	orr.w	r5, r3, #1
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80047f2:	6917      	ldr	r7, [r2, #16]
 80047f4:	4b3c      	ldr	r3, [pc, #240]	@ (80048e8 <HAL_ADC_Init+0x214>)
 80047f6:	403b      	ands	r3, r7
 80047f8:	432b      	orrs	r3, r5
 80047fa:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80047fc:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8004800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004804:	d00c      	beq.n	8004820 <HAL_ADC_Init+0x14c>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004806:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
 800480a:	d009      	beq.n	8004820 <HAL_ADC_Init+0x14c>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800480c:	4d37      	ldr	r5, [pc, #220]	@ (80048ec <HAL_ADC_Init+0x218>)
 800480e:	f8d5 3708 	ldr.w	r3, [r5, #1800]	@ 0x708
 8004812:	f406 1670 	and.w	r6, r6, #3932160	@ 0x3c0000
 8004816:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 800481a:	4333      	orrs	r3, r6
 800481c:	f8c5 3708 	str.w	r3, [r5, #1800]	@ 0x708
  MODIFY_REG(ADCx->SMPR,
 8004820:	6953      	ldr	r3, [r2, #20]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004822:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8004824:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8004826:	f023 0307 	bic.w	r3, r3, #7
 800482a:	432b      	orrs	r3, r5
 800482c:	6153      	str	r3, [r2, #20]
 800482e:	6953      	ldr	r3, [r2, #20]
 8004830:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004834:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 8004838:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800483a:	bb41      	cbnz	r1, 800488e <HAL_ADC_Init+0x1ba>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800483c:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800483e:	f063 030f 	orn	r3, r3, #15
 8004842:	6293      	str	r3, [r2, #40]	@ 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004844:	6953      	ldr	r3, [r2, #20]
 8004846:	f003 0307 	and.w	r3, r3, #7
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800484a:	429d      	cmp	r5, r3
 800484c:	d030      	beq.n	80048b0 <HAL_ADC_Init+0x1dc>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800484e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004850:	f023 0312 	bic.w	r3, r3, #18
 8004854:	f043 0310 	orr.w	r3, r3, #16
 8004858:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800485a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8004862:	2001      	movs	r0, #1

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 8004864:	b003      	add	sp, #12
 8004866:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004868:	6893      	ldr	r3, [r2, #8]
 800486a:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800486e:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004872:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004874:	f43f af6a 	beq.w	800474c <HAL_ADC_Init+0x78>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004878:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800487a:	f043 0310 	orr.w	r3, r3, #16
 800487e:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8004880:	e7ef      	b.n	8004862 <HAL_ADC_Init+0x18e>
    HAL_ADC_MspInit(hadc);
 8004882:	f7fc f871 	bl	8000968 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004886:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8004888:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
 800488c:	e72e      	b.n	80046ec <HAL_ADC_Init+0x18>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800488e:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8004892:	d1d7      	bne.n	8004844 <HAL_ADC_Init+0x170>
      MODIFY_REG(hadc->Instance->CHSELR,
 8004894:	69e3      	ldr	r3, [r4, #28]
 8004896:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004898:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 800489a:	3b01      	subs	r3, #1
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	f003 031c 	and.w	r3, r3, #28
 80048a2:	f06f 010f 	mvn.w	r1, #15
 80048a6:	fa01 f303 	lsl.w	r3, r1, r3
 80048aa:	4333      	orrs	r3, r6
 80048ac:	6293      	str	r3, [r2, #40]	@ 0x28
 80048ae:	e7c9      	b.n	8004844 <HAL_ADC_Init+0x170>
      ADC_CLEAR_ERRORCODE(hadc);
 80048b0:	2300      	movs	r3, #0
 80048b2:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80048b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80048b6:	f023 0303 	bic.w	r3, r3, #3
 80048ba:	f043 0301 	orr.w	r3, r3, #1
 80048be:	65a3      	str	r3, [r4, #88]	@ 0x58
 80048c0:	e7d0      	b.n	8004864 <HAL_ADC_Init+0x190>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80048c2:	f1bc 0f00 	cmp.w	ip, #0
 80048c6:	d102      	bne.n	80048ce <HAL_ADC_Init+0x1fa>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80048c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048cc:	e76f      	b.n	80047ae <HAL_ADC_Init+0xda>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048ce:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 80048d0:	f045 0520 	orr.w	r5, r5, #32
 80048d4:	65a5      	str	r5, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048d6:	6de5      	ldr	r5, [r4, #92]	@ 0x5c
 80048d8:	f045 0501 	orr.w	r5, r5, #1
 80048dc:	65e5      	str	r5, [r4, #92]	@ 0x5c
 80048de:	e766      	b.n	80047ae <HAL_ADC_Init+0xda>
 80048e0:	20000010 	.word	0x20000010
 80048e4:	053e2d63 	.word	0x053e2d63
 80048e8:	1ffffc02 	.word	0x1ffffc02
 80048ec:	40012000 	.word	0x40012000

080048f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80048f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f2:	4603      	mov	r3, r0
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80048f4:	f890 0054 	ldrb.w	r0, [r0, #84]	@ 0x54
{
 80048f8:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80048fa:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80048fc:	2801      	cmp	r0, #1
  __IO uint32_t wait_loop_index = 0UL;
 80048fe:	9201      	str	r2, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004900:	691a      	ldr	r2, [r3, #16]
  __HAL_LOCK(hadc);
 8004902:	d06f      	beq.n	80049e4 <HAL_ADC_ConfigChannel+0xf4>
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004904:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8004906:	2001      	movs	r0, #1
 8004908:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
 800490c:	68a5      	ldr	r5, [r4, #8]
 800490e:	076d      	lsls	r5, r5, #29
 8004910:	d508      	bpl.n	8004924 <HAL_ADC_ConfigChannel+0x34>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004912:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004914:	f042 0220 	orr.w	r2, r2, #32
 8004918:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
  }

  __HAL_UNLOCK(hadc);
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
}
 8004920:	b003      	add	sp, #12
 8004922:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 8004924:	684d      	ldr	r5, [r1, #4]
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004926:	6808      	ldr	r0, [r1, #0]
    if (pConfig->Rank != ADC_RANK_NONE)
 8004928:	2d02      	cmp	r5, #2
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800492a:	f022 0204 	bic.w	r2, r2, #4
    if (pConfig->Rank != ADC_RANK_NONE)
 800492e:	d038      	beq.n	80049a2 <HAL_ADC_ConfigChannel+0xb2>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004930:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004934:	f3c0 0611 	ubfx	r6, r0, #0, #18
 8004938:	d02f      	beq.n	800499a <HAL_ADC_ConfigChannel+0xaa>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800493a:	6e1f      	ldr	r7, [r3, #96]	@ 0x60
 800493c:	f005 0c1f 	and.w	ip, r5, #31
 8004940:	220f      	movs	r2, #15
 8004942:	fa02 f20c 	lsl.w	r2, r2, ip
 8004946:	ea27 0702 	bic.w	r7, r7, r2
 800494a:	ea6f 0e02 	mvn.w	lr, r2
 800494e:	2e00      	cmp	r6, #0
 8004950:	d165      	bne.n	8004a1e <HAL_ADC_ConfigChannel+0x12e>
 8004952:	f3c0 6284 	ubfx	r2, r0, #26, #5
 8004956:	fa02 f20c 	lsl.w	r2, r2, ip
 800495a:	433a      	orrs	r2, r7
 800495c:	661a      	str	r2, [r3, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800495e:	08ad      	lsrs	r5, r5, #2
 8004960:	69da      	ldr	r2, [r3, #28]
 8004962:	3501      	adds	r5, #1
 8004964:	4295      	cmp	r5, r2
 8004966:	d808      	bhi.n	800497a <HAL_ADC_ConfigChannel+0x8a>
  MODIFY_REG(ADCx->CHSELR,
 8004968:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800496a:	f3c0 6583 	ubfx	r5, r0, #26, #4
 800496e:	ea0e 0202 	and.w	r2, lr, r2
 8004972:	fa05 f50c 	lsl.w	r5, r5, ip
 8004976:	432a      	orrs	r2, r5
 8004978:	62a2      	str	r2, [r4, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR,
 800497a:	688a      	ldr	r2, [r1, #8]
 800497c:	6961      	ldr	r1, [r4, #20]
 800497e:	ea02 2200 	and.w	r2, r2, r0, lsl #8
 8004982:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004986:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800498a:	ea21 2100 	bic.w	r1, r1, r0, lsl #8
 800498e:	430a      	orrs	r2, r1
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004990:	2800      	cmp	r0, #0
 8004992:	6162      	str	r2, [r4, #20]
 8004994:	db29      	blt.n	80049ea <HAL_ADC_ConfigChannel+0xfa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004996:	2000      	movs	r0, #0
 8004998:	e7bf      	b.n	800491a <HAL_ADC_ConfigChannel+0x2a>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800499a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800499c:	4332      	orrs	r2, r6
 800499e:	62a2      	str	r2, [r4, #40]	@ 0x28
}
 80049a0:	e7eb      	b.n	800497a <HAL_ADC_ConfigChannel+0x8a>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80049a2:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80049a6:	d105      	bne.n	80049b4 <HAL_ADC_ConfigChannel+0xc4>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80049a8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80049aa:	f3c0 0111 	ubfx	r1, r0, #0, #18
 80049ae:	ea22 0201 	bic.w	r2, r2, r1
 80049b2:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80049b4:	2800      	cmp	r0, #0
 80049b6:	daee      	bge.n	8004996 <HAL_ADC_ConfigChannel+0xa6>
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049b8:	4c3c      	ldr	r4, [pc, #240]	@ (8004aac <HAL_ADC_ConfigChannel+0x1bc>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80049ba:	493d      	ldr	r1, [pc, #244]	@ (8004ab0 <HAL_ADC_ConfigChannel+0x1c0>)
 80049bc:	42a0      	cmp	r0, r4
 80049be:	f8d1 2708 	ldr.w	r2, [r1, #1800]	@ 0x708
 80049c2:	d03d      	beq.n	8004a40 <HAL_ADC_ConfigChannel+0x150>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80049c4:	4c3b      	ldr	r4, [pc, #236]	@ (8004ab4 <HAL_ADC_ConfigChannel+0x1c4>)
 80049c6:	42a0      	cmp	r0, r4
 80049c8:	d065      	beq.n	8004a96 <HAL_ADC_ConfigChannel+0x1a6>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80049ca:	4c3b      	ldr	r4, [pc, #236]	@ (8004ab8 <HAL_ADC_ConfigChannel+0x1c8>)
 80049cc:	42a0      	cmp	r0, r4
 80049ce:	d1e2      	bne.n	8004996 <HAL_ADC_ConfigChannel+0xa6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80049d0:	f8d1 0708 	ldr.w	r0, [r1, #1800]	@ 0x708
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049d4:	f002 72c0 	and.w	r2, r2, #25165824	@ 0x1800000
 80049d8:	f020 70e0 	bic.w	r0, r0, #29360128	@ 0x1c00000
 80049dc:	4302      	orrs	r2, r0
 80049de:	f8c1 2708 	str.w	r2, [r1, #1800]	@ 0x708
}
 80049e2:	e7d8      	b.n	8004996 <HAL_ADC_ConfigChannel+0xa6>
  __HAL_LOCK(hadc);
 80049e4:	2002      	movs	r0, #2
}
 80049e6:	b003      	add	sp, #12
 80049e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80049ea:	4931      	ldr	r1, [pc, #196]	@ (8004ab0 <HAL_ADC_ConfigChannel+0x1c0>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80049ec:	4c2f      	ldr	r4, [pc, #188]	@ (8004aac <HAL_ADC_ConfigChannel+0x1bc>)
 80049ee:	f8d1 2708 	ldr.w	r2, [r1, #1800]	@ 0x708
 80049f2:	42a0      	cmp	r0, r4
 80049f4:	f002 75e0 	and.w	r5, r2, #29360128	@ 0x1c00000
 80049f8:	d02c      	beq.n	8004a54 <HAL_ADC_ConfigChannel+0x164>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80049fa:	4c2e      	ldr	r4, [pc, #184]	@ (8004ab4 <HAL_ADC_ConfigChannel+0x1c4>)
 80049fc:	42a0      	cmp	r0, r4
 80049fe:	d013      	beq.n	8004a28 <HAL_ADC_ConfigChannel+0x138>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004a00:	4c2d      	ldr	r4, [pc, #180]	@ (8004ab8 <HAL_ADC_ConfigChannel+0x1c8>)
 8004a02:	42a0      	cmp	r0, r4
 8004a04:	d1c7      	bne.n	8004996 <HAL_ADC_ConfigChannel+0xa6>
 8004a06:	0252      	lsls	r2, r2, #9
 8004a08:	d4c5      	bmi.n	8004996 <HAL_ADC_ConfigChannel+0xa6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004a0a:	f8d1 2708 	ldr.w	r2, [r1, #1800]	@ 0x708
 8004a0e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8004a12:	432a      	orrs	r2, r5
 8004a14:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8004a18:	f8c1 2708 	str.w	r2, [r1, #1800]	@ 0x708
}
 8004a1c:	e7bb      	b.n	8004996 <HAL_ADC_ConfigChannel+0xa6>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1e:	fa90 f2a0 	rbit	r2, r0
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004a22:	fab2 f282 	clz	r2, r2
 8004a26:	e796      	b.n	8004956 <HAL_ADC_ConfigChannel+0x66>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a28:	01d0      	lsls	r0, r2, #7
 8004a2a:	d4b4      	bmi.n	8004996 <HAL_ADC_ConfigChannel+0xa6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004a2c:	f8d1 2708 	ldr.w	r2, [r1, #1800]	@ 0x708
 8004a30:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8004a34:	432a      	orrs	r2, r5
 8004a36:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004a3a:	f8c1 2708 	str.w	r2, [r1, #1800]	@ 0x708
}
 8004a3e:	e7aa      	b.n	8004996 <HAL_ADC_ConfigChannel+0xa6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004a40:	f8d1 0708 	ldr.w	r0, [r1, #1800]	@ 0x708
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a44:	f002 72a0 	and.w	r2, r2, #20971520	@ 0x1400000
 8004a48:	f020 70e0 	bic.w	r0, r0, #29360128	@ 0x1c00000
 8004a4c:	4302      	orrs	r2, r0
 8004a4e:	f8c1 2708 	str.w	r2, [r1, #1800]	@ 0x708
}
 8004a52:	e7a0      	b.n	8004996 <HAL_ADC_ConfigChannel+0xa6>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004a54:	0214      	lsls	r4, r2, #8
 8004a56:	d49e      	bmi.n	8004996 <HAL_ADC_ConfigChannel+0xa6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004a58:	f8d1 2708 	ldr.w	r2, [r1, #1800]	@ 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a5c:	4817      	ldr	r0, [pc, #92]	@ (8004abc <HAL_ADC_ConfigChannel+0x1cc>)
 8004a5e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8004a62:	432a      	orrs	r2, r5
 8004a64:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004a68:	f8c1 2708 	str.w	r2, [r1, #1800]	@ 0x708
 8004a6c:	6802      	ldr	r2, [r0, #0]
 8004a6e:	4914      	ldr	r1, [pc, #80]	@ (8004ac0 <HAL_ADC_ConfigChannel+0x1d0>)
 8004a70:	0992      	lsrs	r2, r2, #6
 8004a72:	fba1 1202 	umull	r1, r2, r1, r2
 8004a76:	0992      	lsrs	r2, r2, #6
 8004a78:	3201      	adds	r2, #1
 8004a7a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004a7e:	0092      	lsls	r2, r2, #2
 8004a80:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004a82:	9a01      	ldr	r2, [sp, #4]
 8004a84:	2a00      	cmp	r2, #0
 8004a86:	d086      	beq.n	8004996 <HAL_ADC_ConfigChannel+0xa6>
            wait_loop_index--;
 8004a88:	9a01      	ldr	r2, [sp, #4]
 8004a8a:	3a01      	subs	r2, #1
 8004a8c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004a8e:	9a01      	ldr	r2, [sp, #4]
 8004a90:	2a00      	cmp	r2, #0
 8004a92:	d1f9      	bne.n	8004a88 <HAL_ADC_ConfigChannel+0x198>
 8004a94:	e77f      	b.n	8004996 <HAL_ADC_ConfigChannel+0xa6>
 8004a96:	f8d1 0708 	ldr.w	r0, [r1, #1800]	@ 0x708
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a9a:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
 8004a9e:	f020 70e0 	bic.w	r0, r0, #29360128	@ 0x1c00000
 8004aa2:	4302      	orrs	r2, r0
 8004aa4:	f8c1 2708 	str.w	r2, [r1, #1800]	@ 0x708
}
 8004aa8:	e775      	b.n	8004996 <HAL_ADC_ConfigChannel+0xa6>
 8004aaa:	bf00      	nop
 8004aac:	b0001000 	.word	0xb0001000
 8004ab0:	40012000 	.word	0x40012000
 8004ab4:	b8004000 	.word	0xb8004000
 8004ab8:	b4002000 	.word	0xb4002000
 8004abc:	20000010 	.word	0x20000010
 8004ac0:	053e2d63 	.word	0x053e2d63

08004ac4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ac4:	4907      	ldr	r1, [pc, #28]	@ (8004ae4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004ac6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ac8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aca:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ace:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ad2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ad4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ad6:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ada:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004ade:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	e000ed00 	.word	0xe000ed00

08004ae8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b58 <HAL_NVIC_SetPriority+0x70>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004af0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004af2:	f1c3 0e07 	rsb	lr, r3, #7
 8004af6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004afa:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004afe:	bf28      	it	cs
 8004b00:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b04:	f1bc 0f06 	cmp.w	ip, #6
 8004b08:	d91c      	bls.n	8004b44 <HAL_NVIC_SetPriority+0x5c>
 8004b0a:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b12:	fa03 f30c 	lsl.w	r3, r3, ip
 8004b16:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b1e:	fa03 f30e 	lsl.w	r3, r3, lr
 8004b22:	ea21 0303 	bic.w	r3, r1, r3
 8004b26:	fa03 f30c 	lsl.w	r3, r3, ip
 8004b2a:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b2c:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8004b2e:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b30:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8004b32:	db0a      	blt.n	8004b4a <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b34:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8004b38:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8004b3c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004b40:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b44:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b46:	4694      	mov	ip, r2
 8004b48:	e7e7      	b.n	8004b1a <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b4a:	4a04      	ldr	r2, [pc, #16]	@ (8004b5c <HAL_NVIC_SetPriority+0x74>)
 8004b4c:	f000 000f 	and.w	r0, r0, #15
 8004b50:	4402      	add	r2, r0
 8004b52:	7613      	strb	r3, [r2, #24]
 8004b54:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b58:	e000ed00 	.word	0xe000ed00
 8004b5c:	e000ecfc 	.word	0xe000ecfc

08004b60 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004b60:	2800      	cmp	r0, #0
 8004b62:	db07      	blt.n	8004b74 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b64:	4a04      	ldr	r2, [pc, #16]	@ (8004b78 <HAL_NVIC_EnableIRQ+0x18>)
 8004b66:	0941      	lsrs	r1, r0, #5
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f000 001f 	and.w	r0, r0, #31
 8004b6e:	4083      	lsls	r3, r0
 8004b70:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	e000e100 	.word	0xe000e100

08004b7c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	db0c      	blt.n	8004b9a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b80:	0943      	lsrs	r3, r0, #5
 8004b82:	4906      	ldr	r1, [pc, #24]	@ (8004b9c <HAL_NVIC_DisableIRQ+0x20>)
 8004b84:	f000 001f 	and.w	r0, r0, #31
 8004b88:	3320      	adds	r3, #32
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	4082      	lsls	r2, r0
 8004b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b96:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004b9a:	4770      	bx	lr
 8004b9c:	e000e100 	.word	0xe000e100

08004ba0 <HAL_DMA_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	d07a      	beq.n	8004c9a <HAL_DMA_Init+0xfa>
{
 8004ba4:	b470      	push	{r4, r5, r6}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004ba6:	4a3e      	ldr	r2, [pc, #248]	@ (8004ca0 <HAL_DMA_Init+0x100>)
 8004ba8:	6804      	ldr	r4, [r0, #0]
 8004baa:	4294      	cmp	r4, r2
 8004bac:	4603      	mov	r3, r0
 8004bae:	d95c      	bls.n	8004c6a <HAL_DMA_Init+0xca>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004bb0:	483c      	ldr	r0, [pc, #240]	@ (8004ca4 <HAL_DMA_Init+0x104>)
 8004bb2:	4a3d      	ldr	r2, [pc, #244]	@ (8004ca8 <HAL_DMA_Init+0x108>)
    hdma->DmaBaseAddress = DMA2;
 8004bb4:	493d      	ldr	r1, [pc, #244]	@ (8004cac <HAL_DMA_Init+0x10c>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004bb6:	4420      	add	r0, r4
 8004bb8:	fba2 2000 	umull	r2, r0, r2, r0
 8004bbc:	0900      	lsrs	r0, r0, #4
 8004bbe:	0080      	lsls	r0, r0, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004bc6:	6822      	ldr	r2, [r4, #0]
 8004bc8:	6419      	str	r1, [r3, #64]	@ 0x40
 8004bca:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 8004bce:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004bd2:	6458      	str	r0, [r3, #68]	@ 0x44
 8004bd4:	6022      	str	r2, [r4, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004bd6:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8004bda:	691e      	ldr	r6, [r3, #16]
 8004bdc:	6825      	ldr	r5, [r4, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	4332      	orrs	r2, r6
 8004be2:	695e      	ldr	r6, [r3, #20]
 8004be4:	4332      	orrs	r2, r6
 8004be6:	699e      	ldr	r6, [r3, #24]
 8004be8:	4332      	orrs	r2, r6
 8004bea:	69de      	ldr	r6, [r3, #28]
 8004bec:	4332      	orrs	r2, r6
 8004bee:	6a1e      	ldr	r6, [r3, #32]
 8004bf0:	4332      	orrs	r2, r6
 8004bf2:	432a      	orrs	r2, r5
 8004bf4:	6022      	str	r2, [r4, #0]
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004bf6:	4d2c      	ldr	r5, [pc, #176]	@ (8004ca8 <HAL_DMA_Init+0x108>)
 8004bf8:	b2e2      	uxtb	r2, r4
 8004bfa:	3a08      	subs	r2, #8
 8004bfc:	fba5 5202 	umull	r5, r2, r5, r2
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c00:	4d27      	ldr	r5, [pc, #156]	@ (8004ca0 <HAL_DMA_Init+0x100>)
 8004c02:	42ac      	cmp	r4, r5
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c04:	ea4f 1212 	mov.w	r2, r2, lsr #4
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c08:	d843      	bhi.n	8004c92 <HAL_DMA_Init+0xf2>
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004c0a:	f100 4480 	add.w	r4, r0, #1073741824	@ 0x40000000
 8004c0e:	f504 3402 	add.w	r4, r4, #133120	@ 0x20800
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c12:	4827      	ldr	r0, [pc, #156]	@ (8004cb0 <HAL_DMA_Init+0x110>)

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c14:	f002 021f 	and.w	r2, r2, #31
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c18:	e9c3 4012 	strd	r4, r0, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c1c:	2001      	movs	r0, #1
 8004c1e:	fa00 f202 	lsl.w	r2, r0, r2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c22:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c26:	651a      	str	r2, [r3, #80]	@ 0x50
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c28:	d028      	beq.n	8004c7c <HAL_DMA_Init+0xdc>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c2a:	685d      	ldr	r5, [r3, #4]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c2c:	4e21      	ldr	r6, [pc, #132]	@ (8004cb4 <HAL_DMA_Init+0x114>)
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c2e:	f005 017f 	and.w	r1, r5, #127	@ 0x7f
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004c32:	3d01      	subs	r5, #1
 8004c34:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c36:	6021      	str	r1, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c38:	f8c6 2084 	str.w	r2, [r6, #132]	@ 0x84
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004c3c:	d824      	bhi.n	8004c88 <HAL_DMA_Init+0xe8>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8004cb8 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c40:	4c1e      	ldr	r4, [pc, #120]	@ (8004cbc <HAL_DMA_Init+0x11c>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c42:	440a      	add	r2, r1
 8004c44:	0092      	lsls	r2, r2, #2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004c46:	3901      	subs	r1, #1
 8004c48:	4088      	lsls	r0, r1
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c4a:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c4c:	e9c3 2415 	strd	r2, r4, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004c50:	65d8      	str	r0, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c52:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c54:	4a1a      	ldr	r2, [pc, #104]	@ (8004cc0 <HAL_DMA_Init+0x120>)
 8004c56:	6450      	str	r0, [r2, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c58:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004c5a:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c5c:	63d8      	str	r0, [r3, #60]	@ 0x3c
  __HAL_UNLOCK(hdma);
 8004c5e:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8004c62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8004c66:	bc70      	pop	{r4, r5, r6}
 8004c68:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c6a:	4816      	ldr	r0, [pc, #88]	@ (8004cc4 <HAL_DMA_Init+0x124>)
 8004c6c:	4a0e      	ldr	r2, [pc, #56]	@ (8004ca8 <HAL_DMA_Init+0x108>)
    hdma->DmaBaseAddress = DMA1;
 8004c6e:	4916      	ldr	r1, [pc, #88]	@ (8004cc8 <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c70:	4420      	add	r0, r4
 8004c72:	fba2 2000 	umull	r2, r0, r2, r0
 8004c76:	0900      	lsrs	r0, r0, #4
 8004c78:	0080      	lsls	r0, r0, #2
    hdma->DmaBaseAddress = DMA1;
 8004c7a:	e7a1      	b.n	8004bc0 <HAL_DMA_Init+0x20>
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c7c:	480d      	ldr	r0, [pc, #52]	@ (8004cb4 <HAL_DMA_Init+0x114>)
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004c7e:	2100      	movs	r1, #0
 8004c80:	6059      	str	r1, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c82:	6021      	str	r1, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c84:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    hdma->DMAmuxRequestGen = NULL;
 8004c88:	2200      	movs	r2, #0
 8004c8a:	e9c3 2215 	strd	r2, r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c8e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c90:	e7e2      	b.n	8004c58 <HAL_DMA_Init+0xb8>
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004c92:	4c0e      	ldr	r4, [pc, #56]	@ (8004ccc <HAL_DMA_Init+0x12c>)
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004c94:	3207      	adds	r2, #7
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004c96:	4404      	add	r4, r0
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004c98:	e7bb      	b.n	8004c12 <HAL_DMA_Init+0x72>
    return HAL_ERROR;
 8004c9a:	2001      	movs	r0, #1
}
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40020407 	.word	0x40020407
 8004ca4:	bffdfbf8 	.word	0xbffdfbf8
 8004ca8:	cccccccd 	.word	0xcccccccd
 8004cac:	40020400 	.word	0x40020400
 8004cb0:	40020880 	.word	0x40020880
 8004cb4:	40020800 	.word	0x40020800
 8004cb8:	1000823f 	.word	0x1000823f
 8004cbc:	40020940 	.word	0x40020940
 8004cc0:	40020900 	.word	0x40020900
 8004cc4:	bffdfff8 	.word	0xbffdfff8
 8004cc8:	40020000 	.word	0x40020000
 8004ccc:	4002081c 	.word	0x4002081c

08004cd0 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	d061      	beq.n	8004d98 <HAL_DMA_DeInit+0xc8>
{
 8004cd4:	b470      	push	{r4, r5, r6}
  __HAL_DMA_DISABLE(hdma);
 8004cd6:	6804      	ldr	r4, [r0, #0]
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004cd8:	4d30      	ldr	r5, [pc, #192]	@ (8004d9c <HAL_DMA_DeInit+0xcc>)
  __HAL_DMA_DISABLE(hdma);
 8004cda:	6822      	ldr	r2, [r4, #0]
 8004cdc:	f022 0201 	bic.w	r2, r2, #1
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004ce0:	b2e1      	uxtb	r1, r4
  __HAL_DMA_DISABLE(hdma);
 8004ce2:	6022      	str	r2, [r4, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004ce4:	4a2e      	ldr	r2, [pc, #184]	@ (8004da0 <HAL_DMA_DeInit+0xd0>)
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004ce6:	3908      	subs	r1, #8
 8004ce8:	4603      	mov	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004cea:	4294      	cmp	r4, r2
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004cec:	fba5 0101 	umull	r0, r1, r5, r1
 8004cf0:	ea4f 1111 	mov.w	r1, r1, lsr #4
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004cf4:	d93b      	bls.n	8004d6e <HAL_DMA_DeInit+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004cf6:	482b      	ldr	r0, [pc, #172]	@ (8004da4 <HAL_DMA_DeInit+0xd4>)
    hdma->DmaBaseAddress = DMA2;
 8004cf8:	4e2b      	ldr	r6, [pc, #172]	@ (8004da8 <HAL_DMA_DeInit+0xd8>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004cfa:	4a2c      	ldr	r2, [pc, #176]	@ (8004dac <HAL_DMA_DeInit+0xdc>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004cfc:	4420      	add	r0, r4
 8004cfe:	fba5 5000 	umull	r5, r0, r5, r0
 8004d02:	0900      	lsrs	r0, r0, #4
 8004d04:	0080      	lsls	r0, r0, #2
    hdma->DmaBaseAddress = DMA2;
 8004d06:	e9c3 6010 	strd	r6, r0, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d0a:	2501      	movs	r5, #1
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004d0c:	4402      	add	r2, r0
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d0e:	f000 001c 	and.w	r0, r0, #28
 8004d12:	fa05 f000 	lsl.w	r0, r5, r0
  hdma->Instance->CCR = 0U;
 8004d16:	2500      	movs	r5, #0
 8004d18:	6025      	str	r5, [r4, #0]
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004d1a:	3107      	adds	r1, #7
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d1c:	6070      	str	r0, [r6, #4]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d1e:	4c24      	ldr	r4, [pc, #144]	@ (8004db0 <HAL_DMA_DeInit+0xe0>)
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d20:	4d24      	ldr	r5, [pc, #144]	@ (8004db4 <HAL_DMA_DeInit+0xe4>)
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004d22:	f001 011f 	and.w	r1, r1, #31
 8004d26:	2001      	movs	r0, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d28:	e9c3 2412 	strd	r2, r4, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004d2c:	fa00 f101 	lsl.w	r1, r0, r1
  hdma->DMAmuxChannel->CCR = 0U;
 8004d30:	2400      	movs	r4, #0
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004d32:	6519      	str	r1, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel->CCR = 0U;
 8004d34:	6014      	str	r4, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d36:	f8c5 1084 	str.w	r1, [r5, #132]	@ 0x84
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004d3a:	6859      	ldr	r1, [r3, #4]
 8004d3c:	1e4a      	subs	r2, r1, #1
 8004d3e:	2a03      	cmp	r2, #3
 8004d40:	d806      	bhi.n	8004d50 <HAL_DMA_DeInit+0x80>
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004d42:	4090      	lsls	r0, r2
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d44:	4a1c      	ldr	r2, [pc, #112]	@ (8004db8 <HAL_DMA_DeInit+0xe8>)
 8004d46:	440a      	add	r2, r1
 8004d48:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d4a:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d4c:	f8c5 0144 	str.w	r0, [r5, #324]	@ 0x144
  hdma->DMAmuxRequestGen = NULL;
 8004d50:	2000      	movs	r0, #0
 8004d52:	e9c3 0015 	strd	r0, r0, [r3, #84]	@ 0x54
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d56:	63d8      	str	r0, [r3, #60]	@ 0x3c
  __HAL_UNLOCK(hdma);
 8004d58:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_RESET;
 8004d5c:	f883 0025 	strb.w	r0, [r3, #37]	@ 0x25
}
 8004d60:	bc70      	pop	{r4, r5, r6}
  hdma->XferHalfCpltCallback = NULL;
 8004d62:	e9c3 000b 	strd	r0, r0, [r3, #44]	@ 0x2c
  hdma->XferAbortCallback = NULL;
 8004d66:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d6a:	65d8      	str	r0, [r3, #92]	@ 0x5c
}
 8004d6c:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004d6e:	4a13      	ldr	r2, [pc, #76]	@ (8004dbc <HAL_DMA_DeInit+0xec>)
 8004d70:	4422      	add	r2, r4
 8004d72:	fba5 5202 	umull	r5, r2, r5, r2
 8004d76:	0912      	lsrs	r2, r2, #4
 8004d78:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8004d7a:	4d11      	ldr	r5, [pc, #68]	@ (8004dc0 <HAL_DMA_DeInit+0xf0>)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d7c:	f002 061c 	and.w	r6, r2, #28
 8004d80:	2001      	movs	r0, #1
    hdma->DmaBaseAddress = DMA1;
 8004d82:	e9c3 5210 	strd	r5, r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d86:	40b0      	lsls	r0, r6
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004d88:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
  hdma->Instance->CCR = 0U;
 8004d8c:	2600      	movs	r6, #0
 8004d8e:	6026      	str	r6, [r4, #0]
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004d90:	f502 3202 	add.w	r2, r2, #133120	@ 0x20800
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d94:	6068      	str	r0, [r5, #4]
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004d96:	e7c2      	b.n	8004d1e <HAL_DMA_DeInit+0x4e>
    return HAL_ERROR;
 8004d98:	2001      	movs	r0, #1
}
 8004d9a:	4770      	bx	lr
 8004d9c:	cccccccd 	.word	0xcccccccd
 8004da0:	40020407 	.word	0x40020407
 8004da4:	bffdfbf8 	.word	0xbffdfbf8
 8004da8:	40020400 	.word	0x40020400
 8004dac:	4002081c 	.word	0x4002081c
 8004db0:	40020880 	.word	0x40020880
 8004db4:	40020800 	.word	0x40020800
 8004db8:	1000823f 	.word	0x1000823f
 8004dbc:	bffdfff8 	.word	0xbffdfff8
 8004dc0:	40020000 	.word	0x40020000

08004dc4 <HAL_DMA_Start_IT>:
{
 8004dc4:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8004dc6:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 8004dca:	2801      	cmp	r0, #1
 8004dcc:	d055      	beq.n	8004e7a <HAL_DMA_Start_IT+0xb6>
{
 8004dce:	b530      	push	{r4, r5, lr}
  if (hdma->State == HAL_DMA_STATE_READY)
 8004dd0:	f89c 4025 	ldrb.w	r4, [ip, #37]	@ 0x25
  __HAL_LOCK(hdma);
 8004dd4:	2001      	movs	r0, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 8004dd6:	4284      	cmp	r4, r0
  __HAL_LOCK(hdma);
 8004dd8:	f88c 0024 	strb.w	r0, [ip, #36]	@ 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8004ddc:	d006      	beq.n	8004dec <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);
 8004dde:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004de0:	2280      	movs	r2, #128	@ 0x80
    __HAL_UNLOCK(hdma);
 8004de2:	f88c 3024 	strb.w	r3, [ip, #36]	@ 0x24
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004de6:	f8cc 203c 	str.w	r2, [ip, #60]	@ 0x3c
}
 8004dea:	bd30      	pop	{r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dec:	2002      	movs	r0, #2
 8004dee:	f88c 0025 	strb.w	r0, [ip, #37]	@ 0x25
    __HAL_DMA_DISABLE(hdma);
 8004df2:	f8dc 4000 	ldr.w	r4, [ip]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004df6:	f8dc 504c 	ldr.w	r5, [ip, #76]	@ 0x4c
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	f8cc 003c 	str.w	r0, [ip, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004e00:	6820      	ldr	r0, [r4, #0]
 8004e02:	f020 0001 	bic.w	r0, r0, #1
 8004e06:	6020      	str	r0, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e08:	e9dc e014 	ldrd	lr, r0, [ip, #80]	@ 0x50
 8004e0c:	f8c5 e004 	str.w	lr, [r5, #4]
  if (hdma->DMAmuxRequestGen != NULL)
 8004e10:	b118      	cbz	r0, 8004e1a <HAL_DMA_Start_IT+0x56>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e12:	e9dc 5e16 	ldrd	r5, lr, [ip, #88]	@ 0x58
 8004e16:	f8c5 e004 	str.w	lr, [r5, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e1a:	f8dc 5044 	ldr.w	r5, [ip, #68]	@ 0x44
 8004e1e:	f005 0e1c 	and.w	lr, r5, #28
 8004e22:	2501      	movs	r5, #1
 8004e24:	fa05 f50e 	lsl.w	r5, r5, lr
 8004e28:	f8dc e040 	ldr.w	lr, [ip, #64]	@ 0x40
 8004e2c:	f8ce 5004 	str.w	r5, [lr, #4]
  hdma->Instance->CNDTR = DataLength;
 8004e30:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e32:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8004e36:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8004e38:	f8dc 3030 	ldr.w	r3, [ip, #48]	@ 0x30
    hdma->Instance->CPAR = DstAddress;
 8004e3c:	bf0b      	itete	eq
 8004e3e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8004e40:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004e42:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8004e44:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8004e46:	b1d3      	cbz	r3, 8004e7e <HAL_DMA_Start_IT+0xba>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	f043 030e 	orr.w	r3, r3, #14
 8004e4e:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e50:	f8dc 3048 	ldr.w	r3, [ip, #72]	@ 0x48
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	03d2      	lsls	r2, r2, #15
 8004e58:	d40a      	bmi.n	8004e70 <HAL_DMA_Start_IT+0xac>
    if (hdma->DMAmuxRequestGen != NULL)
 8004e5a:	b118      	cbz	r0, 8004e64 <HAL_DMA_Start_IT+0xa0>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004e5c:	6803      	ldr	r3, [r0, #0]
 8004e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e62:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8004e6a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004e6c:	6023      	str	r3, [r4, #0]
}
 8004e6e:	bd30      	pop	{r4, r5, pc}
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	e7ef      	b.n	8004e5a <HAL_DMA_Start_IT+0x96>
  __HAL_LOCK(hdma);
 8004e7a:	2002      	movs	r0, #2
}
 8004e7c:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	f023 0304 	bic.w	r3, r3, #4
 8004e84:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	f043 030a 	orr.w	r3, r3, #10
 8004e8c:	6023      	str	r3, [r4, #0]
 8004e8e:	e7df      	b.n	8004e50 <HAL_DMA_Start_IT+0x8c>

08004e90 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8004e90:	2800      	cmp	r0, #0
 8004e92:	d033      	beq.n	8004efc <HAL_DMA_Abort+0x6c>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004e94:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d12a      	bne.n	8004ef2 <HAL_DMA_Abort+0x62>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e9c:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e9e:	6c42      	ldr	r2, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ea0:	6819      	ldr	r1, [r3, #0]
{
 8004ea2:	b430      	push	{r4, r5}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ea4:	f021 010e 	bic.w	r1, r1, #14
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ea8:	6c84      	ldr	r4, [r0, #72]	@ 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004eaa:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004eac:	6821      	ldr	r1, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004eae:	6c05      	ldr	r5, [r0, #64]	@ 0x40
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004eb0:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8004eb4:	6021      	str	r1, [r4, #0]
    __HAL_DMA_DISABLE(hdma);
 8004eb6:	6819      	ldr	r1, [r3, #0]
 8004eb8:	f021 0101 	bic.w	r1, r1, #1
 8004ebc:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ebe:	f002 021c 	and.w	r2, r2, #28
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ec6:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	@ 0x50
 8004eca:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ecc:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ece:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8004ed0:	b132      	cbz	r2, 8004ee0 <HAL_DMA_Abort+0x50>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ed2:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ed4:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	@ 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ed8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004edc:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ede:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004ee0:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8004ee8:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8004eec:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8004eee:	4618      	mov	r0, r3
}
 8004ef0:	4770      	bx	lr
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ef2:	2204      	movs	r2, #4
    __HAL_UNLOCK(hdma);
 8004ef4:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ef6:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8004ef8:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8004efc:	2001      	movs	r0, #1
}
 8004efe:	4770      	bx	lr

08004f00 <HAL_DMA_Abort_IT>:
{
 8004f00:	b538      	push	{r3, r4, r5, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004f02:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d003      	beq.n	8004f12 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f0a:	2304      	movs	r3, #4
 8004f0c:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8004f0e:	2001      	movs	r0, #1
}
 8004f10:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f12:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f14:	6c84      	ldr	r4, [r0, #72]	@ 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f16:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f18:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004f1a:	6c05      	ldr	r5, [r0, #64]	@ 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f1c:	f021 010e 	bic.w	r1, r1, #14
 8004f20:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004f22:	6819      	ldr	r1, [r3, #0]
 8004f24:	f021 0101 	bic.w	r1, r1, #1
 8004f28:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f2a:	6823      	ldr	r3, [r4, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f2c:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f32:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f34:	f002 021c 	and.w	r2, r2, #28
 8004f38:	2301      	movs	r3, #1
 8004f3a:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f3c:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	@ 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f40:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f42:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8004f44:	b132      	cbz	r2, 8004f54 <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f46:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f48:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	@ 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f50:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f52:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 8004f54:	6b83      	ldr	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8004f56:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8004f58:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_READY;
 8004f5a:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8004f5e:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 8004f62:	b103      	cbz	r3, 8004f66 <HAL_DMA_Abort_IT+0x66>
      hdma->XferAbortCallback(hdma);
 8004f64:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004f66:	2000      	movs	r0, #0
}
 8004f68:	bd38      	pop	{r3, r4, r5, pc}
 8004f6a:	bf00      	nop

08004f6c <HAL_DMA_IRQHandler>:
{
 8004f6c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004f6e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f70:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8004f72:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f74:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004f76:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004f78:	f003 031c 	and.w	r3, r3, #28
 8004f7c:	2204      	movs	r2, #4
 8004f7e:	409a      	lsls	r2, r3
 8004f80:	420a      	tst	r2, r1
 8004f82:	d00e      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x36>
 8004f84:	f014 0f04 	tst.w	r4, #4
 8004f88:	d00b      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x36>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f8a:	682b      	ldr	r3, [r5, #0]
 8004f8c:	069b      	lsls	r3, r3, #26
 8004f8e:	d403      	bmi.n	8004f98 <HAL_DMA_IRQHandler+0x2c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f90:	682b      	ldr	r3, [r5, #0]
 8004f92:	f023 0304 	bic.w	r3, r3, #4
 8004f96:	602b      	str	r3, [r5, #0]
      if (hdma->XferHalfCpltCallback != NULL)
 8004f98:	6b03      	ldr	r3, [r0, #48]	@ 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004f9a:	6072      	str	r2, [r6, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8004f9c:	b1fb      	cbz	r3, 8004fde <HAL_DMA_IRQHandler+0x72>
}
 8004f9e:	bc70      	pop	{r4, r5, r6}
        hdma->XferCpltCallback(hdma);
 8004fa0:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	409a      	lsls	r2, r3
 8004fa6:	420a      	tst	r2, r1
 8004fa8:	d01b      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0x76>
 8004faa:	f014 0f02 	tst.w	r4, #2
 8004fae:	d018      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0x76>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004fb0:	682b      	ldr	r3, [r5, #0]
 8004fb2:	0699      	lsls	r1, r3, #26
 8004fb4:	d406      	bmi.n	8004fc4 <HAL_DMA_IRQHandler+0x58>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004fb6:	682b      	ldr	r3, [r5, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8004fb8:	2101      	movs	r1, #1
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004fba:	f023 030a 	bic.w	r3, r3, #10
 8004fbe:	602b      	str	r3, [r5, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8004fc0:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004fc4:	4b13      	ldr	r3, [pc, #76]	@ (8005014 <HAL_DMA_IRQHandler+0xa8>)
 8004fc6:	429d      	cmp	r5, r3
 8004fc8:	bf96      	itet	ls
 8004fca:	4b13      	ldrls	r3, [pc, #76]	@ (8005018 <HAL_DMA_IRQHandler+0xac>)
 8004fcc:	f8c3 2384 	strhi.w	r2, [r3, #900]	@ 0x384
 8004fd0:	605a      	strls	r2, [r3, #4]
      if (hdma->XferCpltCallback != NULL)
 8004fd2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
      __HAL_UNLOCK(hdma);
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
      if (hdma->XferCpltCallback != NULL)
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1df      	bne.n	8004f9e <HAL_DMA_IRQHandler+0x32>
}
 8004fde:	bc70      	pop	{r4, r5, r6}
 8004fe0:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004fe2:	2208      	movs	r2, #8
 8004fe4:	409a      	lsls	r2, r3
 8004fe6:	420a      	tst	r2, r1
 8004fe8:	d0f9      	beq.n	8004fde <HAL_DMA_IRQHandler+0x72>
 8004fea:	0722      	lsls	r2, r4, #28
 8004fec:	d5f7      	bpl.n	8004fde <HAL_DMA_IRQHandler+0x72>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fee:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8004ff0:	6b41      	ldr	r1, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ff2:	f022 020e 	bic.w	r2, r2, #14
 8004ff6:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8004ffe:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005000:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005002:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8005004:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8005008:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    if (hdma->XferErrorCallback != NULL)
 800500c:	2900      	cmp	r1, #0
 800500e:	d0e6      	beq.n	8004fde <HAL_DMA_IRQHandler+0x72>
}
 8005010:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005012:	4708      	bx	r1
 8005014:	40020080 	.word	0x40020080
 8005018:	40020000 	.word	0x40020000

0800501c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800501c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005020:	680c      	ldr	r4, [r1, #0]
{
 8005022:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005024:	2c00      	cmp	r4, #0
 8005026:	f000 80bf 	beq.w	80051a8 <HAL_GPIO_Init+0x18c>
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800502a:	4e6b      	ldr	r6, [pc, #428]	@ (80051d8 <HAL_GPIO_Init+0x1bc>)
  uint32_t position = 0x00u;
 800502c:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800502e:	f04f 0b01 	mov.w	fp, #1
 8005032:	e05d      	b.n	80050f0 <HAL_GPIO_Init+0xd4>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005034:	2a03      	cmp	r2, #3
 8005036:	f040 80ba 	bne.w	80051ae <HAL_GPIO_Init+0x192>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800503a:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 800503e:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005042:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005046:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005048:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 800504c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800504e:	d04b      	beq.n	80050e8 <HAL_GPIO_Init+0xcc>
        temp = SYSCFG->EXTICR[position >> 2u];
 8005050:	f023 0203 	bic.w	r2, r3, #3
 8005054:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8005058:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800505c:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8005060:	f8d2 c008 	ldr.w	ip, [r2, #8]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005064:	00bf      	lsls	r7, r7, #2
 8005066:	f04f 0e07 	mov.w	lr, #7
 800506a:	fa0e fe07 	lsl.w	lr, lr, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800506e:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005072:	ea2c 080e 	bic.w	r8, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005076:	d010      	beq.n	800509a <HAL_GPIO_Init+0x7e>
 8005078:	f8df 9160 	ldr.w	r9, [pc, #352]	@ 80051dc <HAL_GPIO_Init+0x1c0>
 800507c:	4548      	cmp	r0, r9
 800507e:	f000 80a3 	beq.w	80051c8 <HAL_GPIO_Init+0x1ac>
 8005082:	f8df 915c 	ldr.w	r9, [pc, #348]	@ 80051e0 <HAL_GPIO_Init+0x1c4>
 8005086:	4548      	cmp	r0, r9
 8005088:	bf03      	ittte	eq
 800508a:	f04f 0c02 	moveq.w	ip, #2
 800508e:	fa0c f707 	lsleq.w	r7, ip, r7
 8005092:	ea48 0807 	orreq.w	r8, r8, r7
 8005096:	ea4e 080c 	orrne.w	r8, lr, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800509a:	f8c2 8008 	str.w	r8, [r2, #8]
        temp = EXTI->RTSR1;
 800509e:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
 80050a0:	ea6f 070a 	mvn.w	r7, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80050a4:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 80050a8:	bf0c      	ite	eq
 80050aa:	403a      	andeq	r2, r7
        {
          temp |= iocurrent;
 80050ac:	ea4a 0202 	orrne.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 80050b0:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 80050b2:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80050b4:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 80050b8:	bf0c      	ite	eq
 80050ba:	403a      	andeq	r2, r7
        {
          temp |= iocurrent;
 80050bc:	ea4a 0202 	orrne.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 80050c0:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80050c2:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80050c6:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
        temp &= ~(iocurrent);
 80050ca:	bf0c      	ite	eq
 80050cc:	403a      	andeq	r2, r7
        {
          temp |= iocurrent;
 80050ce:	ea4a 0202 	orrne.w	r2, sl, r2
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80050d2:	f8c6 2080 	str.w	r2, [r6, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80050d6:	f8d6 2084 	ldr.w	r2, [r6, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80050da:	03ad      	lsls	r5, r5, #14
        temp &= ~(iocurrent);
 80050dc:	bf54      	ite	pl
 80050de:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 80050e0:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80050e4:	f8c6 2084 	str.w	r2, [r6, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80050e8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050ea:	fa34 f203 	lsrs.w	r2, r4, r3
 80050ee:	d05b      	beq.n	80051a8 <HAL_GPIO_Init+0x18c>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80050f0:	fa0b fe03 	lsl.w	lr, fp, r3
    if (iocurrent != 0x00u)
 80050f4:	ea1e 0a04 	ands.w	sl, lr, r4
 80050f8:	d0f6      	beq.n	80050e8 <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050fa:	684d      	ldr	r5, [r1, #4]
 80050fc:	f005 0203 	and.w	r2, r5, #3
 8005100:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005104:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005106:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800510a:	fa07 f70c 	lsl.w	r7, r7, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800510e:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005112:	ea6f 0707 	mvn.w	r7, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005116:	d88d      	bhi.n	8005034 <HAL_GPIO_Init+0x18>
        temp = GPIOx->OSPEEDR;
 8005118:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800511c:	f8d1 800c 	ldr.w	r8, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005120:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005124:	fa08 f80c 	lsl.w	r8, r8, ip
 8005128:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800512c:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8005130:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005134:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005138:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 800513c:	fa0e fe03 	lsl.w	lr, lr, r3
 8005140:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8005144:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8005148:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800514c:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005150:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005154:	fa0e fe0c 	lsl.w	lr, lr, ip
 8005158:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800515c:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800515e:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005162:	f47f af6a 	bne.w	800503a <HAL_GPIO_Init+0x1e>
        temp = GPIOx->AFR[position >> 3U];
 8005166:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 800516a:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800516e:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8005172:	f8d8 9020 	ldr.w	r9, [r8, #32]
 8005176:	f8cd 9000 	str.w	r9, [sp]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800517a:	f8d1 9010 	ldr.w	r9, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800517e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005182:	fa09 f90e 	lsl.w	r9, r9, lr
 8005186:	f8cd 9004 	str.w	r9, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800518a:	f04f 090f 	mov.w	r9, #15
 800518e:	fa09 fe0e 	lsl.w	lr, r9, lr
 8005192:	f8dd 9000 	ldr.w	r9, [sp]
 8005196:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800519a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800519e:	ea4e 0e09 	orr.w	lr, lr, r9
        GPIOx->AFR[position >> 3u] = temp;
 80051a2:	f8c8 e020 	str.w	lr, [r8, #32]
 80051a6:	e748      	b.n	800503a <HAL_GPIO_Init+0x1e>
  }
}
 80051a8:	b003      	add	sp, #12
 80051aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->PUPDR;
 80051ae:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051b2:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051b6:	ea07 0808 	and.w	r8, r7, r8
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051ba:	fa0e fe0c 	lsl.w	lr, lr, ip
 80051be:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 80051c2:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051c6:	e738      	b.n	800503a <HAL_GPIO_Init+0x1e>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80051c8:	f04f 0c01 	mov.w	ip, #1
 80051cc:	fa0c f707 	lsl.w	r7, ip, r7
 80051d0:	ea48 0807 	orr.w	r8, r8, r7
 80051d4:	e761      	b.n	800509a <HAL_GPIO_Init+0x7e>
 80051d6:	bf00      	nop
 80051d8:	58000800 	.word	0x58000800
 80051dc:	48000400 	.word	0x48000400
 80051e0:	48000800 	.word	0x48000800

080051e4 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80051e4:	2900      	cmp	r1, #0
 80051e6:	d074      	beq.n	80052d2 <HAL_GPIO_DeInit+0xee>
{
 80051e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
 80051ec:	2300      	movs	r3, #0
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80051ee:	4e39      	ldr	r6, [pc, #228]	@ (80052d4 <HAL_GPIO_DeInit+0xf0>)
    iocurrent = (GPIO_Pin) & (1uL << position);
 80051f0:	f04f 0801 	mov.w	r8, #1
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80051f4:	f04f 0a07 	mov.w	sl, #7
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80051f8:	f04f 0b0f 	mov.w	fp, #15
 80051fc:	e047      	b.n	800528e <HAL_GPIO_DeInit+0xaa>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80051fe:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 80052d8 <HAL_GPIO_DeInit+0xf4>
 8005202:	4548      	cmp	r0, r9
 8005204:	d05d      	beq.n	80052c2 <HAL_GPIO_DeInit+0xde>
 8005206:	f8df 90d4 	ldr.w	r9, [pc, #212]	@ 80052dc <HAL_GPIO_DeInit+0xf8>
 800520a:	4548      	cmp	r0, r9
 800520c:	d05c      	beq.n	80052c8 <HAL_GPIO_DeInit+0xe4>
 800520e:	4675      	mov	r5, lr
 8005210:	42af      	cmp	r7, r5
 8005212:	d117      	bne.n	8005244 <HAL_GPIO_DeInit+0x60>
        EXTI->IMR1 &= ~(iocurrent);
 8005214:	f8d6 5080 	ldr.w	r5, [r6, #128]	@ 0x80
 8005218:	ea25 050c 	bic.w	r5, r5, ip
 800521c:	f8c6 5080 	str.w	r5, [r6, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005220:	f8d6 5084 	ldr.w	r5, [r6, #132]	@ 0x84
 8005224:	ea25 050c 	bic.w	r5, r5, ip
 8005228:	f8c6 5084 	str.w	r5, [r6, #132]	@ 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 800522c:	6835      	ldr	r5, [r6, #0]
 800522e:	ea25 050c 	bic.w	r5, r5, ip
 8005232:	6035      	str	r5, [r6, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005234:	6875      	ldr	r5, [r6, #4]
 8005236:	ea25 050c 	bic.w	r5, r5, ip
 800523a:	6075      	str	r5, [r6, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800523c:	68a5      	ldr	r5, [r4, #8]
 800523e:	ea25 050e 	bic.w	r5, r5, lr
 8005242:	60a5      	str	r5, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005244:	6805      	ldr	r5, [r0, #0]
 8005246:	2703      	movs	r7, #3
 8005248:	005c      	lsls	r4, r3, #1
 800524a:	fa07 f404 	lsl.w	r4, r7, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800524e:	fa23 f707 	lsr.w	r7, r3, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005252:	4325      	orrs	r5, r4
 8005254:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005258:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800525a:	f003 0507 	and.w	r5, r3, #7
 800525e:	f8d7 c020 	ldr.w	ip, [r7, #32]
 8005262:	00ad      	lsls	r5, r5, #2
 8005264:	fa0b f505 	lsl.w	r5, fp, r5
 8005268:	ea2c 0505 	bic.w	r5, ip, r5
 800526c:	623d      	str	r5, [r7, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800526e:	6885      	ldr	r5, [r0, #8]
 8005270:	ea25 0504 	bic.w	r5, r5, r4
 8005274:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005276:	6845      	ldr	r5, [r0, #4]
 8005278:	ea25 0202 	bic.w	r2, r5, r2
 800527c:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800527e:	68c2      	ldr	r2, [r0, #12]
 8005280:	ea22 0204 	bic.w	r2, r2, r4
 8005284:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8005286:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8005288:	fa31 f203 	lsrs.w	r2, r1, r3
 800528c:	d017      	beq.n	80052be <HAL_GPIO_DeInit+0xda>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800528e:	fa08 f203 	lsl.w	r2, r8, r3
    if (iocurrent != 0x00u)
 8005292:	ea12 0c01 	ands.w	ip, r2, r1
 8005296:	d0f6      	beq.n	8005286 <HAL_GPIO_DeInit+0xa2>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8005298:	f023 0403 	bic.w	r4, r3, #3
 800529c:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 80052a0:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80052a4:	f003 0503 	and.w	r5, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 80052a8:	68a7      	ldr	r7, [r4, #8]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80052aa:	00ad      	lsls	r5, r5, #2
 80052ac:	fa0a fe05 	lsl.w	lr, sl, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80052b0:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80052b4:	ea0e 0707 	and.w	r7, lr, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80052b8:	d1a1      	bne.n	80051fe <HAL_GPIO_DeInit+0x1a>
 80052ba:	2500      	movs	r5, #0
 80052bc:	e7a8      	b.n	8005210 <HAL_GPIO_DeInit+0x2c>
  }
}
 80052be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80052c2:	fa08 f505 	lsl.w	r5, r8, r5
 80052c6:	e7a3      	b.n	8005210 <HAL_GPIO_DeInit+0x2c>
 80052c8:	f04f 0902 	mov.w	r9, #2
 80052cc:	fa09 f505 	lsl.w	r5, r9, r5
 80052d0:	e79e      	b.n	8005210 <HAL_GPIO_DeInit+0x2c>
 80052d2:	4770      	bx	lr
 80052d4:	58000800 	.word	0x58000800
 80052d8:	48000400 	.word	0x48000400
 80052dc:	48000800 	.word	0x48000800

080052e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052e0:	b10a      	cbz	r2, 80052e6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80052e2:	6181      	str	r1, [r0, #24]
 80052e4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80052e6:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop

080052ec <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80052ec:	4a04      	ldr	r2, [pc, #16]	@ (8005300 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80052ee:	68d1      	ldr	r1, [r2, #12]
 80052f0:	4201      	tst	r1, r0
 80052f2:	d100      	bne.n	80052f6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80052f4:	4770      	bx	lr
{
 80052f6:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052f8:	60d0      	str	r0, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052fa:	f7fb fd3b 	bl	8000d74 <HAL_GPIO_EXTI_Callback>
  }
}
 80052fe:	bd08      	pop	{r3, pc}
 8005300:	58000800 	.word	0x58000800

08005304 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005308:	4680      	mov	r8, r0
 800530a:	460d      	mov	r5, r1
 800530c:	4617      	mov	r7, r2
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800530e:	2610      	movs	r6, #16
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005310:	f8d8 3000 	ldr.w	r3, [r8]
 8005314:	699c      	ldr	r4, [r3, #24]
 8005316:	f014 0402 	ands.w	r4, r4, #2
 800531a:	d163      	bne.n	80053e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe0>
  uint32_t itflag   = hi2c->Instance->ISR;
 800531c:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800531e:	f012 0c10 	ands.w	ip, r2, #16
 8005322:	d05d      	beq.n	80053e0 <I2C_WaitOnTXISFlagUntilTimeout+0xdc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005324:	1c68      	adds	r0, r5, #1
 8005326:	61de      	str	r6, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005328:	d15f      	bne.n	80053ea <I2C_WaitOnTXISFlagUntilTimeout+0xe6>
 800532a:	699a      	ldr	r2, [r3, #24]
 800532c:	0691      	lsls	r1, r2, #26
 800532e:	d5fc      	bpl.n	800532a <I2C_WaitOnTXISFlagUntilTimeout+0x26>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005330:	2220      	movs	r2, #32
 8005332:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005334:	f044 0c04 	orr.w	ip, r4, #4

    status = HAL_ERROR;
 8005338:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800533a:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800533c:	05d0      	lsls	r0, r2, #23
 800533e:	d534      	bpl.n	80053aa <I2C_WaitOnTXISFlagUntilTimeout+0xa6>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005340:	f44f 7180 	mov.w	r1, #256	@ 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005344:	0554      	lsls	r4, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005346:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8005348:	f04c 0c01 	orr.w	ip, ip, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800534c:	d504      	bpl.n	8005358 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800534e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005352:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8005354:	f04c 0c08 	orr.w	ip, ip, #8

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005358:	0595      	lsls	r5, r2, #22
 800535a:	d504      	bpl.n	8005366 <I2C_WaitOnTXISFlagUntilTimeout+0x62>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800535c:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8005360:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005364:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005366:	699a      	ldr	r2, [r3, #24]
 8005368:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 800536a:	bf44      	itt	mi
 800536c:	2200      	movmi	r2, #0
 800536e:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005370:	699a      	ldr	r2, [r3, #24]
 8005372:	07d1      	lsls	r1, r2, #31
 8005374:	d403      	bmi.n	800537e <I2C_WaitOnTXISFlagUntilTimeout+0x7a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005376:	699a      	ldr	r2, [r3, #24]
 8005378:	f042 0201 	orr.w	r2, r2, #1
 800537c:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	4838      	ldr	r0, [pc, #224]	@ (8005464 <I2C_WaitOnTXISFlagUntilTimeout+0x160>)
 8005382:	4002      	ands	r2, r0
 8005384:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005386:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800538a:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800538c:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 800538e:	ea43 030c 	orr.w	r3, r3, ip
 8005392:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005396:	f888 1041 	strb.w	r1, [r8, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800539a:	f888 2042 	strb.w	r2, [r8, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800539e:	2300      	movs	r3, #0
 80053a0:	f888 3040 	strb.w	r3, [r8, #64]	@ 0x40
      return HAL_ERROR;
 80053a4:	2001      	movs	r0, #1
}
 80053a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80053aa:	0550      	lsls	r0, r2, #21
 80053ac:	d4cf      	bmi.n	800534e <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80053ae:	0594      	lsls	r4, r2, #22
 80053b0:	d4d4      	bmi.n	800535c <I2C_WaitOnTXISFlagUntilTimeout+0x58>
  if (status != HAL_OK)
 80053b2:	2900      	cmp	r1, #0
 80053b4:	d1d7      	bne.n	8005366 <I2C_WaitOnTXISFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 80053b6:	1c6a      	adds	r2, r5, #1
 80053b8:	d0ac      	beq.n	8005314 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ba:	f7fc f979 	bl	80016b0 <HAL_GetTick>
 80053be:	1bc3      	subs	r3, r0, r7
 80053c0:	42ab      	cmp	r3, r5
 80053c2:	d801      	bhi.n	80053c8 <I2C_WaitOnTXISFlagUntilTimeout+0xc4>
 80053c4:	2d00      	cmp	r5, #0
 80053c6:	d1a3      	bne.n	8005310 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053c8:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053cc:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053ce:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d0:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053d2:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053d6:	f888 1041 	strb.w	r1, [r8, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053da:	f888 2042 	strb.w	r2, [r8, #66]	@ 0x42
        return HAL_ERROR;
 80053de:	e7de      	b.n	800539e <I2C_WaitOnTXISFlagUntilTimeout+0x9a>
  HAL_StatusTypeDef status = HAL_OK;
 80053e0:	4661      	mov	r1, ip
 80053e2:	e7aa      	b.n	800533a <I2C_WaitOnTXISFlagUntilTimeout+0x36>
  return HAL_OK;
 80053e4:	2000      	movs	r0, #0
}
 80053e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint32_t tickstart = Tickstart;
 80053ea:	46b9      	mov	r9, r7
  HAL_StatusTypeDef status = HAL_OK;
 80053ec:	46a2      	mov	sl, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053ee:	699a      	ldr	r2, [r3, #24]
 80053f0:	0692      	lsls	r2, r2, #26
 80053f2:	d432      	bmi.n	800545a <I2C_WaitOnTXISFlagUntilTimeout+0x156>
 80053f4:	f1ba 0f00 	cmp.w	sl, #0
 80053f8:	d19c      	bne.n	8005334 <I2C_WaitOnTXISFlagUntilTimeout+0x30>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053fa:	f7fc f959 	bl	80016b0 <HAL_GetTick>
 80053fe:	eba0 0009 	sub.w	r0, r0, r9
 8005402:	4285      	cmp	r5, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005404:	f8d8 3000 	ldr.w	r3, [r8]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005408:	d301      	bcc.n	800540e <I2C_WaitOnTXISFlagUntilTimeout+0x10a>
 800540a:	2d00      	cmp	r5, #0
 800540c:	d1ef      	bne.n	80053ee <I2C_WaitOnTXISFlagUntilTimeout+0xea>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800540e:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8005410:	f898 2042 	ldrb.w	r2, [r8, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005414:	6999      	ldr	r1, [r3, #24]
 8005416:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 8005418:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800541a:	d50c      	bpl.n	8005436 <I2C_WaitOnTXISFlagUntilTimeout+0x132>
 800541c:	0441      	lsls	r1, r0, #17
 800541e:	d40a      	bmi.n	8005436 <I2C_WaitOnTXISFlagUntilTimeout+0x132>
              (tmp1 != I2C_CR2_STOP) && \
 8005420:	2a20      	cmp	r2, #32
 8005422:	d008      	beq.n	8005436 <I2C_WaitOnTXISFlagUntilTimeout+0x132>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800542a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800542c:	f7fc f940 	bl	80016b0 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005430:	f8d8 3000 	ldr.w	r3, [r8]
            tickstart = HAL_GetTick();
 8005434:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005436:	699a      	ldr	r2, [r3, #24]
 8005438:	0690      	lsls	r0, r2, #26
 800543a:	d4d8      	bmi.n	80053ee <I2C_WaitOnTXISFlagUntilTimeout+0xea>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800543c:	f7fc f938 	bl	80016b0 <HAL_GetTick>
 8005440:	eba0 0009 	sub.w	r0, r0, r9
 8005444:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005446:	f8d8 3000 	ldr.w	r3, [r8]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800544a:	d9f4      	bls.n	8005436 <I2C_WaitOnTXISFlagUntilTimeout+0x132>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	0692      	lsls	r2, r2, #26
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005450:	f04f 0420 	mov.w	r4, #32
              status = HAL_ERROR;
 8005454:	f04f 0a01 	mov.w	sl, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005458:	d5cc      	bpl.n	80053f4 <I2C_WaitOnTXISFlagUntilTimeout+0xf0>
    if (status == HAL_OK)
 800545a:	f1ba 0f00 	cmp.w	sl, #0
 800545e:	f43f af67 	beq.w	8005330 <I2C_WaitOnTXISFlagUntilTimeout+0x2c>
 8005462:	e767      	b.n	8005334 <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 8005464:	fe00e800 	.word	0xfe00e800

08005468 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800546c:	4604      	mov	r4, r0
 800546e:	460d      	mov	r5, r1
 8005470:	4616      	mov	r6, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005472:	2710      	movs	r7, #16
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	6998      	ldr	r0, [r3, #24]
 8005478:	f010 0820 	ands.w	r8, r0, #32
 800547c:	d15d      	bne.n	800553a <I2C_WaitOnSTOPFlagUntilTimeout+0xd2>
  uint32_t itflag   = hi2c->Instance->ISR;
 800547e:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005480:	f012 0c10 	ands.w	ip, r2, #16
 8005484:	d057      	beq.n	8005536 <I2C_WaitOnSTOPFlagUntilTimeout+0xce>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005486:	1c68      	adds	r0, r5, #1
 8005488:	61df      	str	r7, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800548a:	d159      	bne.n	8005540 <I2C_WaitOnSTOPFlagUntilTimeout+0xd8>
 800548c:	699a      	ldr	r2, [r3, #24]
 800548e:	0691      	lsls	r1, r2, #26
 8005490:	d5fc      	bpl.n	800548c <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005492:	2220      	movs	r2, #32
 8005494:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8005496:	f048 0c04 	orr.w	ip, r8, #4
    status = HAL_ERROR;
 800549a:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 800549c:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800549e:	05d0      	lsls	r0, r2, #23
 80054a0:	d532      	bpl.n	8005508 <I2C_WaitOnSTOPFlagUntilTimeout+0xa0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80054a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80054a6:	0555      	lsls	r5, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80054a8:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80054aa:	f04c 0c01 	orr.w	ip, ip, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80054ae:	d504      	bpl.n	80054ba <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80054b4:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 80054b6:	f04c 0c08 	orr.w	ip, ip, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80054ba:	0595      	lsls	r5, r2, #22
 80054bc:	d504      	bpl.n	80054c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054be:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80054c2:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054c6:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80054c8:	699a      	ldr	r2, [r3, #24]
 80054ca:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 80054cc:	bf44      	itt	mi
 80054ce:	2200      	movmi	r2, #0
 80054d0:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054d2:	699a      	ldr	r2, [r3, #24]
 80054d4:	07d2      	lsls	r2, r2, #31
 80054d6:	d403      	bmi.n	80054e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x78>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80054d8:	699a      	ldr	r2, [r3, #24]
 80054da:	f042 0201 	orr.w	r2, r2, #1
 80054de:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	4833      	ldr	r0, [pc, #204]	@ (80055b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x148>)
 80054e4:	4002      	ands	r2, r0
 80054e6:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 80054e8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80054ea:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ec:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 80054ee:	ea43 030c 	orr.w	r3, r3, ip
 80054f2:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80054f4:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f8:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80054fc:	2300      	movs	r3, #0
 80054fe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8005502:	2001      	movs	r0, #1
}
 8005504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005508:	0550      	lsls	r0, r2, #21
 800550a:	d4d1      	bmi.n	80054b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800550c:	0590      	lsls	r0, r2, #22
 800550e:	d4d6      	bmi.n	80054be <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
  if (status != HAL_OK)
 8005510:	2900      	cmp	r1, #0
 8005512:	d1d9      	bne.n	80054c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005514:	f7fc f8cc 	bl	80016b0 <HAL_GetTick>
 8005518:	1b80      	subs	r0, r0, r6
 800551a:	42a8      	cmp	r0, r5
 800551c:	d801      	bhi.n	8005522 <I2C_WaitOnSTOPFlagUntilTimeout+0xba>
 800551e:	2d00      	cmp	r5, #0
 8005520:	d1a8      	bne.n	8005474 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005522:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005524:	2120      	movs	r1, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005526:	430b      	orrs	r3, r1
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005528:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800552a:	6463      	str	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800552c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005530:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8005534:	e7e2      	b.n	80054fc <I2C_WaitOnSTOPFlagUntilTimeout+0x94>
  HAL_StatusTypeDef status = HAL_OK;
 8005536:	4661      	mov	r1, ip
 8005538:	e7b0      	b.n	800549c <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
  return HAL_OK;
 800553a:	2000      	movs	r0, #0
}
 800553c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint32_t tickstart = Tickstart;
 8005540:	46b1      	mov	r9, r6
  HAL_StatusTypeDef status = HAL_OK;
 8005542:	46c2      	mov	sl, r8
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005544:	699a      	ldr	r2, [r3, #24]
 8005546:	0692      	lsls	r2, r2, #26
 8005548:	d42d      	bmi.n	80055a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x13e>
 800554a:	f1ba 0f00 	cmp.w	sl, #0
 800554e:	d1a2      	bne.n	8005496 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005550:	f7fc f8ae 	bl	80016b0 <HAL_GetTick>
 8005554:	eba0 0009 	sub.w	r0, r0, r9
 8005558:	4285      	cmp	r5, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800555a:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800555c:	d301      	bcc.n	8005562 <I2C_WaitOnSTOPFlagUntilTimeout+0xfa>
 800555e:	2d00      	cmp	r5, #0
 8005560:	d1f0      	bne.n	8005544 <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005562:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8005564:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005568:	6999      	ldr	r1, [r3, #24]
 800556a:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 800556c:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800556e:	d50b      	bpl.n	8005588 <I2C_WaitOnSTOPFlagUntilTimeout+0x120>
 8005570:	0441      	lsls	r1, r0, #17
 8005572:	d409      	bmi.n	8005588 <I2C_WaitOnSTOPFlagUntilTimeout+0x120>
              (tmp1 != I2C_CR2_STOP) && \
 8005574:	2a20      	cmp	r2, #32
 8005576:	d007      	beq.n	8005588 <I2C_WaitOnSTOPFlagUntilTimeout+0x120>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800557e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8005580:	f7fc f896 	bl	80016b0 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005584:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8005586:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	0690      	lsls	r0, r2, #26
 800558c:	d4da      	bmi.n	8005544 <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800558e:	f7fc f88f 	bl	80016b0 <HAL_GetTick>
 8005592:	eba0 0009 	sub.w	r0, r0, r9
 8005596:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005598:	6823      	ldr	r3, [r4, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800559a:	d9f5      	bls.n	8005588 <I2C_WaitOnSTOPFlagUntilTimeout+0x120>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800559c:	f04f 0820 	mov.w	r8, #32
              status = HAL_ERROR;
 80055a0:	f04f 0a01 	mov.w	sl, #1
 80055a4:	e7ce      	b.n	8005544 <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
    if (status == HAL_OK)
 80055a6:	f1ba 0f00 	cmp.w	sl, #0
 80055aa:	f43f af72 	beq.w	8005492 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
 80055ae:	e772      	b.n	8005496 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80055b0:	fe00e800 	.word	0xfe00e800

080055b4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80055b4:	2800      	cmp	r0, #0
 80055b6:	d04f      	beq.n	8005658 <HAL_I2C_Init+0xa4>
{
 80055b8:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055ba:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80055be:	4604      	mov	r4, r0
 80055c0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d042      	beq.n	800564e <HAL_I2C_Init+0x9a>
  __HAL_I2C_DISABLE(hi2c);
 80055c8:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80055ca:	2224      	movs	r2, #36	@ 0x24
 80055cc:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80055d0:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80055d2:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 80055d4:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80055d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 80055dc:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80055de:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80055e0:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055e2:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80055e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055e8:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80055ea:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80055ec:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055ee:	d02a      	beq.n	8005646 <HAL_I2C_Init+0x92>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80055f0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80055f4:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80055f6:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80055f8:	bf04      	itt	eq
 80055fa:	f44f 6200 	moveq.w	r2, #2048	@ 0x800
 80055fe:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005600:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005602:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005604:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 8005608:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800560c:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800560e:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005610:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005612:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005614:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005616:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800561a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800561e:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005620:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005622:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005624:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005626:	4301      	orrs	r1, r0
 8005628:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800562a:	6819      	ldr	r1, [r3, #0]
 800562c:	f041 0101 	orr.w	r1, r1, #1
 8005630:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005632:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8005634:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005636:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005638:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800563c:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800563e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
  return HAL_OK;
 8005642:	4610      	mov	r0, r2
}
 8005644:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005646:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800564a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800564c:	e7d8      	b.n	8005600 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 800564e:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8005652:	f7fb fac9 	bl	8000be8 <HAL_I2C_MspInit>
 8005656:	e7b7      	b.n	80055c8 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8005658:	2001      	movs	r0, #1
}
 800565a:	4770      	bx	lr

0800565c <HAL_I2C_Mem_Write>:
{
 800565c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005660:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005662:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8005666:	f8bd b02c 	ldrh.w	fp, [sp, #44]	@ 0x2c
 800566a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 800566e:	2b20      	cmp	r3, #32
 8005670:	f040 809f 	bne.w	80057b2 <HAL_I2C_Mem_Write+0x156>
    if ((pData == NULL) || (Size == 0U))
 8005674:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005676:	4604      	mov	r4, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 8094 	beq.w	80057a6 <HAL_I2C_Mem_Write+0x14a>
 800567e:	f1bb 0f00 	cmp.w	fp, #0
 8005682:	f000 8090 	beq.w	80057a6 <HAL_I2C_Mem_Write+0x14a>
    __HAL_LOCK(hi2c);
 8005686:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800568a:	2b01      	cmp	r3, #1
 800568c:	f000 8091 	beq.w	80057b2 <HAL_I2C_Mem_Write+0x156>
 8005690:	2301      	movs	r3, #1
 8005692:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8005696:	460f      	mov	r7, r1
 8005698:	4690      	mov	r8, r2
    tickstart = HAL_GetTick();
 800569a:	f7fc f809 	bl	80016b0 <HAL_GetTick>
 800569e:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 80056a0:	e005      	b.n	80056ae <HAL_I2C_Mem_Write+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a2:	f7fc f805 	bl	80016b0 <HAL_GetTick>
 80056a6:	1b80      	subs	r0, r0, r6
 80056a8:	2819      	cmp	r0, #25
 80056aa:	f200 8085 	bhi.w	80057b8 <HAL_I2C_Mem_Write+0x15c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	699d      	ldr	r5, [r3, #24]
 80056b2:	f415 4500 	ands.w	r5, r5, #32768	@ 0x8000
 80056b6:	d1f4      	bne.n	80056a2 <HAL_I2C_Mem_Write+0x46>
    hi2c->pBuffPtr  = pData;
 80056b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80056ba:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056bc:	2221      	movs	r2, #33	@ 0x21
 80056be:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056c2:	2240      	movs	r2, #64	@ 0x40
 80056c4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056c8:	6465      	str	r5, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 80056ca:	f8a4 b02a 	strh.w	fp, [r4, #42]	@ 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	4973      	ldr	r1, [pc, #460]	@ (80058a0 <HAL_I2C_Mem_Write+0x244>)
    hi2c->XferISR   = NULL;
 80056d2:	6365      	str	r5, [r4, #52]	@ 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 80056d4:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80056d6:	fa5f f189 	uxtb.w	r1, r9
  MODIFY_REG(hi2c->Instance->CR2, \
 80056da:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056de:	f3c7 0709 	ubfx	r7, r7, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 80056e2:	433a      	orrs	r2, r7
 80056e4:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80056e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056ec:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ee:	4651      	mov	r1, sl
 80056f0:	4632      	mov	r2, r6
 80056f2:	4620      	mov	r0, r4
 80056f4:	f7ff fe06 	bl	8005304 <I2C_WaitOnTXISFlagUntilTimeout>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	f040 80a9 	bne.w	8005850 <HAL_I2C_Mem_Write+0x1f4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056fe:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005702:	6822      	ldr	r2, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005704:	d17f      	bne.n	8005806 <HAL_I2C_Mem_Write+0x1aa>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005706:	fa5f f388 	uxtb.w	r3, r8
 800570a:	6293      	str	r3, [r2, #40]	@ 0x28
 800570c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005710:	d175      	bne.n	80057fe <HAL_I2C_Mem_Write+0x1a2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005712:	6993      	ldr	r3, [r2, #24]
 8005714:	061d      	lsls	r5, r3, #24
 8005716:	d5fc      	bpl.n	8005712 <HAL_I2C_Mem_Write+0xb6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005718:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800571a:	b29b      	uxth	r3, r3
 800571c:	2bff      	cmp	r3, #255	@ 0xff
 800571e:	f240 809b 	bls.w	8005858 <HAL_I2C_Mem_Write+0x1fc>
  MODIFY_REG(hi2c->Instance->CR2, \
 8005722:	6853      	ldr	r3, [r2, #4]
 8005724:	495f      	ldr	r1, [pc, #380]	@ (80058a4 <HAL_I2C_Mem_Write+0x248>)
 8005726:	400b      	ands	r3, r1
 8005728:	433b      	orrs	r3, r7
 800572a:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 800572e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005732:	21ff      	movs	r1, #255	@ 0xff
 8005734:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8005736:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005738:	e004      	b.n	8005744 <HAL_I2C_Mem_Write+0xe8>
    } while (hi2c->XferCount > 0U);
 800573a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 8098 	beq.w	8005874 <HAL_I2C_Mem_Write+0x218>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005744:	4632      	mov	r2, r6
 8005746:	4651      	mov	r1, sl
 8005748:	4620      	mov	r0, r4
 800574a:	f7ff fddb 	bl	8005304 <I2C_WaitOnTXISFlagUntilTimeout>
 800574e:	2800      	cmp	r0, #0
 8005750:	d12c      	bne.n	80057ac <HAL_I2C_Mem_Write+0x150>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005752:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005754:	6822      	ldr	r2, [r4, #0]
 8005756:	f813 1b01 	ldrb.w	r1, [r3], #1
 800575a:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800575c:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800575e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005760:	3b01      	subs	r3, #1
 8005762:	b29b      	uxth	r3, r3
 8005764:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8005766:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005768:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800576a:	3b01      	subs	r3, #1
 800576c:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800576e:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 8005770:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005772:	2900      	cmp	r1, #0
 8005774:	d0e1      	beq.n	800573a <HAL_I2C_Mem_Write+0xde>
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1df      	bne.n	800573a <HAL_I2C_Mem_Write+0xde>
 800577a:	f1ba 3fff 	cmp.w	sl, #4294967295
 800577e:	d131      	bne.n	80057e4 <HAL_I2C_Mem_Write+0x188>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005780:	6993      	ldr	r3, [r2, #24]
 8005782:	0619      	lsls	r1, r3, #24
 8005784:	d5fc      	bpl.n	8005780 <HAL_I2C_Mem_Write+0x124>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005786:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005788:	b29b      	uxth	r3, r3
 800578a:	2bff      	cmp	r3, #255	@ 0xff
 800578c:	d949      	bls.n	8005822 <HAL_I2C_Mem_Write+0x1c6>
  MODIFY_REG(hi2c->Instance->CR2, \
 800578e:	6853      	ldr	r3, [r2, #4]
 8005790:	4944      	ldr	r1, [pc, #272]	@ (80058a4 <HAL_I2C_Mem_Write+0x248>)
 8005792:	400b      	ands	r3, r1
 8005794:	433b      	orrs	r3, r7
 8005796:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 800579a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800579e:	21ff      	movs	r1, #255	@ 0xff
 80057a0:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80057a2:	6053      	str	r3, [r2, #4]
}
 80057a4:	e7c9      	b.n	800573a <HAL_I2C_Mem_Write+0xde>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80057a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80057aa:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80057ac:	2001      	movs	r0, #1
}
 80057ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80057b2:	2002      	movs	r0, #2
}
 80057b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057b8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ba:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057bc:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 80057c0:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057c2:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80057c4:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80057c8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057cc:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        return HAL_ERROR;
 80057d0:	e7ec      	b.n	80057ac <HAL_I2C_Mem_Write+0x150>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057d2:	f7fb ff6d 	bl	80016b0 <HAL_GetTick>
 80057d6:	1b80      	subs	r0, r0, r6
 80057d8:	4582      	cmp	sl, r0
 80057da:	d3ed      	bcc.n	80057b8 <HAL_I2C_Mem_Write+0x15c>
 80057dc:	f1ba 0f00 	cmp.w	sl, #0
 80057e0:	d0ea      	beq.n	80057b8 <HAL_I2C_Mem_Write+0x15c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057e2:	6822      	ldr	r2, [r4, #0]
 80057e4:	6993      	ldr	r3, [r2, #24]
 80057e6:	061b      	lsls	r3, r3, #24
 80057e8:	d5f3      	bpl.n	80057d2 <HAL_I2C_Mem_Write+0x176>
 80057ea:	e7cc      	b.n	8005786 <HAL_I2C_Mem_Write+0x12a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ec:	f7fb ff60 	bl	80016b0 <HAL_GetTick>
 80057f0:	1b80      	subs	r0, r0, r6
 80057f2:	4582      	cmp	sl, r0
 80057f4:	d323      	bcc.n	800583e <HAL_I2C_Mem_Write+0x1e2>
 80057f6:	f1ba 0f00 	cmp.w	sl, #0
 80057fa:	d020      	beq.n	800583e <HAL_I2C_Mem_Write+0x1e2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057fc:	6822      	ldr	r2, [r4, #0]
 80057fe:	6993      	ldr	r3, [r2, #24]
 8005800:	0618      	lsls	r0, r3, #24
 8005802:	d5f3      	bpl.n	80057ec <HAL_I2C_Mem_Write+0x190>
 8005804:	e788      	b.n	8005718 <HAL_I2C_Mem_Write+0xbc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005806:	ea4f 2318 	mov.w	r3, r8, lsr #8
 800580a:	6293      	str	r3, [r2, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800580c:	4651      	mov	r1, sl
 800580e:	4632      	mov	r2, r6
 8005810:	4620      	mov	r0, r4
 8005812:	f7ff fd77 	bl	8005304 <I2C_WaitOnTXISFlagUntilTimeout>
 8005816:	b9d8      	cbnz	r0, 8005850 <HAL_I2C_Mem_Write+0x1f4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005818:	6822      	ldr	r2, [r4, #0]
 800581a:	fa5f f388 	uxtb.w	r3, r8
 800581e:	6293      	str	r3, [r2, #40]	@ 0x28
 8005820:	e774      	b.n	800570c <HAL_I2C_Mem_Write+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8005822:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8005824:	481f      	ldr	r0, [pc, #124]	@ (80058a4 <HAL_I2C_Mem_Write+0x248>)
          hi2c->XferSize = hi2c->XferCount;
 8005826:	b29b      	uxth	r3, r3
 8005828:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800582a:	b2d9      	uxtb	r1, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800582c:	6853      	ldr	r3, [r2, #4]
 800582e:	4003      	ands	r3, r0
 8005830:	433b      	orrs	r3, r7
 8005832:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005836:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800583a:	6053      	str	r3, [r2, #4]
}
 800583c:	e77d      	b.n	800573a <HAL_I2C_Mem_Write+0xde>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800583e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005840:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005842:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005844:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005846:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005848:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800584c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005850:	2300      	movs	r3, #0
 8005852:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8005856:	e7a9      	b.n	80057ac <HAL_I2C_Mem_Write+0x150>
      hi2c->XferSize = hi2c->XferCount;
 8005858:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800585a:	4812      	ldr	r0, [pc, #72]	@ (80058a4 <HAL_I2C_Mem_Write+0x248>)
      hi2c->XferSize = hi2c->XferCount;
 800585c:	b29b      	uxth	r3, r3
 800585e:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005860:	b2d9      	uxtb	r1, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8005862:	6853      	ldr	r3, [r2, #4]
 8005864:	4003      	ands	r3, r0
 8005866:	433b      	orrs	r3, r7
 8005868:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800586c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005870:	6053      	str	r3, [r2, #4]
}
 8005872:	e767      	b.n	8005744 <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005874:	4632      	mov	r2, r6
 8005876:	4651      	mov	r1, sl
 8005878:	4620      	mov	r0, r4
 800587a:	f7ff fdf5 	bl	8005468 <I2C_WaitOnSTOPFlagUntilTimeout>
 800587e:	2800      	cmp	r0, #0
 8005880:	d194      	bne.n	80057ac <HAL_I2C_Mem_Write+0x150>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005882:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8005884:	4d08      	ldr	r5, [pc, #32]	@ (80058a8 <HAL_I2C_Mem_Write+0x24c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005886:	2120      	movs	r1, #32
 8005888:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	402a      	ands	r2, r5
 800588e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005890:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8005894:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005898:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800589c:	e787      	b.n	80057ae <HAL_I2C_Mem_Write+0x152>
 800589e:	bf00      	nop
 80058a0:	fc009800 	.word	0xfc009800
 80058a4:	fc009c00 	.word	0xfc009c00
 80058a8:	fe00e800 	.word	0xfe00e800

080058ac <HAL_I2C_Mem_Read>:
{
 80058ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b0:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80058b2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80058b6:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
 80058ba:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80058bc:	2b20      	cmp	r3, #32
 80058be:	d17f      	bne.n	80059c0 <HAL_I2C_Mem_Read+0x114>
    if ((pData == NULL) || (Size == 0U))
 80058c0:	9b08      	ldr	r3, [sp, #32]
 80058c2:	4604      	mov	r4, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d075      	beq.n	80059b4 <HAL_I2C_Mem_Read+0x108>
 80058c8:	f1ba 0f00 	cmp.w	sl, #0
 80058cc:	d072      	beq.n	80059b4 <HAL_I2C_Mem_Read+0x108>
    __HAL_LOCK(hi2c);
 80058ce:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d074      	beq.n	80059c0 <HAL_I2C_Mem_Read+0x114>
 80058d6:	2301      	movs	r3, #1
 80058d8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80058dc:	460f      	mov	r7, r1
 80058de:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 80058e0:	f7fb fee6 	bl	80016b0 <HAL_GetTick>
 80058e4:	4605      	mov	r5, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 80058e6:	e004      	b.n	80058f2 <HAL_I2C_Mem_Read+0x46>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e8:	f7fb fee2 	bl	80016b0 <HAL_GetTick>
 80058ec:	1b40      	subs	r0, r0, r5
 80058ee:	2819      	cmp	r0, #25
 80058f0:	d869      	bhi.n	80059c6 <HAL_I2C_Mem_Read+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	6998      	ldr	r0, [r3, #24]
 80058f6:	f410 4000 	ands.w	r0, r0, #32768	@ 0x8000
 80058fa:	d1f5      	bne.n	80058e8 <HAL_I2C_Mem_Read+0x3c>
    hi2c->pBuffPtr  = pData;
 80058fc:	9a08      	ldr	r2, [sp, #32]
 80058fe:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005900:	2222      	movs	r2, #34	@ 0x22
 8005902:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005906:	2240      	movs	r2, #64	@ 0x40
 8005908:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800590c:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 800590e:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	4977      	ldr	r1, [pc, #476]	@ (8005af4 <HAL_I2C_Mem_Read+0x248>)
    hi2c->XferISR   = NULL;
 8005916:	6360      	str	r0, [r4, #52]	@ 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 8005918:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800591a:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
 800591e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005922:	f3c7 0709 	ubfx	r7, r7, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8005926:	433a      	orrs	r2, r7
 8005928:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800592c:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800592e:	4631      	mov	r1, r6
 8005930:	462a      	mov	r2, r5
 8005932:	4620      	mov	r0, r4
 8005934:	f7ff fce6 	bl	8005304 <I2C_WaitOnTXISFlagUntilTimeout>
 8005938:	2800      	cmp	r0, #0
 800593a:	f040 80c1 	bne.w	8005ac0 <HAL_I2C_Mem_Read+0x214>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800593e:	f1b8 0f01 	cmp.w	r8, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005942:	6821      	ldr	r1, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005944:	d164      	bne.n	8005a10 <HAL_I2C_Mem_Read+0x164>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005946:	fa5f f389 	uxtb.w	r3, r9
 800594a:	628b      	str	r3, [r1, #40]	@ 0x28
 800594c:	1c70      	adds	r0, r6, #1
 800594e:	d15b      	bne.n	8005a08 <HAL_I2C_Mem_Read+0x15c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005950:	698b      	ldr	r3, [r1, #24]
 8005952:	065a      	lsls	r2, r3, #25
 8005954:	d5fc      	bpl.n	8005950 <HAL_I2C_Mem_Read+0xa4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005956:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005958:	b29b      	uxth	r3, r3
 800595a:	2bff      	cmp	r3, #255	@ 0xff
 800595c:	f240 8097 	bls.w	8005a8e <HAL_I2C_Mem_Read+0x1e2>
  MODIFY_REG(hi2c->Instance->CR2, \
 8005960:	684b      	ldr	r3, [r1, #4]
 8005962:	4a64      	ldr	r2, [pc, #400]	@ (8005af4 <HAL_I2C_Mem_Read+0x248>)
 8005964:	4013      	ands	r3, r2
 8005966:	433b      	orrs	r3, r7
 8005968:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 800596c:	f443 3392 	orr.w	r3, r3, #74752	@ 0x12400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005970:	22ff      	movs	r2, #255	@ 0xff
 8005972:	8522      	strh	r2, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8005974:	604b      	str	r3, [r1, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005976:	1c70      	adds	r0, r6, #1
 8005978:	d13a      	bne.n	80059f0 <HAL_I2C_Mem_Read+0x144>
 800597a:	698b      	ldr	r3, [r1, #24]
 800597c:	075a      	lsls	r2, r3, #29
 800597e:	d5fc      	bpl.n	800597a <HAL_I2C_Mem_Read+0xce>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005980:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005982:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8005984:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8005986:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8005988:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800598a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800598c:	3a01      	subs	r2, #1
 800598e:	b292      	uxth	r2, r2
 8005990:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005992:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8005994:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8005996:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8005998:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800599a:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800599c:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800599e:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059a0:	b10a      	cbz	r2, 80059a6 <HAL_I2C_Mem_Read+0xfa>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d043      	beq.n	8005a2e <HAL_I2C_Mem_Read+0x182>
    } while (hi2c->XferCount > 0U);
 80059a6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 808c 	beq.w	8005ac8 <HAL_I2C_Mem_Read+0x21c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059b0:	6821      	ldr	r1, [r4, #0]
 80059b2:	e7e0      	b.n	8005976 <HAL_I2C_Mem_Read+0xca>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80059b8:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80059ba:	2001      	movs	r0, #1
}
 80059bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80059c0:	2002      	movs	r0, #2
}
 80059c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059c6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c8:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059ca:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 80059ce:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059d0:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80059d2:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80059d6:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059da:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        return HAL_ERROR;
 80059de:	e7ec      	b.n	80059ba <HAL_I2C_Mem_Read+0x10e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059e0:	f7fb fe66 	bl	80016b0 <HAL_GetTick>
 80059e4:	1b40      	subs	r0, r0, r5
 80059e6:	4286      	cmp	r6, r0
 80059e8:	d3ed      	bcc.n	80059c6 <HAL_I2C_Mem_Read+0x11a>
 80059ea:	2e00      	cmp	r6, #0
 80059ec:	d0eb      	beq.n	80059c6 <HAL_I2C_Mem_Read+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059ee:	6821      	ldr	r1, [r4, #0]
 80059f0:	698b      	ldr	r3, [r1, #24]
 80059f2:	075b      	lsls	r3, r3, #29
 80059f4:	d5f4      	bpl.n	80059e0 <HAL_I2C_Mem_Read+0x134>
 80059f6:	e7c3      	b.n	8005980 <HAL_I2C_Mem_Read+0xd4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f8:	f7fb fe5a 	bl	80016b0 <HAL_GetTick>
 80059fc:	1b43      	subs	r3, r0, r5
 80059fe:	429e      	cmp	r6, r3
 8005a00:	d355      	bcc.n	8005aae <HAL_I2C_Mem_Read+0x202>
 8005a02:	2e00      	cmp	r6, #0
 8005a04:	d053      	beq.n	8005aae <HAL_I2C_Mem_Read+0x202>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a06:	6821      	ldr	r1, [r4, #0]
 8005a08:	698b      	ldr	r3, [r1, #24]
 8005a0a:	065b      	lsls	r3, r3, #25
 8005a0c:	d5f4      	bpl.n	80059f8 <HAL_I2C_Mem_Read+0x14c>
 8005a0e:	e7a2      	b.n	8005956 <HAL_I2C_Mem_Read+0xaa>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a10:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8005a14:	628b      	str	r3, [r1, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a16:	462a      	mov	r2, r5
 8005a18:	4631      	mov	r1, r6
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	f7ff fc72 	bl	8005304 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a20:	2800      	cmp	r0, #0
 8005a22:	d14d      	bne.n	8005ac0 <HAL_I2C_Mem_Read+0x214>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a24:	6821      	ldr	r1, [r4, #0]
 8005a26:	fa5f f389 	uxtb.w	r3, r9
 8005a2a:	628b      	str	r3, [r1, #40]	@ 0x28
 8005a2c:	e78e      	b.n	800594c <HAL_I2C_Mem_Read+0xa0>
 8005a2e:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a30:	6822      	ldr	r2, [r4, #0]
 8005a32:	d11a      	bne.n	8005a6a <HAL_I2C_Mem_Read+0x1be>
 8005a34:	6993      	ldr	r3, [r2, #24]
 8005a36:	0619      	lsls	r1, r3, #24
 8005a38:	d5fc      	bpl.n	8005a34 <HAL_I2C_Mem_Read+0x188>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a3a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	2bff      	cmp	r3, #255	@ 0xff
 8005a40:	d917      	bls.n	8005a72 <HAL_I2C_Mem_Read+0x1c6>
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a42:	6853      	ldr	r3, [r2, #4]
 8005a44:	492c      	ldr	r1, [pc, #176]	@ (8005af8 <HAL_I2C_Mem_Read+0x24c>)
 8005a46:	400b      	ands	r3, r1
 8005a48:	433b      	orrs	r3, r7
 8005a4a:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 8005a4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a52:	21ff      	movs	r1, #255	@ 0xff
 8005a54:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a56:	6053      	str	r3, [r2, #4]
}
 8005a58:	e7a5      	b.n	80059a6 <HAL_I2C_Mem_Read+0xfa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a5a:	f7fb fe29 	bl	80016b0 <HAL_GetTick>
 8005a5e:	1b43      	subs	r3, r0, r5
 8005a60:	429e      	cmp	r6, r3
 8005a62:	d3b0      	bcc.n	80059c6 <HAL_I2C_Mem_Read+0x11a>
 8005a64:	2e00      	cmp	r6, #0
 8005a66:	d0ae      	beq.n	80059c6 <HAL_I2C_Mem_Read+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a68:	6822      	ldr	r2, [r4, #0]
 8005a6a:	6993      	ldr	r3, [r2, #24]
 8005a6c:	061b      	lsls	r3, r3, #24
 8005a6e:	d5f4      	bpl.n	8005a5a <HAL_I2C_Mem_Read+0x1ae>
 8005a70:	e7e3      	b.n	8005a3a <HAL_I2C_Mem_Read+0x18e>
          hi2c->XferSize = hi2c->XferCount;
 8005a72:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a74:	4820      	ldr	r0, [pc, #128]	@ (8005af8 <HAL_I2C_Mem_Read+0x24c>)
          hi2c->XferSize = hi2c->XferCount;
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005a7a:	b2d9      	uxtb	r1, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a7c:	6853      	ldr	r3, [r2, #4]
 8005a7e:	4003      	ands	r3, r0
 8005a80:	433b      	orrs	r3, r7
 8005a82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005a86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005a8a:	6053      	str	r3, [r2, #4]
}
 8005a8c:	e78b      	b.n	80059a6 <HAL_I2C_Mem_Read+0xfa>
      hi2c->XferSize = hi2c->XferCount;
 8005a8e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a90:	4818      	ldr	r0, [pc, #96]	@ (8005af4 <HAL_I2C_Mem_Read+0x248>)
      hi2c->XferSize = hi2c->XferCount;
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005a96:	b2da      	uxtb	r2, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a98:	684b      	ldr	r3, [r1, #4]
 8005a9a:	4003      	ands	r3, r0
 8005a9c:	433b      	orrs	r3, r7
 8005a9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005aa2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005aa6:	f443 5310 	orr.w	r3, r3, #9216	@ 0x2400
 8005aaa:	604b      	str	r3, [r1, #4]
}
 8005aac:	e763      	b.n	8005976 <HAL_I2C_Mem_Read+0xca>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005aae:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ab0:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ab2:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab4:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ab6:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ab8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005abc:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8005ac6:	e778      	b.n	80059ba <HAL_I2C_Mem_Read+0x10e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ac8:	462a      	mov	r2, r5
 8005aca:	4631      	mov	r1, r6
 8005acc:	4620      	mov	r0, r4
 8005ace:	f7ff fccb 	bl	8005468 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	f47f af71 	bne.w	80059ba <HAL_I2C_Mem_Read+0x10e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ad8:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8005ada:	4d08      	ldr	r5, [pc, #32]	@ (8005afc <HAL_I2C_Mem_Read+0x250>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005adc:	2120      	movs	r1, #32
 8005ade:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	402a      	ands	r2, r5
 8005ae4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005ae6:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8005aea:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005aee:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8005af2:	e763      	b.n	80059bc <HAL_I2C_Mem_Read+0x110>
 8005af4:	fc009800 	.word	0xfc009800
 8005af8:	fc009c00 	.word	0xfc009c00
 8005afc:	fe00e800 	.word	0xfe00e800

08005b00 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b00:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8005b04:	2a20      	cmp	r2, #32
 8005b06:	d123      	bne.n	8005b50 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8005b08:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b0c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8005b10:	2a01      	cmp	r2, #1
 8005b12:	4603      	mov	r3, r0
 8005b14:	d01c      	beq.n	8005b50 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b16:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b18:	2024      	movs	r0, #36	@ 0x24
{
 8005b1a:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b1c:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8005b20:	6810      	ldr	r0, [r2, #0]
 8005b22:	f020 0001 	bic.w	r0, r0, #1
 8005b26:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b28:	6810      	ldr	r0, [r2, #0]
 8005b2a:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8005b2e:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b30:	6810      	ldr	r0, [r2, #0]
 8005b32:	4301      	orrs	r1, r0
 8005b34:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b36:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b38:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 8005b3c:	f041 0101 	orr.w	r1, r1, #1
 8005b40:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005b42:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8005b46:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b4a:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005b4c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8005b50:	2002      	movs	r0, #2
}
 8005b52:	4770      	bx	lr

08005b54 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b54:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8005b58:	2a20      	cmp	r2, #32
 8005b5a:	d122      	bne.n	8005ba2 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 8005b5c:	b500      	push	{lr}
 8005b5e:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b62:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8005b66:	2a01      	cmp	r2, #1
 8005b68:	4603      	mov	r3, r0
 8005b6a:	d01c      	beq.n	8005ba6 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b6c:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b6e:	2024      	movs	r0, #36	@ 0x24
 8005b70:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8005b74:	6810      	ldr	r0, [r2, #0]
 8005b76:	f020 0001 	bic.w	r0, r0, #1
 8005b7a:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b7c:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b7e:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b82:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b86:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b88:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b8a:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 8005b8e:	f041 0101 	orr.w	r1, r1, #1
 8005b92:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005b94:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8005b98:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b9c:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005b9e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8005ba2:	2002      	movs	r0, #2
}
 8005ba4:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005ba6:	2002      	movs	r0, #2
}
 8005ba8:	f85d fb04 	ldr.w	pc, [sp], #4

08005bac <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bac:	4a02      	ldr	r2, [pc, #8]	@ (8005bb8 <HAL_PWR_EnableBkUpAccess+0xc>)
 8005bae:	6813      	ldr	r3, [r2, #0]
 8005bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bb4:	6013      	str	r3, [r2, #0]
}
 8005bb6:	4770      	bx	lr
 8005bb8:	58000400 	.word	0x58000400

08005bbc <HAL_PWR_EnterSLEEPMode>:

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8005bf8 <HAL_PWR_EnterSLEEPMode+0x3c>)
{
 8005bbe:	b510      	push	{r4, lr}
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005bc0:	695b      	ldr	r3, [r3, #20]
{
 8005bc2:	460c      	mov	r4, r1
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005bc4:	b960      	cbnz	r0, 8005be0 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005bc6:	059a      	lsls	r2, r3, #22
 8005bc8:	d411      	bmi.n	8005bee <HAL_PWR_EnterSLEEPMode+0x32>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005bca:	4a0c      	ldr	r2, [pc, #48]	@ (8005bfc <HAL_PWR_EnterSLEEPMode+0x40>)
 8005bcc:	6913      	ldr	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005bce:	2c01      	cmp	r4, #1
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005bd0:	f023 0304 	bic.w	r3, r3, #4
 8005bd4:	6113      	str	r3, [r2, #16]
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005bd6:	d008      	beq.n	8005bea <HAL_PWR_EnterSLEEPMode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005bd8:	bf40      	sev
    __WFE();
 8005bda:	bf20      	wfe
    __WFE();
 8005bdc:	bf20      	wfe
  }
}
 8005bde:	bd10      	pop	{r4, pc}
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005be0:	059b      	lsls	r3, r3, #22
 8005be2:	d4f2      	bmi.n	8005bca <HAL_PWR_EnterSLEEPMode+0xe>
      HAL_PWREx_EnableLowPowerRunMode();
 8005be4:	f000 f814 	bl	8005c10 <HAL_PWREx_EnableLowPowerRunMode>
 8005be8:	e7ef      	b.n	8005bca <HAL_PWR_EnterSLEEPMode+0xe>
    __WFI();
 8005bea:	bf30      	wfi
}
 8005bec:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005bee:	f000 f817 	bl	8005c20 <HAL_PWREx_DisableLowPowerRunMode>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	d0e9      	beq.n	8005bca <HAL_PWR_EnterSLEEPMode+0xe>
}
 8005bf6:	bd10      	pop	{r4, pc}
 8005bf8:	58000400 	.word	0x58000400
 8005bfc:	e000ed00 	.word	0xe000ed00

08005c00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8005c00:	4b02      	ldr	r3, [pc, #8]	@ (8005c0c <HAL_PWREx_GetVoltageRange+0xc>)
 8005c02:	6818      	ldr	r0, [r3, #0]
}
 8005c04:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	58000400 	.word	0x58000400

08005c10 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005c10:	4a02      	ldr	r2, [pc, #8]	@ (8005c1c <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8005c12:	6813      	ldr	r3, [r2, #0]
 8005c14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c18:	6013      	str	r3, [r2, #0]
}
 8005c1a:	4770      	bx	lr
 8005c1c:	58000400 	.word	0x58000400

08005c20 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005c20:	4912      	ldr	r1, [pc, #72]	@ (8005c6c <HAL_PWREx_DisableLowPowerRunMode+0x4c>)

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005c22:	4813      	ldr	r0, [pc, #76]	@ (8005c70 <HAL_PWREx_DisableLowPowerRunMode+0x50>)
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005c24:	680a      	ldr	r2, [r1, #0]
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005c26:	4b13      	ldr	r3, [pc, #76]	@ (8005c74 <HAL_PWREx_DisableLowPowerRunMode+0x54>)
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005c28:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c2c:	600a      	str	r2, [r1, #0]
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005c2e:	6802      	ldr	r2, [r0, #0]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005c30:	6948      	ldr	r0, [r1, #20]
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005c32:	f04f 0c32 	mov.w	ip, #50	@ 0x32
 8005c36:	fb0c f202 	mul.w	r2, ip, r2
 8005c3a:	fba3 c302 	umull	ip, r3, r3, r2
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005c3e:	f410 7f00 	tst.w	r0, #512	@ 0x200
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005c42:	ea4f 4393 	mov.w	r3, r3, lsr #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005c46:	d009      	beq.n	8005c5c <HAL_PWREx_DisableLowPowerRunMode+0x3c>
 8005c48:	480b      	ldr	r0, [pc, #44]	@ (8005c78 <HAL_PWREx_DisableLowPowerRunMode+0x58>)
 8005c4a:	4282      	cmp	r2, r0
 8005c4c:	d801      	bhi.n	8005c52 <HAL_PWREx_DisableLowPowerRunMode+0x32>
 8005c4e:	e005      	b.n	8005c5c <HAL_PWREx_DisableLowPowerRunMode+0x3c>
 8005c50:	b123      	cbz	r3, 8005c5c <HAL_PWREx_DisableLowPowerRunMode+0x3c>
 8005c52:	694a      	ldr	r2, [r1, #20]
 8005c54:	0592      	lsls	r2, r2, #22
  {
    wait_loop_index--;
 8005c56:	f103 33ff 	add.w	r3, r3, #4294967295
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005c5a:	d4f9      	bmi.n	8005c50 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005c5c:	4b03      	ldr	r3, [pc, #12]	@ (8005c6c <HAL_PWREx_DisableLowPowerRunMode+0x4c>)
 8005c5e:	695b      	ldr	r3, [r3, #20]
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8005c60:	f413 7f00 	tst.w	r3, #512	@ 0x200
}
 8005c64:	bf14      	ite	ne
 8005c66:	2003      	movne	r0, #3
 8005c68:	2000      	moveq	r0, #0
 8005c6a:	4770      	bx	lr
 8005c6c:	58000400 	.word	0x58000400
 8005c70:	20000010 	.word	0x20000010
 8005c74:	431bde83 	.word	0x431bde83
 8005c78:	000f423f 	.word	0x000f423f

08005c7c <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005c7c:	490c      	ldr	r1, [pc, #48]	@ (8005cb0 <HAL_PWREx_EnterSTOP2Mode+0x34>)
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8005cb4 <HAL_PWREx_EnterSTOP2Mode+0x38>)
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005c80:	680b      	ldr	r3, [r1, #0]
 8005c82:	f023 0307 	bic.w	r3, r3, #7
 8005c86:	f043 0302 	orr.w	r3, r3, #2
 8005c8a:	600b      	str	r3, [r1, #0]
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005c8c:	6913      	ldr	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005c8e:	2801      	cmp	r0, #1
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005c90:	f043 0304 	orr.w	r3, r3, #4
 8005c94:	6113      	str	r3, [r2, #16]
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005c96:	d008      	beq.n	8005caa <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005c98:	bf40      	sev
    __WFE();
 8005c9a:	bf20      	wfe
    __WFE();
 8005c9c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005c9e:	4a05      	ldr	r2, [pc, #20]	@ (8005cb4 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005ca0:	6913      	ldr	r3, [r2, #16]
 8005ca2:	f023 0304 	bic.w	r3, r3, #4
 8005ca6:	6113      	str	r3, [r2, #16]
}
 8005ca8:	4770      	bx	lr
    __WFI();
 8005caa:	bf30      	wfi
 8005cac:	e7f7      	b.n	8005c9e <HAL_PWREx_EnterSTOP2Mode+0x22>
 8005cae:	bf00      	nop
 8005cb0:	58000400 	.word	0x58000400
 8005cb4:	e000ed00 	.word	0xe000ed00

08005cb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005cb8:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005cba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005cbe:	492e      	ldr	r1, [pc, #184]	@ (8005d78 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005cc0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005cc4:	4a2d      	ldr	r2, [pc, #180]	@ (8005d7c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005cc6:	f3c0 1003 	ubfx	r0, r0, #4, #4
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005cca:	f003 030f 	and.w	r3, r3, #15
{
 8005cce:	b084      	sub	sp, #16
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cd4:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8005cd8:	fbb4 f4f3 	udiv	r4, r4, r3

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005cdc:	f7ff ff90 	bl	8005c00 <HAL_PWREx_GetVoltageRange>

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005ce0:	4b27      	ldr	r3, [pc, #156]	@ (8005d80 <RCC_SetFlashLatencyFromMSIRange+0xc8>)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005ce2:	4605      	mov	r5, r0
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005ce4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ce8:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005cec:	ab04      	add	r3, sp, #16
 8005cee:	e903 0007 	stmdb	r3, {r0, r1, r2}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cf2:	d029      	beq.n	8005d48 <RCC_SetFlashLatencyFromMSIRange+0x90>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005cf4:	4b23      	ldr	r3, [pc, #140]	@ (8005d84 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8005cf6:	429c      	cmp	r4, r3
 8005cf8:	d339      	bcc.n	8005d6e <RCC_SetFlashLatencyFromMSIRange+0xb6>
 8005cfa:	f503 03b7 	add.w	r3, r3, #5996544	@ 0x5b8000
 8005cfe:	f603 537f 	addw	r3, r3, #3455	@ 0xd7f
 8005d02:	429c      	cmp	r4, r3
 8005d04:	d935      	bls.n	8005d72 <RCC_SetFlashLatencyFromMSIRange+0xba>
 8005d06:	f503 1374 	add.w	r3, r3, #3997696	@ 0x3d0000
 8005d0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d0e:	429c      	cmp	r4, r3
 8005d10:	d926      	bls.n	8005d60 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005d12:	2600      	movs	r6, #0
        break;
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005d14:	4c1c      	ldr	r4, [pc, #112]	@ (8005d88 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	f023 0307 	bic.w	r3, r3, #7
 8005d1c:	4333      	orrs	r3, r6
 8005d1e:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d20:	f7fb fcc6 	bl	80016b0 <HAL_GetTick>
 8005d24:	4605      	mov	r5, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005d26:	e004      	b.n	8005d32 <RCC_SetFlashLatencyFromMSIRange+0x7a>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005d28:	f7fb fcc2 	bl	80016b0 <HAL_GetTick>
 8005d2c:	1b40      	subs	r0, r0, r5
 8005d2e:	2802      	cmp	r0, #2
 8005d30:	d807      	bhi.n	8005d42 <RCC_SetFlashLatencyFromMSIRange+0x8a>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	429e      	cmp	r6, r3
 8005d3a:	d1f5      	bne.n	8005d28 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8005d3c:	2000      	movs	r0, #0
}
 8005d3e:	b004      	add	sp, #16
 8005d40:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8005d42:	2003      	movs	r0, #3
}
 8005d44:	b004      	add	sp, #16
 8005d46:	bd70      	pop	{r4, r5, r6, pc}
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005d48:	4b10      	ldr	r3, [pc, #64]	@ (8005d8c <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8005d4a:	429c      	cmp	r4, r3
 8005d4c:	d90f      	bls.n	8005d6e <RCC_SetFlashLatencyFromMSIRange+0xb6>
 8005d4e:	4b10      	ldr	r3, [pc, #64]	@ (8005d90 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 8005d50:	429c      	cmp	r4, r3
 8005d52:	d90e      	bls.n	8005d72 <RCC_SetFlashLatencyFromMSIRange+0xba>
 8005d54:	f503 0337 	add.w	r3, r3, #11993088	@ 0xb70000
 8005d58:	f503 53d8 	add.w	r3, r3, #6912	@ 0x1b00
 8005d5c:	429c      	cmp	r4, r3
 8005d5e:	d8d8      	bhi.n	8005d12 <RCC_SetFlashLatencyFromMSIRange+0x5a>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005d60:	2302      	movs	r3, #2
        latency = FLASH_LATENCY_RANGE[index];
 8005d62:	aa04      	add	r2, sp, #16
 8005d64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005d68:	f853 6c0c 	ldr.w	r6, [r3, #-12]
        break;
 8005d6c:	e7d2      	b.n	8005d14 <RCC_SetFlashLatencyFromMSIRange+0x5c>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005d6e:	2300      	movs	r3, #0
 8005d70:	e7f7      	b.n	8005d62 <RCC_SetFlashLatencyFromMSIRange+0xaa>
 8005d72:	2301      	movs	r3, #1
 8005d74:	e7f5      	b.n	8005d62 <RCC_SetFlashLatencyFromMSIRange+0xaa>
 8005d76:	bf00      	nop
 8005d78:	0800d0b4 	.word	0x0800d0b4
 8005d7c:	0800d114 	.word	0x0800d114
 8005d80:	0800ceec 	.word	0x0800ceec
 8005d84:	006acfc0 	.word	0x006acfc0
 8005d88:	58004000 	.word	0x58004000
 8005d8c:	0121eabf 	.word	0x0121eabf
 8005d90:	0234933f 	.word	0x0234933f

08005d94 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005d94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d98:	689a      	ldr	r2, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005d9a:	68d9      	ldr	r1, [r3, #12]
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005d9c:	f012 020c 	ands.w	r2, r2, #12
 8005da0:	d027      	beq.n	8005df2 <HAL_RCC_GetSysClockFreq+0x5e>
 8005da2:	2a0c      	cmp	r2, #12
 8005da4:	d04b      	beq.n	8005e3e <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005da6:	2a04      	cmp	r2, #4
 8005da8:	d158      	bne.n	8005e5c <HAL_RCC_GetSysClockFreq+0xc8>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005daa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
    sysclockfreq = HSI_VALUE;
 8005dae:	4832      	ldr	r0, [pc, #200]	@ (8005e78 <HAL_RCC_GetSysClockFreq+0xe4>)
 8005db0:	6893      	ldr	r3, [r2, #8]
 8005db2:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005db6:	2b0c      	cmp	r3, #12
  uint32_t msifreq = 0U;
 8005db8:	f04f 0100 	mov.w	r1, #0
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dbc:	d136      	bne.n	8005e2c <HAL_RCC_GetSysClockFreq+0x98>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005dbe:	68d3      	ldr	r3, [r2, #12]
 8005dc0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d054      	beq.n	8005e72 <HAL_RCC_GetSysClockFreq+0xde>
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d03f      	beq.n	8005e4c <HAL_RCC_GetSysClockFreq+0xb8>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dd0:	68d8      	ldr	r0, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005dd2:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005dd4:	68db      	ldr	r3, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005dd6:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005dda:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8005dde:	0f5b      	lsrs	r3, r3, #29
 8005de0:	fb01 f000 	mul.w	r0, r1, r0
 8005de4:	3201      	adds	r2, #1
 8005de6:	3301      	adds	r3, #1
 8005de8:	fbb0 f0f2 	udiv	r0, r0, r2
 8005dec:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8005df0:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005df2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005df6:	680b      	ldr	r3, [r1, #0]
 8005df8:	f013 0308 	ands.w	r3, r3, #8
 8005dfc:	d117      	bne.n	8005e2e <HAL_RCC_GetSysClockFreq+0x9a>
 8005dfe:	6808      	ldr	r0, [r1, #0]
 8005e00:	f010 0f08 	tst.w	r0, #8
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005e04:	bf0a      	itet	eq
 8005e06:	f8d1 3094 	ldreq.w	r3, [r1, #148]	@ 0x94
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005e0a:	6809      	ldrne	r1, [r1, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005e0c:	f3c3 2303 	ubfxeq	r3, r3, #8, #4
 8005e10:	491a      	ldr	r1, [pc, #104]	@ (8005e7c <HAL_RCC_GetSysClockFreq+0xe8>)
 8005e12:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  uint32_t sysclockfreq = 0U;
 8005e16:	2a00      	cmp	r2, #0
 8005e18:	bf0c      	ite	eq
 8005e1a:	4608      	moveq	r0, r1
 8005e1c:	2000      	movne	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005e1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e22:	6893      	ldr	r3, [r2, #8]
 8005e24:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e28:	2b0c      	cmp	r3, #12
 8005e2a:	d0c8      	beq.n	8005dbe <HAL_RCC_GetSysClockFreq+0x2a>
}
 8005e2c:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005e2e:	680b      	ldr	r3, [r1, #0]
 8005e30:	f013 0308 	ands.w	r3, r3, #8
 8005e34:	d01a      	beq.n	8005e6c <HAL_RCC_GetSysClockFreq+0xd8>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005e36:	680b      	ldr	r3, [r1, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005e38:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005e3c:	e7e8      	b.n	8005e10 <HAL_RCC_GetSysClockFreq+0x7c>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005e3e:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005e42:	2901      	cmp	r1, #1
 8005e44:	d0d5      	beq.n	8005df2 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msifreq = 0U;
 8005e46:	2100      	movs	r1, #0
  uint32_t sysclockfreq = 0U;
 8005e48:	4608      	mov	r0, r1
 8005e4a:	e7e8      	b.n	8005e1e <HAL_RCC_GetSysClockFreq+0x8a>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005e4c:	6812      	ldr	r2, [r2, #0]
        pllinputfreq = HSI_VALUE;
 8005e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005e78 <HAL_RCC_GetSysClockFreq+0xe4>)
 8005e50:	490b      	ldr	r1, [pc, #44]	@ (8005e80 <HAL_RCC_GetSysClockFreq+0xec>)
 8005e52:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
 8005e56:	bf18      	it	ne
 8005e58:	4619      	movne	r1, r3
 8005e5a:	e7b7      	b.n	8005dcc <HAL_RCC_GetSysClockFreq+0x38>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e5c:	2a08      	cmp	r2, #8
 8005e5e:	d1f2      	bne.n	8005e46 <HAL_RCC_GetSysClockFreq+0xb2>
 8005e60:	6819      	ldr	r1, [r3, #0]
 8005e62:	f411 1180 	ands.w	r1, r1, #1048576	@ 0x100000
 8005e66:	d1a0      	bne.n	8005daa <HAL_RCC_GetSysClockFreq+0x16>
      sysclockfreq = HSE_VALUE;
 8005e68:	4805      	ldr	r0, [pc, #20]	@ (8005e80 <HAL_RCC_GetSysClockFreq+0xec>)
 8005e6a:	e7d8      	b.n	8005e1e <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005e6c:	f8d1 1094 	ldr.w	r1, [r1, #148]	@ 0x94
 8005e70:	e7ce      	b.n	8005e10 <HAL_RCC_GetSysClockFreq+0x7c>
        pllinputfreq = HSI_VALUE;
 8005e72:	4901      	ldr	r1, [pc, #4]	@ (8005e78 <HAL_RCC_GetSysClockFreq+0xe4>)
 8005e74:	e7aa      	b.n	8005dcc <HAL_RCC_GetSysClockFreq+0x38>
 8005e76:	bf00      	nop
 8005e78:	00f42400 	.word	0x00f42400
 8005e7c:	0800d0b4 	.word	0x0800d0b4
 8005e80:	01e84800 	.word	0x01e84800

08005e84 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8005e84:	2800      	cmp	r0, #0
 8005e86:	f000 82db 	beq.w	8006440 <HAL_RCC_OscConfig+0x5bc>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005e8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e8e:	6803      	ldr	r3, [r0, #0]
{
 8005e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e94:	6895      	ldr	r5, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005e96:	68d6      	ldr	r6, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e98:	0699      	lsls	r1, r3, #26
 8005e9a:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005e9c:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005ea0:	f006 0603 	and.w	r6, r6, #3
 8005ea4:	d528      	bpl.n	8005ef8 <HAL_RCC_OscConfig+0x74>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005ea6:	2d00      	cmp	r5, #0
 8005ea8:	f000 813b 	beq.w	8006122 <HAL_RCC_OscConfig+0x29e>
 8005eac:	2d0c      	cmp	r5, #12
 8005eae:	f000 8135 	beq.w	800611c <HAL_RCC_OscConfig+0x298>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005eb2:	6a23      	ldr	r3, [r4, #32]
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005eb4:	f04f 47b0 	mov.w	r7, #1476395008	@ 0x58000000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 820c 	beq.w	80062d6 <HAL_RCC_OscConfig+0x452>
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	f043 0301 	orr.w	r3, r3, #1
 8005ec4:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8005ec6:	f7fb fbf3 	bl	80016b0 <HAL_GetTick>
 8005eca:	4680      	mov	r8, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	079b      	lsls	r3, r3, #30
 8005ed0:	f140 8213 	bpl.w	80062fa <HAL_RCC_OscConfig+0x476>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	f043 0308 	orr.w	r3, r3, #8
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005ee0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005eec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ef0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ef4:	607b      	str	r3, [r7, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	07d9      	lsls	r1, r3, #31
 8005efa:	d531      	bpl.n	8005f60 <HAL_RCC_OscConfig+0xdc>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005efc:	2d08      	cmp	r5, #8
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005efe:	6862      	ldr	r2, [r4, #4]
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005f00:	f000 81a8 	beq.w	8006254 <HAL_RCC_OscConfig+0x3d0>
 8005f04:	2d0c      	cmp	r5, #12
 8005f06:	f000 81a2 	beq.w	800624e <HAL_RCC_OscConfig+0x3ca>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005f0a:	f04f 47b0 	mov.w	r7, #1476395008	@ 0x58000000
 8005f0e:	68a1      	ldr	r1, [r4, #8]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005f16:	430b      	orrs	r3, r1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f18:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005f1c:	603b      	str	r3, [r7, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f1e:	f000 81a3 	beq.w	8006268 <HAL_RCC_OscConfig+0x3e4>
 8005f22:	f5b2 1f04 	cmp.w	r2, #2162688	@ 0x210000
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	f000 819b 	beq.w	8006262 <HAL_RCC_OscConfig+0x3de>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f30:	603b      	str	r3, [r7, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f38:	603b      	str	r3, [r7, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f3a:	2a00      	cmp	r2, #0
 8005f3c:	f040 8198 	bne.w	8006270 <HAL_RCC_OscConfig+0x3ec>
        tickstart = HAL_GetTick();
 8005f40:	f7fb fbb6 	bl	80016b0 <HAL_GetTick>
 8005f44:	4680      	mov	r8, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	0398      	lsls	r0, r3, #14
 8005f4a:	d508      	bpl.n	8005f5e <HAL_RCC_OscConfig+0xda>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f4c:	f7fb fbb0 	bl	80016b0 <HAL_GetTick>
 8005f50:	eba0 0008 	sub.w	r0, r0, r8
 8005f54:	2864      	cmp	r0, #100	@ 0x64
 8005f56:	d9f6      	bls.n	8005f46 <HAL_RCC_OscConfig+0xc2>
            return HAL_TIMEOUT;
 8005f58:	2003      	movs	r0, #3
}
 8005f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	0799      	lsls	r1, r3, #30
 8005f62:	d526      	bpl.n	8005fb2 <HAL_RCC_OscConfig+0x12e>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005f64:	2d04      	cmp	r5, #4
 8005f66:	f000 8121 	beq.w	80061ac <HAL_RCC_OscConfig+0x328>
 8005f6a:	2d0c      	cmp	r5, #12
 8005f6c:	f000 811b 	beq.w	80061a6 <HAL_RCC_OscConfig+0x322>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f70:	6923      	ldr	r3, [r4, #16]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005f72:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8005f76:	b183      	cbz	r3, 8005f9a <HAL_RCC_OscConfig+0x116>
 8005f78:	6833      	ldr	r3, [r6, #0]
 8005f7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f7e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8005f80:	f7fb fb96 	bl	80016b0 <HAL_GetTick>
 8005f84:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005f86:	6833      	ldr	r3, [r6, #0]
 8005f88:	055a      	lsls	r2, r3, #21
 8005f8a:	f100 81be 	bmi.w	800630a <HAL_RCC_OscConfig+0x486>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f8e:	f7fb fb8f 	bl	80016b0 <HAL_GetTick>
 8005f92:	1bc0      	subs	r0, r0, r7
 8005f94:	2802      	cmp	r0, #2
 8005f96:	d9f6      	bls.n	8005f86 <HAL_RCC_OscConfig+0x102>
 8005f98:	e7de      	b.n	8005f58 <HAL_RCC_OscConfig+0xd4>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005f9a:	6833      	ldr	r3, [r6, #0]
 8005f9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fa0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8005fa2:	f7fb fb85 	bl	80016b0 <HAL_GetTick>
 8005fa6:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005fa8:	6833      	ldr	r3, [r6, #0]
 8005faa:	055b      	lsls	r3, r3, #21
 8005fac:	f100 81b6 	bmi.w	800631c <HAL_RCC_OscConfig+0x498>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	0718      	lsls	r0, r3, #28
 8005fb4:	d479      	bmi.n	80060aa <HAL_RCC_OscConfig+0x226>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fb6:	0759      	lsls	r1, r3, #29
 8005fb8:	d55b      	bpl.n	8006072 <HAL_RCC_OscConfig+0x1ee>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005fba:	4ebc      	ldr	r6, [pc, #752]	@ (80062ac <HAL_RCC_OscConfig+0x428>)
 8005fbc:	6833      	ldr	r3, [r6, #0]
 8005fbe:	05da      	lsls	r2, r3, #23
 8005fc0:	d40f      	bmi.n	8005fe2 <HAL_RCC_OscConfig+0x15e>
      HAL_PWR_EnableBkUpAccess();
 8005fc2:	f7ff fdf3 	bl	8005bac <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8005fc6:	f7fb fb73 	bl	80016b0 <HAL_GetTick>
 8005fca:	6833      	ldr	r3, [r6, #0]
 8005fcc:	05db      	lsls	r3, r3, #23
 8005fce:	4607      	mov	r7, r0
 8005fd0:	d407      	bmi.n	8005fe2 <HAL_RCC_OscConfig+0x15e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fd2:	f7fb fb6d 	bl	80016b0 <HAL_GetTick>
 8005fd6:	1bc0      	subs	r0, r0, r7
 8005fd8:	2802      	cmp	r0, #2
 8005fda:	d8bd      	bhi.n	8005f58 <HAL_RCC_OscConfig+0xd4>
 8005fdc:	6833      	ldr	r3, [r6, #0]
 8005fde:	05db      	lsls	r3, r3, #23
 8005fe0:	d5f7      	bpl.n	8005fd2 <HAL_RCC_OscConfig+0x14e>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fe2:	68e3      	ldr	r3, [r4, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 8102 	beq.w	80061ee <HAL_RCC_OscConfig+0x36a>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005fea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fee:	2b05      	cmp	r3, #5
 8005ff0:	d107      	bne.n	8006002 <HAL_RCC_OscConfig+0x17e>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005ff2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ff6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005ffa:	f043 0304 	orr.w	r3, r3, #4
 8005ffe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006002:	f04f 47b0 	mov.w	r7, #1476395008	@ 0x58000000
      tickstart = HAL_GetTick();
 8006006:	f7fb fb53 	bl	80016b0 <HAL_GetTick>
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800600a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800600e:	f043 0301 	orr.w	r3, r3, #1
 8006012:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006016:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
      tickstart = HAL_GetTick();
 800601a:	4606      	mov	r6, r0
 800601c:	0798      	lsls	r0, r3, #30
 800601e:	d40a      	bmi.n	8006036 <HAL_RCC_OscConfig+0x1b2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006020:	f7fb fb46 	bl	80016b0 <HAL_GetTick>
 8006024:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006028:	1b80      	subs	r0, r0, r6
 800602a:	4298      	cmp	r0, r3
 800602c:	d894      	bhi.n	8005f58 <HAL_RCC_OscConfig+0xd4>
 800602e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006032:	0798      	lsls	r0, r3, #30
 8006034:	d5f4      	bpl.n	8006020 <HAL_RCC_OscConfig+0x19c>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006036:	68e3      	ldr	r3, [r4, #12]
 8006038:	f023 0304 	bic.w	r3, r3, #4
 800603c:	2b81      	cmp	r3, #129	@ 0x81
 800603e:	f000 8127 	beq.w	8006290 <HAL_RCC_OscConfig+0x40c>
        tickstart = HAL_GetTick();
 8006042:	f7fb fb35 	bl	80016b0 <HAL_GetTick>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006046:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800604a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800604e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        tickstart = HAL_GetTick();
 8006052:	4606      	mov	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006054:	f04f 47b0 	mov.w	r7, #1476395008	@ 0x58000000
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006058:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800605c:	e005      	b.n	800606a <HAL_RCC_OscConfig+0x1e6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800605e:	f7fb fb27 	bl	80016b0 <HAL_GetTick>
 8006062:	1b80      	subs	r0, r0, r6
 8006064:	4540      	cmp	r0, r8
 8006066:	f63f af77 	bhi.w	8005f58 <HAL_RCC_OscConfig+0xd4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800606a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800606e:	051a      	lsls	r2, r3, #20
 8006070:	d4f5      	bmi.n	800605e <HAL_RCC_OscConfig+0x1da>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006072:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006074:	b1b3      	cbz	r3, 80060a4 <HAL_RCC_OscConfig+0x220>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006076:	2d0c      	cmp	r5, #12
 8006078:	f000 8177 	beq.w	800636a <HAL_RCC_OscConfig+0x4e6>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800607c:	2b02      	cmp	r3, #2
 800607e:	f000 8190 	beq.w	80063a2 <HAL_RCC_OscConfig+0x51e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006082:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800608c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800608e:	f7fb fb0f 	bl	80016b0 <HAL_GetTick>
 8006092:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	019b      	lsls	r3, r3, #6
 8006098:	f100 8147 	bmi.w	800632a <HAL_RCC_OscConfig+0x4a6>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800609c:	68e2      	ldr	r2, [r4, #12]
 800609e:	4b84      	ldr	r3, [pc, #528]	@ (80062b0 <HAL_RCC_OscConfig+0x42c>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 80060a4:	2000      	movs	r0, #0
}
 80060a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060aa:	69a3      	ldr	r3, [r4, #24]
      uint32_t csr_temp = RCC->CSR;
 80060ac:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 8089 	beq.w	80061c8 <HAL_RCC_OscConfig+0x344>
      uint32_t csr_temp = RCC->CSR;
 80060b6:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80060ba:	69e2      	ldr	r2, [r4, #28]
 80060bc:	f003 0110 	and.w	r1, r3, #16
 80060c0:	428a      	cmp	r2, r1
 80060c2:	d010      	beq.n	80060e6 <HAL_RCC_OscConfig+0x262>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80060c4:	f003 0103 	and.w	r1, r3, #3
 80060c8:	2902      	cmp	r1, #2
 80060ca:	f000 814c 	beq.w	8006366 <HAL_RCC_OscConfig+0x4e2>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80060ce:	07d9      	lsls	r1, r3, #31
 80060d0:	f100 81a1 	bmi.w	8006416 <HAL_RCC_OscConfig+0x592>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80060d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80060d8:	f8d1 3094 	ldr.w	r3, [r1, #148]	@ 0x94
 80060dc:	f023 0310 	bic.w	r3, r3, #16
 80060e0:	4313      	orrs	r3, r2
 80060e2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80060e6:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 80060ea:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80060ee:	f043 0301 	orr.w	r3, r3, #1
 80060f2:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80060f6:	f7fb fadb 	bl	80016b0 <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80060fa:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80060fe:	079b      	lsls	r3, r3, #30
 8006100:	4607      	mov	r7, r0
 8006102:	d409      	bmi.n	8006118 <HAL_RCC_OscConfig+0x294>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006104:	f7fb fad4 	bl	80016b0 <HAL_GetTick>
 8006108:	1bc0      	subs	r0, r0, r7
 800610a:	2811      	cmp	r0, #17
 800610c:	f63f af24 	bhi.w	8005f58 <HAL_RCC_OscConfig+0xd4>
 8006110:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8006114:	079b      	lsls	r3, r3, #30
 8006116:	d5f5      	bpl.n	8006104 <HAL_RCC_OscConfig+0x280>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006118:	6823      	ldr	r3, [r4, #0]
 800611a:	e74c      	b.n	8005fb6 <HAL_RCC_OscConfig+0x132>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800611c:	2e01      	cmp	r6, #1
 800611e:	f47f aec8 	bne.w	8005eb2 <HAL_RCC_OscConfig+0x2e>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006122:	6a23      	ldr	r3, [r4, #32]
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 811e 	beq.w	8006366 <HAL_RCC_OscConfig+0x4e2>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800612a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800612e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	0712      	lsls	r2, r2, #28
 8006134:	bf56      	itet	pl
 8006136:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 800613a:	681b      	ldrmi	r3, [r3, #0]
 800613c:	091b      	lsrpl	r3, r3, #4
 800613e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006142:	4298      	cmp	r0, r3
 8006144:	f240 80f8 	bls.w	8006338 <HAL_RCC_OscConfig+0x4b4>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006148:	f7ff fdb6 	bl	8005cb8 <RCC_SetFlashLatencyFromMSIRange>
 800614c:	2800      	cmp	r0, #0
 800614e:	f040 810a 	bne.w	8006366 <HAL_RCC_OscConfig+0x4e2>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006152:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	f042 0208 	orr.w	r2, r2, #8
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006162:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006166:	430a      	orrs	r2, r1
 8006168:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800616e:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8006172:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006176:	605a      	str	r2, [r3, #4]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006178:	f7ff fe0c 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800617c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
        status = HAL_InitTick(uwTickPrio);
 8006180:	494c      	ldr	r1, [pc, #304]	@ (80062b4 <HAL_RCC_OscConfig+0x430>)
 8006182:	6892      	ldr	r2, [r2, #8]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006184:	4f4c      	ldr	r7, [pc, #304]	@ (80062b8 <HAL_RCC_OscConfig+0x434>)
 8006186:	4603      	mov	r3, r0
 8006188:	f3c2 1203 	ubfx	r2, r2, #4, #4
        status = HAL_InitTick(uwTickPrio);
 800618c:	6808      	ldr	r0, [r1, #0]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800618e:	494b      	ldr	r1, [pc, #300]	@ (80062bc <HAL_RCC_OscConfig+0x438>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006190:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8006194:	fbb3 f3f2 	udiv	r3, r3, r2
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006198:	600b      	str	r3, [r1, #0]
        status = HAL_InitTick(uwTickPrio);
 800619a:	f7fb fa87 	bl	80016ac <HAL_InitTick>
        if (status != HAL_OK)
 800619e:	2800      	cmp	r0, #0
 80061a0:	f43f aea9 	beq.w	8005ef6 <HAL_RCC_OscConfig+0x72>
 80061a4:	e77f      	b.n	80060a6 <HAL_RCC_OscConfig+0x222>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80061a6:	2e02      	cmp	r6, #2
 80061a8:	f47f aee2 	bne.w	8005f70 <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80061ac:	6922      	ldr	r2, [r4, #16]
 80061ae:	2a00      	cmp	r2, #0
 80061b0:	f000 80d9 	beq.w	8006366 <HAL_RCC_OscConfig+0x4e2>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80061b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80061b8:	6960      	ldr	r0, [r4, #20]
 80061ba:	684a      	ldr	r2, [r1, #4]
 80061bc:	f022 42fe 	bic.w	r2, r2, #2130706432	@ 0x7f000000
 80061c0:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80061c4:	604a      	str	r2, [r1, #4]
}
 80061c6:	e6f4      	b.n	8005fb2 <HAL_RCC_OscConfig+0x12e>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80061c8:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80061cc:	f023 0301 	bic.w	r3, r3, #1
 80061d0:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80061d4:	f7fb fa6c 	bl	80016b0 <HAL_GetTick>
 80061d8:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80061da:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80061de:	0798      	lsls	r0, r3, #30
 80061e0:	d59a      	bpl.n	8006118 <HAL_RCC_OscConfig+0x294>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061e2:	f7fb fa65 	bl	80016b0 <HAL_GetTick>
 80061e6:	1bc0      	subs	r0, r0, r7
 80061e8:	2811      	cmp	r0, #17
 80061ea:	d9f6      	bls.n	80061da <HAL_RCC_OscConfig+0x356>
 80061ec:	e6b4      	b.n	8005f58 <HAL_RCC_OscConfig+0xd4>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80061ee:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
      tickstart = HAL_GetTick();
 80061f2:	f7fb fa5d 	bl	80016b0 <HAL_GetTick>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80061f6:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 80061fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
      tickstart = HAL_GetTick();
 80061fe:	4607      	mov	r7, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006200:	f8c6 3090 	str.w	r3, [r6, #144]	@ 0x90
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006204:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006208:	e005      	b.n	8006216 <HAL_RCC_OscConfig+0x392>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800620a:	f7fb fa51 	bl	80016b0 <HAL_GetTick>
 800620e:	1bc0      	subs	r0, r0, r7
 8006210:	4540      	cmp	r0, r8
 8006212:	f63f aea1 	bhi.w	8005f58 <HAL_RCC_OscConfig+0xd4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006216:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 800621a:	051b      	lsls	r3, r3, #20
 800621c:	d4f5      	bmi.n	800620a <HAL_RCC_OscConfig+0x386>
      tickstart = HAL_GetTick();
 800621e:	f7fb fa47 	bl	80016b0 <HAL_GetTick>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006222:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8006226:	f023 0301 	bic.w	r3, r3, #1
 800622a:	f8c6 3090 	str.w	r3, [r6, #144]	@ 0x90
      tickstart = HAL_GetTick();
 800622e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006230:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8006234:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8006238:	0798      	lsls	r0, r3, #30
 800623a:	f57f af1a 	bpl.w	8006072 <HAL_RCC_OscConfig+0x1ee>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800623e:	f7fb fa37 	bl	80016b0 <HAL_GetTick>
 8006242:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006246:	1bc0      	subs	r0, r0, r7
 8006248:	4298      	cmp	r0, r3
 800624a:	d9f3      	bls.n	8006234 <HAL_RCC_OscConfig+0x3b0>
 800624c:	e684      	b.n	8005f58 <HAL_RCC_OscConfig+0xd4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800624e:	2e03      	cmp	r6, #3
 8006250:	f47f ae5b 	bne.w	8005f0a <HAL_RCC_OscConfig+0x86>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006254:	2a00      	cmp	r2, #0
 8006256:	f000 8086 	beq.w	8006366 <HAL_RCC_OscConfig+0x4e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800625a:	079a      	lsls	r2, r3, #30
 800625c:	f53f ae88 	bmi.w	8005f70 <HAL_RCC_OscConfig+0xec>
 8006260:	e6a7      	b.n	8005fb2 <HAL_RCC_OscConfig+0x12e>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006262:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006266:	603b      	str	r3, [r7, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800626e:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8006270:	f7fb fa1e 	bl	80016b0 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006274:	f04f 48b0 	mov.w	r8, #1476395008	@ 0x58000000
 8006278:	4607      	mov	r7, r0
 800627a:	f8d8 3000 	ldr.w	r3, [r8]
 800627e:	039b      	lsls	r3, r3, #14
 8006280:	f53f ae6d 	bmi.w	8005f5e <HAL_RCC_OscConfig+0xda>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006284:	f7fb fa14 	bl	80016b0 <HAL_GetTick>
 8006288:	1bc0      	subs	r0, r0, r7
 800628a:	2864      	cmp	r0, #100	@ 0x64
 800628c:	d9f5      	bls.n	800627a <HAL_RCC_OscConfig+0x3f6>
 800628e:	e663      	b.n	8005f58 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8006290:	f7fb fa0e 	bl	80016b0 <HAL_GetTick>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006294:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006298:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800629c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        tickstart = HAL_GetTick();
 80062a0:	4606      	mov	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80062a2:	f04f 47b0 	mov.w	r7, #1476395008	@ 0x58000000
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062a6:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80062aa:	e00f      	b.n	80062cc <HAL_RCC_OscConfig+0x448>
 80062ac:	58000400 	.word	0x58000400
 80062b0:	eefefffc 	.word	0xeefefffc
 80062b4:	20000014 	.word	0x20000014
 80062b8:	0800d114 	.word	0x0800d114
 80062bc:	20000010 	.word	0x20000010
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062c0:	f7fb f9f6 	bl	80016b0 <HAL_GetTick>
 80062c4:	1b80      	subs	r0, r0, r6
 80062c6:	4540      	cmp	r0, r8
 80062c8:	f63f ae46 	bhi.w	8005f58 <HAL_RCC_OscConfig+0xd4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80062cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80062d0:	0519      	lsls	r1, r3, #20
 80062d2:	d5f5      	bpl.n	80062c0 <HAL_RCC_OscConfig+0x43c>
 80062d4:	e6cd      	b.n	8006072 <HAL_RCC_OscConfig+0x1ee>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	f023 0301 	bic.w	r3, r3, #1
 80062dc:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80062de:	f7fb f9e7 	bl	80016b0 <HAL_GetTick>
 80062e2:	4680      	mov	r8, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	0798      	lsls	r0, r3, #30
 80062e8:	f57f ae05 	bpl.w	8005ef6 <HAL_RCC_OscConfig+0x72>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80062ec:	f7fb f9e0 	bl	80016b0 <HAL_GetTick>
 80062f0:	eba0 0008 	sub.w	r0, r0, r8
 80062f4:	2802      	cmp	r0, #2
 80062f6:	d9f5      	bls.n	80062e4 <HAL_RCC_OscConfig+0x460>
 80062f8:	e62e      	b.n	8005f58 <HAL_RCC_OscConfig+0xd4>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80062fa:	f7fb f9d9 	bl	80016b0 <HAL_GetTick>
 80062fe:	eba0 0008 	sub.w	r0, r0, r8
 8006302:	2802      	cmp	r0, #2
 8006304:	f67f ade2 	bls.w	8005ecc <HAL_RCC_OscConfig+0x48>
 8006308:	e626      	b.n	8005f58 <HAL_RCC_OscConfig+0xd4>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800630a:	6873      	ldr	r3, [r6, #4]
 800630c:	6962      	ldr	r2, [r4, #20]
 800630e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006312:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006316:	6073      	str	r3, [r6, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006318:	6823      	ldr	r3, [r4, #0]
}
 800631a:	e64a      	b.n	8005fb2 <HAL_RCC_OscConfig+0x12e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800631c:	f7fb f9c8 	bl	80016b0 <HAL_GetTick>
 8006320:	1bc0      	subs	r0, r0, r7
 8006322:	2802      	cmp	r0, #2
 8006324:	f67f ae40 	bls.w	8005fa8 <HAL_RCC_OscConfig+0x124>
 8006328:	e616      	b.n	8005f58 <HAL_RCC_OscConfig+0xd4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800632a:	f7fb f9c1 	bl	80016b0 <HAL_GetTick>
 800632e:	1b40      	subs	r0, r0, r5
 8006330:	280a      	cmp	r0, #10
 8006332:	f67f aeaf 	bls.w	8006094 <HAL_RCC_OscConfig+0x210>
 8006336:	e60f      	b.n	8005f58 <HAL_RCC_OscConfig+0xd4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	f042 0208 	orr.w	r2, r2, #8
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800634a:	4302      	orrs	r2, r0
 800634c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006352:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8006356:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800635a:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800635c:	f7ff fcac 	bl	8005cb8 <RCC_SetFlashLatencyFromMSIRange>
 8006360:	2800      	cmp	r0, #0
 8006362:	f43f af09 	beq.w	8006178 <HAL_RCC_OscConfig+0x2f4>
    return HAL_ERROR;
 8006366:	2001      	movs	r0, #1
 8006368:	e69d      	b.n	80060a6 <HAL_RCC_OscConfig+0x222>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800636a:	2b01      	cmp	r3, #1
 800636c:	d0fb      	beq.n	8006366 <HAL_RCC_OscConfig+0x4e2>
        pll_config = RCC->PLLCFGR;
 800636e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006372:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        pll_config = RCC->PLLCFGR;
 8006374:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006376:	f003 0103 	and.w	r1, r3, #3
 800637a:	4291      	cmp	r1, r2
 800637c:	d1f3      	bne.n	8006366 <HAL_RCC_OscConfig+0x4e2>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800637e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8006380:	f003 0170 	and.w	r1, r3, #112	@ 0x70
 8006384:	4291      	cmp	r1, r2
 8006386:	d1ee      	bne.n	8006366 <HAL_RCC_OscConfig+0x4e2>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006388:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800638a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800638e:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8006392:	d1e8      	bne.n	8006366 <HAL_RCC_OscConfig+0x4e2>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8006394:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8006396:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 800639a:	1a18      	subs	r0, r3, r0
 800639c:	bf18      	it	ne
 800639e:	2001      	movne	r0, #1
 80063a0:	e681      	b.n	80060a6 <HAL_RCC_OscConfig+0x222>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80063a2:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 80063a6:	682b      	ldr	r3, [r5, #0]
 80063a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80063ae:	f7fb f97f 	bl	80016b0 <HAL_GetTick>
 80063b2:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	0199      	lsls	r1, r3, #6
 80063b8:	d427      	bmi.n	800640a <HAL_RCC_OscConfig+0x586>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063ba:	e9d4 320c 	ldrd	r3, r2, [r4, #48]	@ 0x30
 80063be:	68e9      	ldr	r1, [r5, #12]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	4a20      	ldr	r2, [pc, #128]	@ (8006444 <HAL_RCC_OscConfig+0x5c0>)
 80063c4:	400a      	ands	r2, r1
 80063c6:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80063c8:	4313      	orrs	r3, r2
 80063ca:	430b      	orrs	r3, r1
 80063cc:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	@ 0x40
 80063d0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80063d2:	4303      	orrs	r3, r0
 80063d4:	430b      	orrs	r3, r1
 80063d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80063da:	60eb      	str	r3, [r5, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80063dc:	682b      	ldr	r3, [r5, #0]
 80063de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063e2:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063e4:	68eb      	ldr	r3, [r5, #12]
 80063e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063ea:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80063ec:	f7fb f960 	bl	80016b0 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80063f0:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 80063f4:	4604      	mov	r4, r0
 80063f6:	6833      	ldr	r3, [r6, #0]
 80063f8:	019a      	lsls	r2, r3, #6
 80063fa:	f53f ae53 	bmi.w	80060a4 <HAL_RCC_OscConfig+0x220>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063fe:	f7fb f957 	bl	80016b0 <HAL_GetTick>
 8006402:	1b00      	subs	r0, r0, r4
 8006404:	280a      	cmp	r0, #10
 8006406:	d9f6      	bls.n	80063f6 <HAL_RCC_OscConfig+0x572>
 8006408:	e5a6      	b.n	8005f58 <HAL_RCC_OscConfig+0xd4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800640a:	f7fb f951 	bl	80016b0 <HAL_GetTick>
 800640e:	1b80      	subs	r0, r0, r6
 8006410:	280a      	cmp	r0, #10
 8006412:	d9cf      	bls.n	80063b4 <HAL_RCC_OscConfig+0x530>
 8006414:	e5a0      	b.n	8005f58 <HAL_RCC_OscConfig+0xd4>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006416:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 800641a:	f023 0301 	bic.w	r3, r3, #1
 800641e:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
          tickstart = HAL_GetTick();
 8006422:	f7fb f945 	bl	80016b0 <HAL_GetTick>
 8006426:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006428:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 800642c:	079a      	lsls	r2, r3, #30
 800642e:	d401      	bmi.n	8006434 <HAL_RCC_OscConfig+0x5b0>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8006430:	69e2      	ldr	r2, [r4, #28]
 8006432:	e64f      	b.n	80060d4 <HAL_RCC_OscConfig+0x250>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006434:	f7fb f93c 	bl	80016b0 <HAL_GetTick>
 8006438:	1bc0      	subs	r0, r0, r7
 800643a:	2811      	cmp	r0, #17
 800643c:	d9f4      	bls.n	8006428 <HAL_RCC_OscConfig+0x5a4>
 800643e:	e58b      	b.n	8005f58 <HAL_RCC_OscConfig+0xd4>
    return HAL_ERROR;
 8006440:	2001      	movs	r0, #1
}
 8006442:	4770      	bx	lr
 8006444:	11c1808c 	.word	0x11c1808c

08006448 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006448:	2800      	cmp	r0, #0
 800644a:	f000 80f8 	beq.w	800663e <HAL_RCC_ClockConfig+0x1f6>
{
 800644e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006452:	4e7c      	ldr	r6, [pc, #496]	@ (8006644 <HAL_RCC_ClockConfig+0x1fc>)
 8006454:	6833      	ldr	r3, [r6, #0]
 8006456:	f003 0307 	and.w	r3, r3, #7
 800645a:	428b      	cmp	r3, r1
 800645c:	460c      	mov	r4, r1
 800645e:	4605      	mov	r5, r0
 8006460:	f0c0 80b2 	bcc.w	80065c8 <HAL_RCC_ClockConfig+0x180>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	0798      	lsls	r0, r3, #30
 8006468:	d462      	bmi.n	8006530 <HAL_RCC_ClockConfig+0xe8>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800646a:	065a      	lsls	r2, r3, #25
 800646c:	d471      	bmi.n	8006552 <HAL_RCC_ClockConfig+0x10a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800646e:	0758      	lsls	r0, r3, #29
 8006470:	f100 8085 	bmi.w	800657e <HAL_RCC_ClockConfig+0x136>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006474:	071a      	lsls	r2, r3, #28
 8006476:	f100 8094 	bmi.w	80065a2 <HAL_RCC_ClockConfig+0x15a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800647a:	07df      	lsls	r7, r3, #31
 800647c:	d42e      	bmi.n	80064dc <HAL_RCC_ClockConfig+0x94>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800647e:	4d71      	ldr	r5, [pc, #452]	@ (8006644 <HAL_RCC_ClockConfig+0x1fc>)
 8006480:	682b      	ldr	r3, [r5, #0]
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	42a3      	cmp	r3, r4
 8006488:	d913      	bls.n	80064b2 <HAL_RCC_ClockConfig+0x6a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800648a:	682b      	ldr	r3, [r5, #0]
 800648c:	f023 0307 	bic.w	r3, r3, #7
 8006490:	4323      	orrs	r3, r4
 8006492:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8006494:	f7fb f90c 	bl	80016b0 <HAL_GetTick>
 8006498:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800649a:	e005      	b.n	80064a8 <HAL_RCC_ClockConfig+0x60>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800649c:	f7fb f908 	bl	80016b0 <HAL_GetTick>
 80064a0:	1b80      	subs	r0, r0, r6
 80064a2:	2802      	cmp	r0, #2
 80064a4:	f200 80a3 	bhi.w	80065ee <HAL_RCC_ClockConfig+0x1a6>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064a8:	682b      	ldr	r3, [r5, #0]
 80064aa:	f003 0307 	and.w	r3, r3, #7
 80064ae:	42a3      	cmp	r3, r4
 80064b0:	d1f4      	bne.n	800649c <HAL_RCC_ClockConfig+0x54>
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80064b2:	f7ff fc6f 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80064b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064ba:	4c63      	ldr	r4, [pc, #396]	@ (8006648 <HAL_RCC_ClockConfig+0x200>)
 80064bc:	6892      	ldr	r2, [r2, #8]
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80064be:	4963      	ldr	r1, [pc, #396]	@ (800664c <HAL_RCC_ClockConfig+0x204>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80064c0:	4603      	mov	r3, r0
 80064c2:	f3c2 1203 	ubfx	r2, r2, #4, #4
  return HAL_InitTick(uwTickPrio);
 80064c6:	4862      	ldr	r0, [pc, #392]	@ (8006650 <HAL_RCC_ClockConfig+0x208>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80064c8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  return HAL_InitTick(uwTickPrio);
 80064cc:	6800      	ldr	r0, [r0, #0]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80064ce:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80064d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80064d6:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 80064d8:	f7fb b8e8 	b.w	80016ac <HAL_InitTick>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064dc:	686b      	ldr	r3, [r5, #4]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80064de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	6812      	ldr	r2, [r2, #0]
 80064e6:	f000 80a3 	beq.w	8006630 <HAL_RCC_ClockConfig+0x1e8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064ea:	2b03      	cmp	r3, #3
 80064ec:	f000 809a 	beq.w	8006624 <HAL_RCC_ClockConfig+0x1dc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f040 80a1 	bne.w	8006638 <HAL_RCC_ClockConfig+0x1f0>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80064f6:	0791      	lsls	r1, r2, #30
 80064f8:	f140 8097 	bpl.w	800662a <HAL_RCC_ClockConfig+0x1e2>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80064fc:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006500:	f241 3888 	movw	r8, #5000	@ 0x1388
 8006504:	68b2      	ldr	r2, [r6, #8]
 8006506:	f022 0203 	bic.w	r2, r2, #3
 800650a:	4313      	orrs	r3, r2
 800650c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800650e:	f7fb f8cf 	bl	80016b0 <HAL_GetTick>
 8006512:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006514:	e004      	b.n	8006520 <HAL_RCC_ClockConfig+0xd8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006516:	f7fb f8cb 	bl	80016b0 <HAL_GetTick>
 800651a:	1bc0      	subs	r0, r0, r7
 800651c:	4540      	cmp	r0, r8
 800651e:	d866      	bhi.n	80065ee <HAL_RCC_ClockConfig+0x1a6>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006520:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006522:	686a      	ldr	r2, [r5, #4]
 8006524:	f003 030c 	and.w	r3, r3, #12
 8006528:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800652c:	d1f3      	bne.n	8006516 <HAL_RCC_ClockConfig+0xce>
 800652e:	e7a6      	b.n	800647e <HAL_RCC_ClockConfig+0x36>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006530:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8006534:	68aa      	ldr	r2, [r5, #8]
 8006536:	68b3      	ldr	r3, [r6, #8]
 8006538:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800653c:	4313      	orrs	r3, r2
 800653e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8006540:	f7fb f8b6 	bl	80016b0 <HAL_GetTick>
 8006544:	4607      	mov	r7, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006546:	68b3      	ldr	r3, [r6, #8]
 8006548:	03d9      	lsls	r1, r3, #15
 800654a:	d553      	bpl.n	80065f4 <HAL_RCC_ClockConfig+0x1ac>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	065a      	lsls	r2, r3, #25
 8006550:	d58d      	bpl.n	800646e <HAL_RCC_ClockConfig+0x26>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006552:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8006556:	696a      	ldr	r2, [r5, #20]
 8006558:	f8d6 3108 	ldr.w	r3, [r6, #264]	@ 0x108
 800655c:	f023 030f 	bic.w	r3, r3, #15
 8006560:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8006564:	f8c6 3108 	str.w	r3, [r6, #264]	@ 0x108
    tickstart = HAL_GetTick();
 8006568:	f7fb f8a2 	bl	80016b0 <HAL_GetTick>
 800656c:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800656e:	f8d6 3108 	ldr.w	r3, [r6, #264]	@ 0x108
 8006572:	03db      	lsls	r3, r3, #15
 8006574:	d544      	bpl.n	8006600 <HAL_RCC_ClockConfig+0x1b8>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006576:	682b      	ldr	r3, [r5, #0]
 8006578:	0758      	lsls	r0, r3, #29
 800657a:	f57f af7b 	bpl.w	8006474 <HAL_RCC_ClockConfig+0x2c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800657e:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8006582:	68ea      	ldr	r2, [r5, #12]
 8006584:	68b3      	ldr	r3, [r6, #8]
 8006586:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800658a:	4313      	orrs	r3, r2
 800658c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800658e:	f7fb f88f 	bl	80016b0 <HAL_GetTick>
 8006592:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006594:	68b3      	ldr	r3, [r6, #8]
 8006596:	0399      	lsls	r1, r3, #14
 8006598:	d538      	bpl.n	800660c <HAL_RCC_ClockConfig+0x1c4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800659a:	682b      	ldr	r3, [r5, #0]
 800659c:	071a      	lsls	r2, r3, #28
 800659e:	f57f af6c 	bpl.w	800647a <HAL_RCC_ClockConfig+0x32>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80065a2:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80065a6:	692a      	ldr	r2, [r5, #16]
 80065a8:	68b3      	ldr	r3, [r6, #8]
 80065aa:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80065ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80065b2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80065b4:	f7fb f87c 	bl	80016b0 <HAL_GetTick>
 80065b8:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80065ba:	68b3      	ldr	r3, [r6, #8]
 80065bc:	035b      	lsls	r3, r3, #13
 80065be:	d52b      	bpl.n	8006618 <HAL_RCC_ClockConfig+0x1d0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	07df      	lsls	r7, r3, #31
 80065c4:	d48a      	bmi.n	80064dc <HAL_RCC_ClockConfig+0x94>
 80065c6:	e75a      	b.n	800647e <HAL_RCC_ClockConfig+0x36>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065c8:	6833      	ldr	r3, [r6, #0]
 80065ca:	f023 0307 	bic.w	r3, r3, #7
 80065ce:	430b      	orrs	r3, r1
 80065d0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80065d2:	f7fb f86d 	bl	80016b0 <HAL_GetTick>
 80065d6:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065d8:	6833      	ldr	r3, [r6, #0]
 80065da:	f003 0307 	and.w	r3, r3, #7
 80065de:	42a3      	cmp	r3, r4
 80065e0:	f43f af40 	beq.w	8006464 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80065e4:	f7fb f864 	bl	80016b0 <HAL_GetTick>
 80065e8:	1bc3      	subs	r3, r0, r7
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d9f4      	bls.n	80065d8 <HAL_RCC_ClockConfig+0x190>
        return HAL_TIMEOUT;
 80065ee:	2003      	movs	r0, #3
}
 80065f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80065f4:	f7fb f85c 	bl	80016b0 <HAL_GetTick>
 80065f8:	1bc0      	subs	r0, r0, r7
 80065fa:	2802      	cmp	r0, #2
 80065fc:	d9a3      	bls.n	8006546 <HAL_RCC_ClockConfig+0xfe>
 80065fe:	e7f6      	b.n	80065ee <HAL_RCC_ClockConfig+0x1a6>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006600:	f7fb f856 	bl	80016b0 <HAL_GetTick>
 8006604:	1bc0      	subs	r0, r0, r7
 8006606:	2802      	cmp	r0, #2
 8006608:	d9b1      	bls.n	800656e <HAL_RCC_ClockConfig+0x126>
 800660a:	e7f0      	b.n	80065ee <HAL_RCC_ClockConfig+0x1a6>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800660c:	f7fb f850 	bl	80016b0 <HAL_GetTick>
 8006610:	1bc0      	subs	r0, r0, r7
 8006612:	2802      	cmp	r0, #2
 8006614:	d9be      	bls.n	8006594 <HAL_RCC_ClockConfig+0x14c>
 8006616:	e7ea      	b.n	80065ee <HAL_RCC_ClockConfig+0x1a6>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006618:	f7fb f84a 	bl	80016b0 <HAL_GetTick>
 800661c:	1bc0      	subs	r0, r0, r7
 800661e:	2802      	cmp	r0, #2
 8006620:	d9cb      	bls.n	80065ba <HAL_RCC_ClockConfig+0x172>
 8006622:	e7e4      	b.n	80065ee <HAL_RCC_ClockConfig+0x1a6>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006624:	0190      	lsls	r0, r2, #6
 8006626:	f53f af69 	bmi.w	80064fc <HAL_RCC_ClockConfig+0xb4>
    return HAL_ERROR;
 800662a:	2001      	movs	r0, #1
}
 800662c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006630:	0396      	lsls	r6, r2, #14
 8006632:	f53f af63 	bmi.w	80064fc <HAL_RCC_ClockConfig+0xb4>
 8006636:	e7f8      	b.n	800662a <HAL_RCC_ClockConfig+0x1e2>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006638:	0552      	lsls	r2, r2, #21
 800663a:	d5f6      	bpl.n	800662a <HAL_RCC_ClockConfig+0x1e2>
 800663c:	e75e      	b.n	80064fc <HAL_RCC_ClockConfig+0xb4>
    return HAL_ERROR;
 800663e:	2001      	movs	r0, #1
}
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	58004000 	.word	0x58004000
 8006648:	0800d114 	.word	0x0800d114
 800664c:	20000010 	.word	0x20000010
 8006650:	20000014 	.word	0x20000014

08006654 <HAL_RCC_GetHCLKFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006654:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006658:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800665a:	68d9      	ldr	r1, [r3, #12]
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800665c:	f012 020c 	ands.w	r2, r2, #12
 8006660:	d027      	beq.n	80066b2 <HAL_RCC_GetHCLKFreq+0x5e>
 8006662:	2a0c      	cmp	r2, #12
 8006664:	d054      	beq.n	8006710 <HAL_RCC_GetHCLKFreq+0xbc>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006666:	2a04      	cmp	r2, #4
 8006668:	d161      	bne.n	800672e <HAL_RCC_GetHCLKFreq+0xda>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800666a:	f04f 40b0 	mov.w	r0, #1476395008	@ 0x58000000
    sysclockfreq = HSI_VALUE;
 800666e:	4b36      	ldr	r3, [pc, #216]	@ (8006748 <HAL_RCC_GetHCLKFreq+0xf4>)
 8006670:	6882      	ldr	r2, [r0, #8]
 8006672:	f002 020c 	and.w	r2, r2, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006676:	2a0c      	cmp	r2, #12
  uint32_t msifreq = 0U;
 8006678:	f04f 0100 	mov.w	r1, #0
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800667c:	d135      	bne.n	80066ea <HAL_RCC_GetHCLKFreq+0x96>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800667e:	68c3      	ldr	r3, [r0, #12]
 8006680:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8006684:	2b02      	cmp	r3, #2
 8006686:	d05d      	beq.n	8006744 <HAL_RCC_GetHCLKFreq+0xf0>
 8006688:	2b03      	cmp	r3, #3
 800668a:	d048      	beq.n	800671e <HAL_RCC_GetHCLKFreq+0xca>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800668c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006690:	68d3      	ldr	r3, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006692:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006694:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006696:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800669a:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800669e:	0f52      	lsrs	r2, r2, #29
 80066a0:	fb01 f303 	mul.w	r3, r1, r3
 80066a4:	3201      	adds	r2, #1
 80066a6:	1c41      	adds	r1, r0, #1
 80066a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80066ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80066b0:	e01b      	b.n	80066ea <HAL_RCC_GetHCLKFreq+0x96>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80066b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80066b6:	680b      	ldr	r3, [r1, #0]
 80066b8:	f013 0308 	ands.w	r3, r3, #8
 80066bc:	d120      	bne.n	8006700 <HAL_RCC_GetHCLKFreq+0xac>
 80066be:	6808      	ldr	r0, [r1, #0]
 80066c0:	0700      	lsls	r0, r0, #28
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80066c2:	bf56      	itet	pl
 80066c4:	f8d1 3094 	ldrpl.w	r3, [r1, #148]	@ 0x94
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80066c8:	6809      	ldrmi	r1, [r1, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80066ca:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 80066ce:	491f      	ldr	r1, [pc, #124]	@ (800674c <HAL_RCC_GetHCLKFreq+0xf8>)
 80066d0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  uint32_t sysclockfreq = 0U;
 80066d4:	2a00      	cmp	r2, #0
 80066d6:	bf0c      	ite	eq
 80066d8:	460b      	moveq	r3, r1
 80066da:	2300      	movne	r3, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80066dc:	f04f 40b0 	mov.w	r0, #1476395008	@ 0x58000000
 80066e0:	6882      	ldr	r2, [r0, #8]
 80066e2:	f002 020c 	and.w	r2, r2, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066e6:	2a0c      	cmp	r2, #12
 80066e8:	d0c9      	beq.n	800667e <HAL_RCC_GetHCLKFreq+0x2a>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80066ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80066ee:	4918      	ldr	r1, [pc, #96]	@ (8006750 <HAL_RCC_GetHCLKFreq+0xfc>)
 80066f0:	6892      	ldr	r2, [r2, #8]
 80066f2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80066f6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
}
 80066fa:	fbb3 f0f0 	udiv	r0, r3, r0
 80066fe:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8006700:	680b      	ldr	r3, [r1, #0]
 8006702:	f013 0308 	ands.w	r3, r3, #8
 8006706:	d01a      	beq.n	800673e <HAL_RCC_GetHCLKFreq+0xea>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006708:	680b      	ldr	r3, [r1, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800670a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800670e:	e7de      	b.n	80066ce <HAL_RCC_GetHCLKFreq+0x7a>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006710:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006714:	2901      	cmp	r1, #1
 8006716:	d0cc      	beq.n	80066b2 <HAL_RCC_GetHCLKFreq+0x5e>
  uint32_t msifreq = 0U;
 8006718:	2100      	movs	r1, #0
  uint32_t sysclockfreq = 0U;
 800671a:	460b      	mov	r3, r1
 800671c:	e7de      	b.n	80066dc <HAL_RCC_GetHCLKFreq+0x88>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800671e:	6802      	ldr	r2, [r0, #0]
        pllinputfreq = HSI_VALUE;
 8006720:	4b09      	ldr	r3, [pc, #36]	@ (8006748 <HAL_RCC_GetHCLKFreq+0xf4>)
 8006722:	490c      	ldr	r1, [pc, #48]	@ (8006754 <HAL_RCC_GetHCLKFreq+0x100>)
 8006724:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
 8006728:	bf18      	it	ne
 800672a:	4619      	movne	r1, r3
 800672c:	e7ae      	b.n	800668c <HAL_RCC_GetHCLKFreq+0x38>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800672e:	2a08      	cmp	r2, #8
 8006730:	d1f2      	bne.n	8006718 <HAL_RCC_GetHCLKFreq+0xc4>
 8006732:	6819      	ldr	r1, [r3, #0]
 8006734:	f411 1180 	ands.w	r1, r1, #1048576	@ 0x100000
 8006738:	d197      	bne.n	800666a <HAL_RCC_GetHCLKFreq+0x16>
      sysclockfreq = HSE_VALUE;
 800673a:	4b06      	ldr	r3, [pc, #24]	@ (8006754 <HAL_RCC_GetHCLKFreq+0x100>)
 800673c:	e7ce      	b.n	80066dc <HAL_RCC_GetHCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800673e:	f8d1 1094 	ldr.w	r1, [r1, #148]	@ 0x94
 8006742:	e7c4      	b.n	80066ce <HAL_RCC_GetHCLKFreq+0x7a>
        pllinputfreq = HSI_VALUE;
 8006744:	4900      	ldr	r1, [pc, #0]	@ (8006748 <HAL_RCC_GetHCLKFreq+0xf4>)
 8006746:	e7a1      	b.n	800668c <HAL_RCC_GetHCLKFreq+0x38>
 8006748:	00f42400 	.word	0x00f42400
 800674c:	0800d0b4 	.word	0x0800d0b4
 8006750:	0800d114 	.word	0x0800d114
 8006754:	01e84800 	.word	0x01e84800

08006758 <HAL_RCC_GetPCLK1Freq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006758:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800675c:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800675e:	68d9      	ldr	r1, [r3, #12]
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006760:	f012 020c 	ands.w	r2, r2, #12
 8006764:	d027      	beq.n	80067b6 <HAL_RCC_GetPCLK1Freq+0x5e>
 8006766:	2a0c      	cmp	r2, #12
 8006768:	d05c      	beq.n	8006824 <HAL_RCC_GetPCLK1Freq+0xcc>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800676a:	2a04      	cmp	r2, #4
 800676c:	d169      	bne.n	8006842 <HAL_RCC_GetPCLK1Freq+0xea>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800676e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
    sysclockfreq = HSI_VALUE;
 8006772:	483a      	ldr	r0, [pc, #232]	@ (800685c <HAL_RCC_GetPCLK1Freq+0x104>)
 8006774:	6893      	ldr	r3, [r2, #8]
 8006776:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800677a:	2b0c      	cmp	r3, #12
  uint32_t msifreq = 0U;
 800677c:	f04f 0100 	mov.w	r1, #0
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006780:	d136      	bne.n	80067f0 <HAL_RCC_GetPCLK1Freq+0x98>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006782:	68d3      	ldr	r3, [r2, #12]
 8006784:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8006788:	2b02      	cmp	r3, #2
 800678a:	d065      	beq.n	8006858 <HAL_RCC_GetPCLK1Freq+0x100>
 800678c:	2b03      	cmp	r3, #3
 800678e:	d050      	beq.n	8006832 <HAL_RCC_GetPCLK1Freq+0xda>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006794:	68d8      	ldr	r0, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006796:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006798:	68db      	ldr	r3, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800679a:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800679e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80067a2:	0f5b      	lsrs	r3, r3, #29
 80067a4:	fb01 f000 	mul.w	r0, r1, r0
 80067a8:	3201      	adds	r2, #1
 80067aa:	3301      	adds	r3, #1
 80067ac:	fbb0 f0f2 	udiv	r0, r0, r2
 80067b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80067b4:	e01c      	b.n	80067f0 <HAL_RCC_GetPCLK1Freq+0x98>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80067b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80067ba:	680b      	ldr	r3, [r1, #0]
 80067bc:	f013 0308 	ands.w	r3, r3, #8
 80067c0:	d128      	bne.n	8006814 <HAL_RCC_GetPCLK1Freq+0xbc>
 80067c2:	6808      	ldr	r0, [r1, #0]
 80067c4:	f010 0f08 	tst.w	r0, #8
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80067c8:	bf0a      	itet	eq
 80067ca:	f8d1 3094 	ldreq.w	r3, [r1, #148]	@ 0x94
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80067ce:	6809      	ldrne	r1, [r1, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80067d0:	f3c3 2303 	ubfxeq	r3, r3, #8, #4
 80067d4:	4922      	ldr	r1, [pc, #136]	@ (8006860 <HAL_RCC_GetPCLK1Freq+0x108>)
 80067d6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  uint32_t sysclockfreq = 0U;
 80067da:	2a00      	cmp	r2, #0
 80067dc:	bf0c      	ite	eq
 80067de:	4608      	moveq	r0, r1
 80067e0:	2000      	movne	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80067e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067e6:	6893      	ldr	r3, [r2, #8]
 80067e8:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067ec:	2b0c      	cmp	r3, #12
 80067ee:	d0c8      	beq.n	8006782 <HAL_RCC_GetPCLK1Freq+0x2a>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80067f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80067f4:	491b      	ldr	r1, [pc, #108]	@ (8006864 <HAL_RCC_GetPCLK1Freq+0x10c>)
 80067f6:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f3c2 1203 	ubfx	r2, r2, #4, #4
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80067fe:	f3c3 2302 	ubfx	r3, r3, #8, #3
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006802:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006806:	4a18      	ldr	r2, [pc, #96]	@ (8006868 <HAL_RCC_GetPCLK1Freq+0x110>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006808:	fbb0 f0f1 	udiv	r0, r0, r1
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800680c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006810:	40d8      	lsrs	r0, r3
 8006812:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8006814:	680b      	ldr	r3, [r1, #0]
 8006816:	f013 0308 	ands.w	r3, r3, #8
 800681a:	d01a      	beq.n	8006852 <HAL_RCC_GetPCLK1Freq+0xfa>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800681c:	680b      	ldr	r3, [r1, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800681e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006822:	e7d7      	b.n	80067d4 <HAL_RCC_GetPCLK1Freq+0x7c>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006824:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006828:	2901      	cmp	r1, #1
 800682a:	d0c4      	beq.n	80067b6 <HAL_RCC_GetPCLK1Freq+0x5e>
  uint32_t msifreq = 0U;
 800682c:	2100      	movs	r1, #0
  uint32_t sysclockfreq = 0U;
 800682e:	4608      	mov	r0, r1
 8006830:	e7d7      	b.n	80067e2 <HAL_RCC_GetPCLK1Freq+0x8a>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006832:	6812      	ldr	r2, [r2, #0]
        pllinputfreq = HSI_VALUE;
 8006834:	4b09      	ldr	r3, [pc, #36]	@ (800685c <HAL_RCC_GetPCLK1Freq+0x104>)
 8006836:	490d      	ldr	r1, [pc, #52]	@ (800686c <HAL_RCC_GetPCLK1Freq+0x114>)
 8006838:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
 800683c:	bf18      	it	ne
 800683e:	4619      	movne	r1, r3
 8006840:	e7a6      	b.n	8006790 <HAL_RCC_GetPCLK1Freq+0x38>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006842:	2a08      	cmp	r2, #8
 8006844:	d1f2      	bne.n	800682c <HAL_RCC_GetPCLK1Freq+0xd4>
 8006846:	6819      	ldr	r1, [r3, #0]
 8006848:	f411 1180 	ands.w	r1, r1, #1048576	@ 0x100000
 800684c:	d18f      	bne.n	800676e <HAL_RCC_GetPCLK1Freq+0x16>
      sysclockfreq = HSE_VALUE;
 800684e:	4807      	ldr	r0, [pc, #28]	@ (800686c <HAL_RCC_GetPCLK1Freq+0x114>)
 8006850:	e7c7      	b.n	80067e2 <HAL_RCC_GetPCLK1Freq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006852:	f8d1 1094 	ldr.w	r1, [r1, #148]	@ 0x94
 8006856:	e7bd      	b.n	80067d4 <HAL_RCC_GetPCLK1Freq+0x7c>
        pllinputfreq = HSI_VALUE;
 8006858:	4900      	ldr	r1, [pc, #0]	@ (800685c <HAL_RCC_GetPCLK1Freq+0x104>)
 800685a:	e799      	b.n	8006790 <HAL_RCC_GetPCLK1Freq+0x38>
 800685c:	00f42400 	.word	0x00f42400
 8006860:	0800d0b4 	.word	0x0800d0b4
 8006864:	0800d114 	.word	0x0800d114
 8006868:	0800d0f4 	.word	0x0800d0f4
 800686c:	01e84800 	.word	0x01e84800

08006870 <HAL_RCC_GetPCLK2Freq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006874:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006876:	68d9      	ldr	r1, [r3, #12]
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006878:	f012 020c 	ands.w	r2, r2, #12
 800687c:	d027      	beq.n	80068ce <HAL_RCC_GetPCLK2Freq+0x5e>
 800687e:	2a0c      	cmp	r2, #12
 8006880:	d05c      	beq.n	800693c <HAL_RCC_GetPCLK2Freq+0xcc>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006882:	2a04      	cmp	r2, #4
 8006884:	d169      	bne.n	800695a <HAL_RCC_GetPCLK2Freq+0xea>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006886:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
    sysclockfreq = HSI_VALUE;
 800688a:	483a      	ldr	r0, [pc, #232]	@ (8006974 <HAL_RCC_GetPCLK2Freq+0x104>)
 800688c:	6893      	ldr	r3, [r2, #8]
 800688e:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006892:	2b0c      	cmp	r3, #12
  uint32_t msifreq = 0U;
 8006894:	f04f 0100 	mov.w	r1, #0
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006898:	d136      	bne.n	8006908 <HAL_RCC_GetPCLK2Freq+0x98>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800689a:	68d3      	ldr	r3, [r2, #12]
 800689c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d065      	beq.n	8006970 <HAL_RCC_GetPCLK2Freq+0x100>
 80068a4:	2b03      	cmp	r3, #3
 80068a6:	d050      	beq.n	800694a <HAL_RCC_GetPCLK2Freq+0xda>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80068a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068ac:	68d8      	ldr	r0, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80068ae:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80068b0:	68db      	ldr	r3, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80068b2:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80068b6:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80068ba:	0f5b      	lsrs	r3, r3, #29
 80068bc:	fb01 f000 	mul.w	r0, r1, r0
 80068c0:	3201      	adds	r2, #1
 80068c2:	3301      	adds	r3, #1
 80068c4:	fbb0 f0f2 	udiv	r0, r0, r2
 80068c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80068cc:	e01c      	b.n	8006908 <HAL_RCC_GetPCLK2Freq+0x98>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80068ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80068d2:	680b      	ldr	r3, [r1, #0]
 80068d4:	f013 0308 	ands.w	r3, r3, #8
 80068d8:	d128      	bne.n	800692c <HAL_RCC_GetPCLK2Freq+0xbc>
 80068da:	6808      	ldr	r0, [r1, #0]
 80068dc:	f010 0f08 	tst.w	r0, #8
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80068e0:	bf0a      	itet	eq
 80068e2:	f8d1 3094 	ldreq.w	r3, [r1, #148]	@ 0x94
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80068e6:	6809      	ldrne	r1, [r1, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80068e8:	f3c3 2303 	ubfxeq	r3, r3, #8, #4
 80068ec:	4922      	ldr	r1, [pc, #136]	@ (8006978 <HAL_RCC_GetPCLK2Freq+0x108>)
 80068ee:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  uint32_t sysclockfreq = 0U;
 80068f2:	2a00      	cmp	r2, #0
 80068f4:	bf0c      	ite	eq
 80068f6:	4608      	moveq	r0, r1
 80068f8:	2000      	movne	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80068fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068fe:	6893      	ldr	r3, [r2, #8]
 8006900:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006904:	2b0c      	cmp	r3, #12
 8006906:	d0c8      	beq.n	800689a <HAL_RCC_GetPCLK2Freq+0x2a>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800690c:	491b      	ldr	r1, [pc, #108]	@ (800697c <HAL_RCC_GetPCLK2Freq+0x10c>)
 800690e:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f3c2 1203 	ubfx	r2, r2, #4, #4
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006916:	f3c3 23c2 	ubfx	r3, r3, #11, #3
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800691a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800691e:	4a18      	ldr	r2, [pc, #96]	@ (8006980 <HAL_RCC_GetPCLK2Freq+0x110>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006920:	fbb0 f0f1 	udiv	r0, r0, r1
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006928:	40d8      	lsrs	r0, r3
 800692a:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800692c:	680b      	ldr	r3, [r1, #0]
 800692e:	f013 0308 	ands.w	r3, r3, #8
 8006932:	d01a      	beq.n	800696a <HAL_RCC_GetPCLK2Freq+0xfa>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006934:	680b      	ldr	r3, [r1, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006936:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800693a:	e7d7      	b.n	80068ec <HAL_RCC_GetPCLK2Freq+0x7c>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800693c:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006940:	2901      	cmp	r1, #1
 8006942:	d0c4      	beq.n	80068ce <HAL_RCC_GetPCLK2Freq+0x5e>
  uint32_t msifreq = 0U;
 8006944:	2100      	movs	r1, #0
  uint32_t sysclockfreq = 0U;
 8006946:	4608      	mov	r0, r1
 8006948:	e7d7      	b.n	80068fa <HAL_RCC_GetPCLK2Freq+0x8a>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800694a:	6812      	ldr	r2, [r2, #0]
        pllinputfreq = HSI_VALUE;
 800694c:	4b09      	ldr	r3, [pc, #36]	@ (8006974 <HAL_RCC_GetPCLK2Freq+0x104>)
 800694e:	490d      	ldr	r1, [pc, #52]	@ (8006984 <HAL_RCC_GetPCLK2Freq+0x114>)
 8006950:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
 8006954:	bf18      	it	ne
 8006956:	4619      	movne	r1, r3
 8006958:	e7a6      	b.n	80068a8 <HAL_RCC_GetPCLK2Freq+0x38>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800695a:	2a08      	cmp	r2, #8
 800695c:	d1f2      	bne.n	8006944 <HAL_RCC_GetPCLK2Freq+0xd4>
 800695e:	6819      	ldr	r1, [r3, #0]
 8006960:	f411 1180 	ands.w	r1, r1, #1048576	@ 0x100000
 8006964:	d18f      	bne.n	8006886 <HAL_RCC_GetPCLK2Freq+0x16>
      sysclockfreq = HSE_VALUE;
 8006966:	4807      	ldr	r0, [pc, #28]	@ (8006984 <HAL_RCC_GetPCLK2Freq+0x114>)
 8006968:	e7c7      	b.n	80068fa <HAL_RCC_GetPCLK2Freq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800696a:	f8d1 1094 	ldr.w	r1, [r1, #148]	@ 0x94
 800696e:	e7bd      	b.n	80068ec <HAL_RCC_GetPCLK2Freq+0x7c>
        pllinputfreq = HSI_VALUE;
 8006970:	4900      	ldr	r1, [pc, #0]	@ (8006974 <HAL_RCC_GetPCLK2Freq+0x104>)
 8006972:	e799      	b.n	80068a8 <HAL_RCC_GetPCLK2Freq+0x38>
 8006974:	00f42400 	.word	0x00f42400
 8006978:	0800d0b4 	.word	0x0800d0b4
 800697c:	0800d114 	.word	0x0800d114
 8006980:	0800d0f4 	.word	0x0800d0f4
 8006984:	01e84800 	.word	0x01e84800

08006988 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006988:	6803      	ldr	r3, [r0, #0]
{
 800698a:	b570      	push	{r4, r5, r6, lr}
 800698c:	4604      	mov	r4, r0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800698e:	f413 3080 	ands.w	r0, r3, #65536	@ 0x10000
 8006992:	f040 80ba 	bne.w	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x182>
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006996:	07dd      	lsls	r5, r3, #31
 8006998:	d50a      	bpl.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800699a:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800699e:	6861      	ldr	r1, [r4, #4]
 80069a0:	f8d5 2088 	ldr.w	r2, [r5, #136]	@ 0x88
 80069a4:	ea22 4211 	bic.w	r2, r2, r1, lsr #16
 80069a8:	b289      	uxth	r1, r1
 80069aa:	430a      	orrs	r2, r1
 80069ac:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069b0:	0799      	lsls	r1, r3, #30
 80069b2:	d50a      	bpl.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x42>
 80069b4:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069b8:	68a1      	ldr	r1, [r4, #8]
 80069ba:	f8d5 2088 	ldr.w	r2, [r5, #136]	@ 0x88
 80069be:	ea22 4211 	bic.w	r2, r2, r1, lsr #16
 80069c2:	b289      	uxth	r1, r1
 80069c4:	430a      	orrs	r2, r1
 80069c6:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069ca:	069a      	lsls	r2, r3, #26
 80069cc:	d509      	bpl.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80069ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069d2:	6925      	ldr	r5, [r4, #16]
 80069d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80069d8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80069dc:	432a      	orrs	r2, r5
 80069de:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80069e2:	059e      	lsls	r6, r3, #22
 80069e4:	d50c      	bpl.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069e6:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80069e8:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 80069ec:	0c31      	lsrs	r1, r6, #16
 80069ee:	f8d5 2088 	ldr.w	r2, [r5, #136]	@ 0x88
 80069f2:	0409      	lsls	r1, r1, #16
 80069f4:	ea22 0201 	bic.w	r2, r2, r1
 80069f8:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80069fc:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006a00:	055d      	lsls	r5, r3, #21
 8006a02:	d50c      	bpl.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a04:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8006a06:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8006a0a:	0c31      	lsrs	r1, r6, #16
 8006a0c:	f8d5 2088 	ldr.w	r2, [r5, #136]	@ 0x88
 8006a10:	0409      	lsls	r1, r1, #16
 8006a12:	ea22 0201 	bic.w	r2, r2, r1
 8006a16:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8006a1a:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006a1e:	0519      	lsls	r1, r3, #20
 8006a20:	d50c      	bpl.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006a22:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006a24:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8006a28:	0c31      	lsrs	r1, r6, #16
 8006a2a:	f8d5 2088 	ldr.w	r2, [r5, #136]	@ 0x88
 8006a2e:	0409      	lsls	r1, r1, #16
 8006a30:	ea22 0201 	bic.w	r2, r2, r1
 8006a34:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8006a38:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a3c:	065a      	lsls	r2, r3, #25
 8006a3e:	d50f      	bpl.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a40:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006a42:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8006a46:	0915      	lsrs	r5, r2, #4
 8006a48:	f8d6 1088 	ldr.w	r1, [r6, #136]	@ 0x88
 8006a4c:	f405 257f 	and.w	r5, r5, #1044480	@ 0xff000
 8006a50:	0112      	lsls	r2, r2, #4
 8006a52:	f402 227f 	and.w	r2, r2, #1044480	@ 0xff000
 8006a56:	ea21 0105 	bic.w	r1, r1, r5
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	f8c6 2088 	str.w	r2, [r6, #136]	@ 0x88
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a60:	061e      	lsls	r6, r3, #24
 8006a62:	d50f      	bpl.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a64:	69a2      	ldr	r2, [r4, #24]
 8006a66:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8006a6a:	0915      	lsrs	r5, r2, #4
 8006a6c:	f8d6 1088 	ldr.w	r1, [r6, #136]	@ 0x88
 8006a70:	f405 257f 	and.w	r5, r5, #1044480	@ 0xff000
 8006a74:	0112      	lsls	r2, r2, #4
 8006a76:	f402 227f 	and.w	r2, r2, #1044480	@ 0xff000
 8006a7a:	ea21 0105 	bic.w	r1, r1, r5
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	f8c6 2088 	str.w	r2, [r6, #136]	@ 0x88
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a84:	05dd      	lsls	r5, r3, #23
 8006a86:	d50f      	bpl.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a88:	69e2      	ldr	r2, [r4, #28]
 8006a8a:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8006a8e:	0915      	lsrs	r5, r2, #4
 8006a90:	f8d6 1088 	ldr.w	r1, [r6, #136]	@ 0x88
 8006a94:	f405 257f 	and.w	r5, r5, #1044480	@ 0xff000
 8006a98:	0112      	lsls	r2, r2, #4
 8006a9a:	f402 227f 	and.w	r2, r2, #1044480	@ 0xff000
 8006a9e:	ea21 0105 	bic.w	r1, r1, r5
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	f8c6 2088 	str.w	r2, [r6, #136]	@ 0x88
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006aa8:	06d9      	lsls	r1, r3, #27
 8006aaa:	d50c      	bpl.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006aac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006ab0:	68e5      	ldr	r5, [r4, #12]
 8006ab2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006ab6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006aba:	432a      	orrs	r2, r5

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006abc:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8006ac0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
 8006ac4:	d061      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x202>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ac6:	041a      	lsls	r2, r3, #16
 8006ac8:	d50a      	bpl.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x158>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006aca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ace:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8006ad0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006ad4:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8006ad8:	432a      	orrs	r2, r5
 8006ada:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ade:	b17d      	cbz	r5, 8006b00 <HAL_RCCEx_PeriphCLKConfig+0x178>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ae0:	045b      	lsls	r3, r3, #17
 8006ae2:	d50c      	bpl.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x176>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006ae4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ae8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006aea:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8006aee:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8006af2:	430b      	orrs	r3, r1

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006af4:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8006af8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8006afc:	d04a      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8006afe:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006b00:	68ca      	ldr	r2, [r1, #12]
 8006b02:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006b06:	60ca      	str	r2, [r1, #12]
 8006b08:	e7ea      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    HAL_PWR_EnableBkUpAccess();
 8006b0a:	f7ff f84f 	bl	8005bac <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8006b0e:	f7fa fdcf 	bl	80016b0 <HAL_GetTick>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006b12:	4e28      	ldr	r6, [pc, #160]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
    tickstart = HAL_GetTick();
 8006b14:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006b16:	e004      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b18:	f7fa fdca 	bl	80016b0 <HAL_GetTick>
 8006b1c:	1b43      	subs	r3, r0, r5
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d844      	bhi.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x224>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006b22:	6833      	ldr	r3, [r6, #0]
 8006b24:	05d8      	lsls	r0, r3, #23
 8006b26:	d5f7      	bpl.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x190>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006b28:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006b2c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8006b2e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8006b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d01b      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b3a:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006b3e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8006b42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b46:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006b4a:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8006b4e:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
 8006b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006b56:	0789      	lsls	r1, r1, #30
 8006b58:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 8006b5c:	f8c5 0090 	str.w	r0, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006b60:	d507      	bpl.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tickstart = HAL_GetTick();
 8006b62:	f7fa fda5 	bl	80016b0 <HAL_GetTick>
 8006b66:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006b68:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8006b6c:	079b      	lsls	r3, r3, #30
 8006b6e:	d516      	bpl.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x216>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b70:	6b62      	ldr	r2, [r4, #52]	@ 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006b72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006b76:	2000      	movs	r0, #0
 8006b78:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8006b7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b80:	4313      	orrs	r3, r2
 8006b82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b86:	6823      	ldr	r3, [r4, #0]
}
 8006b88:	e705      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xe>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006b8a:	68ca      	ldr	r2, [r1, #12]
 8006b8c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006b90:	60ca      	str	r2, [r1, #12]
 8006b92:	e798      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b94:	68d3      	ldr	r3, [r2, #12]
 8006b96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b9a:	60d3      	str	r3, [r2, #12]
}
 8006b9c:	bd70      	pop	{r4, r5, r6, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b9e:	f7fa fd87 	bl	80016b0 <HAL_GetTick>
 8006ba2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006ba6:	1b80      	subs	r0, r0, r6
 8006ba8:	4298      	cmp	r0, r3
 8006baa:	d9dd      	bls.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bac:	6823      	ldr	r3, [r4, #0]
        status = ret;
 8006bae:	2003      	movs	r0, #3
 8006bb0:	e6f1      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xe>
 8006bb2:	bf00      	nop
 8006bb4:	58000400 	.word	0x58000400

08006bb8 <HAL_RTC_SetAlarm_IT>:
{
  uint32_t tmpreg = 0;
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006bb8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	f000 80e3 	beq.w	8006d88 <HAL_RTC_SetAlarm_IT+0x1d0>
{
 8006bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006bc6:	4b71      	ldr	r3, [pc, #452]	@ (8006d8c <HAL_RTC_SetAlarm_IT+0x1d4>)
  __HAL_LOCK(hrtc);
 8006bc8:	2701      	movs	r7, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bca:	2402      	movs	r4, #2
  __HAL_LOCK(hrtc);
 8006bcc:	f880 702c 	strb.w	r7, [r0, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bd0:	f880 402d 	strb.w	r4, [r0, #45]	@ 0x2d
 8006bd4:	4686      	mov	lr, r0
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006bd6:	68d8      	ldr	r0, [r3, #12]
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006bd8:	698e      	ldr	r6, [r1, #24]
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006bda:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006bdc:	f400 7040 	and.w	r0, r0, #768	@ 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8006be0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8006be4:	f000 80a0 	beq.w	8006d28 <HAL_RTC_SetAlarm_IT+0x170>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006be8:	6948      	ldr	r0, [r1, #20]
    if (Format == RTC_FORMAT_BIN)
 8006bea:	2a00      	cmp	r2, #0
 8006bec:	d17e      	bne.n	8006cec <HAL_RTC_SetAlarm_IT+0x134>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006bee:	699c      	ldr	r4, [r3, #24]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006bf0:	780b      	ldrb	r3, [r1, #0]
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006bf2:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006bf6:	bf16      	itet	ne
 8006bf8:	78cc      	ldrbne	r4, [r1, #3]
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006bfa:	70cc      	strbeq	r4, [r1, #3]
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006bfc:	05a4      	lslne	r4, r4, #22
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8006bfe:	2b09      	cmp	r3, #9
 8006c00:	d909      	bls.n	8006c16 <HAL_RTC_SetAlarm_IT+0x5e>
  uint32_t bcdhigh = 0U;
 8006c02:	2700      	movs	r7, #0
  {
    bcdhigh++;
    tmp_Value -= 10U;
 8006c04:	3b0a      	subs	r3, #10
 8006c06:	b2db      	uxtb	r3, r3
  while (tmp_Value >= 10U)
 8006c08:	2b09      	cmp	r3, #9
    bcdhigh++;
 8006c0a:	f107 0701 	add.w	r7, r7, #1
  while (tmp_Value >= 10U)
 8006c0e:	d8f9      	bhi.n	8006c04 <HAL_RTC_SetAlarm_IT+0x4c>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006c10:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 8006c14:	b2db      	uxtb	r3, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c16:	ea4f 4c03 	mov.w	ip, r3, lsl #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c1a:	784b      	ldrb	r3, [r1, #1]
  while (tmp_Value >= 10U)
 8006c1c:	2b09      	cmp	r3, #9
 8006c1e:	d909      	bls.n	8006c34 <HAL_RTC_SetAlarm_IT+0x7c>
  uint32_t bcdhigh = 0U;
 8006c20:	2700      	movs	r7, #0
    tmp_Value -= 10U;
 8006c22:	3b0a      	subs	r3, #10
 8006c24:	b2db      	uxtb	r3, r3
  while (tmp_Value >= 10U)
 8006c26:	2b09      	cmp	r3, #9
    bcdhigh++;
 8006c28:	f107 0701 	add.w	r7, r7, #1
  while (tmp_Value >= 10U)
 8006c2c:	d8f9      	bhi.n	8006c22 <HAL_RTC_SetAlarm_IT+0x6a>
  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006c2e:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 8006c32:	b2db      	uxtb	r3, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c34:	f891 8002 	ldrb.w	r8, [r1, #2]
  while (tmp_Value >= 10U)
 8006c38:	f1b8 0f09 	cmp.w	r8, #9
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c3c:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while (tmp_Value >= 10U)
 8006c40:	d90d      	bls.n	8006c5e <HAL_RTC_SetAlarm_IT+0xa6>
  uint32_t bcdhigh = 0U;
 8006c42:	2700      	movs	r7, #0
    tmp_Value -= 10U;
 8006c44:	f1a8 080a 	sub.w	r8, r8, #10
 8006c48:	fa5f f888 	uxtb.w	r8, r8
  while (tmp_Value >= 10U)
 8006c4c:	f1b8 0f09 	cmp.w	r8, #9
    bcdhigh++;
 8006c50:	f107 0701 	add.w	r7, r7, #1
  while (tmp_Value >= 10U)
 8006c54:	d8f6      	bhi.n	8006c44 <HAL_RTC_SetAlarm_IT+0x8c>
  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006c56:	ea48 1707 	orr.w	r7, r8, r7, lsl #4
 8006c5a:	fa5f f887 	uxtb.w	r8, r7
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c5e:	f891 7024 	ldrb.w	r7, [r1, #36]	@ 0x24
  while (tmp_Value >= 10U)
 8006c62:	2f09      	cmp	r7, #9
 8006c64:	d908      	bls.n	8006c78 <HAL_RTC_SetAlarm_IT+0xc0>
    tmp_Value -= 10U;
 8006c66:	3f0a      	subs	r7, #10
 8006c68:	b2ff      	uxtb	r7, r7
  while (tmp_Value >= 10U)
 8006c6a:	2f09      	cmp	r7, #9
    bcdhigh++;
 8006c6c:	f102 0201 	add.w	r2, r2, #1
  while (tmp_Value >= 10U)
 8006c70:	d8f9      	bhi.n	8006c66 <HAL_RTC_SetAlarm_IT+0xae>
  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006c72:	ea47 1202 	orr.w	r2, r7, r2, lsl #4
 8006c76:	b2d7      	uxtb	r7, r2
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c78:	6a0a      	ldr	r2, [r1, #32]
 8006c7a:	4302      	orrs	r2, r0
 8006c7c:	4322      	orrs	r2, r4
 8006c7e:	ea42 020c 	orr.w	r2, r2, ip
 8006c82:	4313      	orrs	r3, r2
 8006c84:	ea43 0308 	orr.w	r3, r3, r8
 8006c88:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c8c:	4a3f      	ldr	r2, [pc, #252]	@ (8006d8c <HAL_RTC_SetAlarm_IT+0x1d4>)
 8006c8e:	20ca      	movs	r0, #202	@ 0xca
 8006c90:	6250      	str	r0, [r2, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006c92:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c96:	f04f 0053 	mov.w	r0, #83	@ 0x53
 8006c9a:	6250      	str	r0, [r2, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006c9c:	d06b      	beq.n	8006d76 <HAL_RTC_SetAlarm_IT+0x1be>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006c9e:	6990      	ldr	r0, [r2, #24]
 8006ca0:	f420 5008 	bic.w	r0, r0, #8704	@ 0x2200
 8006ca4:	6190      	str	r0, [r2, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006ca6:	2002      	movs	r0, #2
 8006ca8:	65d0      	str	r0, [r2, #92]	@ 0x5c
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006caa:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006cac:	64d6      	str	r6, [r2, #76]	@ 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006cae:	4b37      	ldr	r3, [pc, #220]	@ (8006d8c <HAL_RTC_SetAlarm_IT+0x1d4>)
 8006cb0:	684a      	ldr	r2, [r1, #4]
 8006cb2:	675a      	str	r2, [r3, #116]	@ 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006cb4:	f8de 2030 	ldr.w	r2, [lr, #48]	@ 0x30
 8006cb8:	f042 0202 	orr.w	r2, r2, #2
 8006cbc:	f8ce 2030 	str.w	r2, [lr, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006cc0:	699a      	ldr	r2, [r3, #24]
 8006cc2:	f442 5208 	orr.w	r2, r2, #8704	@ 0x2200
 8006cc6:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006cc8:	4a31      	ldr	r2, [pc, #196]	@ (8006d90 <HAL_RTC_SetAlarm_IT+0x1d8>)
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cca:	4930      	ldr	r1, [pc, #192]	@ (8006d8c <HAL_RTC_SetAlarm_IT+0x1d4>)
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006ccc:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8006cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_UNLOCK(hrtc);
 8006cd8:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cda:	24ff      	movs	r4, #255	@ 0xff
  hrtc->State = HAL_RTC_STATE_READY;
 8006cdc:	2301      	movs	r3, #1
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cde:	624c      	str	r4, [r1, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8006ce0:	f88e 302d 	strb.w	r3, [lr, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 8006ce4:	f88e 002c 	strb.w	r0, [lr, #44]	@ 0x2c
}
 8006ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006cec:	f1b0 3f80 	cmp.w	r0, #2155905152	@ 0x80808080
 8006cf0:	d008      	beq.n	8006d04 <HAL_RTC_SetAlarm_IT+0x14c>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006cf2:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8006cf6:	d005      	beq.n	8006d04 <HAL_RTC_SetAlarm_IT+0x14c>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006cf8:	699a      	ldr	r2, [r3, #24]
 8006cfa:	f012 0240 	ands.w	r2, r2, #64	@ 0x40
 8006cfe:	d101      	bne.n	8006d04 <HAL_RTC_SetAlarm_IT+0x14c>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006d00:	70ca      	strb	r2, [r1, #3]
 8006d02:	e001      	b.n	8006d08 <HAL_RTC_SetAlarm_IT+0x150>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006d04:	78ca      	ldrb	r2, [r1, #3]
 8006d06:	0592      	lsls	r2, r2, #22
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d08:	6a0b      	ldr	r3, [r1, #32]
 8006d0a:	4303      	orrs	r3, r0
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006d0c:	7888      	ldrb	r0, [r1, #2]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d0e:	4303      	orrs	r3, r0
 8006d10:	7808      	ldrb	r0, [r1, #0]
 8006d12:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006d16:	7848      	ldrb	r0, [r1, #1]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d18:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006d1c:	f891 0024 	ldrb.w	r0, [r1, #36]	@ 0x24
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d20:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006d24:	4313      	orrs	r3, r2
 8006d26:	e7b1      	b.n	8006c8c <HAL_RTC_SetAlarm_IT+0xd4>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d28:	22ca      	movs	r2, #202	@ 0xca
 8006d2a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006d2c:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d30:	f04f 0253 	mov.w	r2, #83	@ 0x53
 8006d34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006d36:	d008      	beq.n	8006d4a <HAL_RTC_SetAlarm_IT+0x192>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006d38:	699a      	ldr	r2, [r3, #24]
 8006d3a:	f422 5208 	bic.w	r2, r2, #8704	@ 0x2200
 8006d3e:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006d40:	65dc      	str	r4, [r3, #92]	@ 0x5c
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006d42:	69ca      	ldr	r2, [r1, #28]
 8006d44:	4332      	orrs	r2, r6
 8006d46:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006d48:	e7b1      	b.n	8006cae <HAL_RTC_SetAlarm_IT+0xf6>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006d4a:	699a      	ldr	r2, [r3, #24]
 8006d4c:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8006d50:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006d52:	65df      	str	r7, [r3, #92]	@ 0x5c
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006d54:	69ca      	ldr	r2, [r1, #28]
 8006d56:	4332      	orrs	r2, r6
 8006d58:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d8c <HAL_RTC_SetAlarm_IT+0x1d4>)
 8006d5c:	684a      	ldr	r2, [r1, #4]
 8006d5e:	671a      	str	r2, [r3, #112]	@ 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006d60:	f8de 2030 	ldr.w	r2, [lr, #48]	@ 0x30
 8006d64:	f042 0201 	orr.w	r2, r2, #1
 8006d68:	f8ce 2030 	str.w	r2, [lr, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006d6c:	699a      	ldr	r2, [r3, #24]
 8006d6e:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8006d72:	619a      	str	r2, [r3, #24]
 8006d74:	e7a8      	b.n	8006cc8 <HAL_RTC_SetAlarm_IT+0x110>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006d76:	6990      	ldr	r0, [r2, #24]
 8006d78:	f420 5088 	bic.w	r0, r0, #4352	@ 0x1100
 8006d7c:	6190      	str	r0, [r2, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006d7e:	2001      	movs	r0, #1
 8006d80:	65d0      	str	r0, [r2, #92]	@ 0x5c
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006d82:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006d84:	6456      	str	r6, [r2, #68]	@ 0x44
 8006d86:	e7e8      	b.n	8006d5a <HAL_RTC_SetAlarm_IT+0x1a2>
  __HAL_LOCK(hrtc);
 8006d88:	2002      	movs	r0, #2
}
 8006d8a:	4770      	bx	lr
 8006d8c:	40002800 	.word	0x40002800
 8006d90:	58000800 	.word	0x58000800

08006d94 <HAL_RTC_DeactivateAlarm>:
  __HAL_LOCK(hrtc);
 8006d94:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8006d98:	2a01      	cmp	r2, #1
 8006d9a:	d034      	beq.n	8006e06 <HAL_RTC_DeactivateAlarm+0x72>
{
 8006d9c:	b430      	push	{r4, r5}
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d9e:	4a1b      	ldr	r2, [pc, #108]	@ (8006e0c <HAL_RTC_DeactivateAlarm+0x78>)
  __HAL_LOCK(hrtc);
 8006da0:	2501      	movs	r5, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006da2:	2402      	movs	r4, #2
  __HAL_LOCK(hrtc);
 8006da4:	f880 502c 	strb.w	r5, [r0, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006da8:	f880 402d 	strb.w	r4, [r0, #45]	@ 0x2d
 8006dac:	4603      	mov	r3, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dae:	20ca      	movs	r0, #202	@ 0xca
 8006db0:	6250      	str	r0, [r2, #36]	@ 0x24
 8006db2:	2053      	movs	r0, #83	@ 0x53
 8006db4:	6250      	str	r0, [r2, #36]	@ 0x24
  if (Alarm == RTC_ALARM_A)
 8006db6:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006dba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006dbc:	6991      	ldr	r1, [r2, #24]
  if (Alarm == RTC_ALARM_A)
 8006dbe:	d016      	beq.n	8006dee <HAL_RTC_DeactivateAlarm+0x5a>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006dc0:	f421 5108 	bic.w	r1, r1, #8704	@ 0x2200
 8006dc4:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006dc6:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006dc8:	f020 0002 	bic.w	r0, r0, #2
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006dcc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8006dd0:	64d1      	str	r1, [r2, #76]	@ 0x4c
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006dd2:	6318      	str	r0, [r3, #48]	@ 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006dd4:	65d4      	str	r4, [r2, #92]	@ 0x5c
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dd6:	480d      	ldr	r0, [pc, #52]	@ (8006e0c <HAL_RTC_DeactivateAlarm+0x78>)
  __HAL_UNLOCK(hrtc);
 8006dd8:	2200      	movs	r2, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dda:	24ff      	movs	r4, #255	@ 0xff
  hrtc->State = HAL_RTC_STATE_READY;
 8006ddc:	2101      	movs	r1, #1
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dde:	6244      	str	r4, [r0, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8006de0:	f883 102d 	strb.w	r1, [r3, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 8006de4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  return HAL_OK;
 8006de8:	4610      	mov	r0, r2
}
 8006dea:	bc30      	pop	{r4, r5}
 8006dec:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006dee:	f421 5188 	bic.w	r1, r1, #4352	@ 0x1100
 8006df2:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006df4:	6c51      	ldr	r1, [r2, #68]	@ 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006df6:	f020 0001 	bic.w	r0, r0, #1
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006dfa:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8006dfe:	6451      	str	r1, [r2, #68]	@ 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006e00:	6318      	str	r0, [r3, #48]	@ 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006e02:	65d5      	str	r5, [r2, #92]	@ 0x5c
 8006e04:	e7e7      	b.n	8006dd6 <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 8006e06:	2002      	movs	r0, #2
}
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	40002800 	.word	0x40002800

08006e10 <HAL_RTC_AlarmIRQHandler>:
{
 8006e10:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006e12:	4b0e      	ldr	r3, [pc, #56]	@ (8006e4c <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006e14:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8006e16:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 8006e18:	4015      	ands	r5, r2
  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006e1a:	07ea      	lsls	r2, r5, #31
{
 8006e1c:	4604      	mov	r4, r0
  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006e1e:	d405      	bmi.n	8006e2c <HAL_RTC_AlarmIRQHandler+0x1c>
  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006e20:	07ab      	lsls	r3, r5, #30
 8006e22:	d409      	bmi.n	8006e38 <HAL_RTC_AlarmIRQHandler+0x28>
  hrtc->State = HAL_RTC_STATE_READY;
 8006e24:	2301      	movs	r3, #1
 8006e26:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8006e2a:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006e30:	f7fa fdf4 	bl	8001a1c <HAL_RTC_AlarmAEventCallback>
  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006e34:	07ab      	lsls	r3, r5, #30
 8006e36:	d5f5      	bpl.n	8006e24 <HAL_RTC_AlarmIRQHandler+0x14>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006e38:	4b04      	ldr	r3, [pc, #16]	@ (8006e4c <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006e3e:	4620      	mov	r0, r4
 8006e40:	f000 f9dc 	bl	80071fc <HAL_RTCEx_AlarmBEventCallback>
  hrtc->State = HAL_RTC_STATE_READY;
 8006e44:	2301      	movs	r3, #1
 8006e46:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8006e4a:	bd38      	pop	{r3, r4, r5, pc}
 8006e4c:	40002800 	.word	0x40002800

08006e50 <RTC_ExitInitMode>:
{
 8006e50:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006e52:	4c20      	ldr	r4, [pc, #128]	@ (8006ed4 <RTC_ExitInitMode+0x84>)
 8006e54:	68e3      	ldr	r3, [r4, #12]
 8006e56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e5a:	60e3      	str	r3, [r4, #12]
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006e5c:	69a3      	ldr	r3, [r4, #24]
 8006e5e:	0699      	lsls	r1, r3, #26
{
 8006e60:	4605      	mov	r5, r0
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006e62:	d412      	bmi.n	8006e8a <RTC_ExitInitMode+0x3a>
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006e64:	68e3      	ldr	r3, [r4, #12]
 8006e66:	f023 0320 	bic.w	r3, r3, #32
 8006e6a:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick();
 8006e6c:	f7fa fc20 	bl	80016b0 <HAL_GetTick>
 8006e70:	4606      	mov	r6, r0
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006e72:	e005      	b.n	8006e80 <RTC_ExitInitMode+0x30>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e74:	f7fa fc1c 	bl	80016b0 <HAL_GetTick>
 8006e78:	1b83      	subs	r3, r0, r6
 8006e7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e7e:	d824      	bhi.n	8006eca <RTC_ExitInitMode+0x7a>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006e80:	68e3      	ldr	r3, [r4, #12]
 8006e82:	069a      	lsls	r2, r3, #26
 8006e84:	d5f6      	bpl.n	8006e74 <RTC_ExitInitMode+0x24>
  HAL_StatusTypeDef status = HAL_OK;
 8006e86:	2000      	movs	r0, #0
}
 8006e88:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006e8a:	69a3      	ldr	r3, [r4, #24]
 8006e8c:	f023 0320 	bic.w	r3, r3, #32
 8006e90:	61a3      	str	r3, [r4, #24]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006e92:	68e3      	ldr	r3, [r4, #12]
 8006e94:	f023 0320 	bic.w	r3, r3, #32
 8006e98:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick();
 8006e9a:	f7fa fc09 	bl	80016b0 <HAL_GetTick>
 8006e9e:	4606      	mov	r6, r0
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006ea0:	e005      	b.n	8006eae <RTC_ExitInitMode+0x5e>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ea2:	f7fa fc05 	bl	80016b0 <HAL_GetTick>
 8006ea6:	1b83      	subs	r3, r0, r6
 8006ea8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006eac:	d809      	bhi.n	8006ec2 <RTC_ExitInitMode+0x72>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006eae:	68e3      	ldr	r3, [r4, #12]
 8006eb0:	069b      	lsls	r3, r3, #26
 8006eb2:	d5f6      	bpl.n	8006ea2 <RTC_ExitInitMode+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8006eb4:	2000      	movs	r0, #0
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006eb6:	4a07      	ldr	r2, [pc, #28]	@ (8006ed4 <RTC_ExitInitMode+0x84>)
 8006eb8:	6993      	ldr	r3, [r2, #24]
 8006eba:	f043 0320 	orr.w	r3, r3, #32
 8006ebe:	6193      	str	r3, [r2, #24]
}
 8006ec0:	bd70      	pop	{r4, r5, r6, pc}
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ec2:	2003      	movs	r0, #3
 8006ec4:	f885 002d 	strb.w	r0, [r5, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006ec8:	e7f5      	b.n	8006eb6 <RTC_ExitInitMode+0x66>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006eca:	2003      	movs	r0, #3
 8006ecc:	f885 002d 	strb.w	r0, [r5, #45]	@ 0x2d
}
 8006ed0:	bd70      	pop	{r4, r5, r6, pc}
 8006ed2:	bf00      	nop
 8006ed4:	40002800 	.word	0x40002800

08006ed8 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d04b      	beq.n	8006f74 <HAL_RTC_Init+0x9c>
{
 8006edc:	b570      	push	{r4, r5, r6, lr}
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006ede:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d03e      	beq.n	8006f6a <HAL_RTC_Init+0x92>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006eec:	2302      	movs	r3, #2
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006eee:	4d32      	ldr	r5, [pc, #200]	@ (8006fb8 <HAL_RTC_Init+0xe0>)
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006ef0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006ef4:	68eb      	ldr	r3, [r5, #12]
 8006ef6:	06d8      	lsls	r0, r3, #27
 8006ef8:	d432      	bmi.n	8006f60 <HAL_RTC_Init+0x88>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006efa:	2353      	movs	r3, #83	@ 0x53
 8006efc:	22ca      	movs	r2, #202	@ 0xca
 8006efe:	626a      	str	r2, [r5, #36]	@ 0x24
 8006f00:	626b      	str	r3, [r5, #36]	@ 0x24
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006f02:	68eb      	ldr	r3, [r5, #12]
 8006f04:	0659      	lsls	r1, r3, #25
 8006f06:	d53a      	bpl.n	8006f7e <HAL_RTC_Init+0xa6>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006f08:	4d2b      	ldr	r5, [pc, #172]	@ (8006fb8 <HAL_RTC_Init+0xe0>)
 8006f0a:	69ab      	ldr	r3, [r5, #24]
 8006f0c:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006f10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f14:	61ab      	str	r3, [r5, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006f16:	6922      	ldr	r2, [r4, #16]
 8006f18:	6863      	ldr	r3, [r4, #4]
 8006f1a:	69a9      	ldr	r1, [r5, #24]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	69a2      	ldr	r2, [r4, #24]
 8006f20:	430b      	orrs	r3, r1
 8006f22:	4313      	orrs	r3, r2
 8006f24:	61ab      	str	r3, [r5, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006f26:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8006f2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f2e:	612b      	str	r3, [r5, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006f30:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	@ 0x24
 8006f34:	68ea      	ldr	r2, [r5, #12]
 8006f36:	430b      	orrs	r3, r1
 8006f38:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	60eb      	str	r3, [r5, #12]
        status = RTC_ExitInitMode(hrtc);
 8006f40:	4620      	mov	r0, r4
 8006f42:	f7ff ff85 	bl	8006e50 <RTC_ExitInitMode>
        if (status == HAL_OK)
 8006f46:	b9b8      	cbnz	r0, 8006f78 <HAL_RTC_Init+0xa0>
          MODIFY_REG(RTC->CR, \
 8006f48:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
 8006f4c:	69aa      	ldr	r2, [r5, #24]
 8006f4e:	430b      	orrs	r3, r1
 8006f50:	f022 4260 	bic.w	r2, r2, #3758096384	@ 0xe0000000
 8006f54:	6961      	ldr	r1, [r4, #20]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	430b      	orrs	r3, r1
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f5a:	22ff      	movs	r2, #255	@ 0xff
          MODIFY_REG(RTC->CR, \
 8006f5c:	61ab      	str	r3, [r5, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f5e:	626a      	str	r2, [r5, #36]	@ 0x24
      hrtc->State = HAL_RTC_STATE_READY;
 8006f60:	2301      	movs	r3, #1
 8006f62:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8006f66:	2000      	movs	r0, #0
}
 8006f68:	bd70      	pop	{r4, r5, r6, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8006f6a:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
      HAL_RTC_MspInit(hrtc);
 8006f6e:	f7fa f9a9 	bl	80012c4 <HAL_RTC_MspInit>
 8006f72:	e7bb      	b.n	8006eec <HAL_RTC_Init+0x14>
  HAL_StatusTypeDef status = HAL_ERROR;
 8006f74:	2001      	movs	r0, #1
}
 8006f76:	4770      	bx	lr
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f78:	23ff      	movs	r3, #255	@ 0xff
 8006f7a:	626b      	str	r3, [r5, #36]	@ 0x24
}
 8006f7c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006f7e:	68eb      	ldr	r3, [r5, #12]
 8006f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f84:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8006f86:	f7fa fb93 	bl	80016b0 <HAL_GetTick>
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006f8a:	68eb      	ldr	r3, [r5, #12]
 8006f8c:	065a      	lsls	r2, r3, #25
    tickstart = HAL_GetTick();
 8006f8e:	4606      	mov	r6, r0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006f90:	d4ba      	bmi.n	8006f08 <HAL_RTC_Init+0x30>
 8006f92:	e002      	b.n	8006f9a <HAL_RTC_Init+0xc2>
 8006f94:	68eb      	ldr	r3, [r5, #12]
 8006f96:	065b      	lsls	r3, r3, #25
 8006f98:	d4b6      	bmi.n	8006f08 <HAL_RTC_Init+0x30>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006f9a:	f7fa fb89 	bl	80016b0 <HAL_GetTick>
 8006f9e:	1b80      	subs	r0, r0, r6
 8006fa0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006fa4:	d9f6      	bls.n	8006f94 <HAL_RTC_Init+0xbc>
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006fa6:	4b04      	ldr	r3, [pc, #16]	@ (8006fb8 <HAL_RTC_Init+0xe0>)
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006fa8:	2003      	movs	r0, #3
 8006faa:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fae:	22ff      	movs	r2, #255	@ 0xff
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006fb0:	68d9      	ldr	r1, [r3, #12]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fb2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006fb4:	bd70      	pop	{r4, r5, r6, pc}
 8006fb6:	bf00      	nop
 8006fb8:	40002800 	.word	0x40002800

08006fbc <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                       - This feature is meaningful in case of Low power mode to avoid any RTC software execution after Wake Up.
  *                         That is why when WakeUpAutoClr is set, EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
{
 8006fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc0:	4605      	mov	r5, r0
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006fc2:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8006fc6:	2801      	cmp	r0, #1
 8006fc8:	d060      	beq.n	800708c <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
 8006fca:	461f      	mov	r7, r3
 8006fcc:	2301      	movs	r3, #1
 8006fce:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fd2:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007094 <HAL_RTCEx_SetWakeUpTimer_IT+0xd8>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fdc:	23ca      	movs	r3, #202	@ 0xca
 8006fde:	f8ca 3024 	str.w	r3, [sl, #36]	@ 0x24
 8006fe2:	2353      	movs	r3, #83	@ 0x53
 8006fe4:	f8ca 3024 	str.w	r3, [sl, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8006fe8:	f8da 3018 	ldr.w	r3, [sl, #24]
 8006fec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ff0:	f8ca 3018 	str.w	r3, [sl, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8006ff4:	2304      	movs	r3, #4
 8006ff6:	f8ca 305c 	str.w	r3, [sl, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006ffa:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006ffe:	065b      	lsls	r3, r3, #25
 8007000:	460e      	mov	r6, r1
 8007002:	4690      	mov	r8, r2
 8007004:	d528      	bpl.n	8007058 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8007006:	4a23      	ldr	r2, [pc, #140]	@ (8007094 <HAL_RTCEx_SetWakeUpTimer_IT+0xd8>)
 8007008:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 800700c:	6156      	str	r6, [r2, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 800700e:	6993      	ldr	r3, [r2, #24]
 8007010:	f023 0307 	bic.w	r3, r3, #7
 8007014:	ea43 0308 	orr.w	r3, r3, r8
 8007018:	6193      	str	r3, [r2, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 800701a:	b9af      	cbnz	r7, 8007048 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800701c:	4a1e      	ldr	r2, [pc, #120]	@ (8007098 <HAL_RTCEx_SetWakeUpTimer_IT+0xdc>)
 800701e:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8007022:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007026:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 800702a:	4b1a      	ldr	r3, [pc, #104]	@ (8007094 <HAL_RTCEx_SetWakeUpTimer_IT+0xd8>)
 800702c:	699a      	ldr	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800702e:	21ff      	movs	r1, #255	@ 0xff
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8007030:	f442 4288 	orr.w	r2, r2, #17408	@ 0x4400
 8007034:	619a      	str	r2, [r3, #24]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007036:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007038:	6259      	str	r1, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800703a:	2301      	movs	r3, #1
 800703c:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 8007040:	f885 002c 	strb.w	r0, [r5, #44]	@ 0x2c

  return HAL_OK;
}
 8007044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8007048:	4a13      	ldr	r2, [pc, #76]	@ (8007098 <HAL_RTCEx_SetWakeUpTimer_IT+0xdc>)
 800704a:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
 800704e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007052:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 8007056:	e7e8      	b.n	800702a <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
    tickstart = HAL_GetTick();
 8007058:	f7fa fb2a 	bl	80016b0 <HAL_GetTick>
 800705c:	4681      	mov	r9, r0
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 800705e:	f8da 400c 	ldr.w	r4, [sl, #12]
 8007062:	f014 0404 	ands.w	r4, r4, #4
 8007066:	d1ce      	bne.n	8007006 <HAL_RTCEx_SetWakeUpTimer_IT+0x4a>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007068:	f7fa fb22 	bl	80016b0 <HAL_GetTick>
 800706c:	eba0 0c09 	sub.w	ip, r0, r9
 8007070:	f5bc 7f7a 	cmp.w	ip, #1000	@ 0x3e8
 8007074:	d9f3      	bls.n	800705e <HAL_RTCEx_SetWakeUpTimer_IT+0xa2>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007076:	2303      	movs	r3, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007078:	22ff      	movs	r2, #255	@ 0xff
 800707a:	f8ca 2024 	str.w	r2, [sl, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800707e:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
        __HAL_UNLOCK(hrtc);
 8007082:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8007086:	4618      	mov	r0, r3
}
 8007088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hrtc);
 800708c:	2002      	movs	r0, #2
}
 800708e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007092:	bf00      	nop
 8007094:	40002800 	.word	0x40002800
 8007098:	58000800 	.word	0x58000800

0800709c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800709e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d031      	beq.n	800710a <HAL_RTCEx_DeactivateWakeUpTimer+0x6e>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070a6:	4d1a      	ldr	r5, [pc, #104]	@ (8007110 <HAL_RTCEx_DeactivateWakeUpTimer+0x74>)
  hrtc->State = HAL_RTC_STATE_BUSY;
 80070a8:	2302      	movs	r3, #2
 80070aa:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
  __HAL_LOCK(hrtc);
 80070ae:	2101      	movs	r1, #1
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070b0:	22ca      	movs	r2, #202	@ 0xca
 80070b2:	2353      	movs	r3, #83	@ 0x53
  __HAL_LOCK(hrtc);
 80070b4:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070b8:	626a      	str	r2, [r5, #36]	@ 0x24
 80070ba:	626b      	str	r3, [r5, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 80070bc:	69ab      	ldr	r3, [r5, #24]
 80070be:	f423 4388 	bic.w	r3, r3, #17408	@ 0x4400
 80070c2:	61ab      	str	r3, [r5, #24]
 80070c4:	4607      	mov	r7, r0

  tickstart = HAL_GetTick();
 80070c6:	f7fa faf3 	bl	80016b0 <HAL_GetTick>
 80070ca:	4606      	mov	r6, r0
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80070cc:	e005      	b.n	80070da <HAL_RTCEx_DeactivateWakeUpTimer+0x3e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80070ce:	f7fa faef 	bl	80016b0 <HAL_GetTick>
 80070d2:	1b83      	subs	r3, r0, r6
 80070d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80070d8:	d80e      	bhi.n	80070f8 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80070da:	68ec      	ldr	r4, [r5, #12]
 80070dc:	f014 0404 	ands.w	r4, r4, #4
 80070e0:	d0f5      	beq.n	80070ce <HAL_RTCEx_DeactivateWakeUpTimer+0x32>
      return HAL_TIMEOUT;
    }
  }

  /* Clear wakeup timer flag */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80070e2:	2204      	movs	r2, #4

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070e4:	23ff      	movs	r3, #255	@ 0xff
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80070e6:	65ea      	str	r2, [r5, #92]	@ 0x5c

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070e8:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070ea:	626b      	str	r3, [r5, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80070ec:	2301      	movs	r3, #1
 80070ee:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 80070f2:	f887 002c 	strb.w	r0, [r7, #44]	@ 0x2c

  return HAL_OK;
}
 80070f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070fa:	22ff      	movs	r2, #255	@ 0xff
 80070fc:	626a      	str	r2, [r5, #36]	@ 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80070fe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
      __HAL_UNLOCK(hrtc);
 8007102:	f887 402c 	strb.w	r4, [r7, #44]	@ 0x2c
      return HAL_TIMEOUT;
 8007106:	4618      	mov	r0, r3
}
 8007108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 800710a:	2002      	movs	r0, #2
}
 800710c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800710e:	bf00      	nop
 8007110:	40002800 	.word	0x40002800

08007114 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8007114:	4b08      	ldr	r3, [pc, #32]	@ (8007138 <HAL_RTCEx_WakeUpTimerIRQHandler+0x24>)
 8007116:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007118:	0752      	lsls	r2, r2, #29
{
 800711a:	b510      	push	{r4, lr}
 800711c:	4604      	mov	r4, r0
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 800711e:	d403      	bmi.n	8007128 <HAL_RTCEx_WakeUpTimerIRQHandler+0x14>
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007120:	2301      	movs	r3, #1
 8007122:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8007126:	bd10      	pop	{r4, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8007128:	2204      	movs	r2, #4
 800712a:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800712c:	f7f9 fe46 	bl	8000dbc <HAL_RTCEx_WakeUpTimerEventCallback>
  hrtc->State = HAL_RTC_STATE_READY;
 8007130:	2301      	movs	r3, #1
 8007132:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8007136:	bd10      	pop	{r4, pc}
 8007138:	40002800 	.word	0x40002800

0800713c <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800713c:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8007140:	2a01      	cmp	r2, #1
{
 8007142:	4603      	mov	r3, r0
  __HAL_LOCK(hrtc);
 8007144:	d017      	beq.n	8007176 <HAL_RTCEx_EnableBypassShadow+0x3a>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007146:	4a0d      	ldr	r2, [pc, #52]	@ (800717c <HAL_RTCEx_EnableBypassShadow+0x40>)
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007148:	f04f 0c02 	mov.w	ip, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800714c:	20ca      	movs	r0, #202	@ 0xca
 800714e:	2153      	movs	r1, #83	@ 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007150:	f883 c02d 	strb.w	ip, [r3, #45]	@ 0x2d
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007154:	6250      	str	r0, [r2, #36]	@ 0x24
 8007156:	6251      	str	r1, [r2, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007158:	6991      	ldr	r1, [r2, #24]
 800715a:	f041 0120 	orr.w	r1, r1, #32
 800715e:	6191      	str	r1, [r2, #24]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007160:	f04f 0c00 	mov.w	ip, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007164:	20ff      	movs	r0, #255	@ 0xff
  hrtc->State = HAL_RTC_STATE_READY;
 8007166:	2101      	movs	r1, #1
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007168:	6250      	str	r0, [r2, #36]	@ 0x24

  return HAL_OK;
 800716a:	4660      	mov	r0, ip
  hrtc->State = HAL_RTC_STATE_READY;
 800716c:	f883 102d 	strb.w	r1, [r3, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 8007170:	f883 c02c 	strb.w	ip, [r3, #44]	@ 0x2c
  return HAL_OK;
 8007174:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8007176:	2002      	movs	r0, #2
}
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	40002800 	.word	0x40002800

08007180 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007180:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8007184:	2b01      	cmp	r3, #1
 8007186:	d01e      	beq.n	80071c6 <HAL_RTCEx_SetSSRU_IT+0x46>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007188:	4b10      	ldr	r3, [pc, #64]	@ (80071cc <HAL_RTCEx_SetSSRU_IT+0x4c>)
{
 800718a:	b430      	push	{r4, r5}
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800718c:	21ca      	movs	r1, #202	@ 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800718e:	2402      	movs	r4, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007190:	2253      	movs	r2, #83	@ 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007192:	f880 402d 	strb.w	r4, [r0, #45]	@ 0x2d
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007196:	6259      	str	r1, [r3, #36]	@ 0x24
 8007198:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800719a:	699a      	ldr	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800719c:	4c0c      	ldr	r4, [pc, #48]	@ (80071d0 <HAL_RTCEx_SetSSRU_IT+0x50>)
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800719e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80071a2:	619a      	str	r2, [r3, #24]
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80071a4:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071a8:	25ff      	movs	r5, #255	@ 0xff
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80071aa:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
 80071ae:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071b2:	2200      	movs	r2, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071b4:	625d      	str	r5, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80071b6:	2301      	movs	r3, #1
 80071b8:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 80071bc:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c

  return HAL_OK;
}
 80071c0:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80071c2:	4610      	mov	r0, r2
}
 80071c4:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80071c6:	2002      	movs	r0, #2
}
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	40002800 	.word	0x40002800
 80071d0:	58000800 	.word	0x58000800

080071d4 <HAL_RTCEx_SSRUIRQHandler>:
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80071d4:	4b08      	ldr	r3, [pc, #32]	@ (80071f8 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80071d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80071d8:	0652      	lsls	r2, r2, #25
{
 80071da:	b510      	push	{r4, lr}
 80071dc:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80071de:	d403      	bmi.n	80071e8 <HAL_RTCEx_SSRUIRQHandler+0x14>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80071e0:	2301      	movs	r3, #1
 80071e2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 80071e6:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 80071e8:	2240      	movs	r2, #64	@ 0x40
 80071ea:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80071ec:	f7fa fc18 	bl	8001a20 <HAL_RTCEx_SSRUEventCallback>
  hrtc->State = HAL_RTC_STATE_READY;
 80071f0:	2301      	movs	r3, #1
 80071f2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 80071f6:	bd10      	pop	{r4, pc}
 80071f8:	40002800 	.word	0x40002800

080071fc <HAL_RTCEx_AlarmBEventCallback>:
/**
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop

08007200 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8007200:	0089      	lsls	r1, r1, #2
 8007202:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8007206:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800720a:	600a      	str	r2, [r1, #0]
}
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop

08007210 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8007210:	0089      	lsls	r1, r1, #2
 8007212:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8007216:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800721a:	6808      	ldr	r0, [r1, #0]
}
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop

08007220 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007220:	2800      	cmp	r0, #0
 8007222:	f000 8094 	beq.w	800734e <HAL_SPI_Init+0x12e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007226:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 8007228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800722c:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800722e:	2a00      	cmp	r2, #0
 8007230:	d05a      	beq.n	80072e8 <HAL_SPI_Init+0xc8>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007232:	2300      	movs	r3, #0
 8007234:	e9c0 3304 	strd	r3, r3, [r0, #16]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007238:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 800723c:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8007240:	2b00      	cmp	r3, #0
 8007242:	d05c      	beq.n	80072fe <HAL_SPI_Init+0xde>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007244:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007246:	68e5      	ldr	r5, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8007248:	2302      	movs	r3, #2
 800724a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 800724e:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007250:	f5b5 6fe0 	cmp.w	r5, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 8007254:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007258:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800725a:	d857      	bhi.n	800730c <HAL_SPI_Init+0xec>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800725c:	d16b      	bne.n	8007336 <HAL_SPI_Init+0x116>
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800725e:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007260:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007264:	f406 5700 	and.w	r7, r6, #8192	@ 0x2000
 8007268:	6863      	ldr	r3, [r4, #4]
 800726a:	f8d4 9020 	ldr.w	r9, [r4, #32]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800726e:	f002 0e10 	and.w	lr, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007272:	68a2      	ldr	r2, [r4, #8]
 8007274:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8007278:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 800727c:	4313      	orrs	r3, r2
 800727e:	6922      	ldr	r2, [r4, #16]
 8007280:	f002 0202 	and.w	r2, r2, #2
 8007284:	4313      	orrs	r3, r2
 8007286:	6962      	ldr	r2, [r4, #20]
 8007288:	f002 0201 	and.w	r2, r2, #1
 800728c:	4313      	orrs	r3, r2
 800728e:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
 8007292:	f400 7a00 	and.w	sl, r0, #512	@ 0x200
 8007296:	f002 0838 	and.w	r8, r2, #56	@ 0x38
 800729a:	ea43 030a 	orr.w	r3, r3, sl
 800729e:	f009 0980 	and.w	r9, r9, #128	@ 0x80
 80072a2:	ea43 0308 	orr.w	r3, r3, r8
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80072a6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072a8:	ea43 0309 	orr.w	r3, r3, r9
 80072ac:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80072ae:	f002 0208 	and.w	r2, r2, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072b2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80072b4:	0c00      	lsrs	r0, r0, #16
 80072b6:	f405 6370 	and.w	r3, r5, #3840	@ 0xf00
 80072ba:	f000 0004 	and.w	r0, r0, #4
 80072be:	431a      	orrs	r2, r3
 80072c0:	4302      	orrs	r2, r0
 80072c2:	ea42 020e 	orr.w	r2, r2, lr
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072c6:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80072ca:	ea42 020c 	orr.w	r2, r2, ip
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072ce:	d026      	beq.n	800731e <HAL_SPI_Init+0xfe>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80072d0:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072d2:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072d4:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80072da:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072dc:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072de:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80072e0:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d

  return HAL_OK;
}
 80072e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072e8:	6843      	ldr	r3, [r0, #4]
 80072ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072ee:	d0a3      	beq.n	8007238 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072f0:	61c2      	str	r2, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80072f2:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 80072f6:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1a2      	bne.n	8007244 <HAL_SPI_Init+0x24>
    hspi->Lock = HAL_UNLOCKED;
 80072fe:	f884 105c 	strb.w	r1, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8007302:	4620      	mov	r0, r4
 8007304:	f7fa f882 	bl	800140c <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007308:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800730a:	e79b      	b.n	8007244 <HAL_SPI_Init+0x24>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800730c:	f5b5 6f70 	cmp.w	r5, #3840	@ 0xf00
 8007310:	d11f      	bne.n	8007352 <HAL_SPI_Init+0x132>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007312:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007314:	f04f 0c00 	mov.w	ip, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007318:	f406 5700 	and.w	r7, r6, #8192	@ 0x2000
 800731c:	e7a4      	b.n	8007268 <HAL_SPI_Init+0x48>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800731e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007320:	b97b      	cbnz	r3, 8007342 <HAL_SPI_Init+0x122>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007322:	f5b5 6fe0 	cmp.w	r5, #1792	@ 0x700
 8007326:	d917      	bls.n	8007358 <HAL_SPI_Init+0x138>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8007328:	2302      	movs	r3, #2
 800732a:	6323      	str	r3, [r4, #48]	@ 0x30
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800732c:	680b      	ldr	r3, [r1, #0]
 800732e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007332:	600b      	str	r3, [r1, #0]
 8007334:	e007      	b.n	8007346 <HAL_SPI_Init+0x126>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007336:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800733a:	2700      	movs	r7, #0
 800733c:	62a7      	str	r7, [r4, #40]	@ 0x28
 800733e:	463e      	mov	r6, r7
 8007340:	e792      	b.n	8007268 <HAL_SPI_Init+0x48>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8007342:	2b02      	cmp	r3, #2
 8007344:	d0f2      	beq.n	800732c <HAL_SPI_Init+0x10c>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8007346:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007348:	604a      	str	r2, [r1, #4]
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800734a:	610b      	str	r3, [r1, #16]
 800734c:	e7c1      	b.n	80072d2 <HAL_SPI_Init+0xb2>
    return HAL_ERROR;
 800734e:	2001      	movs	r0, #1
}
 8007350:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007352:	f04f 0c00 	mov.w	ip, #0
 8007356:	e7f0      	b.n	800733a <HAL_SPI_Init+0x11a>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007358:	2301      	movs	r3, #1
 800735a:	6323      	str	r3, [r4, #48]	@ 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800735c:	e7f3      	b.n	8007346 <HAL_SPI_Init+0x126>
 800735e:	bf00      	nop

08007360 <HAL_SUBGHZ_Init>:
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007360:	2800      	cmp	r0, #0
 8007362:	d078      	beq.n	8007456 <HAL_SUBGHZ_Init+0xf6>
{
 8007364:	b510      	push	{r4, lr}
    status = HAL_OK;
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8007366:	7983      	ldrb	r3, [r0, #6]
{
 8007368:	b082      	sub	sp, #8
 800736a:	4604      	mov	r4, r0
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 800736c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007370:	b1eb      	cbz	r3, 80073ae <HAL_SUBGHZ_Init+0x4e>
 8007372:	2a03      	cmp	r2, #3
 8007374:	d063      	beq.n	800743e <HAL_SUBGHZ_Init+0xde>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007376:	4b39      	ldr	r3, [pc, #228]	@ (800745c <HAL_SUBGHZ_Init+0xfc>)
 8007378:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800737c:	619a      	str	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800737e:	4b38      	ldr	r3, [pc, #224]	@ (8007460 <HAL_SUBGHZ_Init+0x100>)
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8007380:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007382:	6819      	ldr	r1, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007384:	f442 7241 	orr.w	r2, r2, #772	@ 0x304
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007388:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800738c:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007390:	6019      	str	r1, [r3, #0]
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007392:	601a      	str	r2, [r3, #0]
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007394:	6058      	str	r0, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800739c:	601a      	str	r2, [r3, #0]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800739e:	2000      	movs	r0, #0
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80073a0:	2101      	movs	r1, #1
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80073a2:	2301      	movs	r3, #1
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80073a4:	60a0      	str	r0, [r4, #8]
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80073a6:	7121      	strb	r1, [r4, #4]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80073a8:	71a3      	strb	r3, [r4, #6]
}
 80073aa:	b002      	add	sp, #8
 80073ac:	bd10      	pop	{r4, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 80073ae:	7142      	strb	r2, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 80073b0:	f7fa f90c 	bl	80015cc <HAL_SUBGHZ_MspInit>
  SET_BIT(EXTI->IMR2, ExtiLine);
 80073b4:	492b      	ldr	r1, [pc, #172]	@ (8007464 <HAL_SUBGHZ_Init+0x104>)
 80073b6:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80073ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80073be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80073c2:	2002      	movs	r0, #2
 80073c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80073c8:	71a0      	strb	r0, [r4, #6]
 80073ca:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80073ce:	4926      	ldr	r1, [pc, #152]	@ (8007468 <HAL_SUBGHZ_Init+0x108>)
 80073d0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80073d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80073d8:	680b      	ldr	r3, [r1, #0]
 80073da:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80073de:	2164      	movs	r1, #100	@ 0x64
 80073e0:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80073e4:	fb01 f303 	mul.w	r3, r1, r3
 80073e8:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 80073ea:	9b01      	ldr	r3, [sp, #4]
 80073ec:	b1a3      	cbz	r3, 8007418 <HAL_SUBGHZ_Init+0xb8>
      count--;
 80073ee:	9b01      	ldr	r3, [sp, #4]
 80073f0:	3b01      	subs	r3, #1
 80073f2:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80073f4:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80073f8:	045b      	lsls	r3, r3, #17
 80073fa:	d4f6      	bmi.n	80073ea <HAL_SUBGHZ_Init+0x8a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80073fc:	4b17      	ldr	r3, [pc, #92]	@ (800745c <HAL_SUBGHZ_Init+0xfc>)
 80073fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007402:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007406:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800740a:	689a      	ldr	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800740c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8007410:	430a      	orrs	r2, r1
 8007412:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007414:	6199      	str	r1, [r3, #24]
  if (status == HAL_OK)
 8007416:	e7b2      	b.n	800737e <HAL_SUBGHZ_Init+0x1e>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007418:	4b10      	ldr	r3, [pc, #64]	@ (800745c <HAL_SUBGHZ_Init+0xfc>)
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800741a:	2001      	movs	r0, #1
 800741c:	60a0      	str	r0, [r4, #8]
 800741e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007422:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007426:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800742a:	689a      	ldr	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800742c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8007430:	430a      	orrs	r2, r1
 8007432:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007434:	6199      	str	r1, [r3, #24]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007436:	2301      	movs	r3, #1
 8007438:	71a3      	strb	r3, [r4, #6]
}
 800743a:	b002      	add	sp, #8
 800743c:	bd10      	pop	{r4, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 800743e:	2300      	movs	r3, #0
 8007440:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8007442:	f7fa f8c3 	bl	80015cc <HAL_SUBGHZ_MspInit>
 8007446:	4a07      	ldr	r2, [pc, #28]	@ (8007464 <HAL_SUBGHZ_Init+0x104>)
 8007448:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800744c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007450:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8007454:	e78f      	b.n	8007376 <HAL_SUBGHZ_Init+0x16>
    return status;
 8007456:	2001      	movs	r0, #1
}
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	58000400 	.word	0x58000400
 8007460:	58010000 	.word	0x58010000
 8007464:	58000800 	.word	0x58000800
 8007468:	20000010 	.word	0x20000010

0800746c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800746c:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800746e:	4c1c      	ldr	r4, [pc, #112]	@ (80074e0 <SUBGHZSPI_Transmit+0x74>)
 8007470:	6823      	ldr	r3, [r4, #0]
 8007472:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007476:	2264      	movs	r2, #100	@ 0x64
{
 8007478:	b083      	sub	sp, #12
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800747a:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800747e:	fb02 f303 	mul.w	r3, r2, r3
{
 8007482:	4684      	mov	ip, r0
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007484:	4a17      	ldr	r2, [pc, #92]	@ (80074e4 <SUBGHZSPI_Transmit+0x78>)
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007486:	9301      	str	r3, [sp, #4]
 8007488:	e005      	b.n	8007496 <SUBGHZSPI_Transmit+0x2a>
    count--;
 800748a:	9b01      	ldr	r3, [sp, #4]
 800748c:	3b01      	subs	r3, #1
 800748e:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007490:	6893      	ldr	r3, [r2, #8]
 8007492:	0798      	lsls	r0, r3, #30
 8007494:	d422      	bmi.n	80074dc <SUBGHZSPI_Transmit+0x70>
    if (count == 0U)
 8007496:	9b01      	ldr	r3, [sp, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1f6      	bne.n	800748a <SUBGHZSPI_Transmit+0x1e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800749c:	2001      	movs	r0, #1
 800749e:	f8cc 0008 	str.w	r0, [ip, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 80074a2:	4a10      	ldr	r2, [pc, #64]	@ (80074e4 <SUBGHZSPI_Transmit+0x78>)
 80074a4:	7311      	strb	r1, [r2, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80074ac:	2164      	movs	r1, #100	@ 0x64
 80074ae:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80074b2:	fb01 f303 	mul.w	r3, r1, r3
 80074b6:	9301      	str	r3, [sp, #4]
 80074b8:	e005      	b.n	80074c6 <SUBGHZSPI_Transmit+0x5a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80074ba:	9b01      	ldr	r3, [sp, #4]
 80074bc:	3b01      	subs	r3, #1
 80074be:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80074c0:	6893      	ldr	r3, [r2, #8]
 80074c2:	07db      	lsls	r3, r3, #31
 80074c4:	d405      	bmi.n	80074d2 <SUBGHZSPI_Transmit+0x66>
    if (count == 0U)
 80074c6:	9b01      	ldr	r3, [sp, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1f6      	bne.n	80074ba <SUBGHZSPI_Transmit+0x4e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80074cc:	2001      	movs	r0, #1
 80074ce:	f8cc 0008 	str.w	r0, [ip, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80074d2:	4b04      	ldr	r3, [pc, #16]	@ (80074e4 <SUBGHZSPI_Transmit+0x78>)
 80074d4:	68db      	ldr	r3, [r3, #12]

  return status;
}
 80074d6:	b003      	add	sp, #12
 80074d8:	bc10      	pop	{r4}
 80074da:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 80074dc:	2000      	movs	r0, #0
 80074de:	e7e0      	b.n	80074a2 <SUBGHZSPI_Transmit+0x36>
 80074e0:	20000010 	.word	0x20000010
 80074e4:	58010000 	.word	0x58010000

080074e8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80074e8:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80074ea:	4c1d      	ldr	r4, [pc, #116]	@ (8007560 <SUBGHZSPI_Receive+0x78>)
 80074ec:	6823      	ldr	r3, [r4, #0]
 80074ee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80074f2:	2264      	movs	r2, #100	@ 0x64
{
 80074f4:	b083      	sub	sp, #12
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80074f6:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80074fa:	fb02 f303 	mul.w	r3, r2, r3
{
 80074fe:	4684      	mov	ip, r0
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007500:	4a18      	ldr	r2, [pc, #96]	@ (8007564 <SUBGHZSPI_Receive+0x7c>)
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007502:	9301      	str	r3, [sp, #4]
 8007504:	e005      	b.n	8007512 <SUBGHZSPI_Receive+0x2a>
    count--;
 8007506:	9b01      	ldr	r3, [sp, #4]
 8007508:	3b01      	subs	r3, #1
 800750a:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800750c:	6893      	ldr	r3, [r2, #8]
 800750e:	0798      	lsls	r0, r3, #30
 8007510:	d424      	bmi.n	800755c <SUBGHZSPI_Receive+0x74>
    if (count == 0U)
 8007512:	9b01      	ldr	r3, [sp, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1f6      	bne.n	8007506 <SUBGHZSPI_Receive+0x1e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007518:	2001      	movs	r0, #1
 800751a:	f8cc 0008 	str.w	r0, [ip, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 800751e:	4a11      	ldr	r2, [pc, #68]	@ (8007564 <SUBGHZSPI_Receive+0x7c>)
 8007520:	23ff      	movs	r3, #255	@ 0xff
 8007522:	7313      	strb	r3, [r2, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007524:	6823      	ldr	r3, [r4, #0]
 8007526:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800752a:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800752e:	2464      	movs	r4, #100	@ 0x64
 8007530:	fb04 f303 	mul.w	r3, r4, r3
 8007534:	9301      	str	r3, [sp, #4]
 8007536:	e005      	b.n	8007544 <SUBGHZSPI_Receive+0x5c>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8007538:	9b01      	ldr	r3, [sp, #4]
 800753a:	3b01      	subs	r3, #1
 800753c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800753e:	6893      	ldr	r3, [r2, #8]
 8007540:	07db      	lsls	r3, r3, #31
 8007542:	d405      	bmi.n	8007550 <SUBGHZSPI_Receive+0x68>
    if (count == 0U)
 8007544:	9b01      	ldr	r3, [sp, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1f6      	bne.n	8007538 <SUBGHZSPI_Receive+0x50>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800754a:	2001      	movs	r0, #1
 800754c:	f8cc 0008 	str.w	r0, [ip, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007550:	4b04      	ldr	r3, [pc, #16]	@ (8007564 <SUBGHZSPI_Receive+0x7c>)
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	700b      	strb	r3, [r1, #0]

  return status;
}
 8007556:	b003      	add	sp, #12
 8007558:	bc10      	pop	{r4}
 800755a:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 800755c:	2000      	movs	r0, #0
 800755e:	e7de      	b.n	800751e <SUBGHZSPI_Receive+0x36>
 8007560:	20000010 	.word	0x20000010
 8007564:	58010000 	.word	0x58010000

08007568 <SUBGHZ_CheckDeviceReady>:

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007568:	4b1f      	ldr	r3, [pc, #124]	@ (80075e8 <SUBGHZ_CheckDeviceReady+0x80>)
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800756a:	7901      	ldrb	r1, [r0, #4]
    count  = SUBGHZ_NSS_LOOP_TIME;
 800756c:	681b      	ldr	r3, [r3, #0]
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800756e:	2901      	cmp	r1, #1
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007570:	eb03 0343 	add.w	r3, r3, r3, lsl #1
{
 8007574:	b082      	sub	sp, #8
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007576:	ea4f 02c3 	mov.w	r2, r3, lsl #3
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800757a:	d01d      	beq.n	80075b8 <SUBGHZ_CheckDeviceReady+0x50>
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800757c:	0d12      	lsrs	r2, r2, #20
 800757e:	2364      	movs	r3, #100	@ 0x64
 8007580:	fb03 f202 	mul.w	r2, r3, r2
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007584:	4919      	ldr	r1, [pc, #100]	@ (80075ec <SUBGHZ_CheckDeviceReady+0x84>)
 8007586:	9201      	str	r2, [sp, #4]
 8007588:	694a      	ldr	r2, [r1, #20]
  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
 800758a:	9b01      	ldr	r3, [sp, #4]
 800758c:	b173      	cbz	r3, 80075ac <SUBGHZ_CheckDeviceReady+0x44>
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
      break;
    }
    count--;
 800758e:	9b01      	ldr	r3, [sp, #4]
 8007590:	3b01      	subs	r3, #1
 8007592:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007594:	694b      	ldr	r3, [r1, #20]
 8007596:	f013 0302 	ands.w	r3, r3, #2
 800759a:	d102      	bne.n	80075a2 <SUBGHZ_CheckDeviceReady+0x3a>
}
 800759c:	4618      	mov	r0, r3
 800759e:	b002      	add	sp, #8
 80075a0:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80075a2:	f012 0204 	ands.w	r2, r2, #4
 80075a6:	d1ef      	bne.n	8007588 <SUBGHZ_CheckDeviceReady+0x20>
  status = HAL_OK;
 80075a8:	4613      	mov	r3, r2
 80075aa:	e7f7      	b.n	800759c <SUBGHZ_CheckDeviceReady+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80075ac:	2302      	movs	r3, #2
 80075ae:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	b002      	add	sp, #8
 80075b6:	4770      	bx	lr
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80075b8:	490c      	ldr	r1, [pc, #48]	@ (80075ec <SUBGHZ_CheckDeviceReady+0x84>)
    count  = SUBGHZ_NSS_LOOP_TIME;
 80075ba:	0c13      	lsrs	r3, r2, #16
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 80075c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80075c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      count--;
 80075ca:	9b00      	ldr	r3, [sp, #0]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	9300      	str	r3, [sp, #0]
    } while (count != 0UL);
 80075d0:	9b00      	ldr	r3, [sp, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1f9      	bne.n	80075ca <SUBGHZ_CheckDeviceReady+0x62>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80075d6:	4905      	ldr	r1, [pc, #20]	@ (80075ec <SUBGHZ_CheckDeviceReady+0x84>)
 80075d8:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 80075dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80075e4:	e7ca      	b.n	800757c <SUBGHZ_CheckDeviceReady+0x14>
 80075e6:	bf00      	nop
 80075e8:	20000010 	.word	0x20000010
 80075ec:	58000400 	.word	0x58000400

080075f0 <HAL_SUBGHZ_WriteBuffer>:
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80075f0:	f890 c006 	ldrb.w	ip, [r0, #6]
 80075f4:	f1bc 0f01 	cmp.w	ip, #1
 80075f8:	d156      	bne.n	80076a8 <HAL_SUBGHZ_WriteBuffer+0xb8>
{
 80075fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075fc:	4614      	mov	r4, r2
    __HAL_LOCK(hsubghz);
 80075fe:	7942      	ldrb	r2, [r0, #5]
 8007600:	2a01      	cmp	r2, #1
{
 8007602:	b083      	sub	sp, #12
 8007604:	4605      	mov	r5, r0
    __HAL_LOCK(hsubghz);
 8007606:	d043      	beq.n	8007690 <HAL_SUBGHZ_WriteBuffer+0xa0>
 8007608:	461e      	mov	r6, r3
 800760a:	fa5f f38c 	uxtb.w	r3, ip
 800760e:	7143      	strb	r3, [r0, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007610:	460f      	mov	r7, r1
 8007612:	f7ff ffa9 	bl	8007568 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007616:	4a25      	ldr	r2, [pc, #148]	@ (80076ac <HAL_SUBGHZ_WriteBuffer+0xbc>)
 8007618:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800761c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007620:	210e      	movs	r1, #14
 8007622:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007626:	4628      	mov	r0, r5
 8007628:	f7ff ff20 	bl	800746c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800762c:	4639      	mov	r1, r7
 800762e:	4628      	mov	r0, r5
 8007630:	f7ff ff1c 	bl	800746c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007634:	b13e      	cbz	r6, 8007646 <HAL_SUBGHZ_WriteBuffer+0x56>
 8007636:	4426      	add	r6, r4
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800763c:	4628      	mov	r0, r5
 800763e:	f7ff ff15 	bl	800746c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007642:	42b4      	cmp	r4, r6
 8007644:	d1f8      	bne.n	8007638 <HAL_SUBGHZ_WriteBuffer+0x48>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007646:	4a19      	ldr	r2, [pc, #100]	@ (80076ac <HAL_SUBGHZ_WriteBuffer+0xbc>)
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007648:	4819      	ldr	r0, [pc, #100]	@ (80076b0 <HAL_SUBGHZ_WriteBuffer+0xc0>)
 800764a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800764e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007652:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007656:	6803      	ldr	r3, [r0, #0]
 8007658:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800765c:	2164      	movs	r1, #100	@ 0x64
 800765e:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8007662:	fb01 f303 	mul.w	r3, r1, r3
 8007666:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007668:	6951      	ldr	r1, [r2, #20]
    if (count == 0U)
 800766a:	9b01      	ldr	r3, [sp, #4]
 800766c:	b1cb      	cbz	r3, 80076a2 <HAL_SUBGHZ_WriteBuffer+0xb2>
    count--;
 800766e:	9b01      	ldr	r3, [sp, #4]
 8007670:	3b01      	subs	r3, #1
 8007672:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007674:	6953      	ldr	r3, [r2, #20]
 8007676:	0798      	lsls	r0, r3, #30
 8007678:	d40d      	bmi.n	8007696 <HAL_SUBGHZ_WriteBuffer+0xa6>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800767a:	68a8      	ldr	r0, [r5, #8]
    __HAL_UNLOCK(hsubghz);
 800767c:	2300      	movs	r3, #0
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800767e:	1ac0      	subs	r0, r0, r3
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007680:	f04f 0201 	mov.w	r2, #1
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007684:	bf18      	it	ne
 8007686:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007688:	71aa      	strb	r2, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800768a:	716b      	strb	r3, [r5, #5]
}
 800768c:	b003      	add	sp, #12
 800768e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hsubghz);
 8007690:	2002      	movs	r0, #2
}
 8007692:	b003      	add	sp, #12
 8007694:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007696:	074b      	lsls	r3, r1, #29
 8007698:	d5ef      	bpl.n	800767a <HAL_SUBGHZ_WriteBuffer+0x8a>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800769a:	6951      	ldr	r1, [r2, #20]
    if (count == 0U)
 800769c:	9b01      	ldr	r3, [sp, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e5      	bne.n	800766e <HAL_SUBGHZ_WriteBuffer+0x7e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80076a2:	2302      	movs	r3, #2
 80076a4:	60ab      	str	r3, [r5, #8]
      break;
 80076a6:	e7e8      	b.n	800767a <HAL_SUBGHZ_WriteBuffer+0x8a>
    __HAL_LOCK(hsubghz);
 80076a8:	2002      	movs	r0, #2
}
 80076aa:	4770      	bx	lr
 80076ac:	58000400 	.word	0x58000400
 80076b0:	20000010 	.word	0x20000010

080076b4 <HAL_SUBGHZ_ReadBuffer>:
{
 80076b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076b6:	461e      	mov	r6, r3
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80076b8:	7983      	ldrb	r3, [r0, #6]
 80076ba:	2b01      	cmp	r3, #1
{
 80076bc:	b083      	sub	sp, #12
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80076be:	d14a      	bne.n	8007756 <HAL_SUBGHZ_ReadBuffer+0xa2>
 80076c0:	4614      	mov	r4, r2
 80076c2:	b2da      	uxtb	r2, r3
    __HAL_LOCK(hsubghz);
 80076c4:	7943      	ldrb	r3, [r0, #5]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	4605      	mov	r5, r0
 80076ca:	d044      	beq.n	8007756 <HAL_SUBGHZ_ReadBuffer+0xa2>
 80076cc:	7142      	strb	r2, [r0, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80076ce:	460f      	mov	r7, r1
 80076d0:	f7ff ff4a 	bl	8007568 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80076d4:	4a26      	ldr	r2, [pc, #152]	@ (8007770 <HAL_SUBGHZ_ReadBuffer+0xbc>)
 80076d6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80076da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80076de:	211e      	movs	r1, #30
 80076e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80076e4:	4628      	mov	r0, r5
 80076e6:	f7ff fec1 	bl	800746c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80076ea:	4639      	mov	r1, r7
 80076ec:	4628      	mov	r0, r5
 80076ee:	f7ff febd 	bl	800746c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80076f2:	2100      	movs	r1, #0
 80076f4:	4628      	mov	r0, r5
 80076f6:	f7ff feb9 	bl	800746c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80076fa:	b13e      	cbz	r6, 800770c <HAL_SUBGHZ_ReadBuffer+0x58>
 80076fc:	4426      	add	r6, r4
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80076fe:	4621      	mov	r1, r4
 8007700:	4628      	mov	r0, r5
      pData++;
 8007702:	3401      	adds	r4, #1
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007704:	f7ff fef0 	bl	80074e8 <SUBGHZSPI_Receive>
    for (uint16_t i = 0U; i < Size; i++)
 8007708:	42b4      	cmp	r4, r6
 800770a:	d1f8      	bne.n	80076fe <HAL_SUBGHZ_ReadBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800770c:	4a18      	ldr	r2, [pc, #96]	@ (8007770 <HAL_SUBGHZ_ReadBuffer+0xbc>)
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800770e:	4819      	ldr	r0, [pc, #100]	@ (8007774 <HAL_SUBGHZ_ReadBuffer+0xc0>)
 8007710:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007714:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800771c:	6803      	ldr	r3, [r0, #0]
 800771e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007722:	2164      	movs	r1, #100	@ 0x64
 8007724:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8007728:	fb01 f303 	mul.w	r3, r1, r3
 800772c:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800772e:	6951      	ldr	r1, [r2, #20]
    if (count == 0U)
 8007730:	9b01      	ldr	r3, [sp, #4]
 8007732:	b1cb      	cbz	r3, 8007768 <HAL_SUBGHZ_ReadBuffer+0xb4>
    count--;
 8007734:	9b01      	ldr	r3, [sp, #4]
 8007736:	3b01      	subs	r3, #1
 8007738:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800773a:	6953      	ldr	r3, [r2, #20]
 800773c:	0798      	lsls	r0, r3, #30
 800773e:	d40d      	bmi.n	800775c <HAL_SUBGHZ_ReadBuffer+0xa8>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007740:	68a8      	ldr	r0, [r5, #8]
    __HAL_UNLOCK(hsubghz);
 8007742:	2300      	movs	r3, #0
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007744:	1ac0      	subs	r0, r0, r3
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007746:	f04f 0201 	mov.w	r2, #1
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800774a:	bf18      	it	ne
 800774c:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800774e:	71aa      	strb	r2, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8007750:	716b      	strb	r3, [r5, #5]
}
 8007752:	b003      	add	sp, #12
 8007754:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hsubghz);
 8007756:	2002      	movs	r0, #2
}
 8007758:	b003      	add	sp, #12
 800775a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800775c:	074b      	lsls	r3, r1, #29
 800775e:	d5ef      	bpl.n	8007740 <HAL_SUBGHZ_ReadBuffer+0x8c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007760:	6951      	ldr	r1, [r2, #20]
    if (count == 0U)
 8007762:	9b01      	ldr	r3, [sp, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1e5      	bne.n	8007734 <HAL_SUBGHZ_ReadBuffer+0x80>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007768:	2302      	movs	r3, #2
 800776a:	60ab      	str	r3, [r5, #8]
      break;
 800776c:	e7e8      	b.n	8007740 <HAL_SUBGHZ_ReadBuffer+0x8c>
 800776e:	bf00      	nop
 8007770:	58000400 	.word	0x58000400
 8007774:	20000010 	.word	0x20000010

08007778 <HAL_SUBGHZ_IRQHandler>:
{
 8007778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800777c:	7983      	ldrb	r3, [r0, #6]
{
 800777e:	b085      	sub	sp, #20
  uint8_t tmpisr[2U] = {0U};
 8007780:	2500      	movs	r5, #0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007782:	2b01      	cmp	r3, #1
{
 8007784:	4604      	mov	r4, r0
  uint8_t tmpisr[2U] = {0U};
 8007786:	f8ad 5004 	strh.w	r5, [sp, #4]
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800778a:	f040 80da 	bne.w	8007942 <HAL_SUBGHZ_IRQHandler+0x1ca>
 800778e:	b2da      	uxtb	r2, r3
    __HAL_LOCK(hsubghz);
 8007790:	7943      	ldrb	r3, [r0, #5]
 8007792:	2b01      	cmp	r3, #1
 8007794:	f000 809c 	beq.w	80078d0 <HAL_SUBGHZ_IRQHandler+0x158>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007798:	4e74      	ldr	r6, [pc, #464]	@ (800796c <HAL_SUBGHZ_IRQHandler+0x1f4>)
 800779a:	7142      	strb	r2, [r0, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800779c:	f7ff fee4 	bl	8007568 <SUBGHZ_CheckDeviceReady>
 80077a0:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80077a4:	4f72      	ldr	r7, [pc, #456]	@ (8007970 <HAL_SUBGHZ_IRQHandler+0x1f8>)
 80077a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80077aa:	f8c6 3090 	str.w	r3, [r6, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80077ae:	2112      	movs	r1, #18
 80077b0:	4620      	mov	r0, r4
 80077b2:	f7ff fe5b 	bl	800746c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80077b6:	4629      	mov	r1, r5
 80077b8:	4620      	mov	r0, r4
 80077ba:	f7ff fe57 	bl	800746c <SUBGHZSPI_Transmit>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80077be:	a901      	add	r1, sp, #4
 80077c0:	4620      	mov	r0, r4
 80077c2:	f7ff fe91 	bl	80074e8 <SUBGHZSPI_Receive>
 80077c6:	f10d 0105 	add.w	r1, sp, #5
 80077ca:	4620      	mov	r0, r4
 80077cc:	f7ff fe8c 	bl	80074e8 <SUBGHZSPI_Receive>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80077d0:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 80077d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077d8:	f8c6 3090 	str.w	r3, [r6, #144]	@ 0x90
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80077e2:	2264      	movs	r2, #100	@ 0x64
 80077e4:	f3c3 434b 	ubfx	r3, r3, #17, #12
 80077e8:	fb02 f303 	mul.w	r3, r2, r3
 80077ec:	9302      	str	r3, [sp, #8]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80077ee:	6972      	ldr	r2, [r6, #20]
    if (count == 0U)
 80077f0:	9b02      	ldr	r3, [sp, #8]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 8099 	beq.w	800792a <HAL_SUBGHZ_IRQHandler+0x1b2>
    count--;
 80077f8:	9b02      	ldr	r3, [sp, #8]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	9302      	str	r3, [sp, #8]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80077fe:	6973      	ldr	r3, [r6, #20]
 8007800:	0799      	lsls	r1, r3, #30
 8007802:	f100 808a 	bmi.w	800791a <HAL_SUBGHZ_IRQHandler+0x1a2>
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007806:	2301      	movs	r3, #1
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007808:	68a2      	ldr	r2, [r4, #8]
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800780a:	71a3      	strb	r3, [r4, #6]
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800780c:	79a3      	ldrb	r3, [r4, #6]
 800780e:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    __HAL_UNLOCK(hsubghz);
 8007812:	2200      	movs	r2, #0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007814:	2b01      	cmp	r3, #1
    __HAL_UNLOCK(hsubghz);
 8007816:	7162      	strb	r2, [r4, #5]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007818:	baed      	revsh	r5, r5
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800781a:	d13b      	bne.n	8007894 <HAL_SUBGHZ_IRQHandler+0x11c>
  itsource = tmpisr[0U];
 800781c:	f89d 9004 	ldrb.w	r9, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007820:	f89d 8005 	ldrb.w	r8, [sp, #5]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007824:	4e51      	ldr	r6, [pc, #324]	@ (800796c <HAL_SUBGHZ_IRQHandler+0x1f4>)
    __HAL_LOCK(hsubghz);
 8007826:	2301      	movs	r3, #1
 8007828:	7163      	strb	r3, [r4, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800782a:	4620      	mov	r0, r4
 800782c:	f7ff fe9c 	bl	8007568 <SUBGHZ_CheckDeviceReady>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007830:	2300      	movs	r3, #0
 8007832:	7123      	strb	r3, [r4, #4]
 8007834:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8007838:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800783c:	f8c6 3090 	str.w	r3, [r6, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007840:	2102      	movs	r1, #2
 8007842:	4620      	mov	r0, r4
 8007844:	f7ff fe12 	bl	800746c <SUBGHZSPI_Transmit>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007848:	4649      	mov	r1, r9
 800784a:	4620      	mov	r0, r4
 800784c:	f7ff fe0e 	bl	800746c <SUBGHZSPI_Transmit>
 8007850:	4641      	mov	r1, r8
 8007852:	4620      	mov	r0, r4
 8007854:	f7ff fe0a 	bl	800746c <SUBGHZSPI_Transmit>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007858:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 800785c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007860:	f8c6 3090 	str.w	r3, [r6, #144]	@ 0x90
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800786a:	2264      	movs	r2, #100	@ 0x64
 800786c:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8007870:	fb02 f303 	mul.w	r3, r2, r3
 8007874:	9303      	str	r3, [sp, #12]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007876:	6972      	ldr	r2, [r6, #20]
    if (count == 0U)
 8007878:	9b03      	ldr	r3, [sp, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d05e      	beq.n	800793c <HAL_SUBGHZ_IRQHandler+0x1c4>
    count--;
 800787e:	9b03      	ldr	r3, [sp, #12]
 8007880:	3b01      	subs	r3, #1
 8007882:	9303      	str	r3, [sp, #12]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007884:	6973      	ldr	r3, [r6, #20]
 8007886:	079b      	lsls	r3, r3, #30
 8007888:	d452      	bmi.n	8007930 <HAL_SUBGHZ_IRQHandler+0x1b8>
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800788a:	2301      	movs	r3, #1
    __HAL_UNLOCK(hsubghz);
 800788c:	2200      	movs	r2, #0
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800788e:	68a1      	ldr	r1, [r4, #8]
    __HAL_UNLOCK(hsubghz);
 8007890:	7162      	strb	r2, [r4, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007892:	71a3      	strb	r3, [r4, #6]
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007894:	07e8      	lsls	r0, r5, #31
 8007896:	d41e      	bmi.n	80078d6 <HAL_SUBGHZ_IRQHandler+0x15e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007898:	07a9      	lsls	r1, r5, #30
 800789a:	d421      	bmi.n	80078e0 <HAL_SUBGHZ_IRQHandler+0x168>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800789c:	076a      	lsls	r2, r5, #29
 800789e:	d424      	bmi.n	80078ea <HAL_SUBGHZ_IRQHandler+0x172>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80078a0:	072b      	lsls	r3, r5, #28
 80078a2:	d427      	bmi.n	80078f4 <HAL_SUBGHZ_IRQHandler+0x17c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80078a4:	06ef      	lsls	r7, r5, #27
 80078a6:	d42a      	bmi.n	80078fe <HAL_SUBGHZ_IRQHandler+0x186>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80078a8:	06ae      	lsls	r6, r5, #26
 80078aa:	d42d      	bmi.n	8007908 <HAL_SUBGHZ_IRQHandler+0x190>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80078ac:	0668      	lsls	r0, r5, #25
 80078ae:	d430      	bmi.n	8007912 <HAL_SUBGHZ_IRQHandler+0x19a>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80078b0:	0629      	lsls	r1, r5, #24
 80078b2:	d506      	bpl.n	80078c2 <HAL_SUBGHZ_IRQHandler+0x14a>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80078b4:	f415 7180 	ands.w	r1, r5, #256	@ 0x100
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80078b8:	bf18      	it	ne
 80078ba:	2101      	movne	r1, #1
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80078bc:	4620      	mov	r0, r4
 80078be:	f004 f95d 	bl	800bb7c <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80078c2:	05aa      	lsls	r2, r5, #22
 80078c4:	d44d      	bmi.n	8007962 <HAL_SUBGHZ_IRQHandler+0x1ea>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80078c6:	046b      	lsls	r3, r5, #17
 80078c8:	d445      	bmi.n	8007956 <HAL_SUBGHZ_IRQHandler+0x1de>
}
 80078ca:	b005      	add	sp, #20
 80078cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80078d0:	7983      	ldrb	r3, [r0, #6]
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80078d2:	07e8      	lsls	r0, r5, #31
 80078d4:	d5e0      	bpl.n	8007898 <HAL_SUBGHZ_IRQHandler+0x120>
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80078d6:	4620      	mov	r0, r4
 80078d8:	f004 f93e 	bl	800bb58 <HAL_SUBGHZ_TxCpltCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80078dc:	07a9      	lsls	r1, r5, #30
 80078de:	d5dd      	bpl.n	800789c <HAL_SUBGHZ_IRQHandler+0x124>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80078e0:	4620      	mov	r0, r4
 80078e2:	f004 f93f 	bl	800bb64 <HAL_SUBGHZ_RxCpltCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80078e6:	076a      	lsls	r2, r5, #29
 80078e8:	d5da      	bpl.n	80078a0 <HAL_SUBGHZ_IRQHandler+0x128>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80078ea:	4620      	mov	r0, r4
 80078ec:	f004 f964 	bl	800bbb8 <HAL_SUBGHZ_PreambleDetectedCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80078f0:	072b      	lsls	r3, r5, #28
 80078f2:	d5d7      	bpl.n	80078a4 <HAL_SUBGHZ_IRQHandler+0x12c>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80078f4:	4620      	mov	r0, r4
 80078f6:	f004 f965 	bl	800bbc4 <HAL_SUBGHZ_SyncWordValidCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80078fa:	06ef      	lsls	r7, r5, #27
 80078fc:	d5d4      	bpl.n	80078a8 <HAL_SUBGHZ_IRQHandler+0x130>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80078fe:	4620      	mov	r0, r4
 8007900:	f004 f966 	bl	800bbd0 <HAL_SUBGHZ_HeaderValidCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007904:	06ae      	lsls	r6, r5, #26
 8007906:	d5d1      	bpl.n	80078ac <HAL_SUBGHZ_IRQHandler+0x134>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007908:	4620      	mov	r0, r4
 800790a:	f004 f94f 	bl	800bbac <HAL_SUBGHZ_HeaderErrorCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800790e:	0668      	lsls	r0, r5, #25
 8007910:	d5ce      	bpl.n	80078b0 <HAL_SUBGHZ_IRQHandler+0x138>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007912:	4620      	mov	r0, r4
 8007914:	f004 f92c 	bl	800bb70 <HAL_SUBGHZ_CRCErrorCallback>
 8007918:	e7ca      	b.n	80078b0 <HAL_SUBGHZ_IRQHandler+0x138>
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800791a:	0752      	lsls	r2, r2, #29
 800791c:	f57f af73 	bpl.w	8007806 <HAL_SUBGHZ_IRQHandler+0x8e>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007920:	6972      	ldr	r2, [r6, #20]
    if (count == 0U)
 8007922:	9b02      	ldr	r3, [sp, #8]
 8007924:	2b00      	cmp	r3, #0
 8007926:	f47f af67 	bne.w	80077f8 <HAL_SUBGHZ_IRQHandler+0x80>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800792a:	2302      	movs	r3, #2
 800792c:	60a3      	str	r3, [r4, #8]
      break;
 800792e:	e76a      	b.n	8007806 <HAL_SUBGHZ_IRQHandler+0x8e>
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007930:	0757      	lsls	r7, r2, #29
 8007932:	d5aa      	bpl.n	800788a <HAL_SUBGHZ_IRQHandler+0x112>
 8007934:	6972      	ldr	r2, [r6, #20]
    if (count == 0U)
 8007936:	9b03      	ldr	r3, [sp, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1a0      	bne.n	800787e <HAL_SUBGHZ_IRQHandler+0x106>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800793c:	2302      	movs	r3, #2
 800793e:	60a3      	str	r3, [r4, #8]
      break;
 8007940:	e7a3      	b.n	800788a <HAL_SUBGHZ_IRQHandler+0x112>
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007942:	7983      	ldrb	r3, [r0, #6]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d1a5      	bne.n	8007894 <HAL_SUBGHZ_IRQHandler+0x11c>
    __HAL_LOCK(hsubghz);
 8007948:	7943      	ldrb	r3, [r0, #5]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d0a2      	beq.n	8007894 <HAL_SUBGHZ_IRQHandler+0x11c>
 800794e:	4f08      	ldr	r7, [pc, #32]	@ (8007970 <HAL_SUBGHZ_IRQHandler+0x1f8>)
  itsource = (itsource << 8U) | tmpisr[1U];
 8007950:	46a8      	mov	r8, r5
  itsource = tmpisr[0U];
 8007952:	46a9      	mov	r9, r5
 8007954:	e766      	b.n	8007824 <HAL_SUBGHZ_IRQHandler+0xac>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8007956:	4620      	mov	r0, r4
 8007958:	f004 f940 	bl	800bbdc <HAL_SUBGHZ_LrFhssHopCallback>
}
 800795c:	b005      	add	sp, #20
 800795e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007962:	4620      	mov	r0, r4
 8007964:	f004 f91a 	bl	800bb9c <HAL_SUBGHZ_RxTxTimeoutCallback>
 8007968:	e7ad      	b.n	80078c6 <HAL_SUBGHZ_IRQHandler+0x14e>
 800796a:	bf00      	nop
 800796c:	58000400 	.word	0x58000400
 8007970:	20000010 	.word	0x20000010

08007974 <HAL_SUBGHZ_ExecGetCmd>:
{
 8007974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007976:	461e      	mov	r6, r3
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007978:	7983      	ldrb	r3, [r0, #6]
 800797a:	2b01      	cmp	r3, #1
{
 800797c:	b083      	sub	sp, #12
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800797e:	d146      	bne.n	8007a0e <HAL_SUBGHZ_ExecGetCmd+0x9a>
 8007980:	4614      	mov	r4, r2
 8007982:	b2da      	uxtb	r2, r3
    __HAL_LOCK(hsubghz);
 8007984:	7943      	ldrb	r3, [r0, #5]
 8007986:	2b01      	cmp	r3, #1
 8007988:	4605      	mov	r5, r0
 800798a:	d040      	beq.n	8007a0e <HAL_SUBGHZ_ExecGetCmd+0x9a>
 800798c:	7142      	strb	r2, [r0, #5]
 800798e:	460f      	mov	r7, r1
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007990:	f7ff fdea 	bl	8007568 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007994:	4a24      	ldr	r2, [pc, #144]	@ (8007a28 <HAL_SUBGHZ_ExecGetCmd+0xb4>)
 8007996:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800799a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800799e:	4639      	mov	r1, r7
 80079a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80079a4:	4628      	mov	r0, r5
 80079a6:	f7ff fd61 	bl	800746c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80079aa:	2100      	movs	r1, #0
 80079ac:	4628      	mov	r0, r5
 80079ae:	f7ff fd5d 	bl	800746c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80079b2:	b13e      	cbz	r6, 80079c4 <HAL_SUBGHZ_ExecGetCmd+0x50>
 80079b4:	4426      	add	r6, r4
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80079b6:	4621      	mov	r1, r4
 80079b8:	4628      	mov	r0, r5
      pData++;
 80079ba:	3401      	adds	r4, #1
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80079bc:	f7ff fd94 	bl	80074e8 <SUBGHZSPI_Receive>
    for (uint16_t i = 0U; i < Size; i++)
 80079c0:	42b4      	cmp	r4, r6
 80079c2:	d1f8      	bne.n	80079b6 <HAL_SUBGHZ_ExecGetCmd+0x42>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80079c4:	4a18      	ldr	r2, [pc, #96]	@ (8007a28 <HAL_SUBGHZ_ExecGetCmd+0xb4>)
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80079c6:	4819      	ldr	r0, [pc, #100]	@ (8007a2c <HAL_SUBGHZ_ExecGetCmd+0xb8>)
 80079c8:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80079cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80079d4:	6803      	ldr	r3, [r0, #0]
 80079d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80079da:	2164      	movs	r1, #100	@ 0x64
 80079dc:	f3c3 434b 	ubfx	r3, r3, #17, #12
 80079e0:	fb01 f303 	mul.w	r3, r1, r3
 80079e4:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80079e6:	6951      	ldr	r1, [r2, #20]
    if (count == 0U)
 80079e8:	9b01      	ldr	r3, [sp, #4]
 80079ea:	b1cb      	cbz	r3, 8007a20 <HAL_SUBGHZ_ExecGetCmd+0xac>
    count--;
 80079ec:	9b01      	ldr	r3, [sp, #4]
 80079ee:	3b01      	subs	r3, #1
 80079f0:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80079f2:	6953      	ldr	r3, [r2, #20]
 80079f4:	0798      	lsls	r0, r3, #30
 80079f6:	d40d      	bmi.n	8007a14 <HAL_SUBGHZ_ExecGetCmd+0xa0>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80079f8:	68a8      	ldr	r0, [r5, #8]
    __HAL_UNLOCK(hsubghz);
 80079fa:	2300      	movs	r3, #0
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80079fc:	1ac0      	subs	r0, r0, r3
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80079fe:	f04f 0201 	mov.w	r2, #1
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007a02:	bf18      	it	ne
 8007a04:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007a06:	71aa      	strb	r2, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8007a08:	716b      	strb	r3, [r5, #5]
}
 8007a0a:	b003      	add	sp, #12
 8007a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hsubghz);
 8007a0e:	2002      	movs	r0, #2
}
 8007a10:	b003      	add	sp, #12
 8007a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007a14:	074b      	lsls	r3, r1, #29
 8007a16:	d5ef      	bpl.n	80079f8 <HAL_SUBGHZ_ExecGetCmd+0x84>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007a18:	6951      	ldr	r1, [r2, #20]
    if (count == 0U)
 8007a1a:	9b01      	ldr	r3, [sp, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1e5      	bne.n	80079ec <HAL_SUBGHZ_ExecGetCmd+0x78>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007a20:	2302      	movs	r3, #2
 8007a22:	60ab      	str	r3, [r5, #8]
      break;
 8007a24:	e7e8      	b.n	80079f8 <HAL_SUBGHZ_ExecGetCmd+0x84>
 8007a26:	bf00      	nop
 8007a28:	58000400 	.word	0x58000400
 8007a2c:	20000010 	.word	0x20000010

08007a30 <HAL_SUBGHZ_ExecSetCmd>:
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007a30:	f890 c006 	ldrb.w	ip, [r0, #6]
 8007a34:	f1bc 0f01 	cmp.w	ip, #1
 8007a38:	d15c      	bne.n	8007af4 <HAL_SUBGHZ_ExecSetCmd+0xc4>
{
 8007a3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a3c:	4614      	mov	r4, r2
    __HAL_LOCK(hsubghz);
 8007a3e:	7942      	ldrb	r2, [r0, #5]
 8007a40:	2a01      	cmp	r2, #1
{
 8007a42:	b083      	sub	sp, #12
 8007a44:	4605      	mov	r5, r0
    __HAL_LOCK(hsubghz);
 8007a46:	d049      	beq.n	8007adc <HAL_SUBGHZ_ExecSetCmd+0xac>
 8007a48:	461e      	mov	r6, r3
 8007a4a:	fa5f f38c 	uxtb.w	r3, ip
 8007a4e:	460f      	mov	r7, r1
 8007a50:	7143      	strb	r3, [r0, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007a52:	f7ff fd89 	bl	8007568 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007a56:	f007 03ef 	and.w	r3, r7, #239	@ 0xef
 8007a5a:	f1a3 0384 	sub.w	r3, r3, #132	@ 0x84
 8007a5e:	fab3 f383 	clz	r3, r3
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007a62:	4a25      	ldr	r2, [pc, #148]	@ (8007af8 <HAL_SUBGHZ_ExecSetCmd+0xc8>)
 8007a64:	095b      	lsrs	r3, r3, #5
 8007a66:	712b      	strb	r3, [r5, #4]
 8007a68:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007a6c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007a70:	4639      	mov	r1, r7
 8007a72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007a76:	4628      	mov	r0, r5
 8007a78:	f7ff fcf8 	bl	800746c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007a7c:	b13e      	cbz	r6, 8007a8e <HAL_SUBGHZ_ExecSetCmd+0x5e>
 8007a7e:	4426      	add	r6, r4
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a84:	4628      	mov	r0, r5
 8007a86:	f7ff fcf1 	bl	800746c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007a8a:	42a6      	cmp	r6, r4
 8007a8c:	d1f8      	bne.n	8007a80 <HAL_SUBGHZ_ExecSetCmd+0x50>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8007af8 <HAL_SUBGHZ_ExecSetCmd+0xc8>)
 8007a90:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
    if (Command != RADIO_SET_SLEEP)
 8007a94:	2f84      	cmp	r7, #132	@ 0x84
 8007a96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007a9e:	d012      	beq.n	8007ac6 <HAL_SUBGHZ_ExecSetCmd+0x96>
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007aa0:	4b16      	ldr	r3, [pc, #88]	@ (8007afc <HAL_SUBGHZ_ExecSetCmd+0xcc>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007aa8:	2164      	movs	r1, #100	@ 0x64
 8007aaa:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8007aae:	fb01 f303 	mul.w	r3, r1, r3
 8007ab2:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007ab4:	6951      	ldr	r1, [r2, #20]
    if (count == 0U)
 8007ab6:	9b01      	ldr	r3, [sp, #4]
 8007ab8:	b1cb      	cbz	r3, 8007aee <HAL_SUBGHZ_ExecSetCmd+0xbe>
    count--;
 8007aba:	9b01      	ldr	r3, [sp, #4]
 8007abc:	3b01      	subs	r3, #1
 8007abe:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007ac0:	6953      	ldr	r3, [r2, #20]
 8007ac2:	0798      	lsls	r0, r3, #30
 8007ac4:	d40d      	bmi.n	8007ae2 <HAL_SUBGHZ_ExecSetCmd+0xb2>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007ac6:	68a8      	ldr	r0, [r5, #8]
    __HAL_UNLOCK(hsubghz);
 8007ac8:	2300      	movs	r3, #0
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007aca:	1ac0      	subs	r0, r0, r3
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007acc:	f04f 0201 	mov.w	r2, #1
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007ad0:	bf18      	it	ne
 8007ad2:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007ad4:	71aa      	strb	r2, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8007ad6:	716b      	strb	r3, [r5, #5]
}
 8007ad8:	b003      	add	sp, #12
 8007ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hsubghz);
 8007adc:	2002      	movs	r0, #2
}
 8007ade:	b003      	add	sp, #12
 8007ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007ae2:	074b      	lsls	r3, r1, #29
 8007ae4:	d5ef      	bpl.n	8007ac6 <HAL_SUBGHZ_ExecSetCmd+0x96>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007ae6:	6951      	ldr	r1, [r2, #20]
    if (count == 0U)
 8007ae8:	9b01      	ldr	r3, [sp, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1e5      	bne.n	8007aba <HAL_SUBGHZ_ExecSetCmd+0x8a>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007aee:	2302      	movs	r3, #2
 8007af0:	60ab      	str	r3, [r5, #8]
      break;
 8007af2:	e7e8      	b.n	8007ac6 <HAL_SUBGHZ_ExecSetCmd+0x96>
    __HAL_LOCK(hsubghz);
 8007af4:	2002      	movs	r0, #2
}
 8007af6:	4770      	bx	lr
 8007af8:	58000400 	.word	0x58000400
 8007afc:	20000010 	.word	0x20000010

08007b00 <HAL_SUBGHZ_WriteRegisters>:
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007b00:	f890 c006 	ldrb.w	ip, [r0, #6]
 8007b04:	f1bc 0f01 	cmp.w	ip, #1
 8007b08:	d15c      	bne.n	8007bc4 <HAL_SUBGHZ_WriteRegisters+0xc4>
{
 8007b0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b0c:	4614      	mov	r4, r2
    __HAL_LOCK(hsubghz);
 8007b0e:	7942      	ldrb	r2, [r0, #5]
 8007b10:	2a01      	cmp	r2, #1
{
 8007b12:	b083      	sub	sp, #12
 8007b14:	4605      	mov	r5, r0
    __HAL_LOCK(hsubghz);
 8007b16:	d049      	beq.n	8007bac <HAL_SUBGHZ_WriteRegisters+0xac>
 8007b18:	461e      	mov	r6, r3
 8007b1a:	fa5f f38c 	uxtb.w	r3, ip
 8007b1e:	7143      	strb	r3, [r0, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007b20:	2302      	movs	r3, #2
 8007b22:	7183      	strb	r3, [r0, #6]
 8007b24:	460f      	mov	r7, r1
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007b26:	f7ff fd1f 	bl	8007568 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007b2a:	4a27      	ldr	r2, [pc, #156]	@ (8007bc8 <HAL_SUBGHZ_WriteRegisters+0xc8>)
 8007b2c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007b30:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007b34:	210d      	movs	r1, #13
 8007b36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	f7ff fc96 	bl	800746c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007b40:	0a39      	lsrs	r1, r7, #8
 8007b42:	4628      	mov	r0, r5
 8007b44:	f7ff fc92 	bl	800746c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007b48:	b2f9      	uxtb	r1, r7
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	f7ff fc8e 	bl	800746c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007b50:	b13e      	cbz	r6, 8007b62 <HAL_SUBGHZ_WriteRegisters+0x62>
 8007b52:	4426      	add	r6, r4
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f7ff fc87 	bl	800746c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007b5e:	42b4      	cmp	r4, r6
 8007b60:	d1f8      	bne.n	8007b54 <HAL_SUBGHZ_WriteRegisters+0x54>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007b62:	4a19      	ldr	r2, [pc, #100]	@ (8007bc8 <HAL_SUBGHZ_WriteRegisters+0xc8>)
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007b64:	4819      	ldr	r0, [pc, #100]	@ (8007bcc <HAL_SUBGHZ_WriteRegisters+0xcc>)
 8007b66:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007b6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007b72:	6803      	ldr	r3, [r0, #0]
 8007b74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007b78:	2164      	movs	r1, #100	@ 0x64
 8007b7a:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8007b7e:	fb01 f303 	mul.w	r3, r1, r3
 8007b82:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007b84:	6951      	ldr	r1, [r2, #20]
    if (count == 0U)
 8007b86:	9b01      	ldr	r3, [sp, #4]
 8007b88:	b1cb      	cbz	r3, 8007bbe <HAL_SUBGHZ_WriteRegisters+0xbe>
    count--;
 8007b8a:	9b01      	ldr	r3, [sp, #4]
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007b90:	6953      	ldr	r3, [r2, #20]
 8007b92:	0798      	lsls	r0, r3, #30
 8007b94:	d40d      	bmi.n	8007bb2 <HAL_SUBGHZ_WriteRegisters+0xb2>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007b96:	68a8      	ldr	r0, [r5, #8]
    __HAL_UNLOCK(hsubghz);
 8007b98:	2300      	movs	r3, #0
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007b9a:	1ac0      	subs	r0, r0, r3
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007b9c:	f04f 0201 	mov.w	r2, #1
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007ba0:	bf18      	it	ne
 8007ba2:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007ba4:	71aa      	strb	r2, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8007ba6:	716b      	strb	r3, [r5, #5]
}
 8007ba8:	b003      	add	sp, #12
 8007baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hsubghz);
 8007bac:	2002      	movs	r0, #2
}
 8007bae:	b003      	add	sp, #12
 8007bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007bb2:	074b      	lsls	r3, r1, #29
 8007bb4:	d5ef      	bpl.n	8007b96 <HAL_SUBGHZ_WriteRegisters+0x96>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007bb6:	6951      	ldr	r1, [r2, #20]
    if (count == 0U)
 8007bb8:	9b01      	ldr	r3, [sp, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1e5      	bne.n	8007b8a <HAL_SUBGHZ_WriteRegisters+0x8a>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	60ab      	str	r3, [r5, #8]
      break;
 8007bc2:	e7e8      	b.n	8007b96 <HAL_SUBGHZ_WriteRegisters+0x96>
    __HAL_LOCK(hsubghz);
 8007bc4:	2002      	movs	r0, #2
}
 8007bc6:	4770      	bx	lr
 8007bc8:	58000400 	.word	0x58000400
 8007bcc:	20000010 	.word	0x20000010

08007bd0 <HAL_SUBGHZ_ReadRegisters>:
{
 8007bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bd2:	461e      	mov	r6, r3
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007bd4:	7983      	ldrb	r3, [r0, #6]
 8007bd6:	2b01      	cmp	r3, #1
{
 8007bd8:	b083      	sub	sp, #12
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007bda:	d14e      	bne.n	8007c7a <HAL_SUBGHZ_ReadRegisters+0xaa>
 8007bdc:	4614      	mov	r4, r2
 8007bde:	b2da      	uxtb	r2, r3
    __HAL_LOCK(hsubghz);
 8007be0:	7943      	ldrb	r3, [r0, #5]
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	4605      	mov	r5, r0
 8007be6:	d048      	beq.n	8007c7a <HAL_SUBGHZ_ReadRegisters+0xaa>
 8007be8:	7142      	strb	r2, [r0, #5]
 8007bea:	460f      	mov	r7, r1
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007bec:	f7ff fcbc 	bl	8007568 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007bf0:	4a28      	ldr	r2, [pc, #160]	@ (8007c94 <HAL_SUBGHZ_ReadRegisters+0xc4>)
 8007bf2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007bf6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007bfa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007bfe:	211d      	movs	r1, #29
 8007c00:	4628      	mov	r0, r5
 8007c02:	f7ff fc33 	bl	800746c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007c06:	0a39      	lsrs	r1, r7, #8
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f7ff fc2f 	bl	800746c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007c0e:	b2f9      	uxtb	r1, r7
 8007c10:	4628      	mov	r0, r5
 8007c12:	f7ff fc2b 	bl	800746c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007c16:	2100      	movs	r1, #0
 8007c18:	4628      	mov	r0, r5
 8007c1a:	f7ff fc27 	bl	800746c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007c1e:	b13e      	cbz	r6, 8007c30 <HAL_SUBGHZ_ReadRegisters+0x60>
 8007c20:	4426      	add	r6, r4
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007c22:	4621      	mov	r1, r4
 8007c24:	4628      	mov	r0, r5
      pData++;
 8007c26:	3401      	adds	r4, #1
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007c28:	f7ff fc5e 	bl	80074e8 <SUBGHZSPI_Receive>
    for (uint16_t i = 0U; i < Size; i++)
 8007c2c:	42b4      	cmp	r4, r6
 8007c2e:	d1f8      	bne.n	8007c22 <HAL_SUBGHZ_ReadRegisters+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007c30:	4a18      	ldr	r2, [pc, #96]	@ (8007c94 <HAL_SUBGHZ_ReadRegisters+0xc4>)
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007c32:	4819      	ldr	r0, [pc, #100]	@ (8007c98 <HAL_SUBGHZ_ReadRegisters+0xc8>)
 8007c34:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007c38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007c40:	6803      	ldr	r3, [r0, #0]
 8007c42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007c46:	2164      	movs	r1, #100	@ 0x64
 8007c48:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8007c4c:	fb01 f303 	mul.w	r3, r1, r3
 8007c50:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007c52:	6951      	ldr	r1, [r2, #20]
    if (count == 0U)
 8007c54:	9b01      	ldr	r3, [sp, #4]
 8007c56:	b1cb      	cbz	r3, 8007c8c <HAL_SUBGHZ_ReadRegisters+0xbc>
    count--;
 8007c58:	9b01      	ldr	r3, [sp, #4]
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007c5e:	6953      	ldr	r3, [r2, #20]
 8007c60:	0798      	lsls	r0, r3, #30
 8007c62:	d40d      	bmi.n	8007c80 <HAL_SUBGHZ_ReadRegisters+0xb0>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007c64:	68a8      	ldr	r0, [r5, #8]
    __HAL_UNLOCK(hsubghz);
 8007c66:	2300      	movs	r3, #0
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007c68:	1ac0      	subs	r0, r0, r3
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007c6a:	f04f 0201 	mov.w	r2, #1
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007c6e:	bf18      	it	ne
 8007c70:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007c72:	71aa      	strb	r2, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8007c74:	716b      	strb	r3, [r5, #5]
}
 8007c76:	b003      	add	sp, #12
 8007c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hsubghz);
 8007c7a:	2002      	movs	r0, #2
}
 8007c7c:	b003      	add	sp, #12
 8007c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007c80:	074b      	lsls	r3, r1, #29
 8007c82:	d5ef      	bpl.n	8007c64 <HAL_SUBGHZ_ReadRegisters+0x94>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007c84:	6951      	ldr	r1, [r2, #20]
    if (count == 0U)
 8007c86:	9b01      	ldr	r3, [sp, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e5      	bne.n	8007c58 <HAL_SUBGHZ_ReadRegisters+0x88>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	60ab      	str	r3, [r5, #8]
      break;
 8007c90:	e7e8      	b.n	8007c64 <HAL_SUBGHZ_ReadRegisters+0x94>
 8007c92:	bf00      	nop
 8007c94:	58000400 	.word	0x58000400
 8007c98:	20000010 	.word	0x20000010

08007c9c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	d05d      	beq.n	8007d5c <HAL_TIM_Base_Init+0xc0>
{
 8007ca0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ca2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d047      	beq.n	8007d40 <HAL_TIM_Base_Init+0xa4>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cb0:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cb2:	4e31      	ldr	r6, [pc, #196]	@ (8007d78 <HAL_TIM_Base_Init+0xdc>)

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cb4:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cb6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cb8:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8007cba:	2302      	movs	r3, #2
 8007cbc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cc0:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8007cc2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cc4:	d02b      	beq.n	8007d1e <HAL_TIM_Base_Init+0x82>
 8007cc6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8007cca:	d03e      	beq.n	8007d4a <HAL_TIM_Base_Init+0xae>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ccc:	4e2b      	ldr	r6, [pc, #172]	@ (8007d7c <HAL_TIM_Base_Init+0xe0>)
 8007cce:	42b2      	cmp	r2, r6
 8007cd0:	d046      	beq.n	8007d60 <HAL_TIM_Base_Init+0xc4>
 8007cd2:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8007cd6:	42b2      	cmp	r2, r6
 8007cd8:	d025      	beq.n	8007d26 <HAL_TIM_Base_Init+0x8a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cde:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007ce0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ce2:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007ce4:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cea:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cee:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8007cf2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8007cf6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8007cfa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8007cfe:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d06:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8007d0a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8007d0e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8007d12:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007d16:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8007d1a:	2000      	movs	r0, #0
}
 8007d1c:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8007d1e:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8007d24:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d26:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d2c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d32:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007d34:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d36:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007d38:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007d3a:	6963      	ldr	r3, [r4, #20]
 8007d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d3e:	e7d2      	b.n	8007ce6 <HAL_TIM_Base_Init+0x4a>
    htim->Lock = HAL_UNLOCKED;
 8007d40:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007d44:	f7f9 fd12 	bl	800176c <HAL_TIM_Base_MspInit>
 8007d48:	e7b2      	b.n	8007cb0 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8007d4a:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8007d50:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d52:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d58:	4333      	orrs	r3, r6
 8007d5a:	e7be      	b.n	8007cda <HAL_TIM_Base_Init+0x3e>
    return HAL_ERROR;
 8007d5c:	2001      	movs	r0, #1
}
 8007d5e:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d60:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d66:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d6c:	431d      	orrs	r5, r3
  TIMx->CR1 = tmpcr1;
 8007d6e:	6015      	str	r5, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d70:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007d72:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d74:	e7e1      	b.n	8007d3a <HAL_TIM_Base_Init+0x9e>
 8007d76:	bf00      	nop
 8007d78:	40012c00 	.word	0x40012c00
 8007d7c:	40014400 	.word	0x40014400

08007d80 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007d80:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d073      	beq.n	8007e70 <HAL_TIM_ConfigClockSource+0xf0>
 8007d88:	4602      	mov	r2, r0
{
 8007d8a:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8007d8c:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8007d8e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007d90:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8007d94:	2001      	movs	r0, #1
 8007d96:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8007d9a:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d9c:	4b50      	ldr	r3, [pc, #320]	@ (8007ee0 <HAL_TIM_ConfigClockSource+0x160>)
 8007d9e:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8007da0:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8007da2:	680b      	ldr	r3, [r1, #0]
 8007da4:	2b60      	cmp	r3, #96	@ 0x60
 8007da6:	d065      	beq.n	8007e74 <HAL_TIM_ConfigClockSource+0xf4>
 8007da8:	d826      	bhi.n	8007df8 <HAL_TIM_ConfigClockSource+0x78>
 8007daa:	2b40      	cmp	r3, #64	@ 0x40
 8007dac:	d07d      	beq.n	8007eaa <HAL_TIM_ConfigClockSource+0x12a>
 8007dae:	d94c      	bls.n	8007e4a <HAL_TIM_ConfigClockSource+0xca>
 8007db0:	2b50      	cmp	r3, #80	@ 0x50
 8007db2:	d119      	bne.n	8007de8 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 8007db4:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007db6:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007db8:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dba:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8007dbe:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dc0:	6a23      	ldr	r3, [r4, #32]
 8007dc2:	f023 0301 	bic.w	r3, r3, #1
 8007dc6:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dc8:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dce:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dd2:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8007dd4:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dd6:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dd8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007ddc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007de0:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007de4:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007de6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007de8:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8007dea:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8007dec:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007df0:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8007df4:	bc30      	pop	{r4, r5}
 8007df6:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8007df8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dfc:	d0f3      	beq.n	8007de6 <HAL_TIM_ConfigClockSource+0x66>
 8007dfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e02:	d110      	bne.n	8007e26 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e04:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8007e08:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e0a:	432b      	orrs	r3, r5
 8007e0c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e0e:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e12:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8007e16:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e18:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e1a:	68a3      	ldr	r3, [r4, #8]
 8007e1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007e20:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007e22:	2000      	movs	r0, #0
 8007e24:	e7e0      	b.n	8007de8 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8007e26:	2b70      	cmp	r3, #112	@ 0x70
 8007e28:	d1de      	bne.n	8007de8 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e2a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8007e2e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e30:	432b      	orrs	r3, r5
 8007e32:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e34:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e38:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8007e3c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8007e3e:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8007e40:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e42:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8007e46:	60a3      	str	r3, [r4, #8]
      break;
 8007e48:	e7cd      	b.n	8007de6 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8007e4a:	2b20      	cmp	r3, #32
 8007e4c:	d002      	beq.n	8007e54 <HAL_TIM_ConfigClockSource+0xd4>
 8007e4e:	d90b      	bls.n	8007e68 <HAL_TIM_ConfigClockSource+0xe8>
 8007e50:	2b30      	cmp	r3, #48	@ 0x30
 8007e52:	d1c9      	bne.n	8007de8 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8007e54:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e56:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8007e5a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e5e:	4319      	orrs	r1, r3
 8007e60:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 8007e64:	60a1      	str	r1, [r4, #8]
}
 8007e66:	e7be      	b.n	8007de6 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8007e68:	f033 0110 	bics.w	r1, r3, #16
 8007e6c:	d1bc      	bne.n	8007de8 <HAL_TIM_ConfigClockSource+0x68>
 8007e6e:	e7f1      	b.n	8007e54 <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 8007e70:	2002      	movs	r0, #2
}
 8007e72:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e74:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 8007e76:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007e78:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e7a:	f023 0310 	bic.w	r3, r3, #16
 8007e7e:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e80:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8007e82:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e84:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e88:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e8c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e90:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8007e94:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8007e96:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8007e98:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e9a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ea2:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8007ea6:	60a3      	str	r3, [r4, #8]
}
 8007ea8:	e79d      	b.n	8007de6 <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 8007eaa:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007eac:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8007eae:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007eb0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8007eb4:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007eb6:	6a23      	ldr	r3, [r4, #32]
 8007eb8:	f023 0301 	bic.w	r3, r3, #1
 8007ebc:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ebe:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ec0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ec4:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007ec8:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8007eca:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8007ecc:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ece:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ed6:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8007eda:	60a3      	str	r3, [r4, #8]
}
 8007edc:	e783      	b.n	8007de6 <HAL_TIM_ConfigClockSource+0x66>
 8007ede:	bf00      	nop
 8007ee0:	ffce0088 	.word	0xffce0088

08007ee4 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop

08007ee8 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop

08007eec <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop

08007ef0 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop

08007ef4 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop

08007ef8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ef8:	6803      	ldr	r3, [r0, #0]
 8007efa:	691a      	ldr	r2, [r3, #16]
 8007efc:	0791      	lsls	r1, r2, #30
{
 8007efe:	b510      	push	{r4, lr}
 8007f00:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f02:	d502      	bpl.n	8007f0a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f04:	68da      	ldr	r2, [r3, #12]
 8007f06:	0792      	lsls	r2, r2, #30
 8007f08:	d468      	bmi.n	8007fdc <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f0a:	691a      	ldr	r2, [r3, #16]
 8007f0c:	0752      	lsls	r2, r2, #29
 8007f0e:	d502      	bpl.n	8007f16 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f10:	68da      	ldr	r2, [r3, #12]
 8007f12:	0750      	lsls	r0, r2, #29
 8007f14:	d44f      	bmi.n	8007fb6 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f16:	691a      	ldr	r2, [r3, #16]
 8007f18:	0711      	lsls	r1, r2, #28
 8007f1a:	d502      	bpl.n	8007f22 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f1c:	68da      	ldr	r2, [r3, #12]
 8007f1e:	0712      	lsls	r2, r2, #28
 8007f20:	d437      	bmi.n	8007f92 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f22:	691a      	ldr	r2, [r3, #16]
 8007f24:	06d0      	lsls	r0, r2, #27
 8007f26:	d502      	bpl.n	8007f2e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f28:	68da      	ldr	r2, [r3, #12]
 8007f2a:	06d1      	lsls	r1, r2, #27
 8007f2c:	d41e      	bmi.n	8007f6c <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f2e:	691a      	ldr	r2, [r3, #16]
 8007f30:	07d2      	lsls	r2, r2, #31
 8007f32:	d502      	bpl.n	8007f3a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f34:	68da      	ldr	r2, [r3, #12]
 8007f36:	07d0      	lsls	r0, r2, #31
 8007f38:	d469      	bmi.n	800800e <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f3a:	691a      	ldr	r2, [r3, #16]
 8007f3c:	0611      	lsls	r1, r2, #24
 8007f3e:	d502      	bpl.n	8007f46 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f40:	68da      	ldr	r2, [r3, #12]
 8007f42:	0612      	lsls	r2, r2, #24
 8007f44:	d46b      	bmi.n	800801e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007f46:	691a      	ldr	r2, [r3, #16]
 8007f48:	05d0      	lsls	r0, r2, #23
 8007f4a:	d502      	bpl.n	8007f52 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f4c:	68da      	ldr	r2, [r3, #12]
 8007f4e:	0611      	lsls	r1, r2, #24
 8007f50:	d46d      	bmi.n	800802e <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f52:	691a      	ldr	r2, [r3, #16]
 8007f54:	0652      	lsls	r2, r2, #25
 8007f56:	d502      	bpl.n	8007f5e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f58:	68da      	ldr	r2, [r3, #12]
 8007f5a:	0650      	lsls	r0, r2, #25
 8007f5c:	d46f      	bmi.n	800803e <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f5e:	691a      	ldr	r2, [r3, #16]
 8007f60:	0691      	lsls	r1, r2, #26
 8007f62:	d502      	bpl.n	8007f6a <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f64:	68da      	ldr	r2, [r3, #12]
 8007f66:	0692      	lsls	r2, r2, #26
 8007f68:	d449      	bmi.n	8007ffe <HAL_TIM_IRQHandler+0x106>
}
 8007f6a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f6c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f70:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f72:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f74:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f76:	69db      	ldr	r3, [r3, #28]
 8007f78:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007f7c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f7e:	d16f      	bne.n	8008060 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f80:	f7ff ffb2 	bl	8007ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f84:	4620      	mov	r0, r4
 8007f86:	f7ff ffb3 	bl	8007ef0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f8a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f8c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f8e:	7722      	strb	r2, [r4, #28]
 8007f90:	e7cd      	b.n	8007f2e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f92:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f96:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f98:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f9a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8007fa0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fa2:	d15a      	bne.n	800805a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fa4:	f7ff ffa0 	bl	8007ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f7ff ffa1 	bl	8007ef0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fae:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007fb0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fb2:	7722      	strb	r2, [r4, #28]
 8007fb4:	e7b5      	b.n	8007f22 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fb6:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fba:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fbc:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fbe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007fc6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fc8:	d144      	bne.n	8008054 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fca:	f7ff ff8d 	bl	8007ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f7ff ff8e 	bl	8007ef0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fd4:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fd6:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fd8:	7722      	strb	r2, [r4, #28]
 8007fda:	e79c      	b.n	8007f16 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fdc:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fe0:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fe2:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fe4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	0799      	lsls	r1, r3, #30
 8007fea:	d130      	bne.n	800804e <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fec:	f7ff ff7c 	bl	8007ee8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f7ff ff7d 	bl	8007ef0 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ff6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ff8:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ffa:	7722      	strb	r2, [r4, #28]
 8007ffc:	e785      	b.n	8007f0a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ffe:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8008002:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008004:	611a      	str	r2, [r3, #16]
}
 8008006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800800a:	f000 b85f 	b.w	80080cc <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800800e:	f06f 0201 	mvn.w	r2, #1
 8008012:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008014:	4620      	mov	r0, r4
 8008016:	f7ff ff65 	bl	8007ee4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800801a:	6823      	ldr	r3, [r4, #0]
 800801c:	e78d      	b.n	8007f3a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800801e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008022:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008024:	4620      	mov	r0, r4
 8008026:	f000 f853 	bl	80080d0 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800802a:	6823      	ldr	r3, [r4, #0]
 800802c:	e78b      	b.n	8007f46 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800802e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008032:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008034:	4620      	mov	r0, r4
 8008036:	f000 f84d 	bl	80080d4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800803a:	6823      	ldr	r3, [r4, #0]
 800803c:	e789      	b.n	8007f52 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800803e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008042:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008044:	4620      	mov	r0, r4
 8008046:	f7ff ff55 	bl	8007ef4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	e787      	b.n	8007f5e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800804e:	f7ff ff4d 	bl	8007eec <HAL_TIM_IC_CaptureCallback>
 8008052:	e7d0      	b.n	8007ff6 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8008054:	f7ff ff4a 	bl	8007eec <HAL_TIM_IC_CaptureCallback>
 8008058:	e7bc      	b.n	8007fd4 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800805a:	f7ff ff47 	bl	8007eec <HAL_TIM_IC_CaptureCallback>
 800805e:	e7a6      	b.n	8007fae <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8008060:	f7ff ff44 	bl	8007eec <HAL_TIM_IC_CaptureCallback>
 8008064:	e791      	b.n	8007f8a <HAL_TIM_IRQHandler+0x92>
 8008066:	bf00      	nop

08008068 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008068:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800806c:	2a01      	cmp	r2, #1
 800806e:	d028      	beq.n	80080c2 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
{
 8008070:	b470      	push	{r4, r5, r6}
 8008072:	4603      	mov	r3, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008074:	4d14      	ldr	r5, [pc, #80]	@ (80080c8 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
  tmpcr2 = htim->Instance->CR2;
 8008076:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8008078:	2202      	movs	r2, #2
 800807a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800807e:	42a8      	cmp	r0, r5
  tmpcr2 = htim->Instance->CR2;
 8008080:	6842      	ldr	r2, [r0, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008082:	680e      	ldr	r6, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8008084:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008086:	d00e      	beq.n	80080a6 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  tmpcr2 &= ~TIM_CR2_MMS;
 8008088:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800808c:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800808e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8008092:	6042      	str	r2, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008094:	d00f      	beq.n	80080b6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8008096:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008098:	2201      	movs	r2, #1
 800809a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800809e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80080a2:	bc70      	pop	{r4, r5, r6}
 80080a4:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80080a6:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080a8:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80080ac:	432a      	orrs	r2, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 80080ae:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080b2:	4332      	orrs	r2, r6
  htim->Instance->CR2 = tmpcr2;
 80080b4:	6042      	str	r2, [r0, #4]
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080b6:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080b8:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080bc:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 80080be:	6084      	str	r4, [r0, #8]
 80080c0:	e7e9      	b.n	8008096 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  __HAL_LOCK(htim);
 80080c2:	2002      	movs	r0, #2
}
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	40012c00 	.word	0x40012c00

080080cc <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop

080080d0 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop

080080d4 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop

080080d8 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080d8:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 80080dc:	2b20      	cmp	r3, #32
 80080de:	d152      	bne.n	8008186 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80080e0:	b101      	cbz	r1, 80080e4 <HAL_UART_Receive_IT+0xc>
 80080e2:	b90a      	cbnz	r2, 80080e8 <HAL_UART_Receive_IT+0x10>
    {
      return HAL_ERROR;
 80080e4:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 80080e6:	4770      	bx	lr
{
 80080e8:	b430      	push	{r4, r5}
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80080ea:	6803      	ldr	r3, [r0, #0]
 80080ec:	4c52      	ldr	r4, [pc, #328]	@ (8008238 <HAL_UART_Receive_IT+0x160>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ee:	2500      	movs	r5, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80080f0:	42a3      	cmp	r3, r4
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080f2:	66c5      	str	r5, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80080f4:	d00a      	beq.n	800810c <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080f6:	685c      	ldr	r4, [r3, #4]
 80080f8:	0224      	lsls	r4, r4, #8
 80080fa:	d507      	bpl.n	800810c <HAL_UART_Receive_IT+0x34>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fc:	e853 4f00 	ldrex	r4, [r3]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008100:	f044 6480 	orr.w	r4, r4, #67108864	@ 0x4000000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008104:	e843 4500 	strex	r5, r4, [r3]
 8008108:	2d00      	cmp	r5, #0
 800810a:	d1f7      	bne.n	80080fc <HAL_UART_Receive_IT+0x24>
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800810c:	6885      	ldr	r5, [r0, #8]
  huart->pRxBuffPtr  = pData;
 800810e:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxISR       = NULL;
 8008110:	2400      	movs	r4, #0
  UART_MASK_COMPUTATION(huart);
 8008112:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
  huart->RxXferSize  = Size;
 8008116:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800811a:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800811e:	6744      	str	r4, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8008120:	d048      	beq.n	80081b4 <HAL_UART_Receive_IT+0xdc>
 8008122:	2d00      	cmp	r5, #0
 8008124:	d164      	bne.n	80081f0 <HAL_UART_Receive_IT+0x118>
 8008126:	6901      	ldr	r1, [r0, #16]
 8008128:	2900      	cmp	r1, #0
 800812a:	bf14      	ite	ne
 800812c:	247f      	movne	r4, #127	@ 0x7f
 800812e:	24ff      	moveq	r4, #255	@ 0xff

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008130:	2100      	movs	r1, #0
 8008132:	f8c0 1090 	str.w	r1, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008136:	2122      	movs	r1, #34	@ 0x22
  UART_MASK_COMPUTATION(huart);
 8008138:	f8a0 4060 	strh.w	r4, [r0, #96]	@ 0x60
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800813c:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008140:	f103 0108 	add.w	r1, r3, #8
 8008144:	e851 1f00 	ldrex	r1, [r1]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008148:	f041 0101 	orr.w	r1, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814c:	f103 0508 	add.w	r5, r3, #8
 8008150:	e845 1400 	strex	r4, r1, [r5]
 8008154:	2c00      	cmp	r4, #0
 8008156:	d1f3      	bne.n	8008140 <HAL_UART_Receive_IT+0x68>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008158:	6e41      	ldr	r1, [r0, #100]	@ 0x64
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800815a:	6885      	ldr	r5, [r0, #8]
 800815c:	6904      	ldr	r4, [r0, #16]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800815e:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8008162:	d02e      	beq.n	80081c2 <HAL_UART_Receive_IT+0xea>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008164:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8008168:	d00f      	beq.n	800818a <HAL_UART_Receive_IT+0xb2>
 800816a:	4a34      	ldr	r2, [pc, #208]	@ (800823c <HAL_UART_Receive_IT+0x164>)
 800816c:	6742      	str	r2, [r0, #116]	@ 0x74
    {
      huart->RxISR = UART_RxISR_8BIT;
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800816e:	b184      	cbz	r4, 8008192 <HAL_UART_Receive_IT+0xba>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008170:	e853 2f00 	ldrex	r2, [r3]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008174:	f442 7290 	orr.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008178:	e843 2100 	strex	r1, r2, [r3]
 800817c:	2900      	cmp	r1, #0
 800817e:	d1f7      	bne.n	8008170 <HAL_UART_Receive_IT+0x98>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8008180:	2000      	movs	r0, #0
}
 8008182:	bc30      	pop	{r4, r5}
 8008184:	4770      	bx	lr
    return HAL_BUSY;
 8008186:	2002      	movs	r0, #2
 8008188:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800818a:	2c00      	cmp	r4, #0
 800818c:	d14d      	bne.n	800822a <HAL_UART_Receive_IT+0x152>
 800818e:	4a2c      	ldr	r2, [pc, #176]	@ (8008240 <HAL_UART_Receive_IT+0x168>)
 8008190:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008192:	e853 2f00 	ldrex	r2, [r3]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008196:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819a:	e843 2100 	strex	r1, r2, [r3]
 800819e:	2900      	cmp	r1, #0
 80081a0:	d0ee      	beq.n	8008180 <HAL_UART_Receive_IT+0xa8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a2:	e853 2f00 	ldrex	r2, [r3]
 80081a6:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081aa:	e843 2100 	strex	r1, r2, [r3]
 80081ae:	2900      	cmp	r1, #0
 80081b0:	d1ef      	bne.n	8008192 <HAL_UART_Receive_IT+0xba>
 80081b2:	e7e5      	b.n	8008180 <HAL_UART_Receive_IT+0xa8>
  UART_MASK_COMPUTATION(huart);
 80081b4:	6901      	ldr	r1, [r0, #16]
 80081b6:	2900      	cmp	r1, #0
 80081b8:	f240 14ff 	movw	r4, #511	@ 0x1ff
 80081bc:	bf18      	it	ne
 80081be:	24ff      	movne	r4, #255	@ 0xff
 80081c0:	e7b6      	b.n	8008130 <HAL_UART_Receive_IT+0x58>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80081c2:	f8b0 1068 	ldrh.w	r1, [r0, #104]	@ 0x68
 80081c6:	4291      	cmp	r1, r2
 80081c8:	d8cc      	bhi.n	8008164 <HAL_UART_Receive_IT+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081ca:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80081ce:	d018      	beq.n	8008202 <HAL_UART_Receive_IT+0x12a>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80081d0:	4a1c      	ldr	r2, [pc, #112]	@ (8008244 <HAL_UART_Receive_IT+0x16c>)
 80081d2:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80081d4:	b9c4      	cbnz	r4, 8008208 <HAL_UART_Receive_IT+0x130>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d6:	f103 0208 	add.w	r2, r3, #8
 80081da:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80081de:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e2:	f103 0008 	add.w	r0, r3, #8
 80081e6:	e840 2100 	strex	r1, r2, [r0]
 80081ea:	2900      	cmp	r1, #0
 80081ec:	d1f3      	bne.n	80081d6 <HAL_UART_Receive_IT+0xfe>
 80081ee:	e7c7      	b.n	8008180 <HAL_UART_Receive_IT+0xa8>
  UART_MASK_COMPUTATION(huart);
 80081f0:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
 80081f4:	d19c      	bne.n	8008130 <HAL_UART_Receive_IT+0x58>
 80081f6:	6901      	ldr	r1, [r0, #16]
 80081f8:	2900      	cmp	r1, #0
 80081fa:	bf14      	ite	ne
 80081fc:	243f      	movne	r4, #63	@ 0x3f
 80081fe:	247f      	moveq	r4, #127	@ 0x7f
 8008200:	e796      	b.n	8008130 <HAL_UART_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008202:	b1ac      	cbz	r4, 8008230 <HAL_UART_Receive_IT+0x158>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008204:	4a0f      	ldr	r2, [pc, #60]	@ (8008244 <HAL_UART_Receive_IT+0x16c>)
 8008206:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008208:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800820c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008210:	e843 2100 	strex	r1, r2, [r3]
 8008214:	2900      	cmp	r1, #0
 8008216:	d0de      	beq.n	80081d6 <HAL_UART_Receive_IT+0xfe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008218:	e853 2f00 	ldrex	r2, [r3]
 800821c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008220:	e843 2100 	strex	r1, r2, [r3]
 8008224:	2900      	cmp	r1, #0
 8008226:	d1ef      	bne.n	8008208 <HAL_UART_Receive_IT+0x130>
 8008228:	e7d5      	b.n	80081d6 <HAL_UART_Receive_IT+0xfe>
 800822a:	4a04      	ldr	r2, [pc, #16]	@ (800823c <HAL_UART_Receive_IT+0x164>)
 800822c:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800822e:	e79f      	b.n	8008170 <HAL_UART_Receive_IT+0x98>
 8008230:	4a05      	ldr	r2, [pc, #20]	@ (8008248 <HAL_UART_Receive_IT+0x170>)
 8008232:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008234:	e7cf      	b.n	80081d6 <HAL_UART_Receive_IT+0xfe>
 8008236:	bf00      	nop
 8008238:	40008000 	.word	0x40008000
 800823c:	0800887d 	.word	0x0800887d
 8008240:	08008839 	.word	0x08008839
 8008244:	080088c1 	.word	0x080088c1
 8008248:	08008aa5 	.word	0x08008aa5

0800824c <HAL_UART_Transmit_DMA>:
{
 800824c:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800824e:	f8d0 6088 	ldr.w	r6, [r0, #136]	@ 0x88
 8008252:	2e20      	cmp	r6, #32
 8008254:	d124      	bne.n	80082a0 <HAL_UART_Transmit_DMA+0x54>
    if ((pData == NULL) || (Size == 0U))
 8008256:	4604      	mov	r4, r0
 8008258:	b301      	cbz	r1, 800829c <HAL_UART_Transmit_DMA+0x50>
 800825a:	4613      	mov	r3, r2
 800825c:	b1f2      	cbz	r2, 800829c <HAL_UART_Transmit_DMA+0x50>
    huart->TxXferCount = Size;
 800825e:	f8a0 2056 	strh.w	r2, [r0, #86]	@ 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008262:	2200      	movs	r2, #0
    huart->pTxBuffPtr  = pData;
 8008264:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008266:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    huart->TxXferSize  = Size;
 800826a:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    if (huart->hdmatx != NULL)
 800826e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008270:	2521      	movs	r5, #33	@ 0x21
 8008272:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008276:	6825      	ldr	r5, [r4, #0]
    if (huart->hdmatx != NULL)
 8008278:	b1a8      	cbz	r0, 80082a6 <HAL_UART_Transmit_DMA+0x5a>
      huart->hdmatx->XferAbortCallback = NULL;
 800827a:	6382      	str	r2, [r0, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800827c:	f105 0228 	add.w	r2, r5, #40	@ 0x28
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008280:	4d11      	ldr	r5, [pc, #68]	@ (80082c8 <HAL_UART_Transmit_DMA+0x7c>)
 8008282:	62c5      	str	r5, [r0, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008284:	4d11      	ldr	r5, [pc, #68]	@ (80082cc <HAL_UART_Transmit_DMA+0x80>)
 8008286:	6305      	str	r5, [r0, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008288:	4d11      	ldr	r5, [pc, #68]	@ (80082d0 <HAL_UART_Transmit_DMA+0x84>)
 800828a:	6345      	str	r5, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800828c:	f7fc fd9a 	bl	8004dc4 <HAL_DMA_Start_IT>
 8008290:	b140      	cbz	r0, 80082a4 <HAL_UART_Transmit_DMA+0x58>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008292:	2310      	movs	r3, #16
 8008294:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        huart->gState = HAL_UART_STATE_READY;
 8008298:	f8c4 6088 	str.w	r6, [r4, #136]	@ 0x88
      return HAL_ERROR;
 800829c:	2001      	movs	r0, #1
}
 800829e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80082a0:	2002      	movs	r0, #2
}
 80082a2:	bd70      	pop	{r4, r5, r6, pc}
 80082a4:	6825      	ldr	r5, [r4, #0]
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80082a6:	2340      	movs	r3, #64	@ 0x40
 80082a8:	622b      	str	r3, [r5, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082aa:	f105 0308 	add.w	r3, r5, #8
 80082ae:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80082b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b6:	f105 0108 	add.w	r1, r5, #8
 80082ba:	e841 3200 	strex	r2, r3, [r1]
 80082be:	2a00      	cmp	r2, #0
 80082c0:	d1f3      	bne.n	80082aa <HAL_UART_Transmit_DMA+0x5e>
    return HAL_OK;
 80082c2:	2000      	movs	r0, #0
}
 80082c4:	bd70      	pop	{r4, r5, r6, pc}
 80082c6:	bf00      	nop
 80082c8:	080082d5 	.word	0x080082d5
 80082cc:	0800831d 	.word	0x0800831d
 80082d0:	0800832d 	.word	0x0800832d

080082d4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80082d4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80082d6:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082d8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f013 0320 	ands.w	r3, r3, #32
 80082e0:	d117      	bne.n	8008312 <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 80082e2:	6802      	ldr	r2, [r0, #0]
 80082e4:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e8:	f102 0308 	add.w	r3, r2, #8
 80082ec:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80082f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f4:	f102 0008 	add.w	r0, r2, #8
 80082f8:	e840 3100 	strex	r1, r3, [r0]
 80082fc:	2900      	cmp	r1, #0
 80082fe:	d1f3      	bne.n	80082e8 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008300:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008304:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008308:	e842 3100 	strex	r1, r3, [r2]
 800830c:	2900      	cmp	r1, #0
 800830e:	d1f7      	bne.n	8008300 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008310:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8008312:	f7f9 fccf 	bl	8001cb4 <HAL_UART_TxCpltCallback>
}
 8008316:	bd08      	pop	{r3, pc}

08008318 <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop

0800831c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800831c:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800831e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8008320:	f7ff fffa 	bl	8008318 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008324:	bd08      	pop	{r3, pc}
 8008326:	bf00      	nop

08008328 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop

0800832c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800832c:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800832e:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008330:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
{
 8008334:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008336:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800833a:	689a      	ldr	r2, [r3, #8]
 800833c:	0612      	lsls	r2, r2, #24
 800833e:	d501      	bpl.n	8008344 <UART_DMAError+0x18>
 8008340:	2921      	cmp	r1, #33	@ 0x21
 8008342:	d00d      	beq.n	8008360 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008344:	689a      	ldr	r2, [r3, #8]
 8008346:	0652      	lsls	r2, r2, #25
 8008348:	d501      	bpl.n	800834e <UART_DMAError+0x22>
 800834a:	2c22      	cmp	r4, #34	@ 0x22
 800834c:	d023      	beq.n	8008396 <UART_DMAError+0x6a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800834e:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 8008352:	f043 0310 	orr.w	r3, r3, #16
 8008356:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800835a:	f7ff ffe5 	bl	8008328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800835e:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8008360:	2200      	movs	r2, #0
 8008362:	f8a0 2056 	strh.w	r2, [r0, #86]	@ 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008366:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800836a:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836e:	e843 2100 	strex	r1, r2, [r3]
 8008372:	2900      	cmp	r1, #0
 8008374:	d1f7      	bne.n	8008366 <UART_DMAError+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008376:	f103 0208 	add.w	r2, r3, #8
 800837a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800837e:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008382:	f103 0c08 	add.w	ip, r3, #8
 8008386:	e84c 2100 	strex	r1, r2, [ip]
 800838a:	2900      	cmp	r1, #0
 800838c:	d1f3      	bne.n	8008376 <UART_DMAError+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 800838e:	2220      	movs	r2, #32
 8008390:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
}
 8008394:	e7d6      	b.n	8008344 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 8008396:	2200      	movs	r2, #0
 8008398:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083a0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a4:	e843 2100 	strex	r1, r2, [r3]
 80083a8:	2900      	cmp	r1, #0
 80083aa:	d1f7      	bne.n	800839c <UART_DMAError+0x70>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083ac:	4c13      	ldr	r4, [pc, #76]	@ (80083fc <UART_DMAError+0xd0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ae:	f103 0208 	add.w	r2, r3, #8
 80083b2:	e852 2f00 	ldrex	r2, [r2]
 80083b6:	4022      	ands	r2, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b8:	f103 0c08 	add.w	ip, r3, #8
 80083bc:	e84c 2100 	strex	r1, r2, [ip]
 80083c0:	2900      	cmp	r1, #0
 80083c2:	d1f4      	bne.n	80083ae <UART_DMAError+0x82>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083c4:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 80083c6:	2a01      	cmp	r2, #1
 80083c8:	d006      	beq.n	80083d8 <UART_DMAError+0xac>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ca:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80083cc:	2220      	movs	r2, #32
 80083ce:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
  huart->RxISR = NULL;
 80083d2:	6743      	str	r3, [r0, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083d4:	66c3      	str	r3, [r0, #108]	@ 0x6c
}
 80083d6:	e7ba      	b.n	800834e <UART_DMAError+0x22>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083dc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e0:	e843 2100 	strex	r1, r2, [r3]
 80083e4:	2900      	cmp	r1, #0
 80083e6:	d0f0      	beq.n	80083ca <UART_DMAError+0x9e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e8:	e853 2f00 	ldrex	r2, [r3]
 80083ec:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f0:	e843 2100 	strex	r1, r2, [r3]
 80083f4:	2900      	cmp	r1, #0
 80083f6:	d1ef      	bne.n	80083d8 <UART_DMAError+0xac>
 80083f8:	e7e7      	b.n	80083ca <UART_DMAError+0x9e>
 80083fa:	bf00      	nop
 80083fc:	effffffe 	.word	0xeffffffe

08008400 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008400:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008402:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8008404:	2300      	movs	r3, #0
 8008406:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800840a:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800840e:	f7ff ff8b 	bl	8008328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008412:	bd08      	pop	{r3, pc}

08008414 <HAL_UARTEx_RxEventCallback>:
}
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop

08008418 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008418:	6803      	ldr	r3, [r0, #0]
 800841a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800841c:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800841e:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  if (errorflags == 0U)
 8008422:	ea12 0f0c 	tst.w	r2, ip
{
 8008426:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008428:	689d      	ldr	r5, [r3, #8]
{
 800842a:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800842c:	d145      	bne.n	80084ba <HAL_UART_IRQHandler+0xa2>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800842e:	0696      	lsls	r6, r2, #26
 8008430:	d507      	bpl.n	8008442 <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008432:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008436:	f005 5e80 	and.w	lr, r5, #268435456	@ 0x10000000
 800843a:	ea5c 0c0e 	orrs.w	ip, ip, lr
 800843e:	f040 8106 	bne.w	800864e <HAL_UART_IRQHandler+0x236>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008442:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8008444:	2801      	cmp	r0, #1
 8008446:	f000 80d3 	beq.w	80085f0 <HAL_UART_IRQHandler+0x1d8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800844a:	02d6      	lsls	r6, r2, #11
 800844c:	d41d      	bmi.n	800848a <HAL_UART_IRQHandler+0x72>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800844e:	0616      	lsls	r6, r2, #24
 8008450:	d506      	bpl.n	8008460 <HAL_UART_IRQHandler+0x48>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008452:	f405 0500 	and.w	r5, r5, #8388608	@ 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008456:	f001 0080 	and.w	r0, r1, #128	@ 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800845a:	4328      	orrs	r0, r5
 800845c:	f040 80fe 	bne.w	800865c <HAL_UART_IRQHandler+0x244>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008460:	0650      	lsls	r0, r2, #25
 8008462:	d51c      	bpl.n	800849e <HAL_UART_IRQHandler+0x86>
 8008464:	064e      	lsls	r6, r1, #25
 8008466:	d51a      	bpl.n	800849e <HAL_UART_IRQHandler+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008468:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800846c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008470:	e843 2100 	strex	r1, r2, [r3]
 8008474:	2900      	cmp	r1, #0
 8008476:	d1f7      	bne.n	8008468 <HAL_UART_IRQHandler+0x50>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008478:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800847a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800847c:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->TxISR = NULL;
 8008480:	67a3      	str	r3, [r4, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008482:	4620      	mov	r0, r4
 8008484:	f7f9 fc16 	bl	8001cb4 <HAL_UART_TxCpltCallback>
}
 8008488:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800848a:	0268      	lsls	r0, r5, #9
 800848c:	d5df      	bpl.n	800844e <HAL_UART_IRQHandler+0x36>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800848e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8008492:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008494:	621a      	str	r2, [r3, #32]
}
 8008496:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800849a:	f000 bf11 	b.w	80092c0 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800849e:	0215      	lsls	r5, r2, #8
 80084a0:	d502      	bpl.n	80084a8 <HAL_UART_IRQHandler+0x90>
 80084a2:	0048      	lsls	r0, r1, #1
 80084a4:	f100 80ff 	bmi.w	80086a6 <HAL_UART_IRQHandler+0x28e>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80084a8:	01d3      	lsls	r3, r2, #7
 80084aa:	d5ed      	bpl.n	8008488 <HAL_UART_IRQHandler+0x70>
 80084ac:	2900      	cmp	r1, #0
 80084ae:	daeb      	bge.n	8008488 <HAL_UART_IRQHandler+0x70>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80084b0:	4620      	mov	r0, r4
}
 80084b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 80084b6:	f000 bf05 	b.w	80092c4 <HAL_UARTEx_RxFifoFullCallback>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80084ba:	48b4      	ldr	r0, [pc, #720]	@ (800878c <HAL_UART_IRQHandler+0x374>)
 80084bc:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80084c0:	48b3      	ldr	r0, [pc, #716]	@ (8008790 <HAL_UART_IRQHandler+0x378>)
 80084c2:	4008      	ands	r0, r1
 80084c4:	ea50 000c 	orrs.w	r0, r0, ip
 80084c8:	d0bb      	beq.n	8008442 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084ca:	07d6      	lsls	r6, r2, #31
 80084cc:	d509      	bpl.n	80084e2 <HAL_UART_IRQHandler+0xca>
 80084ce:	05c8      	lsls	r0, r1, #23
 80084d0:	d507      	bpl.n	80084e2 <HAL_UART_IRQHandler+0xca>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084d2:	2001      	movs	r0, #1
 80084d4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084d6:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80084da:	f040 0001 	orr.w	r0, r0, #1
 80084de:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084e2:	0796      	lsls	r6, r2, #30
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084e4:	f002 0004 	and.w	r0, r2, #4
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084e8:	f140 80aa 	bpl.w	8008640 <HAL_UART_IRQHandler+0x228>
 80084ec:	07ee      	lsls	r6, r5, #31
 80084ee:	d510      	bpl.n	8008512 <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80084f0:	2602      	movs	r6, #2
 80084f2:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084f4:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 80084f8:	f046 0604 	orr.w	r6, r6, #4
 80084fc:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008500:	b138      	cbz	r0, 8008512 <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008502:	2004      	movs	r0, #4
 8008504:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008506:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800850a:	f040 0002 	orr.w	r0, r0, #2
 800850e:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008512:	0716      	lsls	r6, r2, #28
 8008514:	d50c      	bpl.n	8008530 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008516:	f001 0020 	and.w	r0, r1, #32
 800851a:	ea50 000c 	orrs.w	r0, r0, ip
 800851e:	d007      	beq.n	8008530 <HAL_UART_IRQHandler+0x118>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008520:	2008      	movs	r0, #8
 8008522:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008524:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8008528:	f040 0008 	orr.w	r0, r0, #8
 800852c:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008530:	0510      	lsls	r0, r2, #20
 8008532:	d50a      	bpl.n	800854a <HAL_UART_IRQHandler+0x132>
 8008534:	014e      	lsls	r6, r1, #5
 8008536:	d508      	bpl.n	800854a <HAL_UART_IRQHandler+0x132>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008538:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800853c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800853e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8008542:	f040 0020 	orr.w	r0, r0, #32
 8008546:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800854a:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800854e:	2800      	cmp	r0, #0
 8008550:	d09a      	beq.n	8008488 <HAL_UART_IRQHandler+0x70>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008552:	0690      	lsls	r0, r2, #26
 8008554:	d506      	bpl.n	8008564 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008556:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800855a:	f005 5580 	and.w	r5, r5, #268435456	@ 0x10000000
 800855e:	4329      	orrs	r1, r5
 8008560:	f040 8095 	bne.w	800868e <HAL_UART_IRQHandler+0x276>
      errorcode = huart->ErrorCode;
 8008564:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008568:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800856a:	f001 0128 	and.w	r1, r1, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800856e:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8008572:	ea52 0501 	orrs.w	r5, r2, r1
 8008576:	f000 80cc 	beq.w	8008712 <HAL_UART_IRQHandler+0x2fa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800857e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	e843 2100 	strex	r1, r2, [r3]
 8008586:	2900      	cmp	r1, #0
 8008588:	d1f7      	bne.n	800857a <HAL_UART_IRQHandler+0x162>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800858a:	4882      	ldr	r0, [pc, #520]	@ (8008794 <HAL_UART_IRQHandler+0x37c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858c:	f103 0208 	add.w	r2, r3, #8
 8008590:	e852 2f00 	ldrex	r2, [r2]
 8008594:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008596:	f103 0508 	add.w	r5, r3, #8
 800859a:	e845 2100 	strex	r1, r2, [r5]
 800859e:	2900      	cmp	r1, #0
 80085a0:	d1f4      	bne.n	800858c <HAL_UART_IRQHandler+0x174>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085a2:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80085a4:	2a01      	cmp	r2, #1
 80085a6:	d061      	beq.n	800866c <HAL_UART_IRQHandler+0x254>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085a8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80085aa:	2120      	movs	r1, #32
 80085ac:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085b0:	66e2      	str	r2, [r4, #108]	@ 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085b2:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 80085b4:	6762      	str	r2, [r4, #116]	@ 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085b6:	064a      	lsls	r2, r1, #25
 80085b8:	d571      	bpl.n	800869e <HAL_UART_IRQHandler+0x286>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ba:	f103 0208 	add.w	r2, r3, #8
 80085be:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c6:	f103 0008 	add.w	r0, r3, #8
 80085ca:	e840 2100 	strex	r1, r2, [r0]
 80085ce:	2900      	cmp	r1, #0
 80085d0:	d1f3      	bne.n	80085ba <HAL_UART_IRQHandler+0x1a2>
          if (huart->hdmarx != NULL)
 80085d2:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d061      	beq.n	800869e <HAL_UART_IRQHandler+0x286>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085da:	4b6f      	ldr	r3, [pc, #444]	@ (8008798 <HAL_UART_IRQHandler+0x380>)
 80085dc:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085de:	f7fc fc8f 	bl	8004f00 <HAL_DMA_Abort_IT>
 80085e2:	2800      	cmp	r0, #0
 80085e4:	f43f af50 	beq.w	8008488 <HAL_UART_IRQHandler+0x70>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085e8:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80085ec:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80085ee:	e032      	b.n	8008656 <HAL_UART_IRQHandler+0x23e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80085f0:	06d6      	lsls	r6, r2, #27
 80085f2:	f57f af2a 	bpl.w	800844a <HAL_UART_IRQHandler+0x32>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80085f6:	06c8      	lsls	r0, r1, #27
 80085f8:	f57f af27 	bpl.w	800844a <HAL_UART_IRQHandler+0x32>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085fc:	2210      	movs	r2, #16
 80085fe:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008600:	689a      	ldr	r2, [r3, #8]
 8008602:	0651      	lsls	r1, r2, #25
 8008604:	f140 808b 	bpl.w	800871e <HAL_UART_IRQHandler+0x306>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008608:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800860c:	6801      	ldr	r1, [r0, #0]
 800860e:	684a      	ldr	r2, [r1, #4]
 8008610:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8008612:	2a00      	cmp	r2, #0
 8008614:	f43f af38 	beq.w	8008488 <HAL_UART_IRQHandler+0x70>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008618:	f8b4 505c 	ldrh.w	r5, [r4, #92]	@ 0x5c
 800861c:	4295      	cmp	r5, r2
 800861e:	f67f af33 	bls.w	8008488 <HAL_UART_IRQHandler+0x70>
        huart->RxXferCount = nb_remaining_rx_data;
 8008622:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008626:	680a      	ldr	r2, [r1, #0]
 8008628:	0692      	lsls	r2, r2, #26
 800862a:	d541      	bpl.n	80086b0 <HAL_UART_IRQHandler+0x298>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800862c:	2302      	movs	r3, #2
 800862e:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008630:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8008634:	1ae9      	subs	r1, r5, r3
 8008636:	4620      	mov	r0, r4
 8008638:	b289      	uxth	r1, r1
 800863a:	f7ff feeb 	bl	8008414 <HAL_UARTEx_RxEventCallback>
}
 800863e:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008640:	2800      	cmp	r0, #0
 8008642:	f43f af66 	beq.w	8008512 <HAL_UART_IRQHandler+0xfa>
 8008646:	07e8      	lsls	r0, r5, #31
 8008648:	f53f af5b 	bmi.w	8008502 <HAL_UART_IRQHandler+0xea>
 800864c:	e761      	b.n	8008512 <HAL_UART_IRQHandler+0xfa>
      if (huart->RxISR != NULL)
 800864e:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 8008650:	2b00      	cmp	r3, #0
 8008652:	f43f af19 	beq.w	8008488 <HAL_UART_IRQHandler+0x70>
}
 8008656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800865a:	4718      	bx	r3
    if (huart->TxISR != NULL)
 800865c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800865e:	2b00      	cmp	r3, #0
 8008660:	f43f af12 	beq.w	8008488 <HAL_UART_IRQHandler+0x70>
      huart->TxISR(huart);
 8008664:	4620      	mov	r0, r4
}
 8008666:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800866a:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008670:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008674:	e843 2100 	strex	r1, r2, [r3]
 8008678:	2900      	cmp	r1, #0
 800867a:	d095      	beq.n	80085a8 <HAL_UART_IRQHandler+0x190>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867c:	e853 2f00 	ldrex	r2, [r3]
 8008680:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008684:	e843 2100 	strex	r1, r2, [r3]
 8008688:	2900      	cmp	r1, #0
 800868a:	d1ef      	bne.n	800866c <HAL_UART_IRQHandler+0x254>
 800868c:	e78c      	b.n	80085a8 <HAL_UART_IRQHandler+0x190>
        if (huart->RxISR != NULL)
 800868e:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8008690:	2a00      	cmp	r2, #0
 8008692:	f43f af67 	beq.w	8008564 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8008696:	4620      	mov	r0, r4
 8008698:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800869a:	6823      	ldr	r3, [r4, #0]
 800869c:	e762      	b.n	8008564 <HAL_UART_IRQHandler+0x14c>
            HAL_UART_ErrorCallback(huart);
 800869e:	4620      	mov	r0, r4
 80086a0:	f7ff fe42 	bl	8008328 <HAL_UART_ErrorCallback>
}
 80086a4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80086a6:	4620      	mov	r0, r4
}
 80086a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80086ac:	f000 be0c 	b.w	80092c8 <HAL_UARTEx_TxFifoEmptyCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b0:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b8:	e843 2100 	strex	r1, r2, [r3]
 80086bc:	2900      	cmp	r1, #0
 80086be:	d1f7      	bne.n	80086b0 <HAL_UART_IRQHandler+0x298>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c0:	f103 0208 	add.w	r2, r3, #8
 80086c4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086c8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086cc:	f103 0508 	add.w	r5, r3, #8
 80086d0:	e845 2100 	strex	r1, r2, [r5]
 80086d4:	2900      	cmp	r1, #0
 80086d6:	d1f3      	bne.n	80086c0 <HAL_UART_IRQHandler+0x2a8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d8:	f103 0208 	add.w	r2, r3, #8
 80086dc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e4:	f103 0508 	add.w	r5, r3, #8
 80086e8:	e845 2100 	strex	r1, r2, [r5]
 80086ec:	2900      	cmp	r1, #0
 80086ee:	d1f3      	bne.n	80086d8 <HAL_UART_IRQHandler+0x2c0>
          huart->RxState = HAL_UART_STATE_READY;
 80086f0:	2220      	movs	r2, #32
 80086f2:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086f6:	66e1      	str	r1, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f8:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086fc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008700:	e843 2100 	strex	r1, r2, [r3]
 8008704:	2900      	cmp	r1, #0
 8008706:	d1f7      	bne.n	80086f8 <HAL_UART_IRQHandler+0x2e0>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008708:	f7fc fbc2 	bl	8004e90 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800870c:	f8b4 505c 	ldrh.w	r5, [r4, #92]	@ 0x5c
 8008710:	e78c      	b.n	800862c <HAL_UART_IRQHandler+0x214>
        HAL_UART_ErrorCallback(huart);
 8008712:	4620      	mov	r0, r4
 8008714:	f7ff fe08 	bl	8008328 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008718:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
}
 800871c:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800871e:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
      if ((huart->RxXferCount > 0U)
 8008722:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008726:	f8b4 005c 	ldrh.w	r0, [r4, #92]	@ 0x5c
      if ((huart->RxXferCount > 0U)
 800872a:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800872c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800872e:	2a00      	cmp	r2, #0
 8008730:	f43f aeaa 	beq.w	8008488 <HAL_UART_IRQHandler+0x70>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008734:	1a41      	subs	r1, r0, r1
 8008736:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8008738:	2900      	cmp	r1, #0
 800873a:	f43f aea5 	beq.w	8008488 <HAL_UART_IRQHandler+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008742:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008746:	e843 2000 	strex	r0, r2, [r3]
 800874a:	2800      	cmp	r0, #0
 800874c:	d1f7      	bne.n	800873e <HAL_UART_IRQHandler+0x326>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800874e:	4d11      	ldr	r5, [pc, #68]	@ (8008794 <HAL_UART_IRQHandler+0x37c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008750:	f103 0208 	add.w	r2, r3, #8
 8008754:	e852 2f00 	ldrex	r2, [r2]
 8008758:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875a:	f103 0608 	add.w	r6, r3, #8
 800875e:	e846 2000 	strex	r0, r2, [r6]
 8008762:	2800      	cmp	r0, #0
 8008764:	d1f4      	bne.n	8008750 <HAL_UART_IRQHandler+0x338>
        huart->RxState = HAL_UART_STATE_READY;
 8008766:	2220      	movs	r2, #32
 8008768:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 800876c:	6760      	str	r0, [r4, #116]	@ 0x74
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800876e:	66e0      	str	r0, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008770:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008774:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008778:	e843 2000 	strex	r0, r2, [r3]
 800877c:	2800      	cmp	r0, #0
 800877e:	d1f7      	bne.n	8008770 <HAL_UART_IRQHandler+0x358>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008780:	2302      	movs	r3, #2
 8008782:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008784:	4620      	mov	r0, r4
 8008786:	f7ff fe45 	bl	8008414 <HAL_UARTEx_RxEventCallback>
}
 800878a:	bd70      	pop	{r4, r5, r6, pc}
 800878c:	10000001 	.word	0x10000001
 8008790:	04000120 	.word	0x04000120
 8008794:	effffffe 	.word	0xeffffffe
 8008798:	08008401 	.word	0x08008401

0800879c <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 800879c:	b510      	push	{r4, lr}
 800879e:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a0:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087a4:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a8:	e843 2100 	strex	r1, r2, [r3]
 80087ac:	2900      	cmp	r1, #0
 80087ae:	d1f7      	bne.n	80087a0 <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b0:	f103 0208 	add.w	r2, r3, #8
 80087b4:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087b8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087bc:	f103 0408 	add.w	r4, r3, #8
 80087c0:	e844 2100 	strex	r1, r2, [r4]
 80087c4:	2900      	cmp	r1, #0
 80087c6:	d1f3      	bne.n	80087b0 <UART_RxISR_16BIT.part.0+0x14>
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80087c8:	4a1a      	ldr	r2, [pc, #104]	@ (8008834 <UART_RxISR_16BIT.part.0+0x98>)
      huart->RxISR = NULL;
 80087ca:	6741      	str	r1, [r0, #116]	@ 0x74
      huart->RxState = HAL_UART_STATE_READY;
 80087cc:	2420      	movs	r4, #32
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80087ce:	4293      	cmp	r3, r2
      huart->RxState = HAL_UART_STATE_READY;
 80087d0:	f8c0 408c 	str.w	r4, [r0, #140]	@ 0x8c
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087d4:	6701      	str	r1, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80087d6:	d002      	beq.n	80087de <UART_RxISR_16BIT.part.0+0x42>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80087d8:	685a      	ldr	r2, [r3, #4]
 80087da:	0211      	lsls	r1, r2, #8
 80087dc:	d416      	bmi.n	800880c <UART_RxISR_16BIT.part.0+0x70>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087de:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 80087e0:	2a01      	cmp	r2, #1
 80087e2:	d124      	bne.n	800882e <UART_RxISR_16BIT.part.0+0x92>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087e4:	2200      	movs	r2, #0
 80087e6:	66c2      	str	r2, [r0, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e8:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087ec:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f0:	e843 2100 	strex	r1, r2, [r3]
 80087f4:	2900      	cmp	r1, #0
 80087f6:	d1f7      	bne.n	80087e8 <UART_RxISR_16BIT.part.0+0x4c>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087f8:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087fa:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087fe:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008800:	bf44      	itt	mi
 8008802:	2210      	movmi	r2, #16
 8008804:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008806:	f7ff fe05 	bl	8008414 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800880a:	bd10      	pop	{r4, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880c:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008810:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008814:	e843 2100 	strex	r1, r2, [r3]
 8008818:	2900      	cmp	r1, #0
 800881a:	d0e0      	beq.n	80087de <UART_RxISR_16BIT.part.0+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881c:	e853 2f00 	ldrex	r2, [r3]
 8008820:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008824:	e843 2100 	strex	r1, r2, [r3]
 8008828:	2900      	cmp	r1, #0
 800882a:	d1ef      	bne.n	800880c <UART_RxISR_16BIT.part.0+0x70>
 800882c:	e7d7      	b.n	80087de <UART_RxISR_16BIT.part.0+0x42>
        HAL_UART_RxCpltCallback(huart);
 800882e:	f7f9 fa4f 	bl	8001cd0 <HAL_UART_RxCpltCallback>
}
 8008832:	bd10      	pop	{r4, pc}
 8008834:	40008000 	.word	0x40008000

08008838 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008838:	b410      	push	{r4}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800883a:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
  uint16_t uhMask = huart->Mask;
 800883e:	f8b0 1060 	ldrh.w	r1, [r0, #96]	@ 0x60
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008842:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008844:	2c22      	cmp	r4, #34	@ 0x22
 8008846:	d005      	beq.n	8008854 <UART_RxISR_16BIT+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008848:	6993      	ldr	r3, [r2, #24]
 800884a:	f043 0308 	orr.w	r3, r3, #8
 800884e:	6193      	str	r3, [r2, #24]
  }
}
 8008850:	bc10      	pop	{r4}
 8008852:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008854:	6a52      	ldr	r2, [r2, #36]	@ 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8008856:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 8008858:	4011      	ands	r1, r2
 800885a:	f824 1b02 	strh.w	r1, [r4], #2
    huart->RxXferCount--;
 800885e:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
    huart->pRxBuffPtr += 2U;
 8008862:	6584      	str	r4, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8008864:	3a01      	subs	r2, #1
 8008866:	b292      	uxth	r2, r2
 8008868:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 800886c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8008870:	b29b      	uxth	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1ec      	bne.n	8008850 <UART_RxISR_16BIT+0x18>
}
 8008876:	bc10      	pop	{r4}
 8008878:	f7ff bf90 	b.w	800879c <UART_RxISR_16BIT.part.0>

0800887c <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800887c:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
  uint16_t uhMask = huart->Mask;
 8008880:	f8b0 c060 	ldrh.w	ip, [r0, #96]	@ 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008884:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008886:	2922      	cmp	r1, #34	@ 0x22
 8008888:	d004      	beq.n	8008894 <UART_RxISR_8BIT+0x18>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800888a:	6993      	ldr	r3, [r2, #24]
 800888c:	f043 0308 	orr.w	r3, r3, #8
 8008890:	6193      	str	r3, [r2, #24]
}
 8008892:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008894:	6a52      	ldr	r2, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008896:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8008898:	ea02 020c 	and.w	r2, r2, ip
 800889c:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 800889e:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
    huart->pRxBuffPtr++;
 80088a2:	6d81      	ldr	r1, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80088a4:	3a01      	subs	r2, #1
 80088a6:	b292      	uxth	r2, r2
 80088a8:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 80088ac:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
    huart->pRxBuffPtr++;
 80088b0:	3101      	adds	r1, #1
    if (huart->RxXferCount == 0U)
 80088b2:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 80088b4:	6581      	str	r1, [r0, #88]	@ 0x58
    if (huart->RxXferCount == 0U)
 80088b6:	2a00      	cmp	r2, #0
 80088b8:	d1eb      	bne.n	8008892 <UART_RxISR_8BIT+0x16>
 80088ba:	f7ff bf6f 	b.w	800879c <UART_RxISR_16BIT.part.0>
 80088be:	bf00      	nop

080088c0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80088c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80088c4:	6802      	ldr	r2, [r0, #0]
  uint16_t  uhMask = huart->Mask;
 80088c6:	f8b0 b060 	ldrh.w	fp, [r0, #96]	@ 0x60
{
 80088ca:	4604      	mov	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80088cc:	69d0      	ldr	r0, [r2, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80088ce:	6817      	ldr	r7, [r2, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80088d0:	6896      	ldr	r6, [r2, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088d2:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 80088d6:	2922      	cmp	r1, #34	@ 0x22
 80088d8:	d006      	beq.n	80088e8 <UART_RxISR_8BIT_FIFOEN+0x28>
 80088da:	4613      	mov	r3, r2
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088dc:	6992      	ldr	r2, [r2, #24]
 80088de:	f042 0208 	orr.w	r2, r2, #8
 80088e2:	619a      	str	r2, [r3, #24]
  }
}
 80088e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80088e8:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f000 80cf 	beq.w	8008a90 <UART_RxISR_8BIT_FIFOEN+0x1d0>
 80088f2:	0680      	lsls	r0, r0, #26
 80088f4:	f140 8083 	bpl.w	80089fe <UART_RxISR_8BIT_FIFOEN+0x13e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088f8:	f8df a19c 	ldr.w	sl, [pc, #412]	@ 8008a98 <UART_RxISR_8BIT_FIFOEN+0x1d8>
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80088fc:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008a9c <UART_RxISR_8BIT_FIFOEN+0x1dc>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008900:	f407 7780 	and.w	r7, r7, #256	@ 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008904:	f006 0601 	and.w	r6, r6, #1
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008908:	fa5f fb8b 	uxtb.w	fp, fp
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800890c:	f04f 0900 	mov.w	r9, #0
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008910:	6a52      	ldr	r2, [r2, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008912:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008914:	ea0b 0202 	and.w	r2, fp, r2
 8008918:	701a      	strb	r2, [r3, #0]
      huart->RxXferCount--;
 800891a:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800891e:	6823      	ldr	r3, [r4, #0]
      huart->pRxBuffPtr++;
 8008920:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8008922:	3901      	subs	r1, #1
 8008924:	b289      	uxth	r1, r1
 8008926:	f8a4 105e 	strh.w	r1, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800892a:	69dd      	ldr	r5, [r3, #28]
      huart->pRxBuffPtr++;
 800892c:	3201      	adds	r2, #1
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800892e:	0769      	lsls	r1, r5, #29
      huart->pRxBuffPtr++;
 8008930:	65a2      	str	r2, [r4, #88]	@ 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008932:	d01b      	beq.n	800896c <UART_RxISR_8BIT_FIFOEN+0xac>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008934:	07ea      	lsls	r2, r5, #31
 8008936:	d508      	bpl.n	800894a <UART_RxISR_8BIT_FIFOEN+0x8a>
 8008938:	b13f      	cbz	r7, 800894a <UART_RxISR_8BIT_FIFOEN+0x8a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800893a:	2201      	movs	r2, #1
 800893c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800893e:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8008942:	f042 0201 	orr.w	r2, r2, #1
 8008946:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800894a:	07a8      	lsls	r0, r5, #30
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800894c:	f005 0204 	and.w	r2, r5, #4
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008950:	d514      	bpl.n	800897c <UART_RxISR_8BIT_FIFOEN+0xbc>
 8008952:	b146      	cbz	r6, 8008966 <UART_RxISR_8BIT_FIFOEN+0xa6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008954:	2102      	movs	r1, #2
 8008956:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008958:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 800895c:	f041 0104 	orr.w	r1, r1, #4
 8008960:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008964:	b972      	cbnz	r2, 8008984 <UART_RxISR_8BIT_FIFOEN+0xc4>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008966:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800896a:	b9bb      	cbnz	r3, 800899c <UART_RxISR_8BIT_FIFOEN+0xdc>
      if (huart->RxXferCount == 0U)
 800896c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8008970:	b29b      	uxth	r3, r3
 8008972:	b1eb      	cbz	r3, 80089b0 <UART_RxISR_8BIT_FIFOEN+0xf0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008974:	06ab      	lsls	r3, r5, #26
 8008976:	d542      	bpl.n	80089fe <UART_RxISR_8BIT_FIFOEN+0x13e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008978:	6822      	ldr	r2, [r4, #0]
 800897a:	e7c9      	b.n	8008910 <UART_RxISR_8BIT_FIFOEN+0x50>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800897c:	2a00      	cmp	r2, #0
 800897e:	d0f2      	beq.n	8008966 <UART_RxISR_8BIT_FIFOEN+0xa6>
 8008980:	2e00      	cmp	r6, #0
 8008982:	d0f0      	beq.n	8008966 <UART_RxISR_8BIT_FIFOEN+0xa6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008984:	2204      	movs	r2, #4
 8008986:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008988:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800898c:	f043 0302 	orr.w	r3, r3, #2
 8008990:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008994:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8008998:	2b00      	cmp	r3, #0
 800899a:	d0e7      	beq.n	800896c <UART_RxISR_8BIT_FIFOEN+0xac>
          HAL_UART_ErrorCallback(huart);
 800899c:	4620      	mov	r0, r4
 800899e:	f7ff fcc3 	bl	8008328 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089a2:	f8c4 9090 	str.w	r9, [r4, #144]	@ 0x90
      if (huart->RxXferCount == 0U)
 80089a6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1e1      	bne.n	8008974 <UART_RxISR_8BIT_FIFOEN+0xb4>
 80089b0:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b2:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ba:	e843 2100 	strex	r1, r2, [r3]
 80089be:	2900      	cmp	r1, #0
 80089c0:	d1f7      	bne.n	80089b2 <UART_RxISR_8BIT_FIFOEN+0xf2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	f103 0208 	add.w	r2, r3, #8
 80089c6:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089ca:	ea02 020a 	and.w	r2, r2, sl
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ce:	f103 0008 	add.w	r0, r3, #8
 80089d2:	e840 2100 	strex	r1, r2, [r0]
 80089d6:	2900      	cmp	r1, #0
 80089d8:	d1f3      	bne.n	80089c2 <UART_RxISR_8BIT_FIFOEN+0x102>
        huart->RxState = HAL_UART_STATE_READY;
 80089da:	2220      	movs	r2, #32
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80089dc:	4543      	cmp	r3, r8
        huart->RxState = HAL_UART_STATE_READY;
 80089de:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 80089e2:	6761      	str	r1, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089e4:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80089e6:	d002      	beq.n	80089ee <UART_RxISR_8BIT_FIFOEN+0x12e>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80089e8:	685a      	ldr	r2, [r3, #4]
 80089ea:	0211      	lsls	r1, r2, #8
 80089ec:	d42a      	bmi.n	8008a44 <UART_RxISR_8BIT_FIFOEN+0x184>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089ee:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80089f0:	2a01      	cmp	r2, #1
 80089f2:	d038      	beq.n	8008a66 <UART_RxISR_8BIT_FIFOEN+0x1a6>
          HAL_UART_RxCpltCallback(huart);
 80089f4:	4620      	mov	r0, r4
 80089f6:	f7f9 f96b 	bl	8001cd0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80089fa:	06ab      	lsls	r3, r5, #26
 80089fc:	d4bc      	bmi.n	8008978 <UART_RxISR_8BIT_FIFOEN+0xb8>
    rxdatacount = huart->RxXferCount;
 80089fe:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8008a02:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f43f af6d 	beq.w	80088e4 <UART_RxISR_8BIT_FIFOEN+0x24>
 8008a0a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	f67f af68 	bls.w	80088e4 <UART_RxISR_8BIT_FIFOEN+0x24>
 8008a14:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a16:	f103 0208 	add.w	r2, r3, #8
 8008a1a:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a1e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a22:	f103 0008 	add.w	r0, r3, #8
 8008a26:	e840 2100 	strex	r1, r2, [r0]
 8008a2a:	2900      	cmp	r1, #0
 8008a2c:	d1f3      	bne.n	8008a16 <UART_RxISR_8BIT_FIFOEN+0x156>
      huart->RxISR = UART_RxISR_8BIT;
 8008a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8008aa0 <UART_RxISR_8BIT_FIFOEN+0x1e0>)
 8008a30:	6762      	str	r2, [r4, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a32:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a36:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3a:	e843 2100 	strex	r1, r2, [r3]
 8008a3e:	2900      	cmp	r1, #0
 8008a40:	d1f7      	bne.n	8008a32 <UART_RxISR_8BIT_FIFOEN+0x172>
 8008a42:	e74f      	b.n	80088e4 <UART_RxISR_8BIT_FIFOEN+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a44:	e853 2f00 	ldrex	r2, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a48:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	e843 2100 	strex	r1, r2, [r3]
 8008a50:	2900      	cmp	r1, #0
 8008a52:	d0cc      	beq.n	80089ee <UART_RxISR_8BIT_FIFOEN+0x12e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a54:	e853 2f00 	ldrex	r2, [r3]
 8008a58:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5c:	e843 2100 	strex	r1, r2, [r3]
 8008a60:	2900      	cmp	r1, #0
 8008a62:	d1ef      	bne.n	8008a44 <UART_RxISR_8BIT_FIFOEN+0x184>
 8008a64:	e7c3      	b.n	80089ee <UART_RxISR_8BIT_FIFOEN+0x12e>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a66:	2200      	movs	r2, #0
 8008a68:	66e2      	str	r2, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a6e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a72:	e843 2100 	strex	r1, r2, [r3]
 8008a76:	2900      	cmp	r1, #0
 8008a78:	d1f7      	bne.n	8008a6a <UART_RxISR_8BIT_FIFOEN+0x1aa>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a7a:	69da      	ldr	r2, [r3, #28]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a7c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a80:	06d2      	lsls	r2, r2, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a82:	bf44      	itt	mi
 8008a84:	2210      	movmi	r2, #16
 8008a86:	621a      	strmi	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f7ff fcc3 	bl	8008414 <HAL_UARTEx_RxEventCallback>
 8008a8e:	e771      	b.n	8008974 <UART_RxISR_8BIT_FIFOEN+0xb4>
    rxdatacount = huart->RxXferCount;
 8008a90:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008a94:	e726      	b.n	80088e4 <UART_RxISR_8BIT_FIFOEN+0x24>
 8008a96:	bf00      	nop
 8008a98:	effffffe 	.word	0xeffffffe
 8008a9c:	40008000 	.word	0x40008000
 8008aa0:	0800887d 	.word	0x0800887d

08008aa4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008aa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008aa8:	6803      	ldr	r3, [r0, #0]
  uint16_t  uhMask = huart->Mask;
 8008aaa:	f8b0 a060 	ldrh.w	sl, [r0, #96]	@ 0x60
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008aae:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008ab0:	681e      	ldr	r6, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008ab2:	689d      	ldr	r5, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ab4:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8008ab8:	2a22      	cmp	r2, #34	@ 0x22
 8008aba:	d005      	beq.n	8008ac8 <UART_RxISR_16BIT_FIFOEN+0x24>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008abc:	699a      	ldr	r2, [r3, #24]
 8008abe:	f042 0208 	orr.w	r2, r2, #8
 8008ac2:	619a      	str	r2, [r3, #24]
  }
}
 8008ac4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ac8:	f8b0 2068 	ldrh.w	r2, [r0, #104]	@ 0x68
 8008acc:	4683      	mov	fp, r0
 8008ace:	2a00      	cmp	r2, #0
 8008ad0:	f000 80d4 	beq.w	8008c7c <UART_RxISR_16BIT_FIFOEN+0x1d8>
 8008ad4:	0688      	lsls	r0, r1, #26
 8008ad6:	f140 8085 	bpl.w	8008be4 <UART_RxISR_16BIT_FIFOEN+0x140>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ada:	f8df 91a8 	ldr.w	r9, [pc, #424]	@ 8008c84 <UART_RxISR_16BIT_FIFOEN+0x1e0>
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ade:	4f6a      	ldr	r7, [pc, #424]	@ (8008c88 <UART_RxISR_16BIT_FIFOEN+0x1e4>)
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ae0:	f406 7680 	and.w	r6, r6, #256	@ 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ae4:	f005 0501 	and.w	r5, r5, #1
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ae8:	f04f 0800 	mov.w	r8, #0
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008aec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8008aee:	f8db 1058 	ldr.w	r1, [fp, #88]	@ 0x58
 8008af2:	ea0a 0202 	and.w	r2, sl, r2
 8008af6:	f821 2b02 	strh.w	r2, [r1], #2
      huart->RxXferCount--;
 8008afa:	f8bb 205e 	ldrh.w	r2, [fp, #94]	@ 0x5e
      huart->pRxBuffPtr += 2U;
 8008afe:	f8cb 1058 	str.w	r1, [fp, #88]	@ 0x58
      huart->RxXferCount--;
 8008b02:	3a01      	subs	r2, #1
 8008b04:	b292      	uxth	r2, r2
 8008b06:	f8ab 205e 	strh.w	r2, [fp, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008b0a:	69dc      	ldr	r4, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008b0c:	0761      	lsls	r1, r4, #29
 8008b0e:	d01b      	beq.n	8008b48 <UART_RxISR_16BIT_FIFOEN+0xa4>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b10:	07e2      	lsls	r2, r4, #31
 8008b12:	d508      	bpl.n	8008b26 <UART_RxISR_16BIT_FIFOEN+0x82>
 8008b14:	b13e      	cbz	r6, 8008b26 <UART_RxISR_16BIT_FIFOEN+0x82>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b16:	2201      	movs	r2, #1
 8008b18:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b1a:	f8db 2090 	ldr.w	r2, [fp, #144]	@ 0x90
 8008b1e:	f042 0201 	orr.w	r2, r2, #1
 8008b22:	f8cb 2090 	str.w	r2, [fp, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b26:	07a0      	lsls	r0, r4, #30
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b28:	f004 0204 	and.w	r2, r4, #4
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b2c:	d515      	bpl.n	8008b5a <UART_RxISR_16BIT_FIFOEN+0xb6>
 8008b2e:	b145      	cbz	r5, 8008b42 <UART_RxISR_16BIT_FIFOEN+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b30:	2102      	movs	r1, #2
 8008b32:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b34:	f8db 1090 	ldr.w	r1, [fp, #144]	@ 0x90
 8008b38:	f041 0104 	orr.w	r1, r1, #4
 8008b3c:	f8cb 1090 	str.w	r1, [fp, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b40:	b97a      	cbnz	r2, 8008b62 <UART_RxISR_16BIT_FIFOEN+0xbe>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b42:	f8db 3090 	ldr.w	r3, [fp, #144]	@ 0x90
 8008b46:	b9c3      	cbnz	r3, 8008b7a <UART_RxISR_16BIT_FIFOEN+0xd6>
      if (huart->RxXferCount == 0U)
 8008b48:	f8bb 305e 	ldrh.w	r3, [fp, #94]	@ 0x5e
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	b1f3      	cbz	r3, 8008b8e <UART_RxISR_16BIT_FIFOEN+0xea>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b50:	06a3      	lsls	r3, r4, #26
 8008b52:	d547      	bpl.n	8008be4 <UART_RxISR_16BIT_FIFOEN+0x140>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b54:	f8db 3000 	ldr.w	r3, [fp]
 8008b58:	e7c8      	b.n	8008aec <UART_RxISR_16BIT_FIFOEN+0x48>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b5a:	2a00      	cmp	r2, #0
 8008b5c:	d0f1      	beq.n	8008b42 <UART_RxISR_16BIT_FIFOEN+0x9e>
 8008b5e:	2d00      	cmp	r5, #0
 8008b60:	d0ef      	beq.n	8008b42 <UART_RxISR_16BIT_FIFOEN+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b62:	2204      	movs	r2, #4
 8008b64:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b66:	f8db 3090 	ldr.w	r3, [fp, #144]	@ 0x90
 8008b6a:	f043 0302 	orr.w	r3, r3, #2
 8008b6e:	f8cb 3090 	str.w	r3, [fp, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b72:	f8db 3090 	ldr.w	r3, [fp, #144]	@ 0x90
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d0e6      	beq.n	8008b48 <UART_RxISR_16BIT_FIFOEN+0xa4>
          HAL_UART_ErrorCallback(huart);
 8008b7a:	4658      	mov	r0, fp
 8008b7c:	f7ff fbd4 	bl	8008328 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b80:	f8cb 8090 	str.w	r8, [fp, #144]	@ 0x90
      if (huart->RxXferCount == 0U)
 8008b84:	f8bb 305e 	ldrh.w	r3, [fp, #94]	@ 0x5e
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1e0      	bne.n	8008b50 <UART_RxISR_16BIT_FIFOEN+0xac>
 8008b8e:	f8db 3000 	ldr.w	r3, [fp]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b92:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9a:	e843 2100 	strex	r1, r2, [r3]
 8008b9e:	2900      	cmp	r1, #0
 8008ba0:	d1f7      	bne.n	8008b92 <UART_RxISR_16BIT_FIFOEN+0xee>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba2:	f103 0208 	add.w	r2, r3, #8
 8008ba6:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008baa:	ea02 0209 	and.w	r2, r2, r9
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bae:	f103 0008 	add.w	r0, r3, #8
 8008bb2:	e840 2100 	strex	r1, r2, [r0]
 8008bb6:	2900      	cmp	r1, #0
 8008bb8:	d1f3      	bne.n	8008ba2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        huart->RxState = HAL_UART_STATE_READY;
 8008bba:	2220      	movs	r2, #32
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008bbc:	42bb      	cmp	r3, r7
        huart->RxState = HAL_UART_STATE_READY;
 8008bbe:	f8cb 208c 	str.w	r2, [fp, #140]	@ 0x8c
        huart->RxISR = NULL;
 8008bc2:	f8cb 1074 	str.w	r1, [fp, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bc6:	f8cb 1070 	str.w	r1, [fp, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008bca:	d002      	beq.n	8008bd2 <UART_RxISR_16BIT_FIFOEN+0x12e>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008bcc:	685a      	ldr	r2, [r3, #4]
 8008bce:	0211      	lsls	r1, r2, #8
 8008bd0:	d42d      	bmi.n	8008c2e <UART_RxISR_16BIT_FIFOEN+0x18a>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bd2:	f8db 206c 	ldr.w	r2, [fp, #108]	@ 0x6c
 8008bd6:	2a01      	cmp	r2, #1
 8008bd8:	d03a      	beq.n	8008c50 <UART_RxISR_16BIT_FIFOEN+0x1ac>
          HAL_UART_RxCpltCallback(huart);
 8008bda:	4658      	mov	r0, fp
 8008bdc:	f7f9 f878 	bl	8001cd0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008be0:	06a3      	lsls	r3, r4, #26
 8008be2:	d4b7      	bmi.n	8008b54 <UART_RxISR_16BIT_FIFOEN+0xb0>
    rxdatacount = huart->RxXferCount;
 8008be4:	f8bb 305e 	ldrh.w	r3, [fp, #94]	@ 0x5e
 8008be8:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f43f af6a 	beq.w	8008ac4 <UART_RxISR_16BIT_FIFOEN+0x20>
 8008bf0:	f8bb 2068 	ldrh.w	r2, [fp, #104]	@ 0x68
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	f67f af65 	bls.w	8008ac4 <UART_RxISR_16BIT_FIFOEN+0x20>
 8008bfa:	f8db 3000 	ldr.w	r3, [fp]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfe:	f103 0208 	add.w	r2, r3, #8
 8008c02:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c06:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0a:	f103 0008 	add.w	r0, r3, #8
 8008c0e:	e840 2100 	strex	r1, r2, [r0]
 8008c12:	2900      	cmp	r1, #0
 8008c14:	d1f3      	bne.n	8008bfe <UART_RxISR_16BIT_FIFOEN+0x15a>
      huart->RxISR = UART_RxISR_16BIT;
 8008c16:	4a1d      	ldr	r2, [pc, #116]	@ (8008c8c <UART_RxISR_16BIT_FIFOEN+0x1e8>)
 8008c18:	f8cb 2074 	str.w	r2, [fp, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008c20:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c24:	e843 2100 	strex	r1, r2, [r3]
 8008c28:	2900      	cmp	r1, #0
 8008c2a:	d1f7      	bne.n	8008c1c <UART_RxISR_16BIT_FIFOEN+0x178>
 8008c2c:	e74a      	b.n	8008ac4 <UART_RxISR_16BIT_FIFOEN+0x20>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2e:	e853 2f00 	ldrex	r2, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c32:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c36:	e843 2100 	strex	r1, r2, [r3]
 8008c3a:	2900      	cmp	r1, #0
 8008c3c:	d0c9      	beq.n	8008bd2 <UART_RxISR_16BIT_FIFOEN+0x12e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3e:	e853 2f00 	ldrex	r2, [r3]
 8008c42:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c46:	e843 2100 	strex	r1, r2, [r3]
 8008c4a:	2900      	cmp	r1, #0
 8008c4c:	d1ef      	bne.n	8008c2e <UART_RxISR_16BIT_FIFOEN+0x18a>
 8008c4e:	e7c0      	b.n	8008bd2 <UART_RxISR_16BIT_FIFOEN+0x12e>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c50:	2200      	movs	r2, #0
 8008c52:	f8cb 206c 	str.w	r2, [fp, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c56:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c5a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5e:	e843 2100 	strex	r1, r2, [r3]
 8008c62:	2900      	cmp	r1, #0
 8008c64:	d1f7      	bne.n	8008c56 <UART_RxISR_16BIT_FIFOEN+0x1b2>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c66:	69da      	ldr	r2, [r3, #28]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c68:	f8bb 105c 	ldrh.w	r1, [fp, #92]	@ 0x5c
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c6c:	06d2      	lsls	r2, r2, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c6e:	bf44      	itt	mi
 8008c70:	2210      	movmi	r2, #16
 8008c72:	621a      	strmi	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c74:	4658      	mov	r0, fp
 8008c76:	f7ff fbcd 	bl	8008414 <HAL_UARTEx_RxEventCallback>
 8008c7a:	e769      	b.n	8008b50 <UART_RxISR_16BIT_FIFOEN+0xac>
    rxdatacount = huart->RxXferCount;
 8008c7c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008c80:	e720      	b.n	8008ac4 <UART_RxISR_16BIT_FIFOEN+0x20>
 8008c82:	bf00      	nop
 8008c84:	effffffe 	.word	0xeffffffe
 8008c88:	40008000 	.word	0x40008000
 8008c8c:	08008839 	.word	0x08008839

08008c90 <UART_SetConfig>:
{
 8008c90:	b570      	push	{r4, r5, r6, lr}
 8008c92:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c94:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c96:	6882      	ldr	r2, [r0, #8]
 8008c98:	6900      	ldr	r0, [r0, #16]
 8008c9a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c9c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c9e:	4302      	orrs	r2, r0
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ca4:	4988      	ldr	r1, [pc, #544]	@ (8008ec8 <UART_SetConfig+0x238>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ca6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ca8:	4029      	ands	r1, r5
 8008caa:	430a      	orrs	r2, r1
 8008cac:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cae:	685a      	ldr	r2, [r3, #4]
 8008cb0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008cb2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cb4:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8008cb8:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008cba:	4984      	ldr	r1, [pc, #528]	@ (8008ecc <UART_SetConfig+0x23c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cbc:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008cbe:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008cc0:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008cc2:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008cc4:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 8008cc8:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ccc:	f000 809b 	beq.w	8008e06 <UART_SetConfig+0x176>
    tmpreg |= huart->Init.OneBitSampling;
 8008cd0:	6a26      	ldr	r6, [r4, #32]
 8008cd2:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cda:	f022 020f 	bic.w	r2, r2, #15
 8008cde:	432a      	orrs	r2, r5
 8008ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ce2:	4a7b      	ldr	r2, [pc, #492]	@ (8008ed0 <UART_SetConfig+0x240>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d033      	beq.n	8008d50 <UART_SetConfig+0xc0>
 8008ce8:	4a7a      	ldr	r2, [pc, #488]	@ (8008ed4 <UART_SetConfig+0x244>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d007      	beq.n	8008cfe <UART_SetConfig+0x6e>
        ret = HAL_ERROR;
 8008cee:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8008cf0:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8008cf2:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 8008cf6:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8008cfa:	66a2      	str	r2, [r4, #104]	@ 0x68
}
 8008cfc:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8008cfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d06:	f003 030c 	and.w	r3, r3, #12
 8008d0a:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d0e:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8008d12:	2b0c      	cmp	r3, #12
 8008d14:	d8eb      	bhi.n	8008cee <UART_SetConfig+0x5e>
 8008d16:	a201      	add	r2, pc, #4	@ (adr r2, 8008d1c <UART_SetConfig+0x8c>)
 8008d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1c:	08008e9d 	.word	0x08008e9d
 8008d20:	08008cef 	.word	0x08008cef
 8008d24:	08008cef 	.word	0x08008cef
 8008d28:	08008cef 	.word	0x08008cef
 8008d2c:	08008d85 	.word	0x08008d85
 8008d30:	08008cef 	.word	0x08008cef
 8008d34:	08008cef 	.word	0x08008cef
 8008d38:	08008cef 	.word	0x08008cef
 8008d3c:	08008dc9 	.word	0x08008dc9
 8008d40:	08008cef 	.word	0x08008cef
 8008d44:	08008cef 	.word	0x08008cef
 8008d48:	08008cef 	.word	0x08008cef
 8008d4c:	08008d99 	.word	0x08008d99
 8008d50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d54:	4a60      	ldr	r2, [pc, #384]	@ (8008ed8 <UART_SetConfig+0x248>)
 8008d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d5a:	f003 0303 	and.w	r3, r3, #3
 8008d5e:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d030      	beq.n	8008dc8 <UART_SetConfig+0x138>
 8008d66:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 8008d6a:	d015      	beq.n	8008d98 <UART_SetConfig+0x108>
 8008d6c:	3a01      	subs	r2, #1
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d008      	beq.n	8008d84 <UART_SetConfig+0xf4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d72:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008d76:	f000 8097 	beq.w	8008ea8 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d7a:	f7fd fd79 	bl	8006870 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8008d7e:	b948      	cbnz	r0, 8008d94 <UART_SetConfig+0x104>
        pclk = (uint32_t) HSI_VALUE;
 8008d80:	2000      	movs	r0, #0
 8008d82:	e7b5      	b.n	8008cf0 <UART_SetConfig+0x60>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d84:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008d88:	f000 8095 	beq.w	8008eb6 <UART_SetConfig+0x226>
        pclk = HAL_RCC_GetSysClockFreq();
 8008d8c:	f7fd f802 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8008d90:	2800      	cmp	r0, #0
 8008d92:	d0f5      	beq.n	8008d80 <UART_SetConfig+0xf0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d94:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008d96:	e004      	b.n	8008da2 <UART_SetConfig+0x112>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d98:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008d9c:	d018      	beq.n	8008dd0 <UART_SetConfig+0x140>
        pclk = (uint32_t) LSE_VALUE;
 8008d9e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008da2:	6863      	ldr	r3, [r4, #4]
 8008da4:	4a4d      	ldr	r2, [pc, #308]	@ (8008edc <UART_SetConfig+0x24c>)
 8008da6:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 8008daa:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dae:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008db2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8008db6:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dba:	f1a0 0310 	sub.w	r3, r0, #16
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d895      	bhi.n	8008cee <UART_SetConfig+0x5e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008dc2:	6823      	ldr	r3, [r4, #0]
 8008dc4:	60d8      	str	r0, [r3, #12]
 8008dc6:	e7db      	b.n	8008d80 <UART_SetConfig+0xf0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dc8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8008dcc:	4844      	ldr	r0, [pc, #272]	@ (8008ee0 <UART_SetConfig+0x250>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dce:	d1e8      	bne.n	8008da2 <UART_SetConfig+0x112>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dd0:	6862      	ldr	r2, [r4, #4]
 8008dd2:	4b42      	ldr	r3, [pc, #264]	@ (8008edc <UART_SetConfig+0x24c>)
 8008dd4:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8008dd8:	fbb0 f0f1 	udiv	r0, r0, r1
 8008ddc:	0853      	lsrs	r3, r2, #1
 8008dde:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008de2:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008de6:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dea:	f1a3 0210 	sub.w	r2, r3, #16
 8008dee:	428a      	cmp	r2, r1
 8008df0:	f63f af7d 	bhi.w	8008cee <UART_SetConfig+0x5e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008df4:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8008df8:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008dfa:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008dfc:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8008e00:	4313      	orrs	r3, r2
 8008e02:	60cb      	str	r3, [r1, #12]
 8008e04:	e7bc      	b.n	8008d80 <UART_SetConfig+0xf0>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e06:	4311      	orrs	r1, r2
 8008e08:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e0c:	f022 020f 	bic.w	r2, r2, #15
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008e10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008e14:	432a      	orrs	r2, r5
 8008e16:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008e18:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8008e1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e24:	d04d      	beq.n	8008ec2 <UART_SetConfig+0x232>
 8008e26:	d82f      	bhi.n	8008e88 <UART_SetConfig+0x1f8>
 8008e28:	b3ab      	cbz	r3, 8008e96 <UART_SetConfig+0x206>
 8008e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e2e:	f47f af5e 	bne.w	8008cee <UART_SetConfig+0x5e>
        pclk = HAL_RCC_GetSysClockFreq();
 8008e32:	f7fc ffaf 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d0a2      	beq.n	8008d80 <UART_SetConfig+0xf0>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e3a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e3c:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e3e:	4b27      	ldr	r3, [pc, #156]	@ (8008edc <UART_SetConfig+0x24c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e40:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e44:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8008e48:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e4c:	4299      	cmp	r1, r3
 8008e4e:	f63f af4e 	bhi.w	8008cee <UART_SetConfig+0x5e>
 8008e52:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8008e56:	f63f af4a 	bhi.w	8008cee <UART_SetConfig+0x5e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	f7f7 fbcb 	bl	80005f8 <__aeabi_uldivmod>
 8008e62:	0872      	lsrs	r2, r6, #1
 8008e64:	0203      	lsls	r3, r0, #8
 8008e66:	0209      	lsls	r1, r1, #8
 8008e68:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8008e6c:	1898      	adds	r0, r3, r2
 8008e6e:	f141 0100 	adc.w	r1, r1, #0
 8008e72:	4632      	mov	r2, r6
 8008e74:	2300      	movs	r3, #0
 8008e76:	f7f7 fbbf 	bl	80005f8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ee4 <UART_SetConfig+0x254>)
 8008e7c:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8008e80:	429a      	cmp	r2, r3
 8008e82:	f63f af34 	bhi.w	8008cee <UART_SetConfig+0x5e>
 8008e86:	e79c      	b.n	8008dc2 <UART_SetConfig+0x132>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e8c:	f47f af2f 	bne.w	8008cee <UART_SetConfig+0x5e>
        pclk = (uint32_t) LSE_VALUE;
 8008e90:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008e94:	e7d2      	b.n	8008e3c <UART_SetConfig+0x1ac>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e96:	f7fd fc5f 	bl	8006758 <HAL_RCC_GetPCLK1Freq>
        break;
 8008e9a:	e7cc      	b.n	8008e36 <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e9c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008ea0:	d00c      	beq.n	8008ebc <UART_SetConfig+0x22c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ea2:	f7fd fc59 	bl	8006758 <HAL_RCC_GetPCLK1Freq>
        break;
 8008ea6:	e76a      	b.n	8008d7e <UART_SetConfig+0xee>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ea8:	f7fd fce2 	bl	8006870 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8008eac:	2800      	cmp	r0, #0
 8008eae:	f43f af67 	beq.w	8008d80 <UART_SetConfig+0xf0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008eb2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008eb4:	e78c      	b.n	8008dd0 <UART_SetConfig+0x140>
        pclk = HAL_RCC_GetSysClockFreq();
 8008eb6:	f7fc ff6d 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
        break;
 8008eba:	e7f7      	b.n	8008eac <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ebc:	f7fd fc4c 	bl	8006758 <HAL_RCC_GetPCLK1Freq>
        break;
 8008ec0:	e7f4      	b.n	8008eac <UART_SetConfig+0x21c>
        pclk = (uint32_t) HSI_VALUE;
 8008ec2:	4807      	ldr	r0, [pc, #28]	@ (8008ee0 <UART_SetConfig+0x250>)
 8008ec4:	e7ba      	b.n	8008e3c <UART_SetConfig+0x1ac>
 8008ec6:	bf00      	nop
 8008ec8:	cfff69f3 	.word	0xcfff69f3
 8008ecc:	40008000 	.word	0x40008000
 8008ed0:	40013800 	.word	0x40013800
 8008ed4:	40004400 	.word	0x40004400
 8008ed8:	00030002 	.word	0x00030002
 8008edc:	0800d1ac 	.word	0x0800d1ac
 8008ee0:	00f42400 	.word	0x00f42400
 8008ee4:	000ffcff 	.word	0x000ffcff

08008ee8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ee8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008eea:	07da      	lsls	r2, r3, #31
{
 8008eec:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008eee:	d506      	bpl.n	8008efe <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ef0:	6801      	ldr	r1, [r0, #0]
 8008ef2:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8008ef4:	684a      	ldr	r2, [r1, #4]
 8008ef6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008efa:	4322      	orrs	r2, r4
 8008efc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008efe:	079c      	lsls	r4, r3, #30
 8008f00:	d506      	bpl.n	8008f10 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f02:	6801      	ldr	r1, [r0, #0]
 8008f04:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8008f06:	684a      	ldr	r2, [r1, #4]
 8008f08:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008f0c:	4322      	orrs	r2, r4
 8008f0e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f10:	0759      	lsls	r1, r3, #29
 8008f12:	d506      	bpl.n	8008f22 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f14:	6801      	ldr	r1, [r0, #0]
 8008f16:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8008f18:	684a      	ldr	r2, [r1, #4]
 8008f1a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008f1e:	4322      	orrs	r2, r4
 8008f20:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f22:	071a      	lsls	r2, r3, #28
 8008f24:	d506      	bpl.n	8008f34 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f26:	6801      	ldr	r1, [r0, #0]
 8008f28:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8008f2a:	684a      	ldr	r2, [r1, #4]
 8008f2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008f30:	4322      	orrs	r2, r4
 8008f32:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f34:	06dc      	lsls	r4, r3, #27
 8008f36:	d506      	bpl.n	8008f46 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f38:	6801      	ldr	r1, [r0, #0]
 8008f3a:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8008f3c:	688a      	ldr	r2, [r1, #8]
 8008f3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008f42:	4322      	orrs	r2, r4
 8008f44:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f46:	0699      	lsls	r1, r3, #26
 8008f48:	d506      	bpl.n	8008f58 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f4a:	6801      	ldr	r1, [r0, #0]
 8008f4c:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8008f4e:	688a      	ldr	r2, [r1, #8]
 8008f50:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f54:	4322      	orrs	r2, r4
 8008f56:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f58:	065a      	lsls	r2, r3, #25
 8008f5a:	d509      	bpl.n	8008f70 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f5c:	6801      	ldr	r1, [r0, #0]
 8008f5e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8008f60:	684a      	ldr	r2, [r1, #4]
 8008f62:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8008f66:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f68:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f6c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f6e:	d00a      	beq.n	8008f86 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f70:	061b      	lsls	r3, r3, #24
 8008f72:	d506      	bpl.n	8008f82 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f74:	6802      	ldr	r2, [r0, #0]
 8008f76:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8008f78:	6853      	ldr	r3, [r2, #4]
 8008f7a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8008f7e:	430b      	orrs	r3, r1
 8008f80:	6053      	str	r3, [r2, #4]
}
 8008f82:	bc10      	pop	{r4}
 8008f84:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f86:	684a      	ldr	r2, [r1, #4]
 8008f88:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8008f8a:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8008f8e:	4322      	orrs	r2, r4
 8008f90:	604a      	str	r2, [r1, #4]
 8008f92:	e7ed      	b.n	8008f70 <UART_AdvFeatureConfig+0x88>

08008f94 <UART_WaitOnFlagUntilTimeout>:
{
 8008f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f98:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f9c:	6804      	ldr	r4, [r0, #0]
 8008f9e:	f1b8 3fff 	cmp.w	r8, #4294967295
{
 8008fa2:	460d      	mov	r5, r1
 8008fa4:	4616      	mov	r6, r2
 8008fa6:	d10a      	bne.n	8008fbe <UART_WaitOnFlagUntilTimeout+0x2a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fa8:	69e3      	ldr	r3, [r4, #28]
 8008faa:	ea35 0303 	bics.w	r3, r5, r3
 8008fae:	bf0c      	ite	eq
 8008fb0:	2301      	moveq	r3, #1
 8008fb2:	2300      	movne	r3, #0
 8008fb4:	429e      	cmp	r6, r3
 8008fb6:	d0f7      	beq.n	8008fa8 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8008fb8:	2000      	movs	r0, #0
}
 8008fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fbe:	4607      	mov	r7, r0
 8008fc0:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fc2:	69e2      	ldr	r2, [r4, #28]
 8008fc4:	ea35 0202 	bics.w	r2, r5, r2
 8008fc8:	bf0c      	ite	eq
 8008fca:	2301      	moveq	r3, #1
 8008fcc:	2300      	movne	r3, #0
 8008fce:	42b3      	cmp	r3, r6
 8008fd0:	d1f2      	bne.n	8008fb8 <UART_WaitOnFlagUntilTimeout+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fd2:	f7f8 fb6d 	bl	80016b0 <HAL_GetTick>
 8008fd6:	eba0 0009 	sub.w	r0, r0, r9
 8008fda:	4540      	cmp	r0, r8
 8008fdc:	d830      	bhi.n	8009040 <UART_WaitOnFlagUntilTimeout+0xac>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008fde:	683c      	ldr	r4, [r7, #0]
 8008fe0:	4622      	mov	r2, r4
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fe2:	f1b8 0f00 	cmp.w	r8, #0
 8008fe6:	d02c      	beq.n	8009042 <UART_WaitOnFlagUntilTimeout+0xae>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008fe8:	6823      	ldr	r3, [r4, #0]
 8008fea:	0758      	lsls	r0, r3, #29
 8008fec:	d5e9      	bpl.n	8008fc2 <UART_WaitOnFlagUntilTimeout+0x2e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fee:	69e3      	ldr	r3, [r4, #28]
 8008ff0:	0519      	lsls	r1, r3, #20
 8008ff2:	d5e6      	bpl.n	8008fc2 <UART_WaitOnFlagUntilTimeout+0x2e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ff4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008ff8:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffa:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008ffe:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009002:	e844 3100 	strex	r1, r3, [r4]
 8009006:	b139      	cbz	r1, 8009018 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009008:	e852 3f00 	ldrex	r3, [r2]
 800900c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009010:	e842 3100 	strex	r1, r3, [r2]
 8009014:	2900      	cmp	r1, #0
 8009016:	d1f7      	bne.n	8009008 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009018:	f102 0308 	add.w	r3, r2, #8
 800901c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009020:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009024:	f102 0008 	add.w	r0, r2, #8
 8009028:	e840 3100 	strex	r1, r3, [r0]
 800902c:	2900      	cmp	r1, #0
 800902e:	d1f3      	bne.n	8009018 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8009030:	2320      	movs	r3, #32
 8009032:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8009036:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800903a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
          return HAL_TIMEOUT;
 800903e:	e019      	b.n	8009074 <UART_WaitOnFlagUntilTimeout+0xe0>
 8009040:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009042:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009046:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904a:	e842 3100 	strex	r1, r3, [r2]
 800904e:	2900      	cmp	r1, #0
 8009050:	d1f7      	bne.n	8009042 <UART_WaitOnFlagUntilTimeout+0xae>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009052:	f102 0308 	add.w	r3, r2, #8
 8009056:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800905a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905e:	f102 0008 	add.w	r0, r2, #8
 8009062:	e840 3100 	strex	r1, r3, [r0]
 8009066:	2900      	cmp	r1, #0
 8009068:	d1f3      	bne.n	8009052 <UART_WaitOnFlagUntilTimeout+0xbe>
        huart->gState = HAL_UART_STATE_READY;
 800906a:	2320      	movs	r3, #32
 800906c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8009070:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8009074:	2300      	movs	r3, #0
 8009076:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
        return HAL_TIMEOUT;
 800907a:	2003      	movs	r0, #3
 800907c:	e79d      	b.n	8008fba <UART_WaitOnFlagUntilTimeout+0x26>
 800907e:	bf00      	nop

08009080 <HAL_UART_Transmit>:
{
 8009080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009084:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8009086:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 800908a:	2820      	cmp	r0, #32
{
 800908c:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800908e:	f040 80a0 	bne.w	80091d2 <HAL_UART_Transmit+0x152>
    if ((pData == NULL) || (Size == 0U))
 8009092:	4688      	mov	r8, r1
 8009094:	b109      	cbz	r1, 800909a <HAL_UART_Transmit+0x1a>
 8009096:	4617      	mov	r7, r2
 8009098:	b91a      	cbnz	r2, 80090a2 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 800909a:	2001      	movs	r0, #1
}
 800909c:	b003      	add	sp, #12
 800909e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090a2:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090a4:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090a8:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090aa:	f8c4 9090 	str.w	r9, [r4, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090ae:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    tickstart = HAL_GetTick();
 80090b2:	f7f8 fafd 	bl	80016b0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090b6:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80090b8:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 80090c0:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    tickstart = HAL_GetTick();
 80090c4:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090c6:	f000 8088 	beq.w	80091da <HAL_UART_Transmit+0x15a>
    while (huart->TxXferCount > 0U)
 80090ca:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	b1b3      	cbz	r3, 8009100 <HAL_UART_Transmit+0x80>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	1c6a      	adds	r2, r5, #1
 80090d6:	d120      	bne.n	800911a <HAL_UART_Transmit+0x9a>
 80090d8:	69da      	ldr	r2, [r3, #28]
 80090da:	0610      	lsls	r0, r2, #24
 80090dc:	d5fc      	bpl.n	80090d8 <HAL_UART_Transmit+0x58>
      if (pdata8bits == NULL)
 80090de:	f1b8 0f00 	cmp.w	r8, #0
 80090e2:	d071      	beq.n	80091c8 <HAL_UART_Transmit+0x148>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80090e4:	f818 2b01 	ldrb.w	r2, [r8], #1
 80090e8:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 80090ea:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 80090ee:	3a01      	subs	r2, #1
 80090f0:	b292      	uxth	r2, r2
 80090f2:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80090f6:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 80090fa:	b292      	uxth	r2, r2
 80090fc:	2a00      	cmp	r2, #0
 80090fe:	d1e9      	bne.n	80090d4 <HAL_UART_Transmit+0x54>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009100:	9500      	str	r5, [sp, #0]
 8009102:	4633      	mov	r3, r6
 8009104:	2200      	movs	r2, #0
 8009106:	2140      	movs	r1, #64	@ 0x40
 8009108:	4620      	mov	r0, r4
 800910a:	f7ff ff43 	bl	8008f94 <UART_WaitOnFlagUntilTimeout>
 800910e:	2800      	cmp	r0, #0
 8009110:	d158      	bne.n	80091c4 <HAL_UART_Transmit+0x144>
    huart->gState = HAL_UART_STATE_READY;
 8009112:	2320      	movs	r3, #32
 8009114:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 8009118:	e7c0      	b.n	800909c <HAL_UART_Transmit+0x1c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800911a:	69da      	ldr	r2, [r3, #28]
 800911c:	0611      	lsls	r1, r2, #24
 800911e:	d4de      	bmi.n	80090de <HAL_UART_Transmit+0x5e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009120:	f7f8 fac6 	bl	80016b0 <HAL_GetTick>
 8009124:	1b80      	subs	r0, r0, r6
 8009126:	4285      	cmp	r5, r0
 8009128:	d330      	bcc.n	800918c <HAL_UART_Transmit+0x10c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800912a:	6823      	ldr	r3, [r4, #0]
 800912c:	461a      	mov	r2, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800912e:	b375      	cbz	r5, 800918e <HAL_UART_Transmit+0x10e>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009130:	6819      	ldr	r1, [r3, #0]
 8009132:	0749      	lsls	r1, r1, #29
 8009134:	d5f1      	bpl.n	800911a <HAL_UART_Transmit+0x9a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009136:	69d9      	ldr	r1, [r3, #28]
 8009138:	050f      	lsls	r7, r1, #20
 800913a:	d5ee      	bpl.n	800911a <HAL_UART_Transmit+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800913c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009140:	6219      	str	r1, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009142:	e853 1f00 	ldrex	r1, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009146:	f421 71d0 	bic.w	r1, r1, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914a:	e843 1000 	strex	r0, r1, [r3]
 800914e:	b138      	cbz	r0, 8009160 <HAL_UART_Transmit+0xe0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009150:	e852 3f00 	ldrex	r3, [r2]
 8009154:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009158:	e842 3100 	strex	r1, r3, [r2]
 800915c:	2900      	cmp	r1, #0
 800915e:	d1f7      	bne.n	8009150 <HAL_UART_Transmit+0xd0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009160:	f102 0308 	add.w	r3, r2, #8
 8009164:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009168:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916c:	f102 0008 	add.w	r0, r2, #8
 8009170:	e840 3100 	strex	r1, r3, [r0]
 8009174:	2900      	cmp	r1, #0
 8009176:	d1f3      	bne.n	8009160 <HAL_UART_Transmit+0xe0>
          huart->gState = HAL_UART_STATE_READY;
 8009178:	2320      	movs	r3, #32
 800917a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
          __HAL_UNLOCK(huart);
 800917e:	f884 1084 	strb.w	r1, [r4, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009182:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009186:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 800918a:	e01b      	b.n	80091c4 <HAL_UART_Transmit+0x144>
 800918c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918e:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009192:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009196:	e842 3100 	strex	r1, r3, [r2]
 800919a:	2900      	cmp	r1, #0
 800919c:	d1f7      	bne.n	800918e <HAL_UART_Transmit+0x10e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919e:	f102 0308 	add.w	r3, r2, #8
 80091a2:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091a6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091aa:	f102 0008 	add.w	r0, r2, #8
 80091ae:	e840 3100 	strex	r1, r3, [r0]
 80091b2:	2900      	cmp	r1, #0
 80091b4:	d1f3      	bne.n	800919e <HAL_UART_Transmit+0x11e>
        huart->gState = HAL_UART_STATE_READY;
 80091b6:	2320      	movs	r3, #32
 80091b8:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        __HAL_UNLOCK(huart);
 80091bc:	f884 1084 	strb.w	r1, [r4, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80091c0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        return HAL_TIMEOUT;
 80091c4:	2003      	movs	r0, #3
 80091c6:	e769      	b.n	800909c <HAL_UART_Transmit+0x1c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091c8:	f839 2b02 	ldrh.w	r2, [r9], #2
 80091cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091d0:	e78a      	b.n	80090e8 <HAL_UART_Transmit+0x68>
    return HAL_BUSY;
 80091d2:	2002      	movs	r0, #2
}
 80091d4:	b003      	add	sp, #12
 80091d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091da:	6923      	ldr	r3, [r4, #16]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f47f af74 	bne.w	80090ca <HAL_UART_Transmit+0x4a>
 80091e2:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 80091e4:	4698      	mov	r8, r3
 80091e6:	e770      	b.n	80090ca <HAL_UART_Transmit+0x4a>

080091e8 <HAL_UART_Init>:
  if (huart == NULL)
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d067      	beq.n	80092bc <HAL_UART_Init+0xd4>
{
 80091ec:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80091ee:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 80091f2:	b082      	sub	sp, #8
 80091f4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d04d      	beq.n	8009296 <HAL_UART_Init+0xae>
  __HAL_UART_DISABLE(huart);
 80091fa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80091fc:	2324      	movs	r3, #36	@ 0x24
 80091fe:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8009202:	6813      	ldr	r3, [r2, #0]
 8009204:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009208:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800920a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800920c:	f7ff fd40 	bl	8008c90 <UART_SetConfig>
 8009210:	2801      	cmp	r0, #1
 8009212:	d03d      	beq.n	8009290 <HAL_UART_Init+0xa8>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009214:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009216:	2b00      	cmp	r3, #0
 8009218:	d136      	bne.n	8009288 <HAL_UART_Init+0xa0>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800921a:	6823      	ldr	r3, [r4, #0]
 800921c:	6859      	ldr	r1, [r3, #4]
 800921e:	f421 4190 	bic.w	r1, r1, #18432	@ 0x4800
 8009222:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009224:	6899      	ldr	r1, [r3, #8]
 8009226:	f021 012a 	bic.w	r1, r1, #42	@ 0x2a
 800922a:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800922c:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800922e:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 8009230:	f041 0101 	orr.w	r1, r1, #1
 8009234:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009236:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800923a:	f7f8 fa39 	bl	80016b0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800923e:	6823      	ldr	r3, [r4, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8009244:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009246:	d40f      	bmi.n	8009268 <HAL_UART_Init+0x80>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	075b      	lsls	r3, r3, #29
 800924c:	d428      	bmi.n	80092a0 <HAL_UART_Init+0xb8>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800924e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8009250:	2220      	movs	r2, #32
 8009252:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8009256:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800925a:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  return HAL_OK;
 800925e:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009260:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009262:	6723      	str	r3, [r4, #112]	@ 0x70
}
 8009264:	b002      	add	sp, #8
 8009266:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009268:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	462a      	mov	r2, r5
 8009270:	4603      	mov	r3, r0
 8009272:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009276:	4620      	mov	r0, r4
 8009278:	f7ff fe8c 	bl	8008f94 <UART_WaitOnFlagUntilTimeout>
 800927c:	b9e0      	cbnz	r0, 80092b8 <HAL_UART_Init+0xd0>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	075b      	lsls	r3, r3, #29
 8009284:	d40c      	bmi.n	80092a0 <HAL_UART_Init+0xb8>
 8009286:	e7e2      	b.n	800924e <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 8009288:	4620      	mov	r0, r4
 800928a:	f7ff fe2d 	bl	8008ee8 <UART_AdvFeatureConfig>
 800928e:	e7c4      	b.n	800921a <HAL_UART_Init+0x32>
    return HAL_ERROR;
 8009290:	2001      	movs	r0, #1
}
 8009292:	b002      	add	sp, #8
 8009294:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8009296:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800929a:	f7f8 fc17 	bl	8001acc <HAL_UART_MspInit>
 800929e:	e7ac      	b.n	80091fa <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80092a4:	9300      	str	r3, [sp, #0]
 80092a6:	2200      	movs	r2, #0
 80092a8:	4633      	mov	r3, r6
 80092aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80092ae:	4620      	mov	r0, r4
 80092b0:	f7ff fe70 	bl	8008f94 <UART_WaitOnFlagUntilTimeout>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	d0ca      	beq.n	800924e <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 80092b8:	2003      	movs	r0, #3
 80092ba:	e7d3      	b.n	8009264 <HAL_UART_Init+0x7c>
    return HAL_ERROR;
 80092bc:	2001      	movs	r0, #1
}
 80092be:	4770      	bx	lr

080092c0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop

080092c4 <HAL_UARTEx_RxFifoFullCallback>:
/**
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop

080092c8 <HAL_UARTEx_TxFifoEmptyCallback>:
/**
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop

080092cc <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80092cc:	b510      	push	{r4, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	ab04      	add	r3, sp, #16
 80092d2:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092d6:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d03b      	beq.n	8009356 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x8a>
 80092de:	4604      	mov	r4, r0

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80092e0:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80092e2:	2224      	movs	r2, #36	@ 0x24
  __HAL_LOCK(huart);
 80092e4:	2001      	movs	r0, #1
 80092e6:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80092ea:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	f022 0201 	bic.w	r2, r2, #1
 80092f4:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80092f6:	689a      	ldr	r2, [r3, #8]
 80092f8:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80092fc:	430a      	orrs	r2, r1
 80092fe:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009300:	b971      	cbnz	r1, 8009320 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x54>
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009302:	685a      	ldr	r2, [r3, #4]
 8009304:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8009308:	f022 0210 	bic.w	r2, r2, #16
 800930c:	430a      	orrs	r2, r1
 800930e:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009310:	685a      	ldr	r2, [r3, #4]
 8009312:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8009316:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800931a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800931e:	605a      	str	r2, [r3, #4]
  __HAL_UART_ENABLE(huart);
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	f042 0201 	orr.w	r2, r2, #1
 8009326:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8009328:	f7f8 f9c2 	bl	80016b0 <HAL_GetTick>
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800932c:	f06f 427e 	mvn.w	r2, #4261412864	@ 0xfe000000
  tickstart = HAL_GetTick();
 8009330:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009332:	9200      	str	r2, [sp, #0]
 8009334:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009338:	2200      	movs	r2, #0
 800933a:	4620      	mov	r0, r4
 800933c:	f7ff fe2a 	bl	8008f94 <UART_WaitOnFlagUntilTimeout>
 8009340:	b938      	cbnz	r0, 8009352 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x86>
    huart->gState = HAL_UART_STATE_READY;
 8009342:	2320      	movs	r3, #32
 8009344:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8009348:	2300      	movs	r3, #0
 800934a:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800934e:	b004      	add	sp, #16
 8009350:	bd10      	pop	{r4, pc}
    status = HAL_TIMEOUT;
 8009352:	2003      	movs	r0, #3
 8009354:	e7f8      	b.n	8009348 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7c>
  __HAL_LOCK(huart);
 8009356:	2002      	movs	r0, #2
}
 8009358:	b004      	add	sp, #16
 800935a:	bd10      	pop	{r4, pc}

0800935c <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 800935c:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8009360:	2b01      	cmp	r3, #1
 8009362:	d00f      	beq.n	8009384 <HAL_UARTEx_EnableStopMode+0x28>
 8009364:	2301      	movs	r3, #1
 8009366:	6801      	ldr	r1, [r0, #0]
 8009368:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936c:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009370:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009374:	e841 3200 	strex	r2, r3, [r1]
 8009378:	2a00      	cmp	r2, #0
 800937a:	d1f7      	bne.n	800936c <HAL_UARTEx_EnableStopMode+0x10>
  __HAL_UNLOCK(huart);
 800937c:	f880 2084 	strb.w	r2, [r0, #132]	@ 0x84
  return HAL_OK;
 8009380:	4610      	mov	r0, r2
 8009382:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009384:	2002      	movs	r0, #2
}
 8009386:	4770      	bx	lr

08009388 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8009388:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800938c:	2b01      	cmp	r3, #1
 800938e:	d016      	beq.n	80093be <HAL_UARTEx_DisableFifoMode+0x36>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009390:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009392:	2324      	movs	r3, #36	@ 0x24
{
 8009394:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8009396:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800939a:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800939c:	6814      	ldr	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800939e:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 80093a0:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80093a4:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 80093a8:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80093aa:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093ac:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(huart);
 80093ae:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 80093b2:	2220      	movs	r2, #32
 80093b4:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
}
 80093b8:	bc10      	pop	{r4}
  return HAL_OK;
 80093ba:	4618      	mov	r0, r3
}
 80093bc:	4770      	bx	lr
  __HAL_LOCK(huart);
 80093be:	2002      	movs	r0, #2
}
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop

080093c4 <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 80093c4:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80093c8:	2a01      	cmp	r2, #1
 80093ca:	d037      	beq.n	800943c <HAL_UARTEx_SetTxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 80093cc:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093ce:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80093d0:	2024      	movs	r0, #36	@ 0x24
{
 80093d2:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80093d4:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093d8:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80093da:	6810      	ldr	r0, [r2, #0]
 80093dc:	f020 0001 	bic.w	r0, r0, #1
 80093e0:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80093e2:	6890      	ldr	r0, [r2, #8]
 80093e4:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 80093e8:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80093ea:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80093ec:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80093ee:	b310      	cbz	r0, 8009436 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80093f0:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80093f2:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 80093f4:	4d12      	ldr	r5, [pc, #72]	@ (8009440 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093f6:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80093fa:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093fe:	4911      	ldr	r1, [pc, #68]	@ (8009444 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 8009400:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009404:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009408:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800940c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009410:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009412:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009414:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009418:	fbb1 f1f5 	udiv	r1, r1, r5
 800941c:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8009420:	2100      	movs	r1, #0
 8009422:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8009426:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009428:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800942a:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 800942e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009430:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8009434:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8009436:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009438:	4608      	mov	r0, r1
 800943a:	e7ef      	b.n	800941c <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800943c:	2002      	movs	r0, #2
}
 800943e:	4770      	bx	lr
 8009440:	0800d1c4 	.word	0x0800d1c4
 8009444:	0800d1cc 	.word	0x0800d1cc

08009448 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8009448:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 800944c:	2a01      	cmp	r2, #1
 800944e:	d037      	beq.n	80094c0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8009450:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009452:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009454:	2024      	movs	r0, #36	@ 0x24
{
 8009456:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8009458:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800945c:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800945e:	6810      	ldr	r0, [r2, #0]
 8009460:	f020 0001 	bic.w	r0, r0, #1
 8009464:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009466:	6890      	ldr	r0, [r2, #8]
 8009468:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 800946c:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800946e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009470:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009472:	b310      	cbz	r0, 80094ba <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009474:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009476:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009478:	4d12      	ldr	r5, [pc, #72]	@ (80094c4 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800947a:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800947e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009482:	4911      	ldr	r1, [pc, #68]	@ (80094c8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009484:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009488:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800948c:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8009490:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009494:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009496:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009498:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800949c:	fbb1 f1f5 	udiv	r1, r1, r5
 80094a0:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 80094a4:	2100      	movs	r1, #0
 80094a6:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80094aa:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094ac:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80094ae:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 80094b2:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80094b4:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 80094b8:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80094ba:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80094bc:	4608      	mov	r0, r1
 80094be:	e7ef      	b.n	80094a0 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80094c0:	2002      	movs	r0, #2
}
 80094c2:	4770      	bx	lr
 80094c4:	0800d1c4 	.word	0x0800d1c4
 80094c8:	0800d1cc 	.word	0x0800d1cc

080094cc <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 80094cc:	2001      	movs	r0, #1
 80094ce:	4770      	bx	lr

080094d0 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80094d0:	b530      	push	{r4, r5, lr}
 80094d2:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 80094d6:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80094da:	f89d 4014 	ldrb.w	r4, [sp, #20]
 80094de:	f89d e018 	ldrb.w	lr, [sp, #24]
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 80094e2:	b380      	cbz	r0, 8009546 <RadioTimeOnAir+0x76>
 80094e4:	2801      	cmp	r0, #1
 80094e6:	d12c      	bne.n	8009542 <RadioTimeOnAir+0x72>
                            ( crcOn ? 16 : 0 ) -
 80094e8:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80094ec:	1f50      	subs	r0, r2, #5
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80094ee:	eb0e 0ec4 	add.w	lr, lr, r4, lsl #3
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80094f2:	2801      	cmp	r0, #1
    int32_t crDenom           = coderate + 4;
 80094f4:	f103 0304 	add.w	r3, r3, #4
                            ( crcOn ? 16 : 0 ) -
 80094f8:	ebae 0e82 	sub.w	lr, lr, r2, lsl #2
                            ( 4 * datarate ) +
 80094fc:	ea4f 0482 	mov.w	r4, r2, lsl #2
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8009500:	d935      	bls.n	800956e <RadioTimeOnAir+0x9e>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009502:	2900      	cmp	r1, #0
 8009504:	d158      	bne.n	80095b8 <RadioTimeOnAir+0xe8>
 8009506:	f1a2 000b 	sub.w	r0, r2, #11
 800950a:	2801      	cmp	r0, #1
 800950c:	bf8c      	ite	hi
 800950e:	2000      	movhi	r0, #0
 8009510:	2001      	movls	r0, #1
                            ( fixLen ? 0 : 20 );
 8009512:	b90d      	cbnz	r5, 8009518 <RadioTimeOnAir+0x48>
                            ( 4 * datarate ) +
 8009514:	f10e 0e14 	add.w	lr, lr, #20
    if( datarate <= 6 )
 8009518:	2a06      	cmp	r2, #6
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800951a:	4675      	mov	r5, lr
    if( datarate <= 6 )
 800951c:	d92f      	bls.n	800957e <RadioTimeOnAir+0xae>
            ceilDenominator = 4 * ( datarate - 2 );
 800951e:	3a02      	subs	r2, #2
        ceilNumerator += 8;
 8009520:	f10e 0e08 	add.w	lr, lr, #8
        if( lowDatareOptimize == true )
 8009524:	b100      	cbz	r0, 8009528 <RadioTimeOnAir+0x58>
            ceilDenominator = 4 * ( datarate - 2 );
 8009526:	0094      	lsls	r4, r2, #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8009528:	f1be 0f00 	cmp.w	lr, #0
 800952c:	bfac      	ite	ge
 800952e:	eb04 000e 	addge.w	r0, r4, lr
 8009532:	1c20      	addlt	r0, r4, #0
 8009534:	3801      	subs	r0, #1
 8009536:	fb90 f0f4 	sdiv	r0, r0, r4
 800953a:	fb03 c300 	mla	r3, r3, r0, ip
    int32_t intermediate =
 800953e:	330c      	adds	r3, #12
    if( datarate <= 6 )
 8009540:	e028      	b.n	8009594 <RadioTimeOnAir+0xc4>
    switch( modem )
 8009542:	2000      	movs	r0, #0
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
}
 8009544:	bd30      	pop	{r4, r5, pc}
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8009546:	f085 0501 	eor.w	r5, r5, #1
    return ( preambleLen << 3 ) +
 800954a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800954e:	eb0c 0cc5 	add.w	ip, ip, r5, lsl #3
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8009552:	eb04 044e 	add.w	r4, r4, lr, lsl #1
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8009556:	f10c 0c18 	add.w	ip, ip, #24
 800955a:	eb0c 0cc4 	add.w	ip, ip, r4, lsl #3
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800955e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
    return DIVC( numerator, denominator );
 8009562:	1e50      	subs	r0, r2, #1
 8009564:	fb03 000c 	mla	r0, r3, ip, r0
 8009568:	fbb0 f0f2 	udiv	r0, r0, r2
}
 800956c:	bd30      	pop	{r4, r5, pc}
        if( preambleLen < 12 )
 800956e:	f1bc 0f0c 	cmp.w	ip, #12
 8009572:	bf38      	it	cc
 8009574:	f04f 0c0c 	movcc.w	ip, #12
                            ( fixLen ? 0 : 20 );
 8009578:	bb3d      	cbnz	r5, 80095ca <RadioTimeOnAir+0xfa>
                            ( 4 * datarate ) +
 800957a:	f10e 0514 	add.w	r5, lr, #20
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800957e:	2d00      	cmp	r5, #0
 8009580:	bfac      	ite	ge
 8009582:	1960      	addge	r0, r4, r5
 8009584:	1c20      	addlt	r0, r4, #0
 8009586:	3801      	subs	r0, #1
 8009588:	fb90 f0f4 	sdiv	r0, r0, r4
 800958c:	fb03 c300 	mla	r3, r3, r0, ip
        intermediate += 2;
 8009590:	330e      	adds	r3, #14
            ceilDenominator = 4 * ( datarate - 2 );
 8009592:	3a02      	subs	r2, #2
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8009594:	480e      	ldr	r0, [pc, #56]	@ (80095d0 <RadioTimeOnAir+0x100>)
 8009596:	5c41      	ldrb	r1, [r0, r1]
    switch( bw )
 8009598:	290a      	cmp	r1, #10
 800959a:	d818      	bhi.n	80095ce <RadioTimeOnAir+0xfe>
 800959c:	480d      	ldr	r0, [pc, #52]	@ (80095d4 <RadioTimeOnAir+0x104>)
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80095a4:	3301      	adds	r3, #1
 80095a6:	4093      	lsls	r3, r2
    return DIVC( numerator, denominator );
 80095a8:	1e48      	subs	r0, r1, #1
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80095aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
    return DIVC( numerator, denominator );
 80095ae:	fb02 0003 	mla	r0, r2, r3, r0
 80095b2:	fbb0 f0f1 	udiv	r0, r0, r1
}
 80095b6:	bd30      	pop	{r4, r5, pc}
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80095b8:	2901      	cmp	r1, #1
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80095ba:	bf03      	ittte	eq
 80095bc:	f1a2 000c 	subeq.w	r0, r2, #12
 80095c0:	fab0 f080 	clzeq	r0, r0
 80095c4:	0940      	lsreq	r0, r0, #5
    bool    lowDatareOptimize = false;
 80095c6:	2000      	movne	r0, #0
 80095c8:	e7a3      	b.n	8009512 <RadioTimeOnAir+0x42>
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80095ca:	4675      	mov	r5, lr
    if( datarate <= 6 )
 80095cc:	e7d7      	b.n	800957e <RadioTimeOnAir+0xae>
    return DIVC( numerator, denominator );
 80095ce:	deff      	udf	#255	@ 0xff
 80095d0:	0800d270 	.word	0x0800d270
 80095d4:	0800d244 	.word	0x0800d244

080095d8 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutProcess( void )
{
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80095d8:	4b03      	ldr	r3, [pc, #12]	@ (80095e8 <RadioOnTxTimeoutIrq+0x10>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	b113      	cbz	r3, 80095e4 <RadioOnTxTimeoutIrq+0xc>
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	b103      	cbz	r3, 80095e4 <RadioOnTxTimeoutIrq+0xc>
    {
        RadioEvents->TxTimeout( );
 80095e2:	4718      	bx	r3
}
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	200004c4 	.word	0x200004c4

080095ec <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutProcess( void )
{
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80095ec:	4b03      	ldr	r3, [pc, #12]	@ (80095fc <RadioOnRxTimeoutIrq+0x10>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	b113      	cbz	r3, 80095f8 <RadioOnRxTimeoutIrq+0xc>
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	b103      	cbz	r3, 80095f8 <RadioOnRxTimeoutIrq+0xc>
    {
        RadioEvents->RxTimeout( );
 80095f6:	4718      	bx	r3
}
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	200004c4 	.word	0x200004c4

08009600 <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 8009600:	2001      	movs	r0, #1
 8009602:	4770      	bx	lr

08009604 <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 8009604:	2001      	movs	r0, #1
 8009606:	4770      	bx	lr

08009608 <RadioRead>:
    return SUBGRF_ReadRegister( addr );
 8009608:	f002 ba20 	b.w	800ba4c <SUBGRF_ReadRegister>

0800960c <RadioWrite>:
    SUBGRF_WriteRegister( addr, data );
 800960c:	f002 ba0c 	b.w	800ba28 <SUBGRF_WriteRegister>

08009610 <RadioTxCw>:
{
 8009610:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8009612:	f002 fa83 	bl	800bb1c <SUBGRF_SetRfTxPower>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009616:	210e      	movs	r1, #14
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8009618:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800961a:	f640 101f 	movw	r0, #2335	@ 0x91f
 800961e:	f002 fa03 	bl	800ba28 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8009622:	4620      	mov	r0, r4
 8009624:	2101      	movs	r1, #1
 8009626:	f002 fa41 	bl	800baac <SUBGRF_SetSwitch>
}
 800962a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SUBGRF_SetTxContinuousWave( );
 800962e:	f001 bdfd 	b.w	800b22c <SUBGRF_SetTxContinuousWave>
 8009632:	bf00      	nop

08009634 <RadioSetRxDutyCycle>:
{
 8009634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009636:	4604      	mov	r4, r0
 8009638:	460d      	mov	r5, r1
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800963a:	2300      	movs	r3, #0
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800963c:	4e0a      	ldr	r6, [pc, #40]	@ (8009668 <RadioSetRxDutyCycle+0x34>)
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800963e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8009642:	4608      	mov	r0, r1
 8009644:	461a      	mov	r2, r3
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8009646:	eb05 0744 	add.w	r7, r5, r4, lsl #1
 800964a:	65b7      	str	r7, [r6, #88]	@ 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800964c:	f001 fe66 	bl	800b31c <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8009650:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 8009654:	2100      	movs	r1, #0
 8009656:	f002 fa29 	bl	800baac <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800965a:	4629      	mov	r1, r5
 800965c:	4620      	mov	r0, r4
}
 800965e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8009662:	f001 bda9 	b.w	800b1b8 <SUBGRF_SetRxDutyCycle>
 8009666:	bf00      	nop
 8009668:	20000468 	.word	0x20000468

0800966c <RadioStandby>:
    SUBGRF_SetStandby( STDBY_RC );
 800966c:	2000      	movs	r0, #0
 800966e:	f001 bd1f 	b.w	800b0b0 <SUBGRF_SetStandby>
 8009672:	bf00      	nop

08009674 <RadioGetStatus>:
{
 8009674:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 8009676:	f001 fb91 	bl	800ad9c <SUBGRF_GetOperatingMode>
 800967a:	3804      	subs	r0, #4
 800967c:	b2c0      	uxtb	r0, r0
 800967e:	2803      	cmp	r0, #3
 8009680:	bf96      	itet	ls
 8009682:	4b02      	ldrls	r3, [pc, #8]	@ (800968c <RadioGetStatus+0x18>)
 8009684:	2000      	movhi	r0, #0
 8009686:	5c18      	ldrbls	r0, [r3, r0]
}
 8009688:	bd08      	pop	{r3, pc}
 800968a:	bf00      	nop
 800968c:	0800d240 	.word	0x0800d240

08009690 <RadioGetWakeupTime>:
{
 8009690:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8009692:	f002 fa5f 	bl	800bb54 <SUBGRF_GetRadioWakeUpTime>
}
 8009696:	3003      	adds	r0, #3
 8009698:	bd08      	pop	{r3, pc}
 800969a:	bf00      	nop

0800969c <RadioReadRegisters>:
    SUBGRF_ReadRegisters( addr, buffer, size );
 800969c:	f002 b9f6 	b.w	800ba8c <SUBGRF_ReadRegisters>

080096a0 <RadioWriteRegisters>:
    SUBGRF_WriteRegisters( addr, buffer, size );
 80096a0:	f002 b9e4 	b.w	800ba6c <SUBGRF_WriteRegisters>

080096a4 <RadioRssi>:
{
 80096a4:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 80096a6:	f002 f961 	bl	800b96c <SUBGRF_GetRssiInst>
}
 80096aa:	bd08      	pop	{r3, pc}

080096ac <RadioSetTxContinuousWave>:
{
 80096ac:	b570      	push	{r4, r5, r6, lr}
 80096ae:	460d      	mov	r5, r1
 80096b0:	4614      	mov	r4, r2
    SUBGRF_SetRfFrequency( freq );
 80096b2:	f001 fe5f 	bl	800b374 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 80096b6:	4628      	mov	r0, r5
 80096b8:	f002 fa30 	bl	800bb1c <SUBGRF_SetRfTxPower>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80096bc:	210e      	movs	r1, #14
    antswitchpow = SUBGRF_SetRfTxPower( power );
 80096be:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80096c0:	f640 101f 	movw	r0, #2335	@ 0x91f
 80096c4:	f002 f9b0 	bl	800ba28 <SUBGRF_WriteRegister>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80096c8:	4e09      	ldr	r6, [pc, #36]	@ (80096f0 <RadioSetTxContinuousWave+0x44>)
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80096ca:	4628      	mov	r0, r5
 80096cc:	2101      	movs	r1, #1
 80096ce:	f002 f9ed 	bl	800baac <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80096d2:	f001 fdab 	bl	800b22c <SUBGRF_SetTxContinuousWave>
    uint32_t timeout = ( uint32_t )time * 1000;
 80096d6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
    TimerSetValue( &TxTimeoutTimer, timeout );
 80096da:	fb04 f101 	mul.w	r1, r4, r1
 80096de:	4630      	mov	r0, r6
 80096e0:	f003 f8d6 	bl	800c890 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80096e4:	4630      	mov	r0, r6
}
 80096e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    TimerStart( &TxTimeoutTimer );
 80096ea:	f003 b875 	b.w	800c7d8 <UTIL_TIMER_Start>
 80096ee:	bf00      	nop
 80096f0:	20000450 	.word	0x20000450

080096f4 <RadioSetChannel>:
    SUBGRF_SetRfFrequency( freq );
 80096f4:	f001 be3e 	b.w	800b374 <SUBGRF_SetRfFrequency>

080096f8 <RadioStartCad>:
{
 80096f8:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80096fa:	4b08      	ldr	r3, [pc, #32]	@ (800971c <RadioStartCad+0x24>)
 80096fc:	2100      	movs	r1, #0
 80096fe:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 8009702:	f002 f9d3 	bl	800baac <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8009706:	2300      	movs	r3, #0
 8009708:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800970c:	461a      	mov	r2, r3
 800970e:	4608      	mov	r0, r1
 8009710:	f001 fe04 	bl	800b31c <SUBGRF_SetDioIrqParams>
}
 8009714:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SUBGRF_SetCad( );
 8009718:	f001 bd74 	b.w	800b204 <SUBGRF_SetCad>
 800971c:	20000468 	.word	0x20000468

08009720 <RadioSleep>:
{
 8009720:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8009722:	f04f 0004 	mov.w	r0, #4
 8009726:	f001 fc85 	bl	800b034 <SUBGRF_SetSleep>
}
 800972a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RADIO_DELAY_MS( 2 );
 800972e:	2002      	movs	r0, #2
 8009730:	f7f7 bfc6 	b.w	80016c0 <HAL_Delay>

08009734 <RadioRandom>:
{
 8009734:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8009736:	2300      	movs	r3, #0
 8009738:	461a      	mov	r2, r3
 800973a:	4619      	mov	r1, r3
 800973c:	4618      	mov	r0, r3
 800973e:	f001 fded 	bl	800b31c <SUBGRF_SetDioIrqParams>
}
 8009742:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    rnd = SUBGRF_GetRandom();
 8009746:	f001 bbf9 	b.w	800af3c <SUBGRF_GetRandom>
 800974a:	bf00      	nop

0800974c <RadioSetMaxPayloadLength>:
    if( modem == MODEM_LORA )
 800974c:	2801      	cmp	r0, #1
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800974e:	4b0a      	ldr	r3, [pc, #40]	@ (8009778 <RadioSetMaxPayloadLength+0x2c>)
    if( modem == MODEM_LORA )
 8009750:	d003      	beq.n	800975a <RadioSetMaxPayloadLength+0xe>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8009752:	7d5a      	ldrb	r2, [r3, #21]
 8009754:	2a01      	cmp	r2, #1
 8009756:	d007      	beq.n	8009768 <RadioSetMaxPayloadLength+0x1c>
}
 8009758:	4770      	bx	lr
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800975a:	4a08      	ldr	r2, [pc, #32]	@ (800977c <RadioSetMaxPayloadLength+0x30>)
 800975c:	77d9      	strb	r1, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800975e:	f103 000e 	add.w	r0, r3, #14
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8009762:	7011      	strb	r1, [r2, #0]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009764:	f002 b818 	b.w	800b798 <SUBGRF_SetPacketParams>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8009768:	4a04      	ldr	r2, [pc, #16]	@ (800977c <RadioSetMaxPayloadLength+0x30>)
 800976a:	7599      	strb	r1, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800976c:	f103 000e 	add.w	r0, r3, #14
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8009770:	7011      	strb	r1, [r2, #0]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009772:	f002 b811 	b.w	800b798 <SUBGRF_SetPacketParams>
 8009776:	bf00      	nop
 8009778:	20000468 	.word	0x20000468
 800977c:	20000018 	.word	0x20000018

08009780 <RadioRxBoosted>:
{
 8009780:	b510      	push	{r4, lr}
 8009782:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 8009784:	f002 faa8 	bl	800bcd8 <RFW_Is_Init>
 8009788:	2801      	cmp	r0, #1
 800978a:	d01c      	beq.n	80097c6 <RadioRxBoosted+0x46>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800978c:	2300      	movs	r3, #0
 800978e:	f240 2162 	movw	r1, #610	@ 0x262
 8009792:	461a      	mov	r2, r3
 8009794:	4608      	mov	r0, r1
 8009796:	f001 fdc1 	bl	800b31c <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800979a:	b9c4      	cbnz	r4, 80097ce <RadioRxBoosted+0x4e>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800979c:	4c10      	ldr	r4, [pc, #64]	@ (80097e0 <RadioRxBoosted+0x60>)
 800979e:	2100      	movs	r1, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80097a0:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80097a4:	65a1      	str	r1, [r4, #88]	@ 0x58
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80097a6:	f002 f981 	bl	800baac <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 80097aa:	7863      	ldrb	r3, [r4, #1]
 80097ac:	b12b      	cbz	r3, 80097ba <RadioRxBoosted+0x3a>
}
 80097ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80097b2:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80097b6:	f001 bcd5 	b.w	800b164 <SUBGRF_SetRxBoosted>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80097ba:	68a0      	ldr	r0, [r4, #8]
}
 80097bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80097c0:	0180      	lsls	r0, r0, #6
 80097c2:	f001 bccf 	b.w	800b164 <SUBGRF_SetRxBoosted>
        RFW_ReceiveInit();
 80097c6:	f002 fa91 	bl	800bcec <RFW_ReceiveInit>
    if( timeout != 0 )
 80097ca:	2c00      	cmp	r4, #0
 80097cc:	d0e6      	beq.n	800979c <RadioRxBoosted+0x1c>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80097ce:	4621      	mov	r1, r4
 80097d0:	4804      	ldr	r0, [pc, #16]	@ (80097e4 <RadioRxBoosted+0x64>)
 80097d2:	f003 f85d 	bl	800c890 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80097d6:	4803      	ldr	r0, [pc, #12]	@ (80097e4 <RadioRxBoosted+0x64>)
 80097d8:	f002 fffe 	bl	800c7d8 <UTIL_TIMER_Start>
 80097dc:	e7de      	b.n	800979c <RadioRxBoosted+0x1c>
 80097de:	bf00      	nop
 80097e0:	20000468 	.word	0x20000468
 80097e4:	20000438 	.word	0x20000438

080097e8 <RadioRx>:
{
 80097e8:	b510      	push	{r4, lr}
 80097ea:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 80097ec:	f002 fa74 	bl	800bcd8 <RFW_Is_Init>
 80097f0:	2801      	cmp	r0, #1
 80097f2:	d01c      	beq.n	800982e <RadioRx+0x46>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80097f4:	2300      	movs	r3, #0
 80097f6:	f240 2162 	movw	r1, #610	@ 0x262
 80097fa:	461a      	mov	r2, r3
 80097fc:	4608      	mov	r0, r1
 80097fe:	f001 fd8d 	bl	800b31c <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8009802:	b9c4      	cbnz	r4, 8009836 <RadioRx+0x4e>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8009804:	4c10      	ldr	r4, [pc, #64]	@ (8009848 <RadioRx+0x60>)
 8009806:	2100      	movs	r1, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8009808:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800980c:	65a1      	str	r1, [r4, #88]	@ 0x58
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800980e:	f002 f94d 	bl	800baac <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8009812:	7863      	ldrb	r3, [r4, #1]
 8009814:	b12b      	cbz	r3, 8009822 <RadioRx+0x3a>
}
 8009816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800981a:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800981e:	f001 bc83 	b.w	800b128 <SUBGRF_SetRx>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8009822:	68a0      	ldr	r0, [r4, #8]
}
 8009824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8009828:	0180      	lsls	r0, r0, #6
 800982a:	f001 bc7d 	b.w	800b128 <SUBGRF_SetRx>
        RFW_ReceiveInit( );
 800982e:	f002 fa5d 	bl	800bcec <RFW_ReceiveInit>
    if( timeout != 0 )
 8009832:	2c00      	cmp	r4, #0
 8009834:	d0e6      	beq.n	8009804 <RadioRx+0x1c>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8009836:	4621      	mov	r1, r4
 8009838:	4804      	ldr	r0, [pc, #16]	@ (800984c <RadioRx+0x64>)
 800983a:	f003 f829 	bl	800c890 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800983e:	4803      	ldr	r0, [pc, #12]	@ (800984c <RadioRx+0x64>)
 8009840:	f002 ffca 	bl	800c7d8 <UTIL_TIMER_Start>
 8009844:	e7de      	b.n	8009804 <RadioRx+0x1c>
 8009846:	bf00      	nop
 8009848:	20000468 	.word	0x20000468
 800984c:	20000438 	.word	0x20000438

08009850 <RadioSend>:
{
 8009850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8009854:	2300      	movs	r3, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8009856:	4c8b      	ldr	r4, [pc, #556]	@ (8009a84 <RadioSend+0x234>)
{
 8009858:	460d      	mov	r5, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800985a:	f240 2101 	movw	r1, #513	@ 0x201
 800985e:	461a      	mov	r2, r3
{
 8009860:	b082      	sub	sp, #8
 8009862:	4606      	mov	r6, r0
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8009864:	4608      	mov	r0, r1
 8009866:	f001 fd59 	bl	800b31c <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800986a:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 800986e:	2101      	movs	r1, #1
 8009870:	f002 f91c 	bl	800baac <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8009874:	7823      	ldrb	r3, [r4, #0]
 8009876:	2b01      	cmp	r3, #1
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009878:	f640 0089 	movw	r0, #2185	@ 0x889
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800987c:	d104      	bne.n	8009888 <RadioSend+0x38>
 800987e:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8009882:	2b06      	cmp	r3, #6
 8009884:	f000 80a2 	beq.w	80099cc <RadioSend+0x17c>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009888:	f002 f8e0 	bl	800ba4c <SUBGRF_ReadRegister>
 800988c:	f040 0104 	orr.w	r1, r0, #4
 8009890:	b2c9      	uxtb	r1, r1
 8009892:	f640 0089 	movw	r0, #2185	@ 0x889
 8009896:	f002 f8c7 	bl	800ba28 <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 800989a:	7823      	ldrb	r3, [r4, #0]
 800989c:	2b04      	cmp	r3, #4
 800989e:	d80f      	bhi.n	80098c0 <RadioSend+0x70>
 80098a0:	e8df f003 	tbb	[pc, r3]
 80098a4:	03199119 	.word	0x03199119
 80098a8:	21          	.byte	0x21
 80098a9:	00          	.byte	0x00
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80098aa:	2302      	movs	r3, #2
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80098ac:	4876      	ldr	r0, [pc, #472]	@ (8009a88 <RadioSend+0x238>)
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80098ae:	73a3      	strb	r3, [r4, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80098b0:	76a5      	strb	r5, [r4, #26]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80098b2:	f001 ff71 	bl	800b798 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80098b6:	2200      	movs	r2, #0
 80098b8:	4629      	mov	r1, r5
 80098ba:	4630      	mov	r0, r6
 80098bc:	f001 fab4 	bl	800ae28 <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80098c0:	6861      	ldr	r1, [r4, #4]
 80098c2:	4872      	ldr	r0, [pc, #456]	@ (8009a8c <RadioSend+0x23c>)
 80098c4:	f002 ffe4 	bl	800c890 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80098c8:	4870      	ldr	r0, [pc, #448]	@ (8009a8c <RadioSend+0x23c>)
 80098ca:	f002 ff85 	bl	800c7d8 <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 80098ce:	2000      	movs	r0, #0
}
 80098d0:	b002      	add	sp, #8
 80098d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if ( 1UL == RFW_Is_Init( ) )
 80098d6:	f002 f9ff 	bl	800bcd8 <RFW_Is_Init>
 80098da:	2801      	cmp	r0, #1
 80098dc:	4607      	mov	r7, r0
 80098de:	d07e      	beq.n	80099de <RadioSend+0x18e>
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80098e0:	4869      	ldr	r0, [pc, #420]	@ (8009a88 <RadioSend+0x238>)
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80098e2:	75a5      	strb	r5, [r4, #22]
 80098e4:	e7e5      	b.n	80098b2 <RadioSend+0x62>
    for( i = 0; i < size; i++ )
 80098e6:	2d00      	cmp	r5, #0
 80098e8:	f000 80c1 	beq.w	8009a6e <RadioSend+0x21e>
 80098ec:	1e6b      	subs	r3, r5, #1
 80098ee:	2b03      	cmp	r3, #3
 80098f0:	4f67      	ldr	r7, [pc, #412]	@ (8009a90 <RadioSend+0x240>)
 80098f2:	d904      	bls.n	80098fe <RadioSend+0xae>
 80098f4:	1c73      	adds	r3, r6, #1
 80098f6:	1afb      	subs	r3, r7, r3
 80098f8:	2b02      	cmp	r3, #2
 80098fa:	f200 8086 	bhi.w	8009a0a <RadioSend+0x1ba>
 80098fe:	4964      	ldr	r1, [pc, #400]	@ (8009a90 <RadioSend+0x240>)
 8009900:	4633      	mov	r3, r6
 8009902:	eb06 0c05 	add.w	ip, r6, r5
        outBuffer[i] = 0;
 8009906:	2000      	movs	r0, #0
        inBuffer[i] = ~inBuffer[i];
 8009908:	781a      	ldrb	r2, [r3, #0]
 800990a:	43d2      	mvns	r2, r2
 800990c:	f803 2b01 	strb.w	r2, [r3], #1
    for( i = 0; i < size; i++ )
 8009910:	459c      	cmp	ip, r3
        outBuffer[i] = 0;
 8009912:	f801 0b01 	strb.w	r0, [r1], #1
    for( i = 0; i < size; i++ )
 8009916:	d1f7      	bne.n	8009908 <RadioSend+0xb8>
    uint8_t prevInt = 0;
 8009918:	2000      	movs	r0, #0
    for( i = 0; i < ( size * 8 ); i++ )
 800991a:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 800991e:	4601      	mov	r1, r0
 8009920:	4602      	mov	r2, r0
 8009922:	4684      	mov	ip, r0
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8009924:	f816 300c 	ldrb.w	r3, [r6, ip]
        index_bit = 7 - ( i % 8 );
 8009928:	f1c2 0207 	rsb	r2, r2, #7
 800992c:	b2d2      	uxtb	r2, r2
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800992e:	3101      	adds	r1, #1
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8009930:	4113      	asrs	r3, r2
        index_byte_out = ( i + 1 ) / 8;
 8009932:	ea4f 0ce1 	mov.w	ip, r1, asr #3
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8009936:	f003 0301 	and.w	r3, r3, #1
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800993a:	f001 0207 	and.w	r2, r1, #7
        prevInt ^= currBit;
 800993e:	4058      	eors	r0, r3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8009940:	f1c2 0307 	rsb	r3, r2, #7
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8009944:	f817 800c 	ldrb.w	r8, [r7, ip]
 8009948:	b2db      	uxtb	r3, r3
 800994a:	fa00 f303 	lsl.w	r3, r0, r3
 800994e:	ea43 0308 	orr.w	r3, r3, r8
    for( i = 0; i < ( size * 8 ); i++ )
 8009952:	4571      	cmp	r1, lr
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8009954:	f807 300c 	strb.w	r3, [r7, ip]
    for( i = 0; i < ( size * 8 ); i++ )
 8009958:	d1e4      	bne.n	8009924 <RadioSend+0xd4>
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800995a:	0183      	lsls	r3, r0, #6
 800995c:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 8009960:	0140      	lsls	r0, r0, #5
 8009962:	f080 0020 	eor.w	r0, r0, #32
 8009966:	4303      	orrs	r3, r0
 8009968:	b2db      	uxtb	r3, r3
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800996a:	1c6e      	adds	r6, r5, #1
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800996c:	557b      	strb	r3, [r7, r5]
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800996e:	2202      	movs	r2, #2
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009970:	4845      	ldr	r0, [pc, #276]	@ (8009a88 <RadioSend+0x238>)
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8009972:	73a2      	strb	r2, [r4, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8009974:	b2f6      	uxtb	r6, r6
 8009976:	76a6      	strb	r6, [r4, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009978:	f001 ff0e 	bl	800b798 <SUBGRF_SetPacketParams>
    SUBGRF_WriteRegister( addr, data );
 800997c:	2100      	movs	r1, #0
 800997e:	20f1      	movs	r0, #241	@ 0xf1
 8009980:	f002 f852 	bl	800ba28 <SUBGRF_WriteRegister>
 8009984:	2100      	movs	r1, #0
 8009986:	20f0      	movs	r0, #240	@ 0xf0
 8009988:	f002 f84e 	bl	800ba28 <SUBGRF_WriteRegister>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800998c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800998e:	2b64      	cmp	r3, #100	@ 0x64
 8009990:	d064      	beq.n	8009a5c <RadioSend+0x20c>
    SUBGRF_WriteRegister( addr, data );
 8009992:	21e1      	movs	r1, #225	@ 0xe1
 8009994:	20f3      	movs	r0, #243	@ 0xf3
 8009996:	f002 f847 	bl	800ba28 <SUBGRF_WriteRegister>
 800999a:	2104      	movs	r1, #4
 800999c:	20f2      	movs	r0, #242	@ 0xf2
 800999e:	f002 f843 	bl	800ba28 <SUBGRF_WriteRegister>
            uint16_t bitNum = ( size * 8 ) + 2;
 80099a2:	00e9      	lsls	r1, r5, #3
 80099a4:	1c8d      	adds	r5, r1, #2
    SUBGRF_WriteRegister( addr, data );
 80099a6:	20f4      	movs	r0, #244	@ 0xf4
 80099a8:	0a09      	lsrs	r1, r1, #8
 80099aa:	f002 f83d 	bl	800ba28 <SUBGRF_WriteRegister>
 80099ae:	f005 01fe 	and.w	r1, r5, #254	@ 0xfe
 80099b2:	20f5      	movs	r0, #245	@ 0xf5
 80099b4:	f002 f838 	bl	800ba28 <SUBGRF_WriteRegister>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 80099b8:	4835      	ldr	r0, [pc, #212]	@ (8009a90 <RadioSend+0x240>)
 80099ba:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80099be:	4631      	mov	r1, r6
 80099c0:	f001 fa32 	bl	800ae28 <SUBGRF_SendPayload>
            break;
 80099c4:	e77c      	b.n	80098c0 <RadioSend+0x70>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80099c6:	4830      	ldr	r0, [pc, #192]	@ (8009a88 <RadioSend+0x238>)
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80099c8:	77e5      	strb	r5, [r4, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80099ca:	e772      	b.n	80098b2 <RadioSend+0x62>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80099cc:	f002 f83e 	bl	800ba4c <SUBGRF_ReadRegister>
 80099d0:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 80099d4:	f640 0089 	movw	r0, #2185	@ 0x889
 80099d8:	f002 f826 	bl	800ba28 <SUBGRF_WriteRegister>
 80099dc:	e75d      	b.n	800989a <RadioSend+0x4a>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80099de:	4629      	mov	r1, r5
 80099e0:	f10d 0207 	add.w	r2, sp, #7
 80099e4:	4630      	mov	r0, r6
 80099e6:	f002 f97d 	bl	800bce4 <RFW_TransmitInit>
 80099ea:	4605      	mov	r5, r0
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d141      	bne.n	8009a74 <RadioSend+0x224>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80099f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80099f4:	4824      	ldr	r0, [pc, #144]	@ (8009a88 <RadioSend+0x238>)
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80099f6:	75a3      	strb	r3, [r4, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80099f8:	f001 fece 	bl	800b798 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80099fc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8009a00:	462a      	mov	r2, r5
 8009a02:	4630      	mov	r0, r6
 8009a04:	f001 fa10 	bl	800ae28 <SUBGRF_SendPayload>
 8009a08:	e75a      	b.n	80098c0 <RadioSend+0x70>
 8009a0a:	f005 0cfc 	and.w	ip, r5, #252	@ 0xfc
 8009a0e:	4633      	mov	r3, r6
 8009a10:	44b4      	add	ip, r6
    for( i = 0; i < size; i++ )
 8009a12:	4639      	mov	r1, r7
        outBuffer[i] = 0;
 8009a14:	2000      	movs	r0, #0
        inBuffer[i] = ~inBuffer[i];
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	43d2      	mvns	r2, r2
 8009a1a:	f843 2b04 	str.w	r2, [r3], #4
        outBuffer[i] = 0;
 8009a1e:	459c      	cmp	ip, r3
 8009a20:	f841 0b04 	str.w	r0, [r1], #4
    for( i = 0; i < size; i++ )
 8009a24:	d1f7      	bne.n	8009a16 <RadioSend+0x1c6>
 8009a26:	07ab      	lsls	r3, r5, #30
 8009a28:	f43f af76 	beq.w	8009918 <RadioSend+0xc8>
 8009a2c:	f025 0303 	bic.w	r3, r5, #3
 8009a30:	1c5a      	adds	r2, r3, #1
        inBuffer[i] = ~inBuffer[i];
 8009a32:	5cf1      	ldrb	r1, [r6, r3]
    for( i = 0; i < size; i++ )
 8009a34:	4295      	cmp	r5, r2
        inBuffer[i] = ~inBuffer[i];
 8009a36:	ea6f 0101 	mvn.w	r1, r1
 8009a3a:	54f1      	strb	r1, [r6, r3]
        outBuffer[i] = 0;
 8009a3c:	54f8      	strb	r0, [r7, r3]
    for( i = 0; i < size; i++ )
 8009a3e:	f77f af6b 	ble.w	8009918 <RadioSend+0xc8>
        inBuffer[i] = ~inBuffer[i];
 8009a42:	5cb1      	ldrb	r1, [r6, r2]
    for( i = 0; i < size; i++ )
 8009a44:	3302      	adds	r3, #2
        inBuffer[i] = ~inBuffer[i];
 8009a46:	43c9      	mvns	r1, r1
    for( i = 0; i < size; i++ )
 8009a48:	42ab      	cmp	r3, r5
        inBuffer[i] = ~inBuffer[i];
 8009a4a:	54b1      	strb	r1, [r6, r2]
        outBuffer[i] = 0;
 8009a4c:	54b8      	strb	r0, [r7, r2]
    for( i = 0; i < size; i++ )
 8009a4e:	f6bf af63 	bge.w	8009918 <RadioSend+0xc8>
        inBuffer[i] = ~inBuffer[i];
 8009a52:	5cf2      	ldrb	r2, [r6, r3]
 8009a54:	43d2      	mvns	r2, r2
 8009a56:	54f2      	strb	r2, [r6, r3]
        outBuffer[i] = 0;
 8009a58:	54f8      	strb	r0, [r7, r3]
    for( i = 0; i < size; i++ )
 8009a5a:	e75d      	b.n	8009918 <RadioSend+0xc8>
    SUBGRF_WriteRegister( addr, data );
 8009a5c:	2170      	movs	r1, #112	@ 0x70
 8009a5e:	20f3      	movs	r0, #243	@ 0xf3
 8009a60:	f001 ffe2 	bl	800ba28 <SUBGRF_WriteRegister>
 8009a64:	211d      	movs	r1, #29
 8009a66:	20f2      	movs	r0, #242	@ 0xf2
 8009a68:	f001 ffde 	bl	800ba28 <SUBGRF_WriteRegister>
}
 8009a6c:	e799      	b.n	80099a2 <RadioSend+0x152>
 8009a6e:	4f08      	ldr	r7, [pc, #32]	@ (8009a90 <RadioSend+0x240>)
    for( i = 0; i < size; i++ )
 8009a70:	2320      	movs	r3, #32
 8009a72:	e77a      	b.n	800996a <RadioSend+0x11a>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8009a74:	4b07      	ldr	r3, [pc, #28]	@ (8009a94 <RadioSend+0x244>)
 8009a76:	463a      	mov	r2, r7
 8009a78:	2100      	movs	r1, #0
 8009a7a:	2002      	movs	r0, #2
 8009a7c:	f003 f842 	bl	800cb04 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8009a80:	2003      	movs	r0, #3
 8009a82:	e725      	b.n	80098d0 <RadioSend+0x80>
 8009a84:	20000468 	.word	0x20000468
 8009a88:	20000476 	.word	0x20000476
 8009a8c:	20000450 	.word	0x20000450
 8009a90:	200004c8 	.word	0x200004c8
 8009a94:	0800d1d4 	.word	0x0800d1d4

08009a98 <RadioTxPrbs>:
{
 8009a98:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8009a9a:	4b09      	ldr	r3, [pc, #36]	@ (8009ac0 <RadioTxPrbs+0x28>)
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 8009aa2:	f002 f803 	bl	800baac <SUBGRF_SetSwitch>
    SUBGRF_WriteRegister( addr, data );
 8009aa6:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8009aaa:	212d      	movs	r1, #45	@ 0x2d
 8009aac:	f001 ffbc 	bl	800ba28 <SUBGRF_WriteRegister>
    SUBGRF_SetTxInfinitePreamble( );
 8009ab0:	f001 fbcc 	bl	800b24c <SUBGRF_SetTxInfinitePreamble>
}
 8009ab4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SUBGRF_SetTx( 0x0fffff );
 8009ab8:	4802      	ldr	r0, [pc, #8]	@ (8009ac4 <RadioTxPrbs+0x2c>)
 8009aba:	f001 bb17 	b.w	800b0ec <SUBGRF_SetTx>
 8009abe:	bf00      	nop
 8009ac0:	20000468 	.word	0x20000468
 8009ac4:	000fffff 	.word	0x000fffff

08009ac8 <RadioIrqProcess>:
{
 8009ac8:	b570      	push	{r4, r5, r6, lr}
    switch( SubgRf.RadioIrq )
 8009aca:	4d9a      	ldr	r5, [pc, #616]	@ (8009d34 <RadioIrqProcess+0x26c>)
 8009acc:	f8b5 3054 	ldrh.w	r3, [r5, #84]	@ 0x54
{
 8009ad0:	b082      	sub	sp, #8
    uint8_t size = 0;
 8009ad2:	2400      	movs	r4, #0
    switch( SubgRf.RadioIrq )
 8009ad4:	2b20      	cmp	r3, #32
    uint8_t size = 0;
 8009ad6:	f88d 4003 	strb.w	r4, [sp, #3]
    int32_t cfo = 0;
 8009ada:	9401      	str	r4, [sp, #4]
    switch( SubgRf.RadioIrq )
 8009adc:	d827      	bhi.n	8009b2e <RadioIrqProcess+0x66>
 8009ade:	b323      	cbz	r3, 8009b2a <RadioIrqProcess+0x62>
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	2b1f      	cmp	r3, #31
 8009ae4:	d821      	bhi.n	8009b2a <RadioIrqProcess+0x62>
 8009ae6:	e8df f003 	tbb	[pc, r3]
 8009aea:	9582      	.short	0x9582
 8009aec:	2020bb20 	.word	0x2020bb20
 8009af0:	20206e20 	.word	0x20206e20
 8009af4:	20202020 	.word	0x20202020
 8009af8:	20207b20 	.word	0x20207b20
 8009afc:	20202020 	.word	0x20202020
 8009b00:	20202020 	.word	0x20202020
 8009b04:	20202020 	.word	0x20202020
 8009b08:	5820      	.short	0x5820
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8009b0a:	4b8b      	ldr	r3, [pc, #556]	@ (8009d38 <RadioIrqProcess+0x270>)
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	4621      	mov	r1, r4
 8009b10:	2002      	movs	r0, #2
 8009b12:	f002 fff7 	bl	800cb04 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8009b16:	7868      	ldrb	r0, [r5, #1]
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	f000 80f3 	beq.w	8009d04 <RadioIrqProcess+0x23c>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8009b1e:	4b87      	ldr	r3, [pc, #540]	@ (8009d3c <RadioIrqProcess+0x274>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	b113      	cbz	r3, 8009b2a <RadioIrqProcess+0x62>
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	b103      	cbz	r3, 8009b2a <RadioIrqProcess+0x62>
            RadioEvents->RxError( );
 8009b28:	4798      	blx	r3
}
 8009b2a:	b002      	add	sp, #8
 8009b2c:	bd70      	pop	{r4, r5, r6, pc}
    switch( SubgRf.RadioIrq )
 8009b2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b32:	f000 80c5 	beq.w	8009cc0 <RadioIrqProcess+0x1f8>
 8009b36:	d91f      	bls.n	8009b78 <RadioIrqProcess+0xb0>
 8009b38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b3c:	d1f5      	bne.n	8009b2a <RadioIrqProcess+0x62>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8009b3e:	4b80      	ldr	r3, [pc, #512]	@ (8009d40 <RadioIrqProcess+0x278>)
 8009b40:	2201      	movs	r2, #1
 8009b42:	4621      	mov	r1, r4
 8009b44:	2002      	movs	r0, #2
 8009b46:	f002 ffdd 	bl	800cb04 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8009b4a:	f001 f927 	bl	800ad9c <SUBGRF_GetOperatingMode>
 8009b4e:	2804      	cmp	r0, #4
 8009b50:	f000 80c5 	beq.w	8009cde <RadioIrqProcess+0x216>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8009b54:	f001 f922 	bl	800ad9c <SUBGRF_GetOperatingMode>
 8009b58:	2805      	cmp	r0, #5
 8009b5a:	d1e6      	bne.n	8009b2a <RadioIrqProcess+0x62>
            TimerStop( &RxTimeoutTimer );
 8009b5c:	4879      	ldr	r0, [pc, #484]	@ (8009d44 <RadioIrqProcess+0x27c>)
 8009b5e:	f002 fe4d 	bl	800c7fc <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8009b62:	4620      	mov	r0, r4
 8009b64:	f001 faa4 	bl	800b0b0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009b68:	4b74      	ldr	r3, [pc, #464]	@ (8009d3c <RadioIrqProcess+0x274>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d0dc      	beq.n	8009b2a <RadioIrqProcess+0x62>
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1d8      	bne.n	8009b28 <RadioIrqProcess+0x60>
 8009b76:	e7d8      	b.n	8009b2a <RadioIrqProcess+0x62>
    switch( SubgRf.RadioIrq )
 8009b78:	2b40      	cmp	r3, #64	@ 0x40
 8009b7a:	d0c6      	beq.n	8009b0a <RadioIrqProcess+0x42>
 8009b7c:	2b80      	cmp	r3, #128	@ 0x80
 8009b7e:	d1d4      	bne.n	8009b2a <RadioIrqProcess+0x62>
        SUBGRF_SetStandby( STDBY_RC );
 8009b80:	4620      	mov	r0, r4
 8009b82:	f001 fa95 	bl	800b0b0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009b86:	4b6d      	ldr	r3, [pc, #436]	@ (8009d3c <RadioIrqProcess+0x274>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d0cd      	beq.n	8009b2a <RadioIrqProcess+0x62>
 8009b8e:	699b      	ldr	r3, [r3, #24]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d0ca      	beq.n	8009b2a <RadioIrqProcess+0x62>
            RadioEvents->CadDone( false );
 8009b94:	4620      	mov	r0, r4
 8009b96:	4798      	blx	r3
 8009b98:	e7c7      	b.n	8009b2a <RadioIrqProcess+0x62>
        TimerStop( &RxTimeoutTimer );
 8009b9a:	486a      	ldr	r0, [pc, #424]	@ (8009d44 <RadioIrqProcess+0x27c>)
 8009b9c:	f002 fe2e 	bl	800c7fc <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009ba0:	7868      	ldrb	r0, [r5, #1]
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	f000 80ab 	beq.w	8009cfe <RadioIrqProcess+0x236>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009ba8:	4b64      	ldr	r3, [pc, #400]	@ (8009d3c <RadioIrqProcess+0x274>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d0bc      	beq.n	8009b2a <RadioIrqProcess+0x62>
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d0b9      	beq.n	8009b2a <RadioIrqProcess+0x62>
            RadioEvents->RxTimeout( );
 8009bb6:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8009bb8:	4b63      	ldr	r3, [pc, #396]	@ (8009d48 <RadioIrqProcess+0x280>)
 8009bba:	2201      	movs	r2, #1
 8009bbc:	2100      	movs	r1, #0
 8009bbe:	2002      	movs	r0, #2
 8009bc0:	f002 ffa0 	bl	800cb04 <UTIL_ADV_TRACE_COND_FSend>
 8009bc4:	e7b1      	b.n	8009b2a <RadioIrqProcess+0x62>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8009bc6:	4b61      	ldr	r3, [pc, #388]	@ (8009d4c <RadioIrqProcess+0x284>)
 8009bc8:	2201      	movs	r2, #1
 8009bca:	2100      	movs	r1, #0
 8009bcc:	2002      	movs	r0, #2
 8009bce:	f002 ff99 	bl	800cb04 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8009bd2:	f002 f881 	bl	800bcd8 <RFW_Is_Init>
 8009bd6:	2801      	cmp	r0, #1
 8009bd8:	d1a7      	bne.n	8009b2a <RadioIrqProcess+0x62>
            RFW_ReceivePayload( );
 8009bda:	f002 f88d 	bl	800bcf8 <RFW_ReceivePayload>
 8009bde:	e7a4      	b.n	8009b2a <RadioIrqProcess+0x62>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8009be0:	4b5b      	ldr	r3, [pc, #364]	@ (8009d50 <RadioIrqProcess+0x288>)
 8009be2:	2201      	movs	r2, #1
 8009be4:	2100      	movs	r1, #0
 8009be6:	2002      	movs	r0, #2
 8009be8:	f002 ff8c 	bl	800cb04 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8009bec:	e79d      	b.n	8009b2a <RadioIrqProcess+0x62>
        TimerStop( &TxTimeoutTimer );
 8009bee:	4859      	ldr	r0, [pc, #356]	@ (8009d54 <RadioIrqProcess+0x28c>)
 8009bf0:	f002 fe04 	bl	800c7fc <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	f001 fa5b 	bl	800b0b0 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8009bfa:	f002 f86f 	bl	800bcdc <RFW_Is_LongPacketModeEnabled>
 8009bfe:	2801      	cmp	r0, #1
 8009c00:	f000 80c7 	beq.w	8009d92 <RadioIrqProcess+0x2ca>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8009c04:	4b4d      	ldr	r3, [pc, #308]	@ (8009d3c <RadioIrqProcess+0x274>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d08e      	beq.n	8009b2a <RadioIrqProcess+0x62>
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d18a      	bne.n	8009b28 <RadioIrqProcess+0x60>
 8009c12:	e78a      	b.n	8009b2a <RadioIrqProcess+0x62>
        TimerStop( &RxTimeoutTimer );
 8009c14:	484b      	ldr	r0, [pc, #300]	@ (8009d44 <RadioIrqProcess+0x27c>)
 8009c16:	f002 fdf1 	bl	800c7fc <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009c1a:	786c      	ldrb	r4, [r5, #1]
 8009c1c:	2c00      	cmp	r4, #0
 8009c1e:	d074      	beq.n	8009d0a <RadioIrqProcess+0x242>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8009c20:	22ff      	movs	r2, #255	@ 0xff
 8009c22:	f10d 0103 	add.w	r1, sp, #3
 8009c26:	484c      	ldr	r0, [pc, #304]	@ (8009d58 <RadioIrqProcess+0x290>)
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8009c28:	4c44      	ldr	r4, [pc, #272]	@ (8009d3c <RadioIrqProcess+0x274>)
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8009c2a:	f001 f8bd 	bl	800ada8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8009c2e:	484b      	ldr	r0, [pc, #300]	@ (8009d5c <RadioIrqProcess+0x294>)
 8009c30:	f001 feb2 	bl	800b998 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8009c34:	6823      	ldr	r3, [r4, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f43f af77 	beq.w	8009b2a <RadioIrqProcess+0x62>
 8009c3c:	689e      	ldr	r6, [r3, #8]
 8009c3e:	2e00      	cmp	r6, #0
 8009c40:	f43f af73 	beq.w	8009b2a <RadioIrqProcess+0x62>
            switch( SubgRf.PacketStatus.packetType )
 8009c44:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	f040 808b 	bne.w	8009d64 <RadioIrqProcess+0x29c>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8009c4e:	f995 3031 	ldrsb.w	r3, [r5, #49]	@ 0x31
 8009c52:	f995 2030 	ldrsb.w	r2, [r5, #48]	@ 0x30
 8009c56:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8009c5a:	483f      	ldr	r0, [pc, #252]	@ (8009d58 <RadioIrqProcess+0x290>)
 8009c5c:	47b0      	blx	r6
                break;
 8009c5e:	e764      	b.n	8009b2a <RadioIrqProcess+0x62>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8009c60:	2100      	movs	r1, #0
 8009c62:	4b3f      	ldr	r3, [pc, #252]	@ (8009d60 <RadioIrqProcess+0x298>)
 8009c64:	2201      	movs	r2, #1
 8009c66:	2002      	movs	r0, #2
 8009c68:	f002 ff4c 	bl	800cb04 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8009c6c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8009c6e:	2900      	cmp	r1, #0
 8009c70:	f43f af5b 	beq.w	8009b2a <RadioIrqProcess+0x62>
    SUBGRF_WriteRegister( addr, data );
 8009c74:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8009c78:	f640 1003 	movw	r0, #2307	@ 0x903
 8009c7c:	f001 fed4 	bl	800ba28 <SUBGRF_WriteRegister>
 8009c80:	f895 1059 	ldrb.w	r1, [r5, #89]	@ 0x59
 8009c84:	f640 1004 	movw	r0, #2308	@ 0x904
 8009c88:	f001 fece 	bl	800ba28 <SUBGRF_WriteRegister>
 8009c8c:	f895 1058 	ldrb.w	r1, [r5, #88]	@ 0x58
 8009c90:	f640 1005 	movw	r0, #2309	@ 0x905
 8009c94:	f001 fec8 	bl	800ba28 <SUBGRF_WriteRegister>
    return SUBGRF_ReadRegister( addr );
 8009c98:	f640 1002 	movw	r0, #2306	@ 0x902
 8009c9c:	f001 fed6 	bl	800ba4c <SUBGRF_ReadRegister>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8009ca0:	f040 0101 	orr.w	r1, r0, #1
    SUBGRF_WriteRegister( addr, data );
 8009ca4:	b2c9      	uxtb	r1, r1
 8009ca6:	f640 1002 	movw	r0, #2306	@ 0x902
 8009caa:	f001 febd 	bl	800ba28 <SUBGRF_WriteRegister>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8009cae:	2300      	movs	r3, #0
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009cb0:	f240 2162 	movw	r1, #610	@ 0x262
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	4608      	mov	r0, r1
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8009cb8:	65ab      	str	r3, [r5, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009cba:	f001 fb2f 	bl	800b31c <SUBGRF_SetDioIrqParams>
 8009cbe:	e734      	b.n	8009b2a <RadioIrqProcess+0x62>
        SUBGRF_SetStandby( STDBY_RC );
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f001 f9f5 	bl	800b0b0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8009d3c <RadioIrqProcess+0x274>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f43f af2d 	beq.w	8009b2a <RadioIrqProcess+0x62>
 8009cd0:	699b      	ldr	r3, [r3, #24]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f43f af29 	beq.w	8009b2a <RadioIrqProcess+0x62>
            RadioEvents->CadDone( true );
 8009cd8:	2001      	movs	r0, #1
 8009cda:	4798      	blx	r3
 8009cdc:	e725      	b.n	8009b2a <RadioIrqProcess+0x62>
            TimerStop( &TxTimeoutTimer );
 8009cde:	481d      	ldr	r0, [pc, #116]	@ (8009d54 <RadioIrqProcess+0x28c>)
 8009ce0:	f002 fd8c 	bl	800c7fc <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	f001 f9e3 	bl	800b0b0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8009cea:	4b14      	ldr	r3, [pc, #80]	@ (8009d3c <RadioIrqProcess+0x274>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f43f af1b 	beq.w	8009b2a <RadioIrqProcess+0x62>
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f47f af16 	bne.w	8009b28 <RadioIrqProcess+0x60>
 8009cfc:	e715      	b.n	8009b2a <RadioIrqProcess+0x62>
            SUBGRF_SetStandby( STDBY_RC );
 8009cfe:	f001 f9d7 	bl	800b0b0 <SUBGRF_SetStandby>
 8009d02:	e751      	b.n	8009ba8 <RadioIrqProcess+0xe0>
            SUBGRF_SetStandby( STDBY_RC );
 8009d04:	f001 f9d4 	bl	800b0b0 <SUBGRF_SetStandby>
 8009d08:	e709      	b.n	8009b1e <RadioIrqProcess+0x56>
            SUBGRF_SetStandby( STDBY_RC );
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f001 f9d0 	bl	800b0b0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8009d10:	4621      	mov	r1, r4
 8009d12:	f640 1002 	movw	r0, #2306	@ 0x902
 8009d16:	f001 fe87 	bl	800ba28 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8009d1a:	f640 1044 	movw	r0, #2372	@ 0x944
 8009d1e:	f001 fe95 	bl	800ba4c <SUBGRF_ReadRegister>
 8009d22:	f040 0102 	orr.w	r1, r0, #2
 8009d26:	b2c9      	uxtb	r1, r1
 8009d28:	f640 1044 	movw	r0, #2372	@ 0x944
 8009d2c:	f001 fe7c 	bl	800ba28 <SUBGRF_WriteRegister>
 8009d30:	e776      	b.n	8009c20 <RadioIrqProcess+0x158>
 8009d32:	bf00      	nop
 8009d34:	20000468 	.word	0x20000468
 8009d38:	0800d230 	.word	0x0800d230
 8009d3c:	200004c4 	.word	0x200004c4
 8009d40:	0800d1ec 	.word	0x0800d1ec
 8009d44:	20000438 	.word	0x20000438
 8009d48:	0800d224 	.word	0x0800d224
 8009d4c:	0800d20c 	.word	0x0800d20c
 8009d50:	0800d218 	.word	0x0800d218
 8009d54:	20000450 	.word	0x20000450
 8009d58:	200004c8 	.word	0x200004c8
 8009d5c:	2000048c 	.word	0x2000048c
 8009d60:	0800d200 	.word	0x0800d200
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8009d64:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 8009d66:	a901      	add	r1, sp, #4
 8009d68:	f001 ff56 	bl	800bc18 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8009d6c:	9b01      	ldr	r3, [sp, #4]
 8009d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8009d98 <RadioIrqProcess+0x2d0>)
 8009d70:	6821      	ldr	r1, [r4, #0]
 8009d72:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8009d76:	fb82 0203 	smull	r0, r2, r2, r3
 8009d7a:	17db      	asrs	r3, r3, #31
 8009d7c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8009d80:	688c      	ldr	r4, [r1, #8]
 8009d82:	f995 2029 	ldrsb.w	r2, [r5, #41]	@ 0x29
 8009d86:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8009d8a:	4804      	ldr	r0, [pc, #16]	@ (8009d9c <RadioIrqProcess+0x2d4>)
 8009d8c:	b25b      	sxtb	r3, r3
 8009d8e:	47a0      	blx	r4
                break;
 8009d90:	e6cb      	b.n	8009b2a <RadioIrqProcess+0x62>
            RFW_DeInit_TxLongPacket( );
 8009d92:	f001 ffaf 	bl	800bcf4 <RFW_DeInit_TxLongPacket>
 8009d96:	e735      	b.n	8009c04 <RadioIrqProcess+0x13c>
 8009d98:	10624dd3 	.word	0x10624dd3
 8009d9c:	200004c8 	.word	0x200004c8

08009da0 <RadioOnDioIrq>:
    SubgRf.RadioIrq = radioIrq;
 8009da0:	4b02      	ldr	r3, [pc, #8]	@ (8009dac <RadioOnDioIrq+0xc>)
 8009da2:	f8a3 0054 	strh.w	r0, [r3, #84]	@ 0x54
    RADIO_IRQ_PROCESS();
 8009da6:	f7ff be8f 	b.w	8009ac8 <RadioIrqProcess>
 8009daa:	bf00      	nop
 8009dac:	20000468 	.word	0x20000468

08009db0 <RadioInit>:
{
 8009db0:	b570      	push	{r4, r5, r6, lr}
    RadioEvents = events;
 8009db2:	4b21      	ldr	r3, [pc, #132]	@ (8009e38 <RadioInit+0x88>)
    SubgRf.RxContinuous = false;
 8009db4:	4d21      	ldr	r5, [pc, #132]	@ (8009e3c <RadioInit+0x8c>)
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8009db6:	4e22      	ldr	r6, [pc, #136]	@ (8009e40 <RadioInit+0x90>)
{
 8009db8:	b082      	sub	sp, #8
    SubgRf.RxContinuous = false;
 8009dba:	2400      	movs	r4, #0
{
 8009dbc:	4602      	mov	r2, r0
    SUBGRF_Init( RadioOnDioIrq );
 8009dbe:	4821      	ldr	r0, [pc, #132]	@ (8009e44 <RadioInit+0x94>)
    RadioEvents = events;
 8009dc0:	601a      	str	r2, [r3, #0]
    SubgRf.RxTimeout = 0;
 8009dc2:	e9c5 4401 	strd	r4, r4, [r5, #4]
    SubgRf.RxContinuous = false;
 8009dc6:	706c      	strb	r4, [r5, #1]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8009dc8:	65ac      	str	r4, [r5, #88]	@ 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8009dca:	f000 ff51 	bl	800ac70 <SUBGRF_Init>
    SubgRf.PublicNetwork.Previous = false;
 8009dce:	81ac      	strh	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8009dd0:	f001 fa88 	bl	800b2e4 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8009dd4:	4621      	mov	r1, r4
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f001 fdb2 	bl	800b940 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8009ddc:	4621      	mov	r1, r4
 8009dde:	2001      	movs	r0, #1
 8009de0:	2204      	movs	r2, #4
 8009de2:	f001 fb4b 	bl	800b47c <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8009de6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8009dea:	4623      	mov	r3, r4
 8009dec:	4622      	mov	r2, r4
 8009dee:	4608      	mov	r0, r1
 8009df0:	f001 fa94 	bl	800b31c <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSleep( params );
 8009df4:	f04f 0004 	mov.w	r0, #4
 8009df8:	f001 f91c 	bl	800b034 <SUBGRF_SetSleep>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8009dfc:	4d12      	ldr	r5, [pc, #72]	@ (8009e48 <RadioInit+0x98>)
    RADIO_DELAY_MS( 2 );
 8009dfe:	2002      	movs	r0, #2
 8009e00:	f7f7 fc5e 	bl	80016c0 <HAL_Delay>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8009e04:	4622      	mov	r2, r4
 8009e06:	4b11      	ldr	r3, [pc, #68]	@ (8009e4c <RadioInit+0x9c>)
 8009e08:	9400      	str	r4, [sp, #0]
 8009e0a:	f04f 31ff 	mov.w	r1, #4294967295
 8009e0e:	4630      	mov	r0, r6
 8009e10:	f002 fcc8 	bl	800c7a4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8009e14:	4b0e      	ldr	r3, [pc, #56]	@ (8009e50 <RadioInit+0xa0>)
 8009e16:	9400      	str	r4, [sp, #0]
 8009e18:	4622      	mov	r2, r4
 8009e1a:	f04f 31ff 	mov.w	r1, #4294967295
 8009e1e:	4628      	mov	r0, r5
 8009e20:	f002 fcc0 	bl	800c7a4 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8009e24:	4630      	mov	r0, r6
 8009e26:	f002 fce9 	bl	800c7fc <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8009e2a:	4628      	mov	r0, r5
}
 8009e2c:	b002      	add	sp, #8
 8009e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    TimerStop( &RxTimeoutTimer );
 8009e32:	f002 bce3 	b.w	800c7fc <UTIL_TIMER_Stop>
 8009e36:	bf00      	nop
 8009e38:	200004c4 	.word	0x200004c4
 8009e3c:	20000468 	.word	0x20000468
 8009e40:	20000450 	.word	0x20000450
 8009e44:	08009da1 	.word	0x08009da1
 8009e48:	20000438 	.word	0x20000438
 8009e4c:	080095d9 	.word	0x080095d9
 8009e50:	080095ed 	.word	0x080095ed

08009e54 <RadioSetPublicNetwork>:
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8009e54:	f04f 0300 	mov.w	r3, #0
{
 8009e58:	b570      	push	{r4, r5, r6, lr}
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8009e5a:	f360 0307 	bfi	r3, r0, #0, #8
 8009e5e:	4d17      	ldr	r5, [pc, #92]	@ (8009ebc <RadioSetPublicNetwork+0x68>)
    SubgRf.Modem = modem;
 8009e60:	2601      	movs	r6, #1
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8009e62:	f360 230f 	bfi	r3, r0, #8, #8
{
 8009e66:	4604      	mov	r4, r0
    RFW_SetRadioModem( modem );
 8009e68:	4630      	mov	r0, r6
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8009e6a:	81ab      	strh	r3, [r5, #12]
    SubgRf.Modem = modem;
 8009e6c:	702e      	strb	r6, [r5, #0]
    RFW_SetRadioModem( modem );
 8009e6e:	f001 ff45 	bl	800bcfc <RFW_SetRadioModem>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8009e72:	4630      	mov	r0, r6
 8009e74:	f001 fadc 	bl	800b430 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8009e78:	7b28      	ldrb	r0, [r5, #12]
 8009e7a:	7b6b      	ldrb	r3, [r5, #13]
 8009e7c:	4283      	cmp	r3, r0
 8009e7e:	d118      	bne.n	8009eb2 <RadioSetPublicNetwork+0x5e>
    if( enable == true )
 8009e80:	b15c      	cbz	r4, 8009e9a <RadioSetPublicNetwork+0x46>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8009e82:	2134      	movs	r1, #52	@ 0x34
 8009e84:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8009e88:	f001 fdce 	bl	800ba28 <SUBGRF_WriteRegister>
}
 8009e8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8009e90:	2144      	movs	r1, #68	@ 0x44
 8009e92:	f240 7041 	movw	r0, #1857	@ 0x741
 8009e96:	f001 bdc7 	b.w	800ba28 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8009e9a:	2114      	movs	r1, #20
 8009e9c:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8009ea0:	f001 fdc2 	bl	800ba28 <SUBGRF_WriteRegister>
}
 8009ea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8009ea8:	2124      	movs	r1, #36	@ 0x24
 8009eaa:	f240 7041 	movw	r0, #1857	@ 0x741
 8009eae:	f001 bdbb 	b.w	800ba28 <SUBGRF_WriteRegister>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8009eb2:	7368      	strb	r0, [r5, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8009eb4:	f7ff ffce 	bl	8009e54 <RadioSetPublicNetwork>
 8009eb8:	e7e2      	b.n	8009e80 <RadioSetPublicNetwork+0x2c>
 8009eba:	bf00      	nop
 8009ebc:	20000468 	.word	0x20000468

08009ec0 <RadioSetModem>:
{
 8009ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    SubgRf.Modem = modem;
 8009ec2:	4d3a      	ldr	r5, [pc, #232]	@ (8009fac <RadioSetModem+0xec>)
{
 8009ec4:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8009ec6:	7028      	strb	r0, [r5, #0]
    RFW_SetRadioModem( modem );
 8009ec8:	f001 ff18 	bl	800bcfc <RFW_SetRadioModem>
    switch( modem )
 8009ecc:	2c05      	cmp	r4, #5
 8009ece:	d831      	bhi.n	8009f34 <RadioSetModem+0x74>
 8009ed0:	e8df f004 	tbb	[pc, r4]
 8009ed4:	03300f09 	.word	0x03300f09
 8009ed8:	0903      	.short	0x0903
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8009eda:	2002      	movs	r0, #2
 8009edc:	f001 faa8 	bl	800b430 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	736b      	strb	r3, [r5, #13]
}
 8009ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8009ee6:	2000      	movs	r0, #0
 8009ee8:	f001 faa2 	bl	800b430 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8009eec:	2300      	movs	r3, #0
 8009eee:	736b      	strb	r3, [r5, #13]
}
 8009ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8009ef2:	2001      	movs	r0, #1
 8009ef4:	f001 fa9c 	bl	800b430 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8009ef8:	7b2c      	ldrb	r4, [r5, #12]
 8009efa:	7b6b      	ldrb	r3, [r5, #13]
 8009efc:	42a3      	cmp	r3, r4
 8009efe:	d0f1      	beq.n	8009ee4 <RadioSetModem+0x24>
    SubgRf.Modem = modem;
 8009f00:	2601      	movs	r6, #1
    RFW_SetRadioModem( modem );
 8009f02:	4630      	mov	r0, r6
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8009f04:	736c      	strb	r4, [r5, #13]
    SubgRf.Modem = modem;
 8009f06:	702e      	strb	r6, [r5, #0]
    RFW_SetRadioModem( modem );
 8009f08:	f001 fef8 	bl	800bcfc <RFW_SetRadioModem>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	f001 fa8f 	bl	800b430 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8009f12:	7b2f      	ldrb	r7, [r5, #12]
 8009f14:	7b6b      	ldrb	r3, [r5, #13]
 8009f16:	42bb      	cmp	r3, r7
 8009f18:	d11e      	bne.n	8009f58 <RadioSetModem+0x98>
    if( enable == true )
 8009f1a:	b18c      	cbz	r4, 8009f40 <RadioSetModem+0x80>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8009f1c:	2134      	movs	r1, #52	@ 0x34
 8009f1e:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8009f22:	f001 fd81 	bl	800ba28 <SUBGRF_WriteRegister>
}
 8009f26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8009f2a:	2144      	movs	r1, #68	@ 0x44
 8009f2c:	f240 7041 	movw	r0, #1857	@ 0x741
 8009f30:	f001 bd7a 	b.w	800ba28 <SUBGRF_WriteRegister>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8009f34:	2003      	movs	r0, #3
 8009f36:	f001 fa7b 	bl	800b430 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	736b      	strb	r3, [r5, #13]
}
 8009f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8009f40:	2114      	movs	r1, #20
 8009f42:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8009f46:	f001 fd6f 	bl	800ba28 <SUBGRF_WriteRegister>
}
 8009f4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8009f4e:	2124      	movs	r1, #36	@ 0x24
 8009f50:	f240 7041 	movw	r0, #1857	@ 0x741
 8009f54:	f001 bd68 	b.w	800ba28 <SUBGRF_WriteRegister>
    RFW_SetRadioModem( modem );
 8009f58:	4630      	mov	r0, r6
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8009f5a:	736f      	strb	r7, [r5, #13]
    SubgRf.Modem = modem;
 8009f5c:	702e      	strb	r6, [r5, #0]
    RFW_SetRadioModem( modem );
 8009f5e:	f001 fecd 	bl	800bcfc <RFW_SetRadioModem>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8009f62:	4630      	mov	r0, r6
 8009f64:	f001 fa64 	bl	800b430 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8009f68:	7b28      	ldrb	r0, [r5, #12]
 8009f6a:	7b6b      	ldrb	r3, [r5, #13]
 8009f6c:	4283      	cmp	r3, r0
 8009f6e:	d002      	beq.n	8009f76 <RadioSetModem+0xb6>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8009f70:	7368      	strb	r0, [r5, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8009f72:	f7ff ff6f 	bl	8009e54 <RadioSetPublicNetwork>
    if( enable == true )
 8009f76:	b167      	cbz	r7, 8009f92 <RadioSetModem+0xd2>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8009f78:	2134      	movs	r1, #52	@ 0x34
 8009f7a:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8009f7e:	f001 fd53 	bl	800ba28 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8009f82:	2144      	movs	r1, #68	@ 0x44
 8009f84:	f240 7041 	movw	r0, #1857	@ 0x741
 8009f88:	f001 fd4e 	bl	800ba28 <SUBGRF_WriteRegister>
    if( enable == true )
 8009f8c:	2c00      	cmp	r4, #0
 8009f8e:	d0d7      	beq.n	8009f40 <RadioSetModem+0x80>
 8009f90:	e7c4      	b.n	8009f1c <RadioSetModem+0x5c>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8009f92:	2114      	movs	r1, #20
 8009f94:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8009f98:	f001 fd46 	bl	800ba28 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8009f9c:	2124      	movs	r1, #36	@ 0x24
 8009f9e:	f240 7041 	movw	r0, #1857	@ 0x741
 8009fa2:	f001 fd41 	bl	800ba28 <SUBGRF_WriteRegister>
    if( enable == true )
 8009fa6:	2c00      	cmp	r4, #0
 8009fa8:	d0ca      	beq.n	8009f40 <RadioSetModem+0x80>
 8009faa:	e7b7      	b.n	8009f1c <RadioSetModem+0x5c>
 8009fac:	20000468 	.word	0x20000468

08009fb0 <RadioSetModem.part.0>:
static void RadioSetModem( RadioModems_t modem )
 8009fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8009fb4:	4c3f      	ldr	r4, [pc, #252]	@ (800a0b4 <RadioSetModem.part.0+0x104>)
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8009fb6:	2001      	movs	r0, #1
 8009fb8:	f001 fa3a 	bl	800b430 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8009fbc:	7b26      	ldrb	r6, [r4, #12]
 8009fbe:	7b63      	ldrb	r3, [r4, #13]
 8009fc0:	42b3      	cmp	r3, r6
 8009fc2:	d101      	bne.n	8009fc8 <RadioSetModem.part.0+0x18>
}
 8009fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SubgRf.Modem = modem;
 8009fc8:	2501      	movs	r5, #1
    RFW_SetRadioModem( modem );
 8009fca:	4628      	mov	r0, r5
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8009fcc:	7366      	strb	r6, [r4, #13]
    SubgRf.Modem = modem;
 8009fce:	7025      	strb	r5, [r4, #0]
    RFW_SetRadioModem( modem );
 8009fd0:	f001 fe94 	bl	800bcfc <RFW_SetRadioModem>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	f001 fa2b 	bl	800b430 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8009fda:	7b27      	ldrb	r7, [r4, #12]
 8009fdc:	7b63      	ldrb	r3, [r4, #13]
 8009fde:	42bb      	cmp	r3, r7
 8009fe0:	d017      	beq.n	800a012 <RadioSetModem.part.0+0x62>
    RFW_SetRadioModem( modem );
 8009fe2:	4628      	mov	r0, r5
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8009fe4:	7367      	strb	r7, [r4, #13]
    SubgRf.Modem = modem;
 8009fe6:	7025      	strb	r5, [r4, #0]
    RFW_SetRadioModem( modem );
 8009fe8:	f001 fe88 	bl	800bcfc <RFW_SetRadioModem>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8009fec:	4628      	mov	r0, r5
 8009fee:	f001 fa1f 	bl	800b430 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8009ff2:	f894 800c 	ldrb.w	r8, [r4, #12]
 8009ff6:	7b63      	ldrb	r3, [r4, #13]
 8009ff8:	4543      	cmp	r3, r8
 8009ffa:	d12e      	bne.n	800a05a <RadioSetModem.part.0+0xaa>
    if( enable == true )
 8009ffc:	b317      	cbz	r7, 800a044 <RadioSetModem.part.0+0x94>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8009ffe:	2134      	movs	r1, #52	@ 0x34
 800a000:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800a004:	f001 fd10 	bl	800ba28 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800a008:	2144      	movs	r1, #68	@ 0x44
 800a00a:	f240 7041 	movw	r0, #1857	@ 0x741
 800a00e:	f001 fd0b 	bl	800ba28 <SUBGRF_WriteRegister>
    if( enable == true )
 800a012:	b15e      	cbz	r6, 800a02c <RadioSetModem.part.0+0x7c>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800a014:	2134      	movs	r1, #52	@ 0x34
 800a016:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800a01a:	f001 fd05 	bl	800ba28 <SUBGRF_WriteRegister>
}
 800a01e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800a022:	2144      	movs	r1, #68	@ 0x44
 800a024:	f240 7041 	movw	r0, #1857	@ 0x741
 800a028:	f001 bcfe 	b.w	800ba28 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800a02c:	2114      	movs	r1, #20
 800a02e:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800a032:	f001 fcf9 	bl	800ba28 <SUBGRF_WriteRegister>
}
 800a036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800a03a:	2124      	movs	r1, #36	@ 0x24
 800a03c:	f240 7041 	movw	r0, #1857	@ 0x741
 800a040:	f001 bcf2 	b.w	800ba28 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800a044:	2114      	movs	r1, #20
 800a046:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800a04a:	f001 fced 	bl	800ba28 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800a04e:	2124      	movs	r1, #36	@ 0x24
 800a050:	f240 7041 	movw	r0, #1857	@ 0x741
 800a054:	f001 fce8 	bl	800ba28 <SUBGRF_WriteRegister>
 800a058:	e7db      	b.n	800a012 <RadioSetModem.part.0+0x62>
    RFW_SetRadioModem( modem );
 800a05a:	4628      	mov	r0, r5
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800a05c:	f884 800d 	strb.w	r8, [r4, #13]
    SubgRf.Modem = modem;
 800a060:	7025      	strb	r5, [r4, #0]
    RFW_SetRadioModem( modem );
 800a062:	f001 fe4b 	bl	800bcfc <RFW_SetRadioModem>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800a066:	4628      	mov	r0, r5
 800a068:	f001 f9e2 	bl	800b430 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800a06c:	7b20      	ldrb	r0, [r4, #12]
 800a06e:	7b63      	ldrb	r3, [r4, #13]
 800a070:	4283      	cmp	r3, r0
 800a072:	d002      	beq.n	800a07a <RadioSetModem.part.0+0xca>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800a074:	7360      	strb	r0, [r4, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800a076:	f7ff feed 	bl	8009e54 <RadioSetPublicNetwork>
    if( enable == true )
 800a07a:	f1b8 0f00 	cmp.w	r8, #0
 800a07e:	d00c      	beq.n	800a09a <RadioSetModem.part.0+0xea>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800a080:	2134      	movs	r1, #52	@ 0x34
 800a082:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800a086:	f001 fccf 	bl	800ba28 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800a08a:	2144      	movs	r1, #68	@ 0x44
 800a08c:	f240 7041 	movw	r0, #1857	@ 0x741
 800a090:	f001 fcca 	bl	800ba28 <SUBGRF_WriteRegister>
    if( enable == true )
 800a094:	2f00      	cmp	r7, #0
 800a096:	d0d5      	beq.n	800a044 <RadioSetModem.part.0+0x94>
 800a098:	e7b1      	b.n	8009ffe <RadioSetModem.part.0+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800a09a:	2114      	movs	r1, #20
 800a09c:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800a0a0:	f001 fcc2 	bl	800ba28 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800a0a4:	2124      	movs	r1, #36	@ 0x24
 800a0a6:	f240 7041 	movw	r0, #1857	@ 0x741
 800a0aa:	f001 fcbd 	bl	800ba28 <SUBGRF_WriteRegister>
    if( enable == true )
 800a0ae:	2f00      	cmp	r7, #0
 800a0b0:	d0c8      	beq.n	800a044 <RadioSetModem.part.0+0x94>
 800a0b2:	e7a4      	b.n	8009ffe <RadioSetModem.part.0+0x4e>
 800a0b4:	20000468 	.word	0x20000468

0800a0b8 <RadioSetTxGenericConfig>:
{
 800a0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t syncword[8] = {0};
 800a0bc:	2600      	movs	r6, #0
{
 800a0be:	b086      	sub	sp, #24
 800a0c0:	4604      	mov	r4, r0
    uint8_t syncword[8] = {0};
 800a0c2:	e9cd 6601 	strd	r6, r6, [sp, #4]
{
 800a0c6:	460d      	mov	r5, r1
 800a0c8:	4690      	mov	r8, r2
 800a0ca:	461f      	mov	r7, r3
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800a0cc:	f001 fe02 	bl	800bcd4 <RFW_DeInit>
    switch( modem )
 800a0d0:	2c03      	cmp	r4, #3
 800a0d2:	f200 8141 	bhi.w	800a358 <RadioSetTxGenericConfig+0x2a0>
 800a0d6:	e8df f004 	tbb	[pc, r4]
 800a0da:	5a96      	.short	0x5a96
 800a0dc:	023d      	.short	0x023d
        if( config->msk.SyncWordLength > 8 )
 800a0de:	7caa      	ldrb	r2, [r5, #18]
 800a0e0:	2a08      	cmp	r2, #8
 800a0e2:	f200 8136 	bhi.w	800a352 <RadioSetTxGenericConfig+0x29a>
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800a0e6:	ae01      	add	r6, sp, #4
 800a0e8:	68a9      	ldr	r1, [r5, #8]
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	f001 ff68 	bl	800bfc0 <UTIL_MEM_cpy_8>
        if( ( config->msk.BitRate == 0 ) )
 800a0f0:	682b      	ldr	r3, [r5, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f000 812d 	beq.w	800a352 <RadioSetTxGenericConfig+0x29a>
        else if( config->msk.BitRate <= 10000 )
 800a0f8:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a0fc:	4293      	cmp	r3, r2
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800a0fe:	7ce9      	ldrb	r1, [r5, #19]
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800a100:	4c96      	ldr	r4, [pc, #600]	@ (800a35c <RadioSetTxGenericConfig+0x2a4>)
        else if( config->msk.BitRate <= 10000 )
 800a102:	f200 8117 	bhi.w	800a334 <RadioSetTxGenericConfig+0x27c>
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800a106:	63e3      	str	r3, [r4, #60]	@ 0x3c
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800a108:	2303      	movs	r3, #3
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800a10a:	f884 1044 	strb.w	r1, [r4, #68]	@ 0x44
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800a10e:	73a3      	strb	r3, [r4, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 800a110:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
            radio_modem = MODEM_MSK;
 800a114:	f04f 0902 	mov.w	r9, #2
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 800a118:	686b      	ldr	r3, [r5, #4]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800a11a:	2204      	movs	r2, #4
 800a11c:	74a2      	strb	r2, [r4, #18]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 800a11e:	00db      	lsls	r3, r3, #3
 800a120:	8223      	strh	r3, [r4, #16]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 800a122:	7cab      	ldrb	r3, [r5, #18]
 800a124:	00db      	lsls	r3, r3, #3
 800a126:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800a128:	f8b5 3015 	ldrh.w	r3, [r5, #21]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800a12c:	2200      	movs	r2, #0
 800a12e:	7522      	strb	r2, [r4, #20]
        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a130:	0a1a      	lsrs	r2, r3, #8
 800a132:	2a02      	cmp	r2, #2
 800a134:	f000 80e6 	beq.w	800a304 <RadioSetTxGenericConfig+0x24c>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800a138:	7d2a      	ldrb	r2, [r5, #20]
 800a13a:	2a02      	cmp	r2, #2
 800a13c:	f000 80e2 	beq.w	800a304 <RadioSetTxGenericConfig+0x24c>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800a140:	f8a4 3017 	strh.w	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800a144:	7562      	strb	r2, [r4, #21]
    SUBGRF_SetStandby( STDBY_RC );
 800a146:	2000      	movs	r0, #0
 800a148:	f000 ffb2 	bl	800b0b0 <SUBGRF_SetStandby>
        RadioSetModem( radio_modem );
 800a14c:	4648      	mov	r0, r9
 800a14e:	f7ff feb7 	bl	8009ec0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a152:	e093      	b.n	800a27c <RadioSetTxGenericConfig+0x1c4>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800a154:	682b      	ldr	r3, [r5, #0]
 800a156:	3b01      	subs	r3, #1
 800a158:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a15c:	f080 80f9 	bcs.w	800a352 <RadioSetTxGenericConfig+0x29a>
    SubgRf.Modem = modem;
 800a160:	4c7e      	ldr	r4, [pc, #504]	@ (800a35c <RadioSetTxGenericConfig+0x2a4>)
 800a162:	2003      	movs	r0, #3
 800a164:	7020      	strb	r0, [r4, #0]
    RFW_SetRadioModem( modem );
 800a166:	f001 fdc9 	bl	800bcfc <RFW_SetRadioModem>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800a16a:	2002      	movs	r0, #2
 800a16c:	f001 f960 	bl	800b430 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800a170:	2300      	movs	r3, #0
 800a172:	7363      	strb	r3, [r4, #13]
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800a174:	2302      	movs	r3, #2
 800a176:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800a17a:	682a      	ldr	r2, [r5, #0]
 800a17c:	64a2      	str	r2, [r4, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800a17e:	2316      	movs	r3, #22
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a180:	f104 0038 	add.w	r0, r4, #56	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800a184:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a188:	f001 fa62 	bl	800b650 <SUBGRF_SetModulationParams>
        break;
 800a18c:	e085      	b.n	800a29a <RadioSetTxGenericConfig+0x1e2>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800a18e:	4c73      	ldr	r4, [pc, #460]	@ (800a35c <RadioSetTxGenericConfig+0x2a4>)
 800a190:	2101      	movs	r1, #1
 800a192:	f884 1038 	strb.w	r1, [r4, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800a196:	882a      	ldrh	r2, [r5, #0]
 800a198:	f8a4 2050 	strh.w	r2, [r4, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800a19c:	78ab      	ldrb	r3, [r5, #2]
 800a19e:	f884 3052 	strb.w	r3, [r4, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800a1a2:	78eb      	ldrb	r3, [r5, #3]
 800a1a4:	428b      	cmp	r3, r1
 800a1a6:	f000 8092 	beq.w	800a2ce <RadioSetTxGenericConfig+0x216>
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	f000 808a 	beq.w	800a2c4 <RadioSetTxGenericConfig+0x20c>
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f000 808c 	beq.w	800a2ce <RadioSetTxGenericConfig+0x216>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800a1b6:	2601      	movs	r6, #1
 800a1b8:	73a6      	strb	r6, [r4, #14]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800a1ba:	79aa      	ldrb	r2, [r5, #6]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800a1bc:	88ab      	ldrh	r3, [r5, #4]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800a1be:	77a2      	strb	r2, [r4, #30]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800a1c0:	83a3      	strh	r3, [r4, #28]
    SUBGRF_SetStandby( STDBY_RC );
 800a1c2:	2000      	movs	r0, #0
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800a1c4:	f8b5 3007 	ldrh.w	r3, [r5, #7]
 800a1c8:	8423      	strh	r3, [r4, #32]
    SUBGRF_SetStandby( STDBY_RC );
 800a1ca:	f000 ff71 	bl	800b0b0 <SUBGRF_SetStandby>
    RFW_SetRadioModem( modem );
 800a1ce:	4630      	mov	r0, r6
    SubgRf.Modem = modem;
 800a1d0:	7026      	strb	r6, [r4, #0]
    RFW_SetRadioModem( modem );
 800a1d2:	f001 fd93 	bl	800bcfc <RFW_SetRadioModem>
    switch( modem )
 800a1d6:	f7ff feeb 	bl	8009fb0 <RadioSetModem.part.0>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a1da:	4861      	ldr	r0, [pc, #388]	@ (800a360 <RadioSetTxGenericConfig+0x2a8>)
 800a1dc:	f001 fa38 	bl	800b650 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a1e0:	4860      	ldr	r0, [pc, #384]	@ (800a364 <RadioSetTxGenericConfig+0x2ac>)
 800a1e2:	f001 fad9 	bl	800b798 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800a1e6:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800a1ea:	2b06      	cmp	r3, #6
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800a1ec:	f640 0089 	movw	r0, #2185	@ 0x889
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800a1f0:	d05f      	beq.n	800a2b2 <RadioSetTxGenericConfig+0x1fa>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800a1f2:	f001 fc2b 	bl	800ba4c <SUBGRF_ReadRegister>
 800a1f6:	f040 0104 	orr.w	r1, r0, #4
 800a1fa:	b2c9      	uxtb	r1, r1
 800a1fc:	f640 0089 	movw	r0, #2185	@ 0x889
 800a200:	f001 fc12 	bl	800ba28 <SUBGRF_WriteRegister>
 800a204:	e049      	b.n	800a29a <RadioSetTxGenericConfig+0x1e2>
        if( config->fsk.BitRate == 0 )
 800a206:	682b      	ldr	r3, [r5, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f000 80a2 	beq.w	800a352 <RadioSetTxGenericConfig+0x29a>
        if( config->fsk.SyncWordLength > 8 )
 800a20e:	7caa      	ldrb	r2, [r5, #18]
 800a210:	2a08      	cmp	r2, #8
 800a212:	f200 809e 	bhi.w	800a352 <RadioSetTxGenericConfig+0x29a>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800a216:	ae01      	add	r6, sp, #4
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a218:	4c50      	ldr	r4, [pc, #320]	@ (800a35c <RadioSetTxGenericConfig+0x2a4>)
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800a21a:	68a9      	ldr	r1, [r5, #8]
 800a21c:	4630      	mov	r0, r6
 800a21e:	f001 fecf 	bl	800bfc0 <UTIL_MEM_cpy_8>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a222:	2200      	movs	r2, #0
 800a224:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800a228:	682b      	ldr	r3, [r5, #0]
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800a22a:	7ce8      	ldrb	r0, [r5, #19]
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800a22c:	69a9      	ldr	r1, [r5, #24]
 800a22e:	6421      	str	r1, [r4, #64]	@ 0x40
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800a230:	f884 0044 	strb.w	r0, [r4, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800a234:	63e3      	str	r3, [r4, #60]	@ 0x3c
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a236:	73a2      	strb	r2, [r4, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800a238:	686b      	ldr	r3, [r5, #4]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800a23a:	2104      	movs	r1, #4
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800a23c:	00db      	lsls	r3, r3, #3
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800a23e:	74a1      	strb	r1, [r4, #18]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800a240:	8223      	strh	r3, [r4, #16]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800a242:	7cab      	ldrb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800a244:	7522      	strb	r2, [r4, #20]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800a246:	00db      	lsls	r3, r3, #3
 800a248:	74e3      	strb	r3, [r4, #19]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a24a:	7dab      	ldrb	r3, [r5, #22]
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d041      	beq.n	800a2d4 <RadioSetTxGenericConfig+0x21c>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800a250:	7d2a      	ldrb	r2, [r5, #20]
 800a252:	2a02      	cmp	r2, #2
 800a254:	d03e      	beq.n	800a2d4 <RadioSetTxGenericConfig+0x21c>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800a256:	7d69      	ldrb	r1, [r5, #21]
 800a258:	75e1      	strb	r1, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800a25a:	7623      	strb	r3, [r4, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800a25c:	7562      	strb	r2, [r4, #21]
    SubgRf.Modem = modem;
 800a25e:	f04f 0900 	mov.w	r9, #0
    SUBGRF_SetStandby( STDBY_RC );
 800a262:	4648      	mov	r0, r9
 800a264:	f000 ff24 	bl	800b0b0 <SUBGRF_SetStandby>
    RFW_SetRadioModem( modem );
 800a268:	4648      	mov	r0, r9
    SubgRf.Modem = modem;
 800a26a:	f884 9000 	strb.w	r9, [r4]
    RFW_SetRadioModem( modem );
 800a26e:	f001 fd45 	bl	800bcfc <RFW_SetRadioModem>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800a272:	4648      	mov	r0, r9
 800a274:	f001 f8dc 	bl	800b430 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800a278:	f884 900d 	strb.w	r9, [r4, #13]
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a27c:	4838      	ldr	r0, [pc, #224]	@ (800a360 <RadioSetTxGenericConfig+0x2a8>)
 800a27e:	f001 f9e7 	bl	800b650 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a282:	4838      	ldr	r0, [pc, #224]	@ (800a364 <RadioSetTxGenericConfig+0x2ac>)
 800a284:	f001 fa88 	bl	800b798 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800a288:	4630      	mov	r0, r6
 800a28a:	f000 fdf9 	bl	800ae80 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800a28e:	8a28      	ldrh	r0, [r5, #16]
 800a290:	f000 fe24 	bl	800aedc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800a294:	89a8      	ldrh	r0, [r5, #12]
 800a296:	f000 fe05 	bl	800aea4 <SUBGRF_SetCrcPolynomial>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800a29a:	4640      	mov	r0, r8
 800a29c:	f001 fc3e 	bl	800bb1c <SUBGRF_SetRfTxPower>
 800a2a0:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800a2a4:	f001 fd1c 	bl	800bce0 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800a2a8:	6067      	str	r7, [r4, #4]
    return 0;
 800a2aa:	2000      	movs	r0, #0
}
 800a2ac:	b006      	add	sp, #24
 800a2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800a2b2:	f001 fbcb 	bl	800ba4c <SUBGRF_ReadRegister>
 800a2b6:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 800a2ba:	f640 0089 	movw	r0, #2185	@ 0x889
 800a2be:	f001 fbb3 	bl	800ba28 <SUBGRF_WriteRegister>
 800a2c2:	e7ea      	b.n	800a29a <RadioSetTxGenericConfig+0x1e2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800a2c4:	3a0b      	subs	r2, #11
 800a2c6:	b2d2      	uxtb	r2, r2
 800a2c8:	2a01      	cmp	r2, #1
 800a2ca:	d93f      	bls.n	800a34c <RadioSetTxGenericConfig+0x294>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	f884 3053 	strb.w	r3, [r4, #83]	@ 0x53
 800a2d2:	e770      	b.n	800a1b6 <RadioSetTxGenericConfig+0xfe>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800a2d4:	7d6a      	ldrb	r2, [r5, #21]
 800a2d6:	f102 030f 	add.w	r3, r2, #15
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d901      	bls.n	800a2e4 <RadioSetTxGenericConfig+0x22c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800a2e0:	2a01      	cmp	r2, #1
 800a2e2:	d136      	bne.n	800a352 <RadioSetTxGenericConfig+0x29a>
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800a2e4:	4b20      	ldr	r3, [pc, #128]	@ (800a368 <RadioSetTxGenericConfig+0x2b0>)
 800a2e6:	4a21      	ldr	r2, [pc, #132]	@ (800a36c <RadioSetTxGenericConfig+0x2b4>)
 800a2e8:	6819      	ldr	r1, [r3, #0]
            ConfigGeneric.TxConfig = config;
 800a2ea:	9503      	str	r5, [sp, #12]
            ConfigGeneric.rtx = CONFIG_TX;
 800a2ec:	f04f 0901 	mov.w	r9, #1
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800a2f0:	a803      	add	r0, sp, #12
            ConfigGeneric.rtx = CONFIG_TX;
 800a2f2:	f88d 9014 	strb.w	r9, [sp, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800a2f6:	f001 fce9 	bl	800bccc <RFW_Init>
 800a2fa:	bb50      	cbnz	r0, 800a352 <RadioSetTxGenericConfig+0x29a>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800a2fc:	f8a4 9017 	strh.w	r9, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800a300:	7560      	strb	r0, [r4, #21]
        {
 800a302:	e7ac      	b.n	800a25e <RadioSetTxGenericConfig+0x1a6>
 800a304:	b2db      	uxtb	r3, r3
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800a306:	f103 020f 	add.w	r2, r3, #15
 800a30a:	b2d2      	uxtb	r2, r2
 800a30c:	2a01      	cmp	r2, #1
 800a30e:	d901      	bls.n	800a314 <RadioSetTxGenericConfig+0x25c>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800a310:	2b01      	cmp	r3, #1
 800a312:	d11e      	bne.n	800a352 <RadioSetTxGenericConfig+0x29a>
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800a314:	4b14      	ldr	r3, [pc, #80]	@ (800a368 <RadioSetTxGenericConfig+0x2b0>)
 800a316:	4a15      	ldr	r2, [pc, #84]	@ (800a36c <RadioSetTxGenericConfig+0x2b4>)
 800a318:	6819      	ldr	r1, [r3, #0]
            ConfigGeneric.TxConfig = config;
 800a31a:	9503      	str	r5, [sp, #12]
            ConfigGeneric.rtx = CONFIG_TX;
 800a31c:	f04f 0a01 	mov.w	sl, #1
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800a320:	a803      	add	r0, sp, #12
            ConfigGeneric.rtx = CONFIG_TX;
 800a322:	f88d a014 	strb.w	sl, [sp, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800a326:	f001 fcd1 	bl	800bccc <RFW_Init>
 800a32a:	b990      	cbnz	r0, 800a352 <RadioSetTxGenericConfig+0x29a>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800a32c:	f8a4 a017 	strh.w	sl, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800a330:	7560      	strb	r0, [r4, #21]
        {
 800a332:	e708      	b.n	800a146 <RadioSetTxGenericConfig+0x8e>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a334:	f04f 0900 	mov.w	r9, #0
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800a338:	63e3      	str	r3, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800a33a:	089b      	lsrs	r3, r3, #2
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800a33c:	f884 1044 	strb.w	r1, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800a340:	6423      	str	r3, [r4, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a342:	f884 900e 	strb.w	r9, [r4, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a346:	f884 9038 	strb.w	r9, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800a34a:	e6e5      	b.n	800a118 <RadioSetTxGenericConfig+0x60>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a34c:	f884 1053 	strb.w	r1, [r4, #83]	@ 0x53
 800a350:	e731      	b.n	800a1b6 <RadioSetTxGenericConfig+0xfe>
            return -1;
 800a352:	f04f 30ff 	mov.w	r0, #4294967295
 800a356:	e7a9      	b.n	800a2ac <RadioSetTxGenericConfig+0x1f4>
 800a358:	4c00      	ldr	r4, [pc, #0]	@ (800a35c <RadioSetTxGenericConfig+0x2a4>)
 800a35a:	e79e      	b.n	800a29a <RadioSetTxGenericConfig+0x1e2>
 800a35c:	20000468 	.word	0x20000468
 800a360:	200004a0 	.word	0x200004a0
 800a364:	20000476 	.word	0x20000476
 800a368:	200004c4 	.word	0x200004c4
 800a36c:	20000450 	.word	0x20000450

0800a370 <RadioSetRxGenericConfig>:
{
 800a370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a374:	4616      	mov	r6, r2
 800a376:	b086      	sub	sp, #24
    uint8_t syncword[8] = {0};
 800a378:	2200      	movs	r2, #0
 800a37a:	e9cd 2201 	strd	r2, r2, [sp, #4]
{
 800a37e:	4698      	mov	r8, r3
 800a380:	4605      	mov	r5, r0
 800a382:	460c      	mov	r4, r1
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800a384:	f001 fca6 	bl	800bcd4 <RFW_DeInit>
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800a388:	4f87      	ldr	r7, [pc, #540]	@ (800a5a8 <RadioSetRxGenericConfig+0x238>)
        symbTimeout = 0;
 800a38a:	2e00      	cmp	r6, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800a38c:	bf16      	itet	ne
 800a38e:	2201      	movne	r2, #1
 800a390:	2200      	moveq	r2, #0
        symbTimeout = 0;
 800a392:	f04f 0800 	movne.w	r8, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800a396:	707a      	strb	r2, [r7, #1]
    switch( modem )
 800a398:	b12d      	cbz	r5, 800a3a6 <RadioSetRxGenericConfig+0x36>
 800a39a:	2d01      	cmp	r5, #1
 800a39c:	d05a      	beq.n	800a454 <RadioSetRxGenericConfig+0xe4>
    return status;
 800a39e:	2000      	movs	r0, #0
}
 800a3a0:	b006      	add	sp, #24
 800a3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800a3a6:	68a3      	ldr	r3, [r4, #8]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f000 80f9 	beq.w	800a5a0 <RadioSetRxGenericConfig+0x230>
 800a3ae:	68e3      	ldr	r3, [r4, #12]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f000 80f5 	beq.w	800a5a0 <RadioSetRxGenericConfig+0x230>
        if( config->fsk.SyncWordLength > 8 )
 800a3b6:	7fa2      	ldrb	r2, [r4, #30]
 800a3b8:	2a08      	cmp	r2, #8
 800a3ba:	f200 80f1 	bhi.w	800a5a0 <RadioSetRxGenericConfig+0x230>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800a3be:	6921      	ldr	r1, [r4, #16]
 800a3c0:	a801      	add	r0, sp, #4
 800a3c2:	f001 fdfd 	bl	800bfc0 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800a3c6:	6820      	ldr	r0, [r4, #0]
 800a3c8:	3800      	subs	r0, #0
 800a3ca:	bf18      	it	ne
 800a3cc:	2001      	movne	r0, #1
 800a3ce:	f000 ff4d 	bl	800b26c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a3d2:	f887 5038 	strb.w	r5, [r7, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800a3d6:	68a3      	ldr	r3, [r4, #8]
 800a3d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800a3da:	f894 3020 	ldrb.w	r3, [r4, #32]
 800a3de:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800a3e2:	6860      	ldr	r0, [r4, #4]
 800a3e4:	f001 fc02 	bl	800bbec <SUBGRF_GetFskBandwidthRegValue>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a3e8:	73bd      	strb	r5, [r7, #14]
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800a3ea:	f887 0045 	strb.w	r0, [r7, #69]	@ 0x45
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800a3ee:	68e3      	ldr	r3, [r4, #12]
 800a3f0:	00db      	lsls	r3, r3, #3
 800a3f2:	823b      	strh	r3, [r7, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800a3f4:	7fe3      	ldrb	r3, [r4, #31]
 800a3f6:	74bb      	strb	r3, [r7, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800a3f8:	7fa3      	ldrb	r3, [r4, #30]
 800a3fa:	00db      	lsls	r3, r3, #3
 800a3fc:	74fb      	strb	r3, [r7, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800a3fe:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 800a402:	753b      	strb	r3, [r7, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800a404:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f040 8088 	bne.w	800a51e <RadioSetRxGenericConfig+0x1ae>
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a40e:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800a412:	6961      	ldr	r1, [r4, #20]
 800a414:	75b9      	strb	r1, [r7, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a416:	2a02      	cmp	r2, #2
 800a418:	f040 808a 	bne.w	800a530 <RadioSetRxGenericConfig+0x1c0>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800a41c:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 800a420:	f102 030f 	add.w	r3, r2, #15
 800a424:	b2db      	uxtb	r3, r3
 800a426:	2b01      	cmp	r3, #1
 800a428:	d902      	bls.n	800a430 <RadioSetRxGenericConfig+0xc0>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800a42a:	2a01      	cmp	r2, #1
 800a42c:	f040 80b8 	bne.w	800a5a0 <RadioSetRxGenericConfig+0x230>
            ConfigGeneric.rtx = CONFIG_RX;
 800a430:	2300      	movs	r3, #0
 800a432:	f88d 3014 	strb.w	r3, [sp, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800a436:	4b5d      	ldr	r3, [pc, #372]	@ (800a5ac <RadioSetRxGenericConfig+0x23c>)
 800a438:	4a5d      	ldr	r2, [pc, #372]	@ (800a5b0 <RadioSetRxGenericConfig+0x240>)
 800a43a:	6819      	ldr	r1, [r3, #0]
            ConfigGeneric.RxConfig = config;
 800a43c:	9404      	str	r4, [sp, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800a43e:	a803      	add	r0, sp, #12
 800a440:	f001 fc44 	bl	800bccc <RFW_Init>
 800a444:	2800      	cmp	r0, #0
 800a446:	f040 80ab 	bne.w	800a5a0 <RadioSetRxGenericConfig+0x230>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800a44a:	2301      	movs	r3, #1
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800a44c:	7578      	strb	r0, [r7, #21]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800a44e:	f8a7 3017 	strh.w	r3, [r7, #23]
        {
 800a452:	e072      	b.n	800a53a <RadioSetRxGenericConfig+0x1ca>
        if( config->lora.PreambleLen == 0 )
 800a454:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800a456:	2b00      	cmp	r3, #0
 800a458:	f000 80a2 	beq.w	800a5a0 <RadioSetRxGenericConfig+0x230>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800a45c:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800a460:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800a462:	2b01      	cmp	r3, #1
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800a464:	bf0c      	ite	eq
 800a466:	7d26      	ldrbeq	r6, [r4, #20]
            MaxPayloadLength = 0xFF;
 800a468:	26ff      	movne	r6, #255	@ 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800a46a:	3800      	subs	r0, #0
 800a46c:	bf18      	it	ne
 800a46e:	2001      	movne	r0, #1
 800a470:	f000 fefc 	bl	800b26c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800a474:	fa5f f088 	uxtb.w	r0, r8
 800a478:	f000 ff0c 	bl	800b294 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800a47c:	2101      	movs	r1, #1
 800a47e:	f887 1038 	strb.w	r1, [r7, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800a482:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800a484:	f8a7 2050 	strh.w	r2, [r7, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800a488:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800a48c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800a490:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800a494:	428b      	cmp	r3, r1
 800a496:	d03f      	beq.n	800a518 <RadioSetRxGenericConfig+0x1a8>
 800a498:	2b02      	cmp	r3, #2
 800a49a:	d038      	beq.n	800a50e <RadioSetRxGenericConfig+0x19e>
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d03b      	beq.n	800a518 <RadioSetRxGenericConfig+0x1a8>
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800a4a0:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800a4a2:	f894 2032 	ldrb.w	r2, [r4, #50]	@ 0x32
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800a4a6:	83bb      	strh	r3, [r7, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	f894 1034 	ldrb.w	r1, [r4, #52]	@ 0x34
 800a4ae:	f362 0307 	bfi	r3, r2, #0, #8
 800a4b2:	f366 230f 	bfi	r3, r6, #8, #8
 800a4b6:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 800a4ba:	f361 4317 	bfi	r3, r1, #16, #8
 800a4be:	f362 631f 	bfi	r3, r2, #24, #8
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800a4c2:	2501      	movs	r5, #1
    SUBGRF_SetStandby( STDBY_RC );
 800a4c4:	2000      	movs	r0, #0
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800a4c6:	f8c7 301e 	str.w	r3, [r7, #30]
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800a4ca:	73bd      	strb	r5, [r7, #14]
    SUBGRF_SetStandby( STDBY_RC );
 800a4cc:	f000 fdf0 	bl	800b0b0 <SUBGRF_SetStandby>
    RFW_SetRadioModem( modem );
 800a4d0:	4628      	mov	r0, r5
    SubgRf.Modem = modem;
 800a4d2:	703d      	strb	r5, [r7, #0]
    RFW_SetRadioModem( modem );
 800a4d4:	f001 fc12 	bl	800bcfc <RFW_SetRadioModem>
    switch( modem )
 800a4d8:	f7ff fd6a 	bl	8009fb0 <RadioSetModem.part.0>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a4dc:	4835      	ldr	r0, [pc, #212]	@ (800a5b4 <RadioSetRxGenericConfig+0x244>)
 800a4de:	f001 f8b7 	bl	800b650 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a4e2:	4835      	ldr	r0, [pc, #212]	@ (800a5b8 <RadioSetRxGenericConfig+0x248>)
 800a4e4:	f001 f958 	bl	800b798 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800a4e8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a4ec:	42ab      	cmp	r3, r5
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800a4ee:	f240 7036 	movw	r0, #1846	@ 0x736
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800a4f2:	d046      	beq.n	800a582 <RadioSetRxGenericConfig+0x212>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800a4f4:	f001 faaa 	bl	800ba4c <SUBGRF_ReadRegister>
 800a4f8:	f040 0104 	orr.w	r1, r0, #4
 800a4fc:	b2c9      	uxtb	r1, r1
 800a4fe:	f240 7036 	movw	r0, #1846	@ 0x736
 800a502:	f001 fa91 	bl	800ba28 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800a506:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a50a:	60bb      	str	r3, [r7, #8]
        break;
 800a50c:	e747      	b.n	800a39e <RadioSetRxGenericConfig+0x2e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800a50e:	3a0b      	subs	r2, #11
 800a510:	b2d2      	uxtb	r2, r2
 800a512:	2a01      	cmp	r2, #1
 800a514:	d941      	bls.n	800a59a <RadioSetRxGenericConfig+0x22a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a516:	2300      	movs	r3, #0
 800a518:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800a51c:	e7c0      	b.n	800a4a0 <RadioSetRxGenericConfig+0x130>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800a51e:	2b02      	cmp	r3, #2
 800a520:	d038      	beq.n	800a594 <RadioSetRxGenericConfig+0x224>
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a522:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800a526:	21ff      	movs	r1, #255	@ 0xff
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a528:	2a02      	cmp	r2, #2
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800a52a:	75b9      	strb	r1, [r7, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a52c:	f43f af76 	beq.w	800a41c <RadioSetRxGenericConfig+0xac>
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800a530:	757b      	strb	r3, [r7, #21]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800a532:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800a536:	763a      	strb	r2, [r7, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800a538:	75fb      	strb	r3, [r7, #23]
    SubgRf.Modem = modem;
 800a53a:	2500      	movs	r5, #0
    SUBGRF_SetStandby( STDBY_RC );
 800a53c:	2000      	movs	r0, #0
 800a53e:	f000 fdb7 	bl	800b0b0 <SUBGRF_SetStandby>
    RFW_SetRadioModem( modem );
 800a542:	4628      	mov	r0, r5
    SubgRf.Modem = modem;
 800a544:	703d      	strb	r5, [r7, #0]
    RFW_SetRadioModem( modem );
 800a546:	f001 fbd9 	bl	800bcfc <RFW_SetRadioModem>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800a54a:	4628      	mov	r0, r5
 800a54c:	f000 ff70 	bl	800b430 <SUBGRF_SetPacketType>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a550:	4818      	ldr	r0, [pc, #96]	@ (800a5b4 <RadioSetRxGenericConfig+0x244>)
        SubgRf.PublicNetwork.Current = false;
 800a552:	737d      	strb	r5, [r7, #13]
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a554:	f001 f87c 	bl	800b650 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a558:	4817      	ldr	r0, [pc, #92]	@ (800a5b8 <RadioSetRxGenericConfig+0x248>)
 800a55a:	f001 f91d 	bl	800b798 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800a55e:	a801      	add	r0, sp, #4
 800a560:	f000 fc8e 	bl	800ae80 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800a564:	8ba0      	ldrh	r0, [r4, #28]
 800a566:	f000 fcb9 	bl	800aedc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800a56a:	8b20      	ldrh	r0, [r4, #24]
 800a56c:	f000 fc9a 	bl	800aea4 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800a570:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800a574:	68a2      	ldr	r2, [r4, #8]
 800a576:	fb03 f308 	mul.w	r3, r3, r8
 800a57a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a57e:	60bb      	str	r3, [r7, #8]
        break;
 800a580:	e70d      	b.n	800a39e <RadioSetRxGenericConfig+0x2e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800a582:	f001 fa63 	bl	800ba4c <SUBGRF_ReadRegister>
 800a586:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 800a58a:	f240 7036 	movw	r0, #1846	@ 0x736
 800a58e:	f001 fa4b 	bl	800ba28 <SUBGRF_WriteRegister>
 800a592:	e7b8      	b.n	800a506 <RadioSetRxGenericConfig+0x196>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800a594:	23ff      	movs	r3, #255	@ 0xff
 800a596:	75bb      	strb	r3, [r7, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a598:	e740      	b.n	800a41c <RadioSetRxGenericConfig+0xac>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a59a:	f887 1053 	strb.w	r1, [r7, #83]	@ 0x53
 800a59e:	e77f      	b.n	800a4a0 <RadioSetRxGenericConfig+0x130>
            return -1;
 800a5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a4:	e6fc      	b.n	800a3a0 <RadioSetRxGenericConfig+0x30>
 800a5a6:	bf00      	nop
 800a5a8:	20000468 	.word	0x20000468
 800a5ac:	200004c4 	.word	0x200004c4
 800a5b0:	20000438 	.word	0x20000438
 800a5b4:	200004a0 	.word	0x200004a0
 800a5b8:	20000476 	.word	0x20000476

0800a5bc <RadioSetRxConfig>:
{
 800a5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c0:	b087      	sub	sp, #28
    SubgRf.RxContinuous = rxContinuous;
 800a5c2:	f8df b314 	ldr.w	fp, [pc, #788]	@ 800a8d8 <RadioSetRxConfig+0x31c>
{
 800a5c6:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 800a5ca:	9302      	str	r3, [sp, #8]
 800a5cc:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800a5d0:	f8bd 4044 	ldrh.w	r4, [sp, #68]	@ 0x44
 800a5d4:	f89d 804c 	ldrb.w	r8, [sp, #76]	@ 0x4c
 800a5d8:	9301      	str	r3, [sp, #4]
 800a5da:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
 800a5de:	f89d 7050 	ldrb.w	r7, [sp, #80]	@ 0x50
 800a5e2:	f8bd 6048 	ldrh.w	r6, [sp, #72]	@ 0x48
 800a5e6:	9400      	str	r4, [sp, #0]
 800a5e8:	4682      	mov	sl, r0
 800a5ea:	460d      	mov	r5, r1
 800a5ec:	4614      	mov	r4, r2
    SubgRf.RxContinuous = rxContinuous;
 800a5ee:	f88b 9001 	strb.w	r9, [fp, #1]
{
 800a5f2:	9303      	str	r3, [sp, #12]
    RFW_DeInit();
 800a5f4:	f001 fb6e 	bl	800bcd4 <RFW_DeInit>
        symbTimeout = 0;
 800a5f8:	f1b9 0f00 	cmp.w	r9, #0
 800a5fc:	49b7      	ldr	r1, [pc, #732]	@ (800a8dc <RadioSetRxConfig+0x320>)
 800a5fe:	bf18      	it	ne
 800a600:	2600      	movne	r6, #0
        MaxPayloadLength = 0xFF;
 800a602:	f1b8 0f00 	cmp.w	r8, #0
 800a606:	bf08      	it	eq
 800a608:	27ff      	moveq	r7, #255	@ 0xff
    switch( modem )
 800a60a:	f1ba 0f01 	cmp.w	sl, #1
 800a60e:	700f      	strb	r7, [r1, #0]
 800a610:	d009      	beq.n	800a626 <RadioSetRxConfig+0x6a>
 800a612:	f1ba 0f05 	cmp.w	sl, #5
 800a616:	f000 80cc 	beq.w	800a7b2 <RadioSetRxConfig+0x1f6>
 800a61a:	f1ba 0f00 	cmp.w	sl, #0
 800a61e:	d06e      	beq.n	800a6fe <RadioSetRxConfig+0x142>
}
 800a620:	b007      	add	sp, #28
 800a622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800a626:	2000      	movs	r0, #0
 800a628:	f000 fe20 	bl	800b26c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800a62c:	4aac      	ldr	r2, [pc, #688]	@ (800a8e0 <RadioSetRxConfig+0x324>)
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800a62e:	49ab      	ldr	r1, [pc, #684]	@ (800a8dc <RadioSetRxConfig+0x320>)
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800a630:	5d50      	ldrb	r0, [r2, r5]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800a632:	f88b a038 	strb.w	sl, [fp, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800a636:	b2e2      	uxtb	r2, r4
 800a638:	f88b 2050 	strb.w	r2, [fp, #80]	@ 0x50
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800a63c:	2d00      	cmp	r5, #0
 800a63e:	f000 813b 	beq.w	800a8b8 <RadioSetRxConfig+0x2fc>
 800a642:	2d01      	cmp	r5, #1
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800a644:	bf03      	ittte	eq
 800a646:	3c0c      	subeq	r4, #12
 800a648:	fab4 f484 	clzeq	r4, r4
 800a64c:	0964      	lsreq	r4, r4, #5
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800a64e:	2400      	movne	r4, #0
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800a650:	3a05      	subs	r2, #5
 800a652:	2a01      	cmp	r2, #1
 800a654:	d804      	bhi.n	800a660 <RadioSetRxConfig+0xa4>
                if( preambleLen < 12 )
 800a656:	9b00      	ldr	r3, [sp, #0]
 800a658:	2b0c      	cmp	r3, #12
 800a65a:	bf38      	it	cc
 800a65c:	230c      	movcc	r3, #12
 800a65e:	9300      	str	r3, [sp, #0]
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800a660:	9b02      	ldr	r3, [sp, #8]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800a662:	7809      	ldrb	r1, [r1, #0]
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800a664:	f88b 3052 	strb.w	r3, [fp, #82]	@ 0x52
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800a668:	2200      	movs	r2, #0
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800a66a:	9b00      	ldr	r3, [sp, #0]
 800a66c:	f8ab 301c 	strh.w	r3, [fp, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800a670:	f368 0207 	bfi	r2, r8, #0, #8
 800a674:	9b01      	ldr	r3, [sp, #4]
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800a676:	f88b 0051 	strb.w	r0, [fp, #81]	@ 0x51
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800a67a:	f361 220f 	bfi	r2, r1, #8, #8
 800a67e:	f363 4217 	bfi	r2, r3, #16, #8
 800a682:	9b03      	ldr	r3, [sp, #12]
 800a684:	f88b 4053 	strb.w	r4, [fp, #83]	@ 0x53
 800a688:	f363 621f 	bfi	r2, r3, #24, #8
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800a68c:	2401      	movs	r4, #1
    SUBGRF_SetStandby( STDBY_RC );
 800a68e:	2000      	movs	r0, #0
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800a690:	f8cb 201e 	str.w	r2, [fp, #30]
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800a694:	f88b 400e 	strb.w	r4, [fp, #14]
    SUBGRF_SetStandby( STDBY_RC );
 800a698:	f000 fd0a 	bl	800b0b0 <SUBGRF_SetStandby>
    RFW_SetRadioModem( modem );
 800a69c:	4620      	mov	r0, r4
    SubgRf.Modem = modem;
 800a69e:	f88b 4000 	strb.w	r4, [fp]
    RFW_SetRadioModem( modem );
 800a6a2:	f001 fb2b 	bl	800bcfc <RFW_SetRadioModem>
    switch( modem )
 800a6a6:	f7ff fc83 	bl	8009fb0 <RadioSetModem.part.0>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a6aa:	488e      	ldr	r0, [pc, #568]	@ (800a8e4 <RadioSetRxConfig+0x328>)
 800a6ac:	f000 ffd0 	bl	800b650 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a6b0:	488d      	ldr	r0, [pc, #564]	@ (800a8e8 <RadioSetRxConfig+0x32c>)
 800a6b2:	f001 f871 	bl	800b798 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800a6b6:	b2f0      	uxtb	r0, r6
 800a6b8:	f000 fdec 	bl	800b294 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800a6bc:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800a6c0:	f001 f9c4 	bl	800ba4c <SUBGRF_ReadRegister>
 800a6c4:	ea00 0104 	and.w	r1, r0, r4
 800a6c8:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800a6cc:	f001 f9ac 	bl	800ba28 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800a6d0:	f89b 2021 	ldrb.w	r2, [fp, #33]	@ 0x21
 800a6d4:	42a2      	cmp	r2, r4
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800a6d6:	f240 7036 	movw	r0, #1846	@ 0x736
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800a6da:	f000 80f3 	beq.w	800a8c4 <RadioSetRxConfig+0x308>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800a6de:	f001 f9b5 	bl	800ba4c <SUBGRF_ReadRegister>
 800a6e2:	f040 0104 	orr.w	r1, r0, #4
 800a6e6:	b2c9      	uxtb	r1, r1
 800a6e8:	f240 7036 	movw	r0, #1846	@ 0x736
 800a6ec:	f001 f99c 	bl	800ba28 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800a6f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a6f4:	f8cb 2008 	str.w	r2, [fp, #8]
}
 800a6f8:	b007      	add	sp, #28
 800a6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800a6fe:	4650      	mov	r0, sl
 800a700:	f000 fdb4 	bl	800b26c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800a704:	4628      	mov	r0, r5
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800a706:	250b      	movs	r5, #11
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a708:	f88b a038 	strb.w	sl, [fp, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800a70c:	f8cb 403c 	str.w	r4, [fp, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800a710:	f88b 5044 	strb.w	r5, [fp, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800a714:	f001 fa6a 	bl	800bbec <SUBGRF_GetFskBandwidthRegValue>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800a718:	9b01      	ldr	r3, [sp, #4]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800a71a:	4970      	ldr	r1, [pc, #448]	@ (800a8dc <RadioSetRxConfig+0x320>)
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800a71c:	f88b 0045 	strb.w	r0, [fp, #69]	@ 0x45
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800a720:	2b00      	cmp	r3, #0
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800a722:	7809      	ldrb	r1, [r1, #0]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800a724:	9b00      	ldr	r3, [sp, #0]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800a726:	f88b 1016 	strb.w	r1, [fp, #22]
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800a72a:	bf0c      	ite	eq
 800a72c:	2101      	moveq	r1, #1
 800a72e:	21f2      	movne	r1, #242	@ 0xf2
 800a730:	f88b 1017 	strb.w	r1, [fp, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800a734:	2101      	movs	r1, #1
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800a736:	ea4f 09c3 	mov.w	r9, r3, lsl #3
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800a73a:	f88b 1018 	strb.w	r1, [fp, #24]
    SUBGRF_SetStandby( STDBY_RC );
 800a73e:	4650      	mov	r0, sl
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800a740:	f641 0104 	movw	r1, #6148	@ 0x1804
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800a744:	f088 0801 	eor.w	r8, r8, #1
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800a748:	f8ab 1012 	strh.w	r1, [fp, #18]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800a74c:	f8ab 9010 	strh.w	r9, [fp, #16]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800a750:	f88b 8015 	strb.w	r8, [fp, #21]
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a754:	f88b a00e 	strb.w	sl, [fp, #14]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800a758:	f88b a014 	strb.w	sl, [fp, #20]
    SUBGRF_SetStandby( STDBY_RC );
 800a75c:	f000 fca8 	bl	800b0b0 <SUBGRF_SetStandby>
    RFW_SetRadioModem( modem );
 800a760:	4650      	mov	r0, sl
    SubgRf.Modem = modem;
 800a762:	f88b a000 	strb.w	sl, [fp]
    RFW_SetRadioModem( modem );
 800a766:	f001 fac9 	bl	800bcfc <RFW_SetRadioModem>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800a76a:	4650      	mov	r0, sl
 800a76c:	f000 fe60 	bl	800b430 <SUBGRF_SetPacketType>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a770:	f10b 0038 	add.w	r0, fp, #56	@ 0x38
        SubgRf.PublicNetwork.Current = false;
 800a774:	f88b a00d 	strb.w	sl, [fp, #13]
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a778:	f000 ff6a 	bl	800b650 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a77c:	f10b 000e 	add.w	r0, fp, #14
 800a780:	f001 f80a 	bl	800b798 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800a784:	4959      	ldr	r1, [pc, #356]	@ (800a8ec <RadioSetRxConfig+0x330>)
 800a786:	c903      	ldmia	r1, {r0, r1}
 800a788:	aa04      	add	r2, sp, #16
 800a78a:	e882 0003 	stmia.w	r2, {r0, r1}
 800a78e:	4610      	mov	r0, r2
 800a790:	f000 fb76 	bl	800ae80 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800a794:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800a798:	f000 fba0 	bl	800aedc <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800a79c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800a7a0:	fb06 f202 	mul.w	r2, r6, r2
 800a7a4:	fbb2 f2f4 	udiv	r2, r2, r4
 800a7a8:	f8cb 2008 	str.w	r2, [fp, #8]
}
 800a7ac:	b007      	add	sp, #28
 800a7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800a7b2:	2001      	movs	r0, #1
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800a7b4:	2709      	movs	r7, #9
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800a7b6:	f000 fd59 	bl	800b26c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800a7ba:	f88b 7044 	strb.w	r7, [fp, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800a7be:	4628      	mov	r0, r5
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800a7c0:	f44f 7748 	mov.w	r7, #800	@ 0x320
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a7c4:	2500      	movs	r5, #0
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800a7c6:	f8cb 403c 	str.w	r4, [fp, #60]	@ 0x3c
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a7ca:	f88b 5038 	strb.w	r5, [fp, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800a7ce:	f8cb 7040 	str.w	r7, [fp, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800a7d2:	f001 fa0b 	bl	800bbec <SUBGRF_GetFskBandwidthRegValue>
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800a7d6:	9b00      	ldr	r3, [sp, #0]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800a7d8:	4940      	ldr	r1, [pc, #256]	@ (800a8dc <RadioSetRxConfig+0x320>)
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800a7da:	f88b 0045 	strb.w	r0, [fp, #69]	@ 0x45
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800a7de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800a7e2:	ea4f 09c3 	mov.w	r9, r3, lsl #3
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800a7e6:	7809      	ldrb	r1, [r1, #0]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800a7e8:	f8cb 2012 	str.w	r2, [fp, #18]
    RFW_SetRadioModem( modem );
 800a7ec:	4650      	mov	r0, sl
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800a7ee:	2201      	movs	r2, #1
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800a7f0:	f88b 1016 	strb.w	r1, [fp, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800a7f4:	f88b 2017 	strb.w	r2, [fp, #23]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800a7f8:	f8ab 9010 	strh.w	r9, [fp, #16]
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a7fc:	f88b 500e 	strb.w	r5, [fp, #14]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800a800:	f88b 5018 	strb.w	r5, [fp, #24]
    SubgRf.Modem = modem;
 800a804:	f88b a000 	strb.w	sl, [fp]
    RFW_SetRadioModem( modem );
 800a808:	f001 fa78 	bl	800bcfc <RFW_SetRadioModem>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800a80c:	4628      	mov	r0, r5
 800a80e:	f000 fe0f 	bl	800b430 <SUBGRF_SetPacketType>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a812:	f10b 0038 	add.w	r0, fp, #56	@ 0x38
        SubgRf.PublicNetwork.Current = false;
 800a816:	f88b 500d 	strb.w	r5, [fp, #13]
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a81a:	f000 ff19 	bl	800b650 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a81e:	f10b 000e 	add.w	r0, fp, #14
 800a822:	f000 ffb9 	bl	800b798 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800a826:	4932      	ldr	r1, [pc, #200]	@ (800a8f0 <RadioSetRxConfig+0x334>)
 800a828:	c903      	ldmia	r1, {r0, r1}
 800a82a:	aa04      	add	r2, sp, #16
 800a82c:	e882 0003 	stmia.w	r2, {r0, r1}
 800a830:	4610      	mov	r0, r2
 800a832:	f000 fb25 	bl	800ae80 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800a836:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800a83a:	f000 fb4f 	bl	800aedc <SUBGRF_SetWhiteningSeed>
    return SUBGRF_ReadRegister( addr );
 800a83e:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 800a842:	f001 f903 	bl	800ba4c <SUBGRF_ReadRegister>
    SUBGRF_WriteRegister( addr, data );
 800a846:	f000 01ef 	and.w	r1, r0, #239	@ 0xef
 800a84a:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 800a84e:	f001 f8eb 	bl	800ba28 <SUBGRF_WriteRegister>
 800a852:	2104      	movs	r1, #4
 800a854:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 800a858:	f001 f8e6 	bl	800ba28 <SUBGRF_WriteRegister>
    return SUBGRF_ReadRegister( addr );
 800a85c:	f640 009b 	movw	r0, #2203	@ 0x89b
 800a860:	f001 f8f4 	bl	800ba4c <SUBGRF_ReadRegister>
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 800a864:	f000 01e3 	and.w	r1, r0, #227	@ 0xe3
    SUBGRF_WriteRegister( addr, data );
 800a868:	f041 0108 	orr.w	r1, r1, #8
 800a86c:	f640 009b 	movw	r0, #2203	@ 0x89b
 800a870:	f001 f8da 	bl	800ba28 <SUBGRF_WriteRegister>
    return SUBGRF_ReadRegister( addr );
 800a874:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 800a878:	f001 f8e8 	bl	800ba4c <SUBGRF_ReadRegister>
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 800a87c:	f040 0118 	orr.w	r1, r0, #24
    SUBGRF_WriteRegister( addr, data );
 800a880:	b2c9      	uxtb	r1, r1
 800a882:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 800a886:	f001 f8cf 	bl	800ba28 <SUBGRF_WriteRegister>
    return SUBGRF_ReadRegister( addr );
 800a88a:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800a88e:	f001 f8dd 	bl	800ba4c <SUBGRF_ReadRegister>
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 800a892:	f000 018f 	and.w	r1, r0, #143	@ 0x8f
    SUBGRF_WriteRegister( addr, data );
 800a896:	f041 0150 	orr.w	r1, r1, #80	@ 0x50
 800a89a:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800a89e:	f001 f8c3 	bl	800ba28 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800a8a2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800a8a6:	fb06 f202 	mul.w	r2, r6, r2
 800a8aa:	fbb2 f2f4 	udiv	r2, r2, r4
 800a8ae:	f8cb 2008 	str.w	r2, [fp, #8]
}
 800a8b2:	b007      	add	sp, #28
 800a8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800a8b8:	3c0b      	subs	r4, #11
 800a8ba:	2c01      	cmp	r4, #1
 800a8bc:	bf8c      	ite	hi
 800a8be:	2400      	movhi	r4, #0
 800a8c0:	2401      	movls	r4, #1
 800a8c2:	e6c5      	b.n	800a650 <RadioSetRxConfig+0x94>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800a8c4:	f001 f8c2 	bl	800ba4c <SUBGRF_ReadRegister>
 800a8c8:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 800a8cc:	f240 7036 	movw	r0, #1846	@ 0x736
 800a8d0:	f001 f8aa 	bl	800ba28 <SUBGRF_WriteRegister>
 800a8d4:	e70c      	b.n	800a6f0 <RadioSetRxConfig+0x134>
 800a8d6:	bf00      	nop
 800a8d8:	20000468 	.word	0x20000468
 800a8dc:	20000018 	.word	0x20000018
 800a8e0:	0800d270 	.word	0x0800d270
 800a8e4:	200004a0 	.word	0x200004a0
 800a8e8:	20000476 	.word	0x20000476
 800a8ec:	0800cf00 	.word	0x0800cf00
 800a8f0:	0800cef8 	.word	0x0800cef8

0800a8f4 <RadioIsChannelFree>:
{
 800a8f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    SubgRf.Modem = modem;
 800a8f8:	2400      	movs	r4, #0
{
 800a8fa:	b08b      	sub	sp, #44	@ 0x2c
    SubgRf.Modem = modem;
 800a8fc:	4f30      	ldr	r7, [pc, #192]	@ (800a9c0 <RadioIsChannelFree+0xcc>)
{
 800a8fe:	4681      	mov	r9, r0
    SUBGRF_SetStandby( STDBY_RC );
 800a900:	2000      	movs	r0, #0
{
 800a902:	4688      	mov	r8, r1
 800a904:	4616      	mov	r6, r2
 800a906:	461d      	mov	r5, r3
    SUBGRF_SetStandby( STDBY_RC );
 800a908:	f000 fbd2 	bl	800b0b0 <SUBGRF_SetStandby>
    RFW_SetRadioModem( modem );
 800a90c:	4620      	mov	r0, r4
    SubgRf.Modem = modem;
 800a90e:	703c      	strb	r4, [r7, #0]
    RFW_SetRadioModem( modem );
 800a910:	f001 f9f4 	bl	800bcfc <RFW_SetRadioModem>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800a914:	4620      	mov	r0, r4
 800a916:	f000 fd8b 	bl	800b430 <SUBGRF_SetPacketType>
    SUBGRF_SetRfFrequency( freq );
 800a91a:	4648      	mov	r0, r9
        SubgRf.PublicNetwork.Current = false;
 800a91c:	737c      	strb	r4, [r7, #13]
    SUBGRF_SetRfFrequency( freq );
 800a91e:	f000 fd29 	bl	800b374 <SUBGRF_SetRfFrequency>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800a922:	2301      	movs	r3, #1
 800a924:	9309      	str	r3, [sp, #36]	@ 0x24
 800a926:	2303      	movs	r3, #3
 800a928:	4641      	mov	r1, r8
 800a92a:	9301      	str	r3, [sp, #4]
 800a92c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800a930:	4623      	mov	r3, r4
 800a932:	4620      	mov	r0, r4
 800a934:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800a938:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800a93c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800a940:	9402      	str	r4, [sp, #8]
 800a942:	f8cd 8000 	str.w	r8, [sp]
 800a946:	f7ff fe39 	bl	800a5bc <RadioSetRxConfig>
    if( 1UL == RFW_Is_Init( ) )
 800a94a:	f001 f9c5 	bl	800bcd8 <RFW_Is_Init>
 800a94e:	2801      	cmp	r0, #1
 800a950:	d033      	beq.n	800a9ba <RadioIsChannelFree+0xc6>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800a952:	f240 2162 	movw	r1, #610	@ 0x262
 800a956:	4623      	mov	r3, r4
 800a958:	4622      	mov	r2, r4
 800a95a:	4608      	mov	r0, r1
 800a95c:	f000 fcde 	bl	800b31c <SUBGRF_SetDioIrqParams>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800a960:	2100      	movs	r1, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800a962:	f897 0056 	ldrb.w	r0, [r7, #86]	@ 0x56
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800a966:	65b9      	str	r1, [r7, #88]	@ 0x58
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800a968:	f001 f8a0 	bl	800baac <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800a96c:	787b      	ldrb	r3, [r7, #1]
 800a96e:	b1eb      	cbz	r3, 800a9ac <RadioIsChannelFree+0xb8>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800a970:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800a974:	f000 fbd8 	bl	800b128 <SUBGRF_SetRx>
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800a978:	f001 f8ec 	bl	800bb54 <SUBGRF_GetRadioWakeUpTime>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800a97c:	3003      	adds	r0, #3
 800a97e:	f7f6 fe9f 	bl	80016c0 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800a982:	f002 f823 	bl	800c9cc <UTIL_TIMER_GetCurrentTime>
 800a986:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800a988:	e003      	b.n	800a992 <RadioIsChannelFree+0x9e>
    return SUBGRF_GetRssiInst( );
 800a98a:	f000 ffef 	bl	800b96c <SUBGRF_GetRssiInst>
        if( rssi > rssiThresh )
 800a98e:	4286      	cmp	r6, r0
 800a990:	db11      	blt.n	800a9b6 <RadioIsChannelFree+0xc2>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800a992:	4620      	mov	r0, r4
 800a994:	f002 f824 	bl	800c9e0 <UTIL_TIMER_GetElapsedTime>
 800a998:	42a8      	cmp	r0, r5
 800a99a:	d3f6      	bcc.n	800a98a <RadioIsChannelFree+0x96>
    bool status = true;
 800a99c:	2401      	movs	r4, #1
    SUBGRF_SetStandby( STDBY_RC );
 800a99e:	2000      	movs	r0, #0
 800a9a0:	f000 fb86 	bl	800b0b0 <SUBGRF_SetStandby>
}
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	b00b      	add	sp, #44	@ 0x2c
 800a9a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800a9ac:	68b8      	ldr	r0, [r7, #8]
 800a9ae:	0180      	lsls	r0, r0, #6
 800a9b0:	f000 fbba 	bl	800b128 <SUBGRF_SetRx>
}
 800a9b4:	e7e0      	b.n	800a978 <RadioIsChannelFree+0x84>
            status = false;
 800a9b6:	2400      	movs	r4, #0
 800a9b8:	e7f1      	b.n	800a99e <RadioIsChannelFree+0xaa>
        RFW_ReceiveInit( );
 800a9ba:	f001 f997 	bl	800bcec <RFW_ReceiveInit>
 800a9be:	e7cf      	b.n	800a960 <RadioIsChannelFree+0x6c>
 800a9c0:	20000468 	.word	0x20000468

0800a9c4 <RadioSetTxConfig>:
{
 800a9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c8:	b085      	sub	sp, #20
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	461e      	mov	r6, r3
 800a9ce:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
 800a9d2:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800a9d6:	f8bd 8040 	ldrh.w	r8, [sp, #64]	@ 0x40
 800a9da:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800a9de:	f89d a048 	ldrb.w	sl, [sp, #72]	@ 0x48
 800a9e2:	9000      	str	r0, [sp, #0]
 800a9e4:	460d      	mov	r5, r1
 800a9e6:	4617      	mov	r7, r2
 800a9e8:	9301      	str	r3, [sp, #4]
    RFW_DeInit();
 800a9ea:	f001 f973 	bl	800bcd4 <RFW_DeInit>
    switch( modem )
 800a9ee:	2c01      	cmp	r4, #1
 800a9f0:	d01c      	beq.n	800aa2c <RadioSetTxConfig+0x68>
 800a9f2:	2c04      	cmp	r4, #4
 800a9f4:	f000 80f0 	beq.w	800abd8 <RadioSetTxConfig+0x214>
 800a9f8:	2c00      	cmp	r4, #0
 800a9fa:	f000 80a0 	beq.w	800ab3e <RadioSetTxConfig+0x17a>
 800a9fe:	f8df b258 	ldr.w	fp, [pc, #600]	@ 800ac58 <RadioSetTxConfig+0x294>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800aa02:	4628      	mov	r0, r5
 800aa04:	f001 f88a 	bl	800bb1c <SUBGRF_SetRfTxPower>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800aa08:	210e      	movs	r1, #14
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800aa0a:	4602      	mov	r2, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800aa0c:	f640 101f 	movw	r0, #2335	@ 0x91f
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800aa10:	f88b 2056 	strb.w	r2, [fp, #86]	@ 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800aa14:	f001 f808 	bl	800ba28 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800aa18:	f89b 0056 	ldrb.w	r0, [fp, #86]	@ 0x56
 800aa1c:	f001 f960 	bl	800bce0 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800aa20:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aa22:	f8cb 3004 	str.w	r3, [fp, #4]
}
 800aa26:	b005      	add	sp, #20
 800aa28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800aa2c:	4a8b      	ldr	r2, [pc, #556]	@ (800ac5c <RadioSetTxConfig+0x298>)
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800aa2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800aa30:	f8df b224 	ldr.w	fp, [pc, #548]	@ 800ac58 <RadioSetTxConfig+0x294>
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800aa34:	5d90      	ldrb	r0, [r2, r6]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800aa36:	f88b 4038 	strb.w	r4, [fp, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800aa3a:	b2da      	uxtb	r2, r3
 800aa3c:	f88b 2050 	strb.w	r2, [fp, #80]	@ 0x50
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800aa40:	2e00      	cmp	r6, #0
 800aa42:	f000 80e4 	beq.w	800ac0e <RadioSetTxConfig+0x24a>
 800aa46:	2e01      	cmp	r6, #1
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800aa48:	bf03      	ittte	eq
 800aa4a:	f1a3 010c 	subeq.w	r1, r3, #12
 800aa4e:	fab1 f181 	clzeq	r1, r1
 800aa52:	0949      	lsreq	r1, r1, #5
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800aa54:	2100      	movne	r1, #0
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800aa56:	3a05      	subs	r2, #5
 800aa58:	2a01      	cmp	r2, #1
 800aa5a:	d804      	bhi.n	800aa66 <RadioSetTxConfig+0xa2>
                if( preambleLen < 12 )
 800aa5c:	f1b8 0f0c 	cmp.w	r8, #12
 800aa60:	bf38      	it	cc
 800aa62:	f04f 080c 	movcc.w	r8, #12
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800aa66:	4a7e      	ldr	r2, [pc, #504]	@ (800ac60 <RadioSetTxConfig+0x29c>)
 800aa68:	f88b 1053 	strb.w	r1, [fp, #83]	@ 0x53
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800aa6c:	7811      	ldrb	r1, [r2, #0]
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800aa6e:	9b00      	ldr	r3, [sp, #0]
 800aa70:	f88b 3052 	strb.w	r3, [fp, #82]	@ 0x52
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800aa74:	2200      	movs	r2, #0
 800aa76:	f369 0207 	bfi	r2, r9, #0, #8
 800aa7a:	9b01      	ldr	r3, [sp, #4]
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800aa7c:	f88b 0051 	strb.w	r0, [fp, #81]	@ 0x51
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800aa80:	f361 220f 	bfi	r2, r1, #8, #8
 800aa84:	f36a 4217 	bfi	r2, sl, #16, #8
 800aa88:	f363 621f 	bfi	r2, r3, #24, #8
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800aa8c:	2401      	movs	r4, #1
    SUBGRF_SetStandby( STDBY_RC );
 800aa8e:	2000      	movs	r0, #0
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800aa90:	f8cb 201e 	str.w	r2, [fp, #30]
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800aa94:	f8ab 801c 	strh.w	r8, [fp, #28]
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800aa98:	f88b 400e 	strb.w	r4, [fp, #14]
    SUBGRF_SetStandby( STDBY_RC );
 800aa9c:	f000 fb08 	bl	800b0b0 <SUBGRF_SetStandby>
    RFW_SetRadioModem( modem );
 800aaa0:	4620      	mov	r0, r4
    SubgRf.Modem = modem;
 800aaa2:	f88b 4000 	strb.w	r4, [fp]
    RFW_SetRadioModem( modem );
 800aaa6:	f001 f929 	bl	800bcfc <RFW_SetRadioModem>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f000 fcc0 	bl	800b430 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800aab0:	f89b 600c 	ldrb.w	r6, [fp, #12]
 800aab4:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800aab8:	42b2      	cmp	r2, r6
 800aaba:	d039      	beq.n	800ab30 <RadioSetTxConfig+0x16c>
    RFW_SetRadioModem( modem );
 800aabc:	4620      	mov	r0, r4
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800aabe:	f88b 600d 	strb.w	r6, [fp, #13]
    SubgRf.Modem = modem;
 800aac2:	f88b 4000 	strb.w	r4, [fp]
    RFW_SetRadioModem( modem );
 800aac6:	f001 f919 	bl	800bcfc <RFW_SetRadioModem>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800aaca:	4620      	mov	r0, r4
 800aacc:	f000 fcb0 	bl	800b430 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800aad0:	f89b 700c 	ldrb.w	r7, [fp, #12]
 800aad4:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800aad8:	42ba      	cmp	r2, r7
 800aada:	d01d      	beq.n	800ab18 <RadioSetTxConfig+0x154>
    RFW_SetRadioModem( modem );
 800aadc:	4620      	mov	r0, r4
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800aade:	f88b 700d 	strb.w	r7, [fp, #13]
    SubgRf.Modem = modem;
 800aae2:	f88b 4000 	strb.w	r4, [fp]
    RFW_SetRadioModem( modem );
 800aae6:	f001 f909 	bl	800bcfc <RFW_SetRadioModem>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800aaea:	4620      	mov	r0, r4
 800aaec:	f000 fca0 	bl	800b430 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800aaf0:	f89b 000c 	ldrb.w	r0, [fp, #12]
 800aaf4:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800aaf8:	4282      	cmp	r2, r0
 800aafa:	f040 80a5 	bne.w	800ac48 <RadioSetTxConfig+0x284>
    if( enable == true )
 800aafe:	2f00      	cmp	r7, #0
 800ab00:	f000 8097 	beq.w	800ac32 <RadioSetTxConfig+0x26e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800ab04:	2134      	movs	r1, #52	@ 0x34
 800ab06:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800ab0a:	f000 ff8d 	bl	800ba28 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800ab0e:	2144      	movs	r1, #68	@ 0x44
 800ab10:	f240 7041 	movw	r0, #1857	@ 0x741
 800ab14:	f000 ff88 	bl	800ba28 <SUBGRF_WriteRegister>
    if( enable == true )
 800ab18:	2e00      	cmp	r6, #0
 800ab1a:	d07f      	beq.n	800ac1c <RadioSetTxConfig+0x258>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800ab1c:	2134      	movs	r1, #52	@ 0x34
 800ab1e:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800ab22:	f000 ff81 	bl	800ba28 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800ab26:	2144      	movs	r1, #68	@ 0x44
 800ab28:	f240 7041 	movw	r0, #1857	@ 0x741
 800ab2c:	f000 ff7c 	bl	800ba28 <SUBGRF_WriteRegister>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ab30:	484c      	ldr	r0, [pc, #304]	@ (800ac64 <RadioSetTxConfig+0x2a0>)
 800ab32:	f000 fd8d 	bl	800b650 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ab36:	484c      	ldr	r0, [pc, #304]	@ (800ac68 <RadioSetTxConfig+0x2a4>)
 800ab38:	f000 fe2e 	bl	800b798 <SUBGRF_SetPacketParams>
            break;
 800ab3c:	e761      	b.n	800aa02 <RadioSetTxConfig+0x3e>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800ab3e:	f8df b118 	ldr.w	fp, [pc, #280]	@ 800ac58 <RadioSetTxConfig+0x294>
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800ab42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab44:	f8cb 303c 	str.w	r3, [fp, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800ab48:	220b      	movs	r2, #11
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800ab4a:	4630      	mov	r0, r6
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800ab4c:	f88b 2044 	strb.w	r2, [fp, #68]	@ 0x44
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800ab50:	f88b 4038 	strb.w	r4, [fp, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800ab54:	f001 f84a 	bl	800bbec <SUBGRF_GetFskBandwidthRegValue>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800ab58:	f1ba 0f00 	cmp.w	sl, #0
 800ab5c:	bf0c      	ite	eq
 800ab5e:	2201      	moveq	r2, #1
 800ab60:	22f2      	movne	r2, #242	@ 0xf2
 800ab62:	f88b 2017 	strb.w	r2, [fp, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800ab66:	2201      	movs	r2, #1
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800ab68:	f88b 0045 	strb.w	r0, [fp, #69]	@ 0x45
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800ab6c:	f88b 2018 	strb.w	r2, [fp, #24]
    SUBGRF_SetStandby( STDBY_RC );
 800ab70:	4620      	mov	r0, r4
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800ab72:	f641 0204 	movw	r2, #6148	@ 0x1804
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800ab76:	ea4f 08c8 	mov.w	r8, r8, lsl #3
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800ab7a:	f089 0901 	eor.w	r9, r9, #1
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800ab7e:	f8ab 2012 	strh.w	r2, [fp, #18]
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800ab82:	f8cb 7040 	str.w	r7, [fp, #64]	@ 0x40
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800ab86:	f8ab 8010 	strh.w	r8, [fp, #16]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800ab8a:	f88b 9015 	strb.w	r9, [fp, #21]
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800ab8e:	f88b 400e 	strb.w	r4, [fp, #14]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800ab92:	f88b 4014 	strb.w	r4, [fp, #20]
    SUBGRF_SetStandby( STDBY_RC );
 800ab96:	f000 fa8b 	bl	800b0b0 <SUBGRF_SetStandby>
    RFW_SetRadioModem( modem );
 800ab9a:	4620      	mov	r0, r4
    SubgRf.Modem = modem;
 800ab9c:	f88b 4000 	strb.w	r4, [fp]
    RFW_SetRadioModem( modem );
 800aba0:	f001 f8ac 	bl	800bcfc <RFW_SetRadioModem>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800aba4:	4620      	mov	r0, r4
 800aba6:	f000 fc43 	bl	800b430 <SUBGRF_SetPacketType>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800abaa:	f10b 0038 	add.w	r0, fp, #56	@ 0x38
        SubgRf.PublicNetwork.Current = false;
 800abae:	f88b 400d 	strb.w	r4, [fp, #13]
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800abb2:	f000 fd4d 	bl	800b650 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800abb6:	f10b 000e 	add.w	r0, fp, #14
 800abba:	f000 fded 	bl	800b798 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800abbe:	492b      	ldr	r1, [pc, #172]	@ (800ac6c <RadioSetTxConfig+0x2a8>)
 800abc0:	c903      	ldmia	r1, {r0, r1}
 800abc2:	aa02      	add	r2, sp, #8
 800abc4:	e882 0003 	stmia.w	r2, {r0, r1}
 800abc8:	4610      	mov	r0, r2
 800abca:	f000 f959 	bl	800ae80 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800abce:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800abd2:	f000 f983 	bl	800aedc <SUBGRF_SetWhiteningSeed>
            break;
 800abd6:	e714      	b.n	800aa02 <RadioSetTxConfig+0x3e>
    SubgRf.Modem = modem;
 800abd8:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800ac58 <RadioSetTxConfig+0x294>
    RFW_SetRadioModem( modem );
 800abdc:	4620      	mov	r0, r4
    SubgRf.Modem = modem;
 800abde:	f88b 4000 	strb.w	r4, [fp]
    RFW_SetRadioModem( modem );
 800abe2:	f001 f88b 	bl	800bcfc <RFW_SetRadioModem>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800abe6:	2002      	movs	r0, #2
 800abe8:	f000 fc22 	bl	800b430 <SUBGRF_SetPacketType>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800abec:	2202      	movs	r2, #2
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800abee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800abf0:	f88b 2038 	strb.w	r2, [fp, #56]	@ 0x38
        SubgRf.PublicNetwork.Current = false;
 800abf4:	2100      	movs	r1, #0
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800abf6:	2216      	movs	r2, #22
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800abf8:	f10b 0038 	add.w	r0, fp, #56	@ 0x38
        SubgRf.PublicNetwork.Current = false;
 800abfc:	f88b 100d 	strb.w	r1, [fp, #13]
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800ac00:	f8cb 3048 	str.w	r3, [fp, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800ac04:	f88b 204c 	strb.w	r2, [fp, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ac08:	f000 fd22 	bl	800b650 <SUBGRF_SetModulationParams>
            break;
 800ac0c:	e6f9      	b.n	800aa02 <RadioSetTxConfig+0x3e>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800ac0e:	f1a3 010b 	sub.w	r1, r3, #11
 800ac12:	2901      	cmp	r1, #1
 800ac14:	bf8c      	ite	hi
 800ac16:	2100      	movhi	r1, #0
 800ac18:	2101      	movls	r1, #1
 800ac1a:	e71c      	b.n	800aa56 <RadioSetTxConfig+0x92>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800ac1c:	2114      	movs	r1, #20
 800ac1e:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800ac22:	f000 ff01 	bl	800ba28 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800ac26:	2124      	movs	r1, #36	@ 0x24
 800ac28:	f240 7041 	movw	r0, #1857	@ 0x741
 800ac2c:	f000 fefc 	bl	800ba28 <SUBGRF_WriteRegister>
 800ac30:	e77e      	b.n	800ab30 <RadioSetTxConfig+0x16c>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800ac32:	2114      	movs	r1, #20
 800ac34:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800ac38:	f000 fef6 	bl	800ba28 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800ac3c:	2124      	movs	r1, #36	@ 0x24
 800ac3e:	f240 7041 	movw	r0, #1857	@ 0x741
 800ac42:	f000 fef1 	bl	800ba28 <SUBGRF_WriteRegister>
 800ac46:	e767      	b.n	800ab18 <RadioSetTxConfig+0x154>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800ac48:	f88b 000d 	strb.w	r0, [fp, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800ac4c:	f7ff f902 	bl	8009e54 <RadioSetPublicNetwork>
    if( enable == true )
 800ac50:	2f00      	cmp	r7, #0
 800ac52:	d0ee      	beq.n	800ac32 <RadioSetTxConfig+0x26e>
 800ac54:	e756      	b.n	800ab04 <RadioSetTxConfig+0x140>
 800ac56:	bf00      	nop
 800ac58:	20000468 	.word	0x20000468
 800ac5c:	0800d270 	.word	0x0800d270
 800ac60:	20000018 	.word	0x20000018
 800ac64:	200004a0 	.word	0x200004a0
 800ac68:	20000476 	.word	0x20000476
 800ac6c:	0800cf00 	.word	0x0800cf00

0800ac70 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800ac70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac74:	b082      	sub	sp, #8
    if ( dioIrq != NULL)
 800ac76:	b108      	cbz	r0, 800ac7c <SUBGRF_Init+0xc>
    {
        RadioOnDioIrqCb = dioIrq;
 800ac78:	4b43      	ldr	r3, [pc, #268]	@ (800ad88 <SUBGRF_Init+0x118>)
 800ac7a:	6018      	str	r0, [r3, #0]
    }

    RADIO_INIT();
 800ac7c:	f7f6 fc98 	bl	80015b0 <MX_SUBGHZ_Init>
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
  if ( 1U == RBI_IsDCDC() )
 800ac80:	f001 f934 	bl	800beec <RBI_IsDCDC>
 800ac84:	2801      	cmp	r0, #1
 800ac86:	4605      	mov	r5, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800ac88:	ac01      	add	r4, sp, #4
  if ( 1U == RBI_IsDCDC() )
 800ac8a:	d065      	beq.n	800ad58 <SUBGRF_Init+0xe8>
    ImageCalibrated = false;
 800ac8c:	4b3f      	ldr	r3, [pc, #252]	@ (800ad8c <SUBGRF_Init+0x11c>)
 800ac8e:	2600      	movs	r6, #0
 800ac90:	701e      	strb	r6, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 800ac92:	f88d 6004 	strb.w	r6, [sp, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac96:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ac9a:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	4622      	mov	r2, r4
 800aca0:	2180      	movs	r1, #128	@ 0x80
 800aca2:	483b      	ldr	r0, [pc, #236]	@ (800ad90 <SUBGRF_Init+0x120>)
 800aca4:	f7fc fec4 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aca8:	f385 8810 	msr	PRIMASK, r5
    if( standbyConfig == STDBY_RC )
 800acac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800acb0:	4f38      	ldr	r7, [pc, #224]	@ (800ad94 <SUBGRF_Init+0x124>)
        OperatingMode = MODE_STDBY_RC;
 800acb2:	42b3      	cmp	r3, r6
 800acb4:	bf14      	ite	ne
 800acb6:	2302      	movne	r3, #2
 800acb8:	2301      	moveq	r3, #1
 800acba:	703b      	strb	r3, [r7, #0]
    if (1U == RBI_IsTCXO() )
 800acbc:	f001 f914 	bl	800bee8 <RBI_IsTCXO>
 800acc0:	2801      	cmp	r0, #1
 800acc2:	4605      	mov	r5, r0
 800acc4:	d023      	beq.n	800ad0e <SUBGRF_Init+0x9e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800acc6:	2520      	movs	r5, #32
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800acc8:	2301      	movs	r3, #1
 800acca:	4622      	mov	r2, r4
 800accc:	f640 1111 	movw	r1, #2321	@ 0x911
 800acd0:	482f      	ldr	r0, [pc, #188]	@ (800ad90 <SUBGRF_Init+0x120>)
 800acd2:	f88d 5004 	strb.w	r5, [sp, #4]
 800acd6:	f7fc ff13 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
 800acda:	482d      	ldr	r0, [pc, #180]	@ (800ad90 <SUBGRF_Init+0x120>)
 800acdc:	f88d 5004 	strb.w	r5, [sp, #4]
 800ace0:	2301      	movs	r3, #1
 800ace2:	4622      	mov	r2, r4
 800ace4:	f640 1112 	movw	r1, #2322	@ 0x912
 800ace8:	f7fc ff0a 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
 800acec:	4622      	mov	r2, r4
 800acee:	2301      	movs	r3, #1
 800acf0:	f640 111f 	movw	r1, #2335	@ 0x91f
 800acf4:	240e      	movs	r4, #14
 800acf6:	4826      	ldr	r0, [pc, #152]	@ (800ad90 <SUBGRF_Init+0x120>)
 800acf8:	f88d 4004 	strb.w	r4, [sp, #4]
 800acfc:	f7fc ff00 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
    RBI_Init();
 800ad00:	f001 f8b0 	bl	800be64 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 800ad04:	2301      	movs	r3, #1
 800ad06:	703b      	strb	r3, [r7, #0]
}
 800ad08:	b002      	add	sp, #8
 800ad0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    buf[0] = tcxoVoltage & 0x07;
 800ad0e:	4b22      	ldr	r3, [pc, #136]	@ (800ad98 <SUBGRF_Init+0x128>)
 800ad10:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad12:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ad16:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800ad18:	2304      	movs	r3, #4
 800ad1a:	4622      	mov	r2, r4
 800ad1c:	2197      	movs	r1, #151	@ 0x97
 800ad1e:	481c      	ldr	r0, [pc, #112]	@ (800ad90 <SUBGRF_Init+0x120>)
 800ad20:	f7fc fe86 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad24:	f388 8810 	msr	PRIMASK, r8
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800ad28:	f640 1111 	movw	r1, #2321	@ 0x911
 800ad2c:	462b      	mov	r3, r5
 800ad2e:	4622      	mov	r2, r4
 800ad30:	4817      	ldr	r0, [pc, #92]	@ (800ad90 <SUBGRF_Init+0x120>)
 800ad32:	f88d 6004 	strb.w	r6, [sp, #4]
 800ad36:	f7fc fee3 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800ad3a:	237f      	movs	r3, #127	@ 0x7f
 800ad3c:	f88d 3004 	strb.w	r3, [sp, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad40:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ad44:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800ad46:	2189      	movs	r1, #137	@ 0x89
 800ad48:	462b      	mov	r3, r5
 800ad4a:	4622      	mov	r2, r4
 800ad4c:	4810      	ldr	r0, [pc, #64]	@ (800ad90 <SUBGRF_Init+0x120>)
 800ad4e:	f7fc fe6f 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad52:	f386 8810 	msr	PRIMASK, r6
 800ad56:	e7c9      	b.n	800acec <SUBGRF_Init+0x7c>
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800ad58:	4603      	mov	r3, r0
 800ad5a:	4622      	mov	r2, r4
 800ad5c:	f640 1123 	movw	r1, #2339	@ 0x923
 800ad60:	480b      	ldr	r0, [pc, #44]	@ (800ad90 <SUBGRF_Init+0x120>)
 800ad62:	f7fc ff35 	bl	8007bd0 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800ad66:	f89d 1004 	ldrb.w	r1, [sp, #4]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800ad6a:	4809      	ldr	r0, [pc, #36]	@ (800ad90 <SUBGRF_Init+0x120>)
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
 800ad6c:	f021 0106 	bic.w	r1, r1, #6
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800ad70:	f041 0102 	orr.w	r1, r1, #2
 800ad74:	f88d 1004 	strb.w	r1, [sp, #4]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800ad78:	462b      	mov	r3, r5
 800ad7a:	4622      	mov	r2, r4
 800ad7c:	f640 1123 	movw	r1, #2339	@ 0x923
 800ad80:	f7fc febe 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
  }
}
 800ad84:	e782      	b.n	800ac8c <SUBGRF_Init+0x1c>
 800ad86:	bf00      	nop
 800ad88:	200005c8 	.word	0x200005c8
 800ad8c:	200005cc 	.word	0x200005cc
 800ad90:	200002cc 	.word	0x200002cc
 800ad94:	200005d6 	.word	0x200005d6
 800ad98:	40000001 	.word	0x40000001

0800ad9c <SUBGRF_GetOperatingMode>:
    return OperatingMode;
 800ad9c:	4b01      	ldr	r3, [pc, #4]	@ (800ada4 <SUBGRF_GetOperatingMode+0x8>)
}
 800ad9e:	7818      	ldrb	r0, [r3, #0]
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	200005d6 	.word	0x200005d6

0800ada8 <SUBGRF_GetPayload>:
{
 800ada8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adaa:	4607      	mov	r7, r0
 800adac:	b083      	sub	sp, #12
 800adae:	460e      	mov	r6, r1
 800adb0:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adb2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800adb6:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800adb8:	2302      	movs	r3, #2
 800adba:	aa01      	add	r2, sp, #4
 800adbc:	2113      	movs	r1, #19
 800adbe:	4817      	ldr	r0, [pc, #92]	@ (800ae1c <SUBGRF_GetPayload+0x74>)
 800adc0:	f7fc fdd8 	bl	8007974 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adc4:	f385 8810 	msr	PRIMASK, r5
    return PacketType;
 800adc8:	4b15      	ldr	r3, [pc, #84]	@ (800ae20 <SUBGRF_GetPayload+0x78>)
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d015      	beq.n	800adfc <SUBGRF_GetPayload+0x54>
        *payloadLength = status[0];
 800add0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    *rxStartBufferPointer = status[1];
 800add4:	f89d 1005 	ldrb.w	r1, [sp, #5]
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800add8:	7033      	strb	r3, [r6, #0]
    if( *size > maxSize )
 800adda:	429c      	cmp	r4, r3
 800addc:	d202      	bcs.n	800ade4 <SUBGRF_GetPayload+0x3c>
        return 1;
 800adde:	2001      	movs	r0, #1
}
 800ade0:	b003      	add	sp, #12
 800ade2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ade4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ade8:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800adea:	480c      	ldr	r0, [pc, #48]	@ (800ae1c <SUBGRF_GetPayload+0x74>)
 800adec:	463a      	mov	r2, r7
 800adee:	f7fc fc61 	bl	80076b4 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adf2:	f384 8810 	msr	PRIMASK, r4
    return 0;
 800adf6:	2000      	movs	r0, #0
}
 800adf8:	b003      	add	sp, #12
 800adfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800adfc:	4b09      	ldr	r3, [pc, #36]	@ (800ae24 <SUBGRF_GetPayload+0x7c>)
 800adfe:	781a      	ldrb	r2, [r3, #0]
 800ae00:	2a01      	cmp	r2, #1
 800ae02:	b2d3      	uxtb	r3, r2
 800ae04:	d1e4      	bne.n	800add0 <SUBGRF_GetPayload+0x28>
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800ae06:	4805      	ldr	r0, [pc, #20]	@ (800ae1c <SUBGRF_GetPayload+0x74>)
 800ae08:	f10d 0203 	add.w	r2, sp, #3
 800ae0c:	f240 7102 	movw	r1, #1794	@ 0x702
 800ae10:	f7fc fede 	bl	8007bd0 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800ae14:	f89d 3003 	ldrb.w	r3, [sp, #3]
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800ae18:	e7dc      	b.n	800add4 <SUBGRF_GetPayload+0x2c>
 800ae1a:	bf00      	nop
 800ae1c:	200002cc 	.word	0x200002cc
 800ae20:	200005d5 	.word	0x200005d5
 800ae24:	200005d4 	.word	0x200005d4

0800ae28 <SUBGRF_SendPayload>:
{
 800ae28:	b570      	push	{r4, r5, r6, lr}
 800ae2a:	460b      	mov	r3, r1
 800ae2c:	b082      	sub	sp, #8
 800ae2e:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae30:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ae34:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800ae36:	4d10      	ldr	r5, [pc, #64]	@ (800ae78 <SUBGRF_SendPayload+0x50>)
 800ae38:	4602      	mov	r2, r0
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	4628      	mov	r0, r5
 800ae3e:	f7fc fbd7 	bl	80075f0 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae42:	f386 8810 	msr	PRIMASK, r6
    OperatingMode = MODE_TX;
 800ae46:	4b0d      	ldr	r3, [pc, #52]	@ (800ae7c <SUBGRF_SendPayload+0x54>)
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800ae48:	f88d 4006 	strb.w	r4, [sp, #6]
    OperatingMode = MODE_TX;
 800ae4c:	2104      	movs	r1, #4
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ae4e:	0c22      	lsrs	r2, r4, #16
    OperatingMode = MODE_TX;
 800ae50:	7019      	strb	r1, [r3, #0]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ae52:	0a23      	lsrs	r3, r4, #8
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ae54:	f88d 2004 	strb.w	r2, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ae58:	f88d 3005 	strb.w	r3, [sp, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae5c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ae60:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800ae62:	2303      	movs	r3, #3
 800ae64:	eb0d 0201 	add.w	r2, sp, r1
 800ae68:	4628      	mov	r0, r5
 800ae6a:	2183      	movs	r1, #131	@ 0x83
 800ae6c:	f7fc fde0 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae70:	f384 8810 	msr	PRIMASK, r4
}
 800ae74:	b002      	add	sp, #8
 800ae76:	bd70      	pop	{r4, r5, r6, pc}
 800ae78:	200002cc 	.word	0x200002cc
 800ae7c:	200005d6 	.word	0x200005d6

0800ae80 <SUBGRF_SetSyncWord>:
{
 800ae80:	b510      	push	{r4, lr}
 800ae82:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae84:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ae88:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800ae8a:	2308      	movs	r3, #8
 800ae8c:	f44f 61d8 	mov.w	r1, #1728	@ 0x6c0
 800ae90:	4803      	ldr	r0, [pc, #12]	@ (800aea0 <SUBGRF_SetSyncWord+0x20>)
 800ae92:	f7fc fe35 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae96:	f384 8810 	msr	PRIMASK, r4
}
 800ae9a:	2000      	movs	r0, #0
 800ae9c:	bd10      	pop	{r4, pc}
 800ae9e:	bf00      	nop
 800aea0:	200002cc 	.word	0x200002cc

0800aea4 <SUBGRF_SetCrcPolynomial>:
{
 800aea4:	b510      	push	{r4, lr}
    return PacketType;
 800aea6:	4b0b      	ldr	r3, [pc, #44]	@ (800aed4 <SUBGRF_SetCrcPolynomial+0x30>)
{
 800aea8:	b082      	sub	sp, #8
    switch( SUBGRF_GetPacketType( ) )
 800aeaa:	781b      	ldrb	r3, [r3, #0]
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800aeac:	ba40      	rev16	r0, r0
 800aeae:	f8ad 0004 	strh.w	r0, [sp, #4]
    switch( SUBGRF_GetPacketType( ) )
 800aeb2:	b10b      	cbz	r3, 800aeb8 <SUBGRF_SetCrcPolynomial+0x14>
}
 800aeb4:	b002      	add	sp, #8
 800aeb6:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aeb8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800aebc:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800aebe:	2302      	movs	r3, #2
 800aec0:	aa01      	add	r2, sp, #4
 800aec2:	f240 61be 	movw	r1, #1726	@ 0x6be
 800aec6:	4804      	ldr	r0, [pc, #16]	@ (800aed8 <SUBGRF_SetCrcPolynomial+0x34>)
 800aec8:	f7fc fe1a 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aecc:	f384 8810 	msr	PRIMASK, r4
}
 800aed0:	b002      	add	sp, #8
 800aed2:	bd10      	pop	{r4, pc}
 800aed4:	200005d5 	.word	0x200005d5
 800aed8:	200002cc 	.word	0x200002cc

0800aedc <SUBGRF_SetWhiteningSeed>:
    return PacketType;
 800aedc:	4b15      	ldr	r3, [pc, #84]	@ (800af34 <SUBGRF_SetWhiteningSeed+0x58>)
    switch( SUBGRF_GetPacketType( ) )
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	b103      	cbz	r3, 800aee4 <SUBGRF_SetWhiteningSeed+0x8>
 800aee2:	4770      	bx	lr
{
 800aee4:	b510      	push	{r4, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	4604      	mov	r4, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800aeea:	f10d 0207 	add.w	r2, sp, #7
 800aeee:	2301      	movs	r3, #1
 800aef0:	f44f 61d7 	mov.w	r1, #1720	@ 0x6b8
 800aef4:	4810      	ldr	r0, [pc, #64]	@ (800af38 <SUBGRF_SetWhiteningSeed+0x5c>)
 800aef6:	f7fc fe6b 	bl	8007bd0 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800aefa:	f89d 1007 	ldrb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800aefe:	480e      	ldr	r0, [pc, #56]	@ (800af38 <SUBGRF_SetWhiteningSeed+0x5c>)
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800af00:	f3c4 2300 	ubfx	r3, r4, #8, #1
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800af04:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800af08:	4319      	orrs	r1, r3
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800af0a:	f10d 0207 	add.w	r2, sp, #7
 800af0e:	f88d 1007 	strb.w	r1, [sp, #7]
 800af12:	2301      	movs	r3, #1
 800af14:	f44f 61d7 	mov.w	r1, #1720	@ 0x6b8
 800af18:	f7fc fdf2 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
 800af1c:	2301      	movs	r3, #1
 800af1e:	f10d 0207 	add.w	r2, sp, #7
 800af22:	f240 61b9 	movw	r1, #1721	@ 0x6b9
 800af26:	4804      	ldr	r0, [pc, #16]	@ (800af38 <SUBGRF_SetWhiteningSeed+0x5c>)
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800af28:	f88d 4007 	strb.w	r4, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800af2c:	f7fc fde8 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
}
 800af30:	b002      	add	sp, #8
 800af32:	bd10      	pop	{r4, pc}
 800af34:	200005d5 	.word	0x200005d5
 800af38:	200002cc 	.word	0x200002cc

0800af3c <SUBGRF_GetRandom>:
{
 800af3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af40:	b082      	sub	sp, #8
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800af42:	466a      	mov	r2, sp
    uint32_t number = 0;
 800af44:	2700      	movs	r7, #0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800af46:	2301      	movs	r3, #1
 800af48:	f640 01e2 	movw	r1, #2274	@ 0x8e2
 800af4c:	4837      	ldr	r0, [pc, #220]	@ (800b02c <SUBGRF_GetRandom+0xf0>)
    uint32_t number = 0;
 800af4e:	9701      	str	r7, [sp, #4]
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800af50:	f7fc fe3e 	bl	8007bd0 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800af54:	f89d 6000 	ldrb.w	r6, [sp]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800af58:	4834      	ldr	r0, [pc, #208]	@ (800b02c <SUBGRF_GetRandom+0xf0>)
    OperatingMode = MODE_RX;
 800af5a:	4d35      	ldr	r5, [pc, #212]	@ (800b030 <SUBGRF_GetRandom+0xf4>)
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800af5c:	f026 0301 	bic.w	r3, r6, #1
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800af60:	466a      	mov	r2, sp
 800af62:	f88d 3000 	strb.w	r3, [sp]
 800af66:	f640 01e2 	movw	r1, #2274	@ 0x8e2
 800af6a:	2301      	movs	r3, #1
 800af6c:	f7fc fdc8 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800af70:	466a      	mov	r2, sp
 800af72:	2301      	movs	r3, #1
 800af74:	f640 01e5 	movw	r1, #2277	@ 0x8e5
 800af78:	482c      	ldr	r0, [pc, #176]	@ (800b02c <SUBGRF_GetRandom+0xf0>)
 800af7a:	f7fc fe29 	bl	8007bd0 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800af7e:	f89d 4000 	ldrb.w	r4, [sp]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800af82:	482a      	ldr	r0, [pc, #168]	@ (800b02c <SUBGRF_GetRandom+0xf0>)
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800af84:	f004 037f 	and.w	r3, r4, #127	@ 0x7f
 800af88:	f88d 3000 	strb.w	r3, [sp]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800af8c:	466a      	mov	r2, sp
 800af8e:	2301      	movs	r3, #1
 800af90:	f640 01e5 	movw	r1, #2277	@ 0x8e5
 800af94:	f7fc fdb4 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800af98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800af9c:	f8ad 3000 	strh.w	r3, [sp]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800afa0:	f88d 3002 	strb.w	r3, [sp, #2]
    OperatingMode = MODE_RX;
 800afa4:	2305      	movs	r3, #5
 800afa6:	702b      	strb	r3, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afa8:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800afac:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800afae:	2303      	movs	r3, #3
 800afb0:	466a      	mov	r2, sp
 800afb2:	2182      	movs	r1, #130	@ 0x82
 800afb4:	481d      	ldr	r0, [pc, #116]	@ (800b02c <SUBGRF_GetRandom+0xf0>)
 800afb6:	f7fc fd3b 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afba:	f388 8810 	msr	PRIMASK, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afbe:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800afc2:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800afc4:	2304      	movs	r3, #4
 800afc6:	eb0d 0203 	add.w	r2, sp, r3
 800afca:	f640 0119 	movw	r1, #2073	@ 0x819
 800afce:	4817      	ldr	r0, [pc, #92]	@ (800b02c <SUBGRF_GetRandom+0xf0>)
 800afd0:	f7fc fdfe 	bl	8007bd0 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afd4:	f388 8810 	msr	PRIMASK, r8
    SUBGRF_SetStandby( STDBY_RC );
 800afd8:	f88d 7000 	strb.w	r7, [sp]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afdc:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800afe0:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800afe2:	2301      	movs	r3, #1
 800afe4:	466a      	mov	r2, sp
 800afe6:	2180      	movs	r1, #128	@ 0x80
 800afe8:	4810      	ldr	r0, [pc, #64]	@ (800b02c <SUBGRF_GetRandom+0xf0>)
 800afea:	f7fc fd21 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afee:	f387 8810 	msr	PRIMASK, r7
    if( standbyConfig == STDBY_RC )
 800aff2:	f89d 3000 	ldrb.w	r3, [sp]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800aff6:	480d      	ldr	r0, [pc, #52]	@ (800b02c <SUBGRF_GetRandom+0xf0>)
 800aff8:	f88d 6000 	strb.w	r6, [sp]
        OperatingMode = MODE_STDBY_RC;
 800affc:	2b00      	cmp	r3, #0
 800affe:	bf14      	ite	ne
 800b000:	2202      	movne	r2, #2
 800b002:	2201      	moveq	r2, #1
 800b004:	702a      	strb	r2, [r5, #0]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800b006:	2301      	movs	r3, #1
 800b008:	466a      	mov	r2, sp
 800b00a:	f640 01e2 	movw	r1, #2274	@ 0x8e2
 800b00e:	f7fc fd77 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
 800b012:	2301      	movs	r3, #1
 800b014:	466a      	mov	r2, sp
 800b016:	f640 01e5 	movw	r1, #2277	@ 0x8e5
 800b01a:	4804      	ldr	r0, [pc, #16]	@ (800b02c <SUBGRF_GetRandom+0xf0>)
 800b01c:	f88d 4000 	strb.w	r4, [sp]
 800b020:	f7fc fd6e 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
}
 800b024:	9801      	ldr	r0, [sp, #4]
 800b026:	b002      	add	sp, #8
 800b028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b02c:	200002cc 	.word	0x200002cc
 800b030:	200005d6 	.word	0x200005d6

0800b034 <SUBGRF_SetSleep>:
{
 800b034:	b570      	push	{r4, r5, r6, lr}
 800b036:	4604      	mov	r4, r0
 800b038:	b082      	sub	sp, #8
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800b03a:	2000      	movs	r0, #0
 800b03c:	f000 ff3a 	bl	800beb4 <RBI_ConfigRFSwitch>
  if ( 1U == RBI_IsDCDC() )
 800b040:	f000 ff54 	bl	800beec <RBI_IsDCDC>
 800b044:	2801      	cmp	r0, #1
 800b046:	d015      	beq.n	800b074 <SUBGRF_SetSleep+0x40>
 800b048:	f10d 0607 	add.w	r6, sp, #7
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800b04c:	f004 0407 	and.w	r4, r4, #7
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800b050:	f88d 4007 	strb.w	r4, [sp, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b054:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b058:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b05a:	2301      	movs	r3, #1
 800b05c:	4632      	mov	r2, r6
 800b05e:	2184      	movs	r1, #132	@ 0x84
 800b060:	4811      	ldr	r0, [pc, #68]	@ (800b0a8 <SUBGRF_SetSleep+0x74>)
 800b062:	f7fc fce5 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b066:	f384 8810 	msr	PRIMASK, r4
    OperatingMode = MODE_SLEEP;
 800b06a:	4b10      	ldr	r3, [pc, #64]	@ (800b0ac <SUBGRF_SetSleep+0x78>)
 800b06c:	2200      	movs	r2, #0
 800b06e:	701a      	strb	r2, [r3, #0]
}
 800b070:	b002      	add	sp, #8
 800b072:	bd70      	pop	{r4, r5, r6, pc}
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800b074:	f10d 0607 	add.w	r6, sp, #7
 800b078:	4605      	mov	r5, r0
 800b07a:	4603      	mov	r3, r0
 800b07c:	4632      	mov	r2, r6
 800b07e:	f640 1123 	movw	r1, #2339	@ 0x923
 800b082:	4809      	ldr	r0, [pc, #36]	@ (800b0a8 <SUBGRF_SetSleep+0x74>)
 800b084:	f7fc fda4 	bl	8007bd0 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800b088:	f89d 1007 	ldrb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800b08c:	4806      	ldr	r0, [pc, #24]	@ (800b0a8 <SUBGRF_SetSleep+0x74>)
    modReg&= (~SMPS_DRV_MASK);
 800b08e:	f021 0106 	bic.w	r1, r1, #6
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800b092:	f041 0102 	orr.w	r1, r1, #2
 800b096:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800b09a:	462b      	mov	r3, r5
 800b09c:	4632      	mov	r2, r6
 800b09e:	f640 1123 	movw	r1, #2339	@ 0x923
 800b0a2:	f7fc fd2d 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
}
 800b0a6:	e7d1      	b.n	800b04c <SUBGRF_SetSleep+0x18>
 800b0a8:	200002cc 	.word	0x200002cc
 800b0ac:	200005d6 	.word	0x200005d6

0800b0b0 <SUBGRF_SetStandby>:
{
 800b0b0:	b510      	push	{r4, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	f88d 0007 	strb.w	r0, [sp, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0b8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b0bc:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b0be:	2301      	movs	r3, #1
 800b0c0:	f10d 0207 	add.w	r2, sp, #7
 800b0c4:	2180      	movs	r1, #128	@ 0x80
 800b0c6:	4807      	ldr	r0, [pc, #28]	@ (800b0e4 <SUBGRF_SetStandby+0x34>)
 800b0c8:	f7fc fcb2 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0cc:	f384 8810 	msr	PRIMASK, r4
    if( standbyConfig == STDBY_RC )
 800b0d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b0d4:	4b04      	ldr	r3, [pc, #16]	@ (800b0e8 <SUBGRF_SetStandby+0x38>)
        OperatingMode = MODE_STDBY_RC;
 800b0d6:	2a00      	cmp	r2, #0
 800b0d8:	bf14      	ite	ne
 800b0da:	2202      	movne	r2, #2
 800b0dc:	2201      	moveq	r2, #1
 800b0de:	701a      	strb	r2, [r3, #0]
}
 800b0e0:	b002      	add	sp, #8
 800b0e2:	bd10      	pop	{r4, pc}
 800b0e4:	200002cc 	.word	0x200002cc
 800b0e8:	200005d6 	.word	0x200005d6

0800b0ec <SUBGRF_SetTx>:
{
 800b0ec:	b510      	push	{r4, lr}
    OperatingMode = MODE_TX;
 800b0ee:	490c      	ldr	r1, [pc, #48]	@ (800b120 <SUBGRF_SetTx+0x34>)
{
 800b0f0:	b082      	sub	sp, #8
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b0f2:	0c02      	lsrs	r2, r0, #16
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b0f4:	0a03      	lsrs	r3, r0, #8
    OperatingMode = MODE_TX;
 800b0f6:	2404      	movs	r4, #4
 800b0f8:	700c      	strb	r4, [r1, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b0fa:	f88d 2004 	strb.w	r2, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b0fe:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b102:	f88d 0006 	strb.w	r0, [sp, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b106:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b10a:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b10c:	2303      	movs	r3, #3
 800b10e:	aa01      	add	r2, sp, #4
 800b110:	2183      	movs	r1, #131	@ 0x83
 800b112:	4804      	ldr	r0, [pc, #16]	@ (800b124 <SUBGRF_SetTx+0x38>)
 800b114:	f7fc fc8c 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b118:	f384 8810 	msr	PRIMASK, r4
}
 800b11c:	b002      	add	sp, #8
 800b11e:	bd10      	pop	{r4, pc}
 800b120:	200005d6 	.word	0x200005d6
 800b124:	200002cc 	.word	0x200002cc

0800b128 <SUBGRF_SetRx>:
{
 800b128:	b510      	push	{r4, lr}
    OperatingMode = MODE_RX;
 800b12a:	490c      	ldr	r1, [pc, #48]	@ (800b15c <SUBGRF_SetRx+0x34>)
{
 800b12c:	b082      	sub	sp, #8
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b12e:	0c02      	lsrs	r2, r0, #16
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b130:	0a03      	lsrs	r3, r0, #8
    OperatingMode = MODE_RX;
 800b132:	2405      	movs	r4, #5
 800b134:	700c      	strb	r4, [r1, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b136:	f88d 2004 	strb.w	r2, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b13a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b13e:	f88d 0006 	strb.w	r0, [sp, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b142:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b146:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b148:	2303      	movs	r3, #3
 800b14a:	aa01      	add	r2, sp, #4
 800b14c:	2182      	movs	r1, #130	@ 0x82
 800b14e:	4804      	ldr	r0, [pc, #16]	@ (800b160 <SUBGRF_SetRx+0x38>)
 800b150:	f7fc fc6e 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b154:	f384 8810 	msr	PRIMASK, r4
}
 800b158:	b002      	add	sp, #8
 800b15a:	bd10      	pop	{r4, pc}
 800b15c:	200005d6 	.word	0x200005d6
 800b160:	200002cc 	.word	0x200002cc

0800b164 <SUBGRF_SetRxBoosted>:
{
 800b164:	b530      	push	{r4, r5, lr}
    OperatingMode = MODE_RX;
 800b166:	4b12      	ldr	r3, [pc, #72]	@ (800b1b0 <SUBGRF_SetRxBoosted+0x4c>)
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800b168:	4d12      	ldr	r5, [pc, #72]	@ (800b1b4 <SUBGRF_SetRxBoosted+0x50>)
{
 800b16a:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 800b16c:	2205      	movs	r2, #5
 800b16e:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800b170:	2297      	movs	r2, #151	@ 0x97
{
 800b172:	4604      	mov	r4, r0
 800b174:	f88d 2004 	strb.w	r2, [sp, #4]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800b178:	2301      	movs	r3, #1
 800b17a:	aa01      	add	r2, sp, #4
 800b17c:	f640 01ac 	movw	r1, #2220	@ 0x8ac
 800b180:	4628      	mov	r0, r5
 800b182:	f7fc fcbd 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b186:	0c22      	lsrs	r2, r4, #16
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b188:	0a23      	lsrs	r3, r4, #8
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b18a:	f88d 2004 	strb.w	r2, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b18e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b192:	f88d 4006 	strb.w	r4, [sp, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b196:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b19a:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b19c:	2303      	movs	r3, #3
 800b19e:	aa01      	add	r2, sp, #4
 800b1a0:	2182      	movs	r1, #130	@ 0x82
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	f7fc fc44 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1a8:	f384 8810 	msr	PRIMASK, r4
}
 800b1ac:	b003      	add	sp, #12
 800b1ae:	bd30      	pop	{r4, r5, pc}
 800b1b0:	200005d6 	.word	0x200005d6
 800b1b4:	200002cc 	.word	0x200002cc

0800b1b8 <SUBGRF_SetRxDutyCycle>:
{
 800b1b8:	b510      	push	{r4, lr}
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800b1ba:	0c02      	lsrs	r2, r0, #16
 800b1bc:	2300      	movs	r3, #0
 800b1be:	f362 0307 	bfi	r3, r2, #0, #8
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800b1c2:	0a02      	lsrs	r2, r0, #8
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800b1c4:	f362 230f 	bfi	r3, r2, #8, #8
{
 800b1c8:	b082      	sub	sp, #8
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800b1ca:	0c0a      	lsrs	r2, r1, #16
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800b1cc:	f360 4317 	bfi	r3, r0, #16, #8
 800b1d0:	f362 631f 	bfi	r3, r2, #24, #8
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800b1d4:	ba49      	rev16	r1, r1
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800b1d6:	9300      	str	r3, [sp, #0]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800b1d8:	f8ad 1004 	strh.w	r1, [sp, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1dc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b1e0:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b1e2:	2306      	movs	r3, #6
 800b1e4:	466a      	mov	r2, sp
 800b1e6:	2194      	movs	r1, #148	@ 0x94
 800b1e8:	4804      	ldr	r0, [pc, #16]	@ (800b1fc <SUBGRF_SetRxDutyCycle+0x44>)
 800b1ea:	f7fc fc21 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1ee:	f384 8810 	msr	PRIMASK, r4
    OperatingMode = MODE_RX_DC;
 800b1f2:	4b03      	ldr	r3, [pc, #12]	@ (800b200 <SUBGRF_SetRxDutyCycle+0x48>)
 800b1f4:	2206      	movs	r2, #6
 800b1f6:	701a      	strb	r2, [r3, #0]
}
 800b1f8:	b002      	add	sp, #8
 800b1fa:	bd10      	pop	{r4, pc}
 800b1fc:	200002cc 	.word	0x200002cc
 800b200:	200005d6 	.word	0x200005d6

0800b204 <SUBGRF_SetCad>:
{
 800b204:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b206:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b20a:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b20c:	2300      	movs	r3, #0
 800b20e:	461a      	mov	r2, r3
 800b210:	21c5      	movs	r1, #197	@ 0xc5
 800b212:	4804      	ldr	r0, [pc, #16]	@ (800b224 <SUBGRF_SetCad+0x20>)
 800b214:	f7fc fc0c 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b218:	f384 8810 	msr	PRIMASK, r4
    OperatingMode = MODE_CAD;
 800b21c:	4b02      	ldr	r3, [pc, #8]	@ (800b228 <SUBGRF_SetCad+0x24>)
 800b21e:	2207      	movs	r2, #7
 800b220:	701a      	strb	r2, [r3, #0]
}
 800b222:	bd10      	pop	{r4, pc}
 800b224:	200002cc 	.word	0x200002cc
 800b228:	200005d6 	.word	0x200005d6

0800b22c <SUBGRF_SetTxContinuousWave>:
{
 800b22c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b22e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b232:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b234:	2300      	movs	r3, #0
 800b236:	461a      	mov	r2, r3
 800b238:	21d1      	movs	r1, #209	@ 0xd1
 800b23a:	4803      	ldr	r0, [pc, #12]	@ (800b248 <SUBGRF_SetTxContinuousWave+0x1c>)
 800b23c:	f7fc fbf8 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b240:	f384 8810 	msr	PRIMASK, r4
}
 800b244:	bd10      	pop	{r4, pc}
 800b246:	bf00      	nop
 800b248:	200002cc 	.word	0x200002cc

0800b24c <SUBGRF_SetTxInfinitePreamble>:
{
 800b24c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b24e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b252:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b254:	2300      	movs	r3, #0
 800b256:	461a      	mov	r2, r3
 800b258:	21d2      	movs	r1, #210	@ 0xd2
 800b25a:	4803      	ldr	r0, [pc, #12]	@ (800b268 <SUBGRF_SetTxInfinitePreamble+0x1c>)
 800b25c:	f7fc fbe8 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b260:	f384 8810 	msr	PRIMASK, r4
}
 800b264:	bd10      	pop	{r4, pc}
 800b266:	bf00      	nop
 800b268:	200002cc 	.word	0x200002cc

0800b26c <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 800b26c:	b510      	push	{r4, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	f88d 0007 	strb.w	r0, [sp, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b274:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b278:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b27a:	2301      	movs	r3, #1
 800b27c:	f10d 0207 	add.w	r2, sp, #7
 800b280:	219f      	movs	r1, #159	@ 0x9f
 800b282:	4803      	ldr	r0, [pc, #12]	@ (800b290 <SUBGRF_SetStopRxTimerOnPreambleDetect+0x24>)
 800b284:	f7fc fbd4 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b288:	f384 8810 	msr	PRIMASK, r4
}
 800b28c:	b002      	add	sp, #8
 800b28e:	bd10      	pop	{r4, pc}
 800b290:	200002cc 	.word	0x200002cc

0800b294 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 800b294:	b510      	push	{r4, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	f88d 0007 	strb.w	r0, [sp, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b29c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b2a0:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	f10d 0207 	add.w	r2, sp, #7
 800b2a8:	21a0      	movs	r1, #160	@ 0xa0
 800b2aa:	480d      	ldr	r0, [pc, #52]	@ (800b2e0 <SUBGRF_SetLoRaSymbNumTimeout+0x4c>)
 800b2ac:	f7fc fbc0 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2b0:	f384 8810 	msr	PRIMASK, r4
    if( symbNum >= 64 )
 800b2b4:	f89d c007 	ldrb.w	ip, [sp, #7]
 800b2b8:	f1bc 0f3f 	cmp.w	ip, #63	@ 0x3f
 800b2bc:	d90d      	bls.n	800b2da <SUBGRF_SetLoRaSymbNumTimeout+0x46>
        reg = exp + ( mant << 3 );
 800b2be:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 800b2c2:	f10c 0c01 	add.w	ip, ip, #1
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800b2c6:	4806      	ldr	r0, [pc, #24]	@ (800b2e0 <SUBGRF_SetLoRaSymbNumTimeout+0x4c>)
 800b2c8:	f88d c00f 	strb.w	ip, [sp, #15]
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	f10d 020f 	add.w	r2, sp, #15
 800b2d2:	f240 7106 	movw	r1, #1798	@ 0x706
 800b2d6:	f7fc fc13 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
}
 800b2da:	b004      	add	sp, #16
 800b2dc:	bd10      	pop	{r4, pc}
 800b2de:	bf00      	nop
 800b2e0:	200002cc 	.word	0x200002cc

0800b2e4 <SUBGRF_SetRegulatorMode>:
{
 800b2e4:	b510      	push	{r4, lr}
 800b2e6:	b082      	sub	sp, #8
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800b2e8:	f000 fe00 	bl	800beec <RBI_IsDCDC>
 800b2ec:	f1a0 0001 	sub.w	r0, r0, #1
 800b2f0:	fab0 f080 	clz	r0, r0
 800b2f4:	0940      	lsrs	r0, r0, #5
 800b2f6:	f88d 0007 	strb.w	r0, [sp, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2fa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b2fe:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b300:	2301      	movs	r3, #1
 800b302:	f10d 0207 	add.w	r2, sp, #7
 800b306:	2196      	movs	r1, #150	@ 0x96
 800b308:	4803      	ldr	r0, [pc, #12]	@ (800b318 <SUBGRF_SetRegulatorMode+0x34>)
 800b30a:	f7fc fb91 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b30e:	f384 8810 	msr	PRIMASK, r4
}
 800b312:	b002      	add	sp, #8
 800b314:	bd10      	pop	{r4, pc}
 800b316:	bf00      	nop
 800b318:	200002cc 	.word	0x200002cc

0800b31c <SUBGRF_SetDioIrqParams>:
{
 800b31c:	b510      	push	{r4, lr}
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800b31e:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 800b322:	2400      	movs	r4, #0
 800b324:	f36c 0407 	bfi	r4, ip, #0, #8
 800b328:	f360 240f 	bfi	r4, r0, #8, #8
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800b32c:	0a08      	lsrs	r0, r1, #8
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800b32e:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800b332:	f360 4417 	bfi	r4, r0, #16, #8
 800b336:	2000      	movs	r0, #0
 800b338:	f36c 0007 	bfi	r0, ip, #0, #8
 800b33c:	f362 200f 	bfi	r0, r2, #8, #8
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800b340:	0a1a      	lsrs	r2, r3, #8
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800b342:	f362 4017 	bfi	r0, r2, #16, #8
{
 800b346:	b082      	sub	sp, #8
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800b348:	f361 641f 	bfi	r4, r1, #24, #8
 800b34c:	f363 601f 	bfi	r0, r3, #24, #8
 800b350:	e9cd 4000 	strd	r4, r0, [sp]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b354:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b358:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b35a:	2308      	movs	r3, #8
 800b35c:	466a      	mov	r2, sp
 800b35e:	4619      	mov	r1, r3
 800b360:	4803      	ldr	r0, [pc, #12]	@ (800b370 <SUBGRF_SetDioIrqParams+0x54>)
 800b362:	f7fc fb65 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b366:	f384 8810 	msr	PRIMASK, r4
}
 800b36a:	b002      	add	sp, #8
 800b36c:	bd10      	pop	{r4, pc}
 800b36e:	bf00      	nop
 800b370:	200002cc 	.word	0x200002cc

0800b374 <SUBGRF_SetRfFrequency>:
{
 800b374:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( ImageCalibrated == false )
 800b376:	4e26      	ldr	r6, [pc, #152]	@ (800b410 <SUBGRF_SetRfFrequency+0x9c>)
 800b378:	7833      	ldrb	r3, [r6, #0]
{
 800b37a:	b083      	sub	sp, #12
 800b37c:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 800b37e:	b1ab      	cbz	r3, 800b3ac <SUBGRF_SetRfFrequency+0x38>
 800b380:	ad01      	add	r5, sp, #4
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800b382:	4a24      	ldr	r2, [pc, #144]	@ (800b414 <SUBGRF_SetRfFrequency+0xa0>)
 800b384:	2300      	movs	r3, #0
 800b386:	0660      	lsls	r0, r4, #25
 800b388:	09e1      	lsrs	r1, r4, #7
 800b38a:	f7f5 f935 	bl	80005f8 <__aeabi_uldivmod>
 800b38e:	ba00      	rev	r0, r0
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800b390:	9001      	str	r0, [sp, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b392:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b396:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b398:	2304      	movs	r3, #4
 800b39a:	462a      	mov	r2, r5
 800b39c:	2186      	movs	r1, #134	@ 0x86
 800b39e:	481e      	ldr	r0, [pc, #120]	@ (800b418 <SUBGRF_SetRfFrequency+0xa4>)
 800b3a0:	f7fc fb46 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3a4:	f384 8810 	msr	PRIMASK, r4
}
 800b3a8:	b003      	add	sp, #12
 800b3aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( freq > 900000000 )
 800b3ac:	4b1b      	ldr	r3, [pc, #108]	@ (800b41c <SUBGRF_SetRfFrequency+0xa8>)
 800b3ae:	4298      	cmp	r0, r3
 800b3b0:	d914      	bls.n	800b3dc <SUBGRF_SetRfFrequency+0x68>
 800b3b2:	22e1      	movs	r2, #225	@ 0xe1
 800b3b4:	23e9      	movs	r3, #233	@ 0xe9
        calFreq[0] = 0xE1;
 800b3b6:	f88d 2004 	strb.w	r2, [sp, #4]
        calFreq[1] = 0xE9;
 800b3ba:	f88d 3005 	strb.w	r3, [sp, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3be:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b3c2:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b3c4:	ad01      	add	r5, sp, #4
 800b3c6:	2302      	movs	r3, #2
 800b3c8:	462a      	mov	r2, r5
 800b3ca:	2198      	movs	r1, #152	@ 0x98
 800b3cc:	4812      	ldr	r0, [pc, #72]	@ (800b418 <SUBGRF_SetRfFrequency+0xa4>)
 800b3ce:	f7fc fb2f 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3d2:	f387 8810 	msr	PRIMASK, r7
        ImageCalibrated = true;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	7033      	strb	r3, [r6, #0]
 800b3da:	e7d2      	b.n	800b382 <SUBGRF_SetRfFrequency+0xe>
    else if( freq > 850000000 )
 800b3dc:	4b10      	ldr	r3, [pc, #64]	@ (800b420 <SUBGRF_SetRfFrequency+0xac>)
 800b3de:	4298      	cmp	r0, r3
 800b3e0:	d80d      	bhi.n	800b3fe <SUBGRF_SetRfFrequency+0x8a>
    else if( freq > 770000000 )
 800b3e2:	4b10      	ldr	r3, [pc, #64]	@ (800b424 <SUBGRF_SetRfFrequency+0xb0>)
 800b3e4:	4298      	cmp	r0, r3
 800b3e6:	d80d      	bhi.n	800b404 <SUBGRF_SetRfFrequency+0x90>
    else if( freq > 460000000 )
 800b3e8:	4b0f      	ldr	r3, [pc, #60]	@ (800b428 <SUBGRF_SetRfFrequency+0xb4>)
 800b3ea:	4298      	cmp	r0, r3
 800b3ec:	d80d      	bhi.n	800b40a <SUBGRF_SetRfFrequency+0x96>
    else if( freq > 425000000 )
 800b3ee:	4b0f      	ldr	r3, [pc, #60]	@ (800b42c <SUBGRF_SetRfFrequency+0xb8>)
 800b3f0:	4298      	cmp	r0, r3
 800b3f2:	bf8b      	itete	hi
 800b3f4:	226b      	movhi	r2, #107	@ 0x6b
 800b3f6:	2229      	movls	r2, #41	@ 0x29
 800b3f8:	236f      	movhi	r3, #111	@ 0x6f
 800b3fa:	232b      	movls	r3, #43	@ 0x2b
 800b3fc:	e7db      	b.n	800b3b6 <SUBGRF_SetRfFrequency+0x42>
 800b3fe:	22d7      	movs	r2, #215	@ 0xd7
 800b400:	23db      	movs	r3, #219	@ 0xdb
 800b402:	e7d8      	b.n	800b3b6 <SUBGRF_SetRfFrequency+0x42>
 800b404:	22c1      	movs	r2, #193	@ 0xc1
 800b406:	23c5      	movs	r3, #197	@ 0xc5
 800b408:	e7d5      	b.n	800b3b6 <SUBGRF_SetRfFrequency+0x42>
 800b40a:	2275      	movs	r2, #117	@ 0x75
 800b40c:	2381      	movs	r3, #129	@ 0x81
 800b40e:	e7d2      	b.n	800b3b6 <SUBGRF_SetRfFrequency+0x42>
 800b410:	200005cc 	.word	0x200005cc
 800b414:	01e84800 	.word	0x01e84800
 800b418:	200002cc 	.word	0x200002cc
 800b41c:	35a4e900 	.word	0x35a4e900
 800b420:	32a9f880 	.word	0x32a9f880
 800b424:	2de54480 	.word	0x2de54480
 800b428:	1b6b0b00 	.word	0x1b6b0b00
 800b42c:	1954fc40 	.word	0x1954fc40

0800b430 <SUBGRF_SetPacketType>:
{
 800b430:	b510      	push	{r4, lr}
    PacketType = packetType;
 800b432:	4b10      	ldr	r3, [pc, #64]	@ (800b474 <SUBGRF_SetPacketType+0x44>)
{
 800b434:	b084      	sub	sp, #16
    PacketType = packetType;
 800b436:	7018      	strb	r0, [r3, #0]
{
 800b438:	f88d 0007 	strb.w	r0, [sp, #7]
    if( packetType == PACKET_TYPE_GFSK )
 800b43c:	b168      	cbz	r0, 800b45a <SUBGRF_SetPacketType+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b43e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b442:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b444:	2301      	movs	r3, #1
 800b446:	f10d 0207 	add.w	r2, sp, #7
 800b44a:	218a      	movs	r1, #138	@ 0x8a
 800b44c:	480a      	ldr	r0, [pc, #40]	@ (800b478 <SUBGRF_SetPacketType+0x48>)
 800b44e:	f7fc faef 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b452:	f384 8810 	msr	PRIMASK, r4
}
 800b456:	b004      	add	sp, #16
 800b458:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800b45a:	4604      	mov	r4, r0
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800b45c:	2301      	movs	r3, #1
 800b45e:	f10d 020f 	add.w	r2, sp, #15
 800b462:	f240 61ac 	movw	r1, #1708	@ 0x6ac
 800b466:	4804      	ldr	r0, [pc, #16]	@ (800b478 <SUBGRF_SetPacketType+0x48>)
 800b468:	f88d 400f 	strb.w	r4, [sp, #15]
 800b46c:	f7fc fb48 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
 800b470:	e7e5      	b.n	800b43e <SUBGRF_SetPacketType+0xe>
 800b472:	bf00      	nop
 800b474:	200005d5 	.word	0x200005d5
 800b478:	200002cc 	.word	0x200002cc

0800b47c <SUBGRF_SetTxParams>:
{
 800b47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (paSelect == RFO_LP)
 800b480:	2801      	cmp	r0, #1
{
 800b482:	b082      	sub	sp, #8
 800b484:	460c      	mov	r4, r1
 800b486:	4617      	mov	r7, r2
    if (paSelect == RFO_LP)
 800b488:	d055      	beq.n	800b536 <SUBGRF_SetTxParams+0xba>
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800b48a:	ae01      	add	r6, sp, #4
 800b48c:	2301      	movs	r3, #1
 800b48e:	4632      	mov	r2, r6
 800b490:	f640 01d8 	movw	r1, #2264	@ 0x8d8
 800b494:	4866      	ldr	r0, [pc, #408]	@ (800b630 <SUBGRF_SetTxParams+0x1b4>)
 800b496:	f7fc fb9b 	bl	8007bd0 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800b49a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800b49e:	4864      	ldr	r0, [pc, #400]	@ (800b630 <SUBGRF_SetTxParams+0x1b4>)
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800b4a0:	f042 021e 	orr.w	r2, r2, #30
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	f88d 2004 	strb.w	r2, [sp, #4]
 800b4aa:	f640 01d8 	movw	r1, #2264	@ 0x8d8
 800b4ae:	4632      	mov	r2, r6
 800b4b0:	f7fc fb26 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800b4b4:	2001      	movs	r0, #1
 800b4b6:	f000 fd1b 	bl	800bef0 <RBI_GetRFOMaxPowerConfig>
        if (power > max_power)
 800b4ba:	42a0      	cmp	r0, r4
            power = max_power;
 800b4bc:	bfb8      	it	lt
 800b4be:	b244      	sxtblt	r4, r0
        if (max_power == 20)
 800b4c0:	2814      	cmp	r0, #20
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800b4c2:	4605      	mov	r5, r0
        if (max_power == 20)
 800b4c4:	f000 8095 	beq.w	800b5f2 <SUBGRF_SetTxParams+0x176>
        else if (max_power == 17)
 800b4c8:	2811      	cmp	r0, #17
 800b4ca:	d063      	beq.n	800b594 <SUBGRF_SetTxParams+0x118>
        else if (max_power == 14)
 800b4cc:	280e      	cmp	r0, #14
 800b4ce:	f000 8082 	beq.w	800b5d6 <SUBGRF_SetTxParams+0x15a>
    buf[0] = paDutyCycle;
 800b4d2:	4b58      	ldr	r3, [pc, #352]	@ (800b634 <SUBGRF_SetTxParams+0x1b8>)
 800b4d4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4d6:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b4da:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b4dc:	2304      	movs	r3, #4
 800b4de:	4632      	mov	r2, r6
 800b4e0:	2195      	movs	r1, #149	@ 0x95
 800b4e2:	4853      	ldr	r0, [pc, #332]	@ (800b630 <SUBGRF_SetTxParams+0x1b4>)
 800b4e4:	f7fc faa4 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4e8:	f388 8810 	msr	PRIMASK, r8
            power = 0x16 - (max_power - power);
 800b4ec:	f1c5 0516 	rsb	r5, r5, #22
 800b4f0:	4425      	add	r5, r4
 800b4f2:	b26c      	sxtb	r4, r5
        if (power < -9)
 800b4f4:	f06f 0208 	mvn.w	r2, #8
 800b4f8:	2338      	movs	r3, #56	@ 0x38
 800b4fa:	4294      	cmp	r4, r2
 800b4fc:	bfb8      	it	lt
 800b4fe:	4614      	movlt	r4, r2
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800b500:	f88d 3004 	strb.w	r3, [sp, #4]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800b504:	484a      	ldr	r0, [pc, #296]	@ (800b630 <SUBGRF_SetTxParams+0x1b4>)
 800b506:	2301      	movs	r3, #1
 800b508:	4632      	mov	r2, r6
 800b50a:	f640 01e7 	movw	r1, #2279	@ 0x8e7
 800b50e:	f7fc faf7 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
    buf[0] = power;
 800b512:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 800b516:	f88d 7005 	strb.w	r7, [sp, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b51a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b51e:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b520:	2302      	movs	r3, #2
 800b522:	4632      	mov	r2, r6
 800b524:	218e      	movs	r1, #142	@ 0x8e
 800b526:	4842      	ldr	r0, [pc, #264]	@ (800b630 <SUBGRF_SetTxParams+0x1b4>)
 800b528:	f7fc fa82 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b52c:	f384 8810 	msr	PRIMASK, r4
}
 800b530:	b002      	add	sp, #8
 800b532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800b536:	2000      	movs	r0, #0
 800b538:	f000 fcda 	bl	800bef0 <RBI_GetRFOMaxPowerConfig>
        if (power >  max_power)
 800b53c:	42a0      	cmp	r0, r4
          power = max_power;
 800b53e:	bfb8      	it	lt
 800b540:	b244      	sxtblt	r4, r0
        if (max_power == 14)
 800b542:	280e      	cmp	r0, #14
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800b544:	4605      	mov	r5, r0
        if (max_power == 14)
 800b546:	d064      	beq.n	800b612 <SUBGRF_SetTxParams+0x196>
        else if (max_power == 10)
 800b548:	280a      	cmp	r0, #10
            power = 0x0D - (max_power - power);
 800b54a:	b2e4      	uxtb	r4, r4
        else if (max_power == 10)
 800b54c:	d032      	beq.n	800b5b4 <SUBGRF_SetTxParams+0x138>
    buf[0] = paDutyCycle;
 800b54e:	4b3a      	ldr	r3, [pc, #232]	@ (800b638 <SUBGRF_SetTxParams+0x1bc>)
 800b550:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b552:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b556:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b558:	ae01      	add	r6, sp, #4
 800b55a:	2304      	movs	r3, #4
 800b55c:	4632      	mov	r2, r6
 800b55e:	2195      	movs	r1, #149	@ 0x95
 800b560:	4833      	ldr	r0, [pc, #204]	@ (800b630 <SUBGRF_SetTxParams+0x1b4>)
 800b562:	f7fc fa65 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b566:	f388 8810 	msr	PRIMASK, r8
            power = 0x0E - (max_power - power);
 800b56a:	f1c5 050e 	rsb	r5, r5, #14
 800b56e:	442c      	add	r4, r5
 800b570:	b264      	sxtb	r4, r4
        if (power < -17)
 800b572:	f06f 0210 	mvn.w	r2, #16
 800b576:	4294      	cmp	r4, r2
 800b578:	f04f 0318 	mov.w	r3, #24
 800b57c:	bfb8      	it	lt
 800b57e:	4614      	movlt	r4, r2
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800b580:	f88d 3004 	strb.w	r3, [sp, #4]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800b584:	4632      	mov	r2, r6
 800b586:	2301      	movs	r3, #1
 800b588:	f640 01e7 	movw	r1, #2279	@ 0x8e7
 800b58c:	4828      	ldr	r0, [pc, #160]	@ (800b630 <SUBGRF_SetTxParams+0x1b4>)
 800b58e:	f7fc fab7 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
 800b592:	e7be      	b.n	800b512 <SUBGRF_SetTxParams+0x96>
    buf[0] = paDutyCycle;
 800b594:	4b29      	ldr	r3, [pc, #164]	@ (800b63c <SUBGRF_SetTxParams+0x1c0>)
 800b596:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b598:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b59c:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b59e:	2304      	movs	r3, #4
 800b5a0:	4632      	mov	r2, r6
 800b5a2:	2195      	movs	r1, #149	@ 0x95
 800b5a4:	4822      	ldr	r0, [pc, #136]	@ (800b630 <SUBGRF_SetTxParams+0x1b4>)
 800b5a6:	f7fc fa43 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5aa:	f385 8810 	msr	PRIMASK, r5
            power = 0x16 - (max_power - power);
 800b5ae:	3405      	adds	r4, #5
 800b5b0:	b264      	sxtb	r4, r4
 800b5b2:	e79f      	b.n	800b4f4 <SUBGRF_SetTxParams+0x78>
    buf[0] = paDutyCycle;
 800b5b4:	4b22      	ldr	r3, [pc, #136]	@ (800b640 <SUBGRF_SetTxParams+0x1c4>)
 800b5b6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5b8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b5bc:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b5be:	ae01      	add	r6, sp, #4
 800b5c0:	2304      	movs	r3, #4
 800b5c2:	4632      	mov	r2, r6
 800b5c4:	2195      	movs	r1, #149	@ 0x95
 800b5c6:	481a      	ldr	r0, [pc, #104]	@ (800b630 <SUBGRF_SetTxParams+0x1b4>)
 800b5c8:	f7fc fa32 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5cc:	f385 8810 	msr	PRIMASK, r5
            power = 0x0D - (max_power - power);
 800b5d0:	3403      	adds	r4, #3
 800b5d2:	b264      	sxtb	r4, r4
 800b5d4:	e7cd      	b.n	800b572 <SUBGRF_SetTxParams+0xf6>
    buf[0] = paDutyCycle;
 800b5d6:	4b1b      	ldr	r3, [pc, #108]	@ (800b644 <SUBGRF_SetTxParams+0x1c8>)
 800b5d8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5da:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b5de:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b5e0:	2304      	movs	r3, #4
 800b5e2:	4632      	mov	r2, r6
 800b5e4:	2195      	movs	r1, #149	@ 0x95
 800b5e6:	4812      	ldr	r0, [pc, #72]	@ (800b630 <SUBGRF_SetTxParams+0x1b4>)
 800b5e8:	f7fc fa22 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5ec:	f385 8810 	msr	PRIMASK, r5
            power = 0x0E - (max_power - power);
 800b5f0:	e780      	b.n	800b4f4 <SUBGRF_SetTxParams+0x78>
    buf[0] = paDutyCycle;
 800b5f2:	4b15      	ldr	r3, [pc, #84]	@ (800b648 <SUBGRF_SetTxParams+0x1cc>)
 800b5f4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5f6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b5fa:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b5fc:	2304      	movs	r3, #4
 800b5fe:	4632      	mov	r2, r6
 800b600:	2195      	movs	r1, #149	@ 0x95
 800b602:	480b      	ldr	r0, [pc, #44]	@ (800b630 <SUBGRF_SetTxParams+0x1b4>)
 800b604:	f7fc fa14 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b608:	f385 8810 	msr	PRIMASK, r5
            power = 0x16 - (max_power - power);
 800b60c:	3402      	adds	r4, #2
 800b60e:	b264      	sxtb	r4, r4
 800b610:	e770      	b.n	800b4f4 <SUBGRF_SetTxParams+0x78>
    buf[0] = paDutyCycle;
 800b612:	4b0e      	ldr	r3, [pc, #56]	@ (800b64c <SUBGRF_SetTxParams+0x1d0>)
 800b614:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b616:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b61a:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b61c:	ae01      	add	r6, sp, #4
 800b61e:	2304      	movs	r3, #4
 800b620:	4632      	mov	r2, r6
 800b622:	2195      	movs	r1, #149	@ 0x95
 800b624:	4802      	ldr	r0, [pc, #8]	@ (800b630 <SUBGRF_SetTxParams+0x1b4>)
 800b626:	f7fc fa03 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b62a:	f385 8810 	msr	PRIMASK, r5
            power = 0x0E - (max_power - power);
 800b62e:	e7a0      	b.n	800b572 <SUBGRF_SetTxParams+0xf6>
 800b630:	200002cc 	.word	0x200002cc
 800b634:	01000704 	.word	0x01000704
 800b638:	01010007 	.word	0x01010007
 800b63c:	01000302 	.word	0x01000302
 800b640:	01010001 	.word	0x01010001
 800b644:	01000202 	.word	0x01000202
 800b648:	01000503 	.word	0x01000503
 800b64c:	01010004 	.word	0x01010004

0800b650 <SUBGRF_SetModulationParams>:
{
 800b650:	b570      	push	{r4, r5, r6, lr}
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b652:	4b4c      	ldr	r3, [pc, #304]	@ (800b784 <SUBGRF_SetModulationParams+0x134>)
    if( PacketType != modulationParams->PacketType )
 800b654:	4a4c      	ldr	r2, [pc, #304]	@ (800b788 <SUBGRF_SetModulationParams+0x138>)
{
 800b656:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b658:	e893 0003 	ldmia.w	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 800b65c:	7826      	ldrb	r6, [r4, #0]
 800b65e:	7813      	ldrb	r3, [r2, #0]
{
 800b660:	b084      	sub	sp, #16
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b662:	ad02      	add	r5, sp, #8
    if( PacketType != modulationParams->PacketType )
 800b664:	429e      	cmp	r6, r3
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b666:	e885 0003 	stmia.w	r5, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 800b66a:	d16e      	bne.n	800b74a <SUBGRF_SetModulationParams+0xfa>
    switch( modulationParams->PacketType )
 800b66c:	2b03      	cmp	r3, #3
 800b66e:	d822      	bhi.n	800b6b6 <SUBGRF_SetModulationParams+0x66>
 800b670:	e8df f003 	tbb	[pc, r3]
 800b674:	02233940 	.word	0x02233940
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800b678:	6861      	ldr	r1, [r4, #4]
 800b67a:	4a44      	ldr	r2, [pc, #272]	@ (800b78c <SUBGRF_SetModulationParams+0x13c>)
 800b67c:	fbb2 f2f1 	udiv	r2, r2, r1
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b680:	2300      	movs	r3, #0
 800b682:	0c11      	lsrs	r1, r2, #16
 800b684:	f361 0307 	bfi	r3, r1, #0, #8
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800b688:	0a11      	lsrs	r1, r2, #8
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b68a:	f361 230f 	bfi	r3, r1, #8, #8
 800b68e:	7b21      	ldrb	r1, [r4, #12]
 800b690:	f362 4317 	bfi	r3, r2, #16, #8
 800b694:	f361 631f 	bfi	r3, r1, #24, #8
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800b698:	7b62      	ldrb	r2, [r4, #13]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b69a:	9302      	str	r3, [sp, #8]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800b69c:	f88d 200c 	strb.w	r2, [sp, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6a0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b6a4:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b6a6:	2305      	movs	r3, #5
 800b6a8:	462a      	mov	r2, r5
 800b6aa:	218b      	movs	r1, #139	@ 0x8b
 800b6ac:	4838      	ldr	r0, [pc, #224]	@ (800b790 <SUBGRF_SetModulationParams+0x140>)
 800b6ae:	f7fc f9bf 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6b2:	f384 8810 	msr	PRIMASK, r4
}
 800b6b6:	b004      	add	sp, #16
 800b6b8:	bd70      	pop	{r4, r5, r6, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800b6ba:	6921      	ldr	r1, [r4, #16]
 800b6bc:	4a33      	ldr	r2, [pc, #204]	@ (800b78c <SUBGRF_SetModulationParams+0x13c>)
 800b6be:	fbb2 f2f1 	udiv	r2, r2, r1
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	0c10      	lsrs	r0, r2, #16
 800b6c6:	f360 0307 	bfi	r3, r0, #0, #8
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800b6ca:	0a10      	lsrs	r0, r2, #8
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b6cc:	7d21      	ldrb	r1, [r4, #20]
 800b6ce:	f360 230f 	bfi	r3, r0, #8, #8
 800b6d2:	f362 4317 	bfi	r3, r2, #16, #8
 800b6d6:	f361 631f 	bfi	r3, r1, #24, #8
 800b6da:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6dc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b6e0:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b6e2:	2304      	movs	r3, #4
 800b6e4:	e7e0      	b.n	800b6a8 <SUBGRF_SetModulationParams+0x58>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800b6e6:	69a3      	ldr	r3, [r4, #24]
 800b6e8:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6ea:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b6ee:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b6f0:	2304      	movs	r3, #4
 800b6f2:	e7d9      	b.n	800b6a8 <SUBGRF_SetModulationParams+0x58>
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800b6f4:	68a1      	ldr	r1, [r4, #8]
 800b6f6:	4a27      	ldr	r2, [pc, #156]	@ (800b794 <SUBGRF_SetModulationParams+0x144>)
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800b6f8:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800b6fc:	4e23      	ldr	r6, [pc, #140]	@ (800b78c <SUBGRF_SetModulationParams+0x13c>)
 800b6fe:	fbb6 f6fc 	udiv	r6, r6, ip
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800b702:	2300      	movs	r3, #0
 800b704:	0648      	lsls	r0, r1, #25
 800b706:	09c9      	lsrs	r1, r1, #7
 800b708:	f7f4 ff76 	bl	80005f8 <__aeabi_uldivmod>
        buf[7] = ( tempVal& 0xFF );
 800b70c:	7b62      	ldrb	r2, [r4, #13]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b70e:	7b21      	ldrb	r1, [r4, #12]
 800b710:	2300      	movs	r3, #0
 800b712:	0c34      	lsrs	r4, r6, #16
 800b714:	f362 0307 	bfi	r3, r2, #0, #8
 800b718:	2200      	movs	r2, #0
 800b71a:	f364 0207 	bfi	r2, r4, #0, #8
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800b71e:	0c04      	lsrs	r4, r0, #16
 800b720:	f364 230f 	bfi	r3, r4, #8, #8
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800b724:	0a34      	lsrs	r4, r6, #8
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b726:	f364 220f 	bfi	r2, r4, #8, #8
 800b72a:	f366 4217 	bfi	r2, r6, #16, #8
 800b72e:	f361 621f 	bfi	r2, r1, #24, #8
 800b732:	9202      	str	r2, [sp, #8]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800b734:	0a02      	lsrs	r2, r0, #8
 800b736:	f362 4317 	bfi	r3, r2, #16, #8
 800b73a:	f360 631f 	bfi	r3, r0, #24, #8
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b73e:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b740:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b744:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b746:	2308      	movs	r3, #8
 800b748:	e7ae      	b.n	800b6a8 <SUBGRF_SetModulationParams+0x58>
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800b74a:	f88d 6006 	strb.w	r6, [sp, #6]
    PacketType = packetType;
 800b74e:	7016      	strb	r6, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 800b750:	b16e      	cbz	r6, 800b76e <SUBGRF_SetModulationParams+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b752:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b756:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b758:	2301      	movs	r3, #1
 800b75a:	f10d 0206 	add.w	r2, sp, #6
 800b75e:	218a      	movs	r1, #138	@ 0x8a
 800b760:	480b      	ldr	r0, [pc, #44]	@ (800b790 <SUBGRF_SetModulationParams+0x140>)
 800b762:	f7fc f965 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b766:	f386 8810 	msr	PRIMASK, r6
    switch( modulationParams->PacketType )
 800b76a:	7823      	ldrb	r3, [r4, #0]
 800b76c:	e77e      	b.n	800b66c <SUBGRF_SetModulationParams+0x1c>
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800b76e:	2301      	movs	r3, #1
 800b770:	f10d 0207 	add.w	r2, sp, #7
 800b774:	f240 61ac 	movw	r1, #1708	@ 0x6ac
 800b778:	4805      	ldr	r0, [pc, #20]	@ (800b790 <SUBGRF_SetModulationParams+0x140>)
 800b77a:	f88d 6007 	strb.w	r6, [sp, #7]
 800b77e:	f7fc f9bf 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
 800b782:	e7e6      	b.n	800b752 <SUBGRF_SetModulationParams+0x102>
 800b784:	0800cf08 	.word	0x0800cf08
 800b788:	200005d5 	.word	0x200005d5
 800b78c:	3d090000 	.word	0x3d090000
 800b790:	200002cc 	.word	0x200002cc
 800b794:	01e84800 	.word	0x01e84800

0800b798 <SUBGRF_SetPacketParams>:
{
 800b798:	b570      	push	{r4, r5, r6, lr}
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b79a:	4b65      	ldr	r3, [pc, #404]	@ (800b930 <SUBGRF_SetPacketParams+0x198>)
    if( PacketType != packetParams->PacketType )
 800b79c:	4d65      	ldr	r5, [pc, #404]	@ (800b934 <SUBGRF_SetPacketParams+0x19c>)
{
 800b79e:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b7a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
{
 800b7a4:	b086      	sub	sp, #24
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b7a6:	ab03      	add	r3, sp, #12
 800b7a8:	c303      	stmia	r3!, {r0, r1}
 800b7aa:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 800b7ac:	7822      	ldrb	r2, [r4, #0]
 800b7ae:	782b      	ldrb	r3, [r5, #0]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d151      	bne.n	800b858 <SUBGRF_SetPacketParams+0xc0>
    switch( packetParams->PacketType )
 800b7b4:	2b03      	cmp	r3, #3
 800b7b6:	d811      	bhi.n	800b7dc <SUBGRF_SetPacketParams+0x44>
 800b7b8:	e8df f003 	tbb	[pc, r3]
 800b7bc:	12023712 	.word	0x12023712
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800b7c0:	7b23      	ldrb	r3, [r4, #12]
 800b7c2:	f88d 300c 	strb.w	r3, [sp, #12]
        break;
 800b7c6:	2301      	movs	r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7c8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b7cc:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b7ce:	218c      	movs	r1, #140	@ 0x8c
 800b7d0:	aa03      	add	r2, sp, #12
 800b7d2:	4859      	ldr	r0, [pc, #356]	@ (800b938 <SUBGRF_SetPacketParams+0x1a0>)
 800b7d4:	f7fc f92c 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7d8:	f384 8810 	msr	PRIMASK, r4
}
 800b7dc:	b006      	add	sp, #24
 800b7de:	bd70      	pop	{r4, r5, r6, pc}
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800b7e0:	7a61      	ldrb	r1, [r4, #9]
 800b7e2:	29f1      	cmp	r1, #241	@ 0xf1
 800b7e4:	d04a      	beq.n	800b87c <SUBGRF_SetPacketParams+0xe4>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800b7e6:	29f2      	cmp	r1, #242	@ 0xf2
 800b7e8:	d07a      	beq.n	800b8e0 <SUBGRF_SetPacketParams+0x148>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800b7ea:	79a2      	ldrb	r2, [r4, #6]
 800b7ec:	8860      	ldrh	r0, [r4, #2]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	f362 0307 	bfi	r3, r2, #0, #8
 800b7f4:	79e2      	ldrb	r2, [r4, #7]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800b7f6:	0a05      	lsrs	r5, r0, #8
 800b7f8:	f362 230f 	bfi	r3, r2, #8, #8
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f365 0207 	bfi	r2, r5, #0, #8
 800b802:	f360 220f 	bfi	r2, r0, #8, #8
 800b806:	7a20      	ldrb	r0, [r4, #8]
 800b808:	f360 4317 	bfi	r3, r0, #16, #8
 800b80c:	7920      	ldrb	r0, [r4, #4]
 800b80e:	f361 631f 	bfi	r3, r1, #24, #8
 800b812:	7961      	ldrb	r1, [r4, #5]
 800b814:	9304      	str	r3, [sp, #16]
 800b816:	f360 4217 	bfi	r2, r0, #16, #8
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800b81a:	7aa3      	ldrb	r3, [r4, #10]
 800b81c:	f88d 3014 	strb.w	r3, [sp, #20]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800b820:	f361 621f 	bfi	r2, r1, #24, #8
        break;
 800b824:	2309      	movs	r3, #9
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800b826:	9203      	str	r2, [sp, #12]
        break;
 800b828:	e7ce      	b.n	800b7c8 <SUBGRF_SetPacketParams+0x30>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800b82a:	89e2      	ldrh	r2, [r4, #14]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800b82c:	7c21      	ldrb	r1, [r4, #16]
 800b82e:	7c60      	ldrb	r0, [r4, #17]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800b830:	ba52      	rev16	r2, r2
 800b832:	f8ad 200c 	strh.w	r2, [sp, #12]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800b836:	4a41      	ldr	r2, [pc, #260]	@ (800b93c <SUBGRF_SetPacketParams+0x1a4>)
 800b838:	2300      	movs	r3, #0
 800b83a:	f361 0307 	bfi	r3, r1, #0, #8
 800b83e:	7011      	strb	r1, [r2, #0]
 800b840:	7ca1      	ldrb	r1, [r4, #18]
 800b842:	7ce2      	ldrb	r2, [r4, #19]
 800b844:	f360 230f 	bfi	r3, r0, #8, #8
 800b848:	f361 4317 	bfi	r3, r1, #16, #8
 800b84c:	f362 631f 	bfi	r3, r2, #24, #8
 800b850:	f8cd 300e 	str.w	r3, [sp, #14]
        break;
 800b854:	2306      	movs	r3, #6
 800b856:	e7b7      	b.n	800b7c8 <SUBGRF_SetPacketParams+0x30>
        SUBGRF_SetPacketType( packetParams->PacketType );
 800b858:	f88d 2007 	strb.w	r2, [sp, #7]
    PacketType = packetType;
 800b85c:	702a      	strb	r2, [r5, #0]
    if( packetType == PACKET_TYPE_GFSK )
 800b85e:	b1aa      	cbz	r2, 800b88c <SUBGRF_SetPacketParams+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b860:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b864:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b866:	2301      	movs	r3, #1
 800b868:	f10d 0207 	add.w	r2, sp, #7
 800b86c:	218a      	movs	r1, #138	@ 0x8a
 800b86e:	4832      	ldr	r0, [pc, #200]	@ (800b938 <SUBGRF_SetPacketParams+0x1a0>)
 800b870:	f7fc f8de 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b874:	f386 8810 	msr	PRIMASK, r6
    switch( packetParams->PacketType )
 800b878:	7823      	ldrb	r3, [r4, #0]
 800b87a:	e79b      	b.n	800b7b4 <SUBGRF_SetPacketParams+0x1c>
    switch( SUBGRF_GetPacketType( ) )
 800b87c:	782b      	ldrb	r3, [r5, #0]
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800b87e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b882:	f8ad 2008 	strh.w	r2, [sp, #8]
    switch( SUBGRF_GetPacketType( ) )
 800b886:	b15b      	cbz	r3, 800b8a0 <SUBGRF_SetPacketParams+0x108>
            crcVal = RADIO_CRC_2_BYTES;
 800b888:	2102      	movs	r1, #2
}
 800b88a:	e7ae      	b.n	800b7ea <SUBGRF_SetPacketParams+0x52>
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800b88c:	f88d 2008 	strb.w	r2, [sp, #8]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800b890:	2301      	movs	r3, #1
 800b892:	aa02      	add	r2, sp, #8
 800b894:	f240 61ac 	movw	r1, #1708	@ 0x6ac
 800b898:	4827      	ldr	r0, [pc, #156]	@ (800b938 <SUBGRF_SetPacketParams+0x1a0>)
 800b89a:	f7fc f931 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
 800b89e:	e7df      	b.n	800b860 <SUBGRF_SetPacketParams+0xc8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8a0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b8a4:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800b8a6:	2302      	movs	r3, #2
 800b8a8:	aa02      	add	r2, sp, #8
 800b8aa:	f240 61bc 	movw	r1, #1724	@ 0x6bc
 800b8ae:	4822      	ldr	r0, [pc, #136]	@ (800b938 <SUBGRF_SetPacketParams+0x1a0>)
 800b8b0:	f7fc f926 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8b4:	f386 8810 	msr	PRIMASK, r6
    return PacketType;
 800b8b8:	782b      	ldrb	r3, [r5, #0]
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800b8ba:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 800b8be:	f8ad 2008 	strh.w	r2, [sp, #8]
    switch( SUBGRF_GetPacketType( ) )
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d1e0      	bne.n	800b888 <SUBGRF_SetPacketParams+0xf0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8c6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b8ca:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800b8cc:	2302      	movs	r3, #2
 800b8ce:	aa02      	add	r2, sp, #8
 800b8d0:	f240 61be 	movw	r1, #1726	@ 0x6be
 800b8d4:	4818      	ldr	r0, [pc, #96]	@ (800b938 <SUBGRF_SetPacketParams+0x1a0>)
 800b8d6:	f7fc f913 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8da:	f385 8810 	msr	PRIMASK, r5
}
 800b8de:	e7d3      	b.n	800b888 <SUBGRF_SetPacketParams+0xf0>
    switch( SUBGRF_GetPacketType( ) )
 800b8e0:	782b      	ldrb	r3, [r5, #0]
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800b8e2:	f640 721d 	movw	r2, #3869	@ 0xf1d
 800b8e6:	f8ad 2008 	strh.w	r2, [sp, #8]
    switch( SUBGRF_GetPacketType( ) )
 800b8ea:	b10b      	cbz	r3, 800b8f0 <SUBGRF_SetPacketParams+0x158>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800b8ec:	2106      	movs	r1, #6
}
 800b8ee:	e77c      	b.n	800b7ea <SUBGRF_SetPacketParams+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8f0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b8f4:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800b8f6:	2302      	movs	r3, #2
 800b8f8:	aa02      	add	r2, sp, #8
 800b8fa:	f240 61bc 	movw	r1, #1724	@ 0x6bc
 800b8fe:	480e      	ldr	r0, [pc, #56]	@ (800b938 <SUBGRF_SetPacketParams+0x1a0>)
 800b900:	f7fc f8fe 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b904:	f386 8810 	msr	PRIMASK, r6
    return PacketType;
 800b908:	782b      	ldrb	r3, [r5, #0]
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800b90a:	f242 1210 	movw	r2, #8464	@ 0x2110
 800b90e:	f8ad 2008 	strh.w	r2, [sp, #8]
    switch( SUBGRF_GetPacketType( ) )
 800b912:	2b00      	cmp	r3, #0
 800b914:	d1ea      	bne.n	800b8ec <SUBGRF_SetPacketParams+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b916:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b91a:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800b91c:	2302      	movs	r3, #2
 800b91e:	aa02      	add	r2, sp, #8
 800b920:	f240 61be 	movw	r1, #1726	@ 0x6be
 800b924:	4804      	ldr	r0, [pc, #16]	@ (800b938 <SUBGRF_SetPacketParams+0x1a0>)
 800b926:	f7fc f8eb 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b92a:	f385 8810 	msr	PRIMASK, r5
}
 800b92e:	e7dd      	b.n	800b8ec <SUBGRF_SetPacketParams+0x154>
 800b930:	0800cf10 	.word	0x0800cf10
 800b934:	200005d5 	.word	0x200005d5
 800b938:	200002cc 	.word	0x200002cc
 800b93c:	200005d4 	.word	0x200005d4

0800b940 <SUBGRF_SetBufferBaseAddress>:
{
 800b940:	b510      	push	{r4, lr}
 800b942:	b082      	sub	sp, #8
    buf[0] = txBaseAddress;
 800b944:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 800b948:	f88d 1005 	strb.w	r1, [sp, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b94c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b950:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b952:	2302      	movs	r3, #2
 800b954:	aa01      	add	r2, sp, #4
 800b956:	218f      	movs	r1, #143	@ 0x8f
 800b958:	4803      	ldr	r0, [pc, #12]	@ (800b968 <SUBGRF_SetBufferBaseAddress+0x28>)
 800b95a:	f7fc f869 	bl	8007a30 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b95e:	f384 8810 	msr	PRIMASK, r4
}
 800b962:	b002      	add	sp, #8
 800b964:	bd10      	pop	{r4, pc}
 800b966:	bf00      	nop
 800b968:	200002cc 	.word	0x200002cc

0800b96c <SUBGRF_GetRssiInst>:
{
 800b96c:	b510      	push	{r4, lr}
 800b96e:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b970:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b974:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800b976:	2301      	movs	r3, #1
 800b978:	aa01      	add	r2, sp, #4
 800b97a:	2115      	movs	r1, #21
 800b97c:	4805      	ldr	r0, [pc, #20]	@ (800b994 <SUBGRF_GetRssiInst+0x28>)
 800b97e:	f7fb fff9 	bl	8007974 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b982:	f384 8810 	msr	PRIMASK, r4
    rssi = -buf[0] >> 1;
 800b986:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800b98a:	4240      	negs	r0, r0
}
 800b98c:	1040      	asrs	r0, r0, #1
 800b98e:	b002      	add	sp, #8
 800b990:	bd10      	pop	{r4, pc}
 800b992:	bf00      	nop
 800b994:	200002cc 	.word	0x200002cc

0800b998 <SUBGRF_GetPacketStatus>:
{
 800b998:	b530      	push	{r4, r5, lr}
 800b99a:	4604      	mov	r4, r0
 800b99c:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b99e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b9a2:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800b9a4:	2303      	movs	r3, #3
 800b9a6:	aa01      	add	r2, sp, #4
 800b9a8:	2114      	movs	r1, #20
 800b9aa:	481c      	ldr	r0, [pc, #112]	@ (800ba1c <SUBGRF_GetPacketStatus+0x84>)
 800b9ac:	f7fb ffe2 	bl	8007974 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9b0:	f385 8810 	msr	PRIMASK, r5
    return PacketType;
 800b9b4:	4b1a      	ldr	r3, [pc, #104]	@ (800ba20 <SUBGRF_GetPacketStatus+0x88>)
 800b9b6:	781b      	ldrb	r3, [r3, #0]
    pktStatus->packetType = SUBGRF_GetPacketType( );
 800b9b8:	7023      	strb	r3, [r4, #0]
    switch( pktStatus->packetType )
 800b9ba:	b153      	cbz	r3, 800b9d2 <SUBGRF_GetPacketStatus+0x3a>
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d018      	beq.n	800b9f2 <SUBGRF_GetPacketStatus+0x5a>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800b9c0:	2214      	movs	r2, #20
 800b9c2:	2100      	movs	r1, #0
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	f000 fb49 	bl	800c05c <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800b9ca:	230f      	movs	r3, #15
 800b9cc:	7023      	strb	r3, [r4, #0]
}
 800b9ce:	b003      	add	sp, #12
 800b9d0:	bd30      	pop	{r4, r5, pc}
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800b9d2:	f89d 1005 	ldrb.w	r1, [sp, #5]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800b9d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800b9da:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800b9de:	7120      	strb	r0, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800b9e0:	4249      	negs	r1, r1
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800b9e2:	4252      	negs	r2, r2
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800b9e4:	1049      	asrs	r1, r1, #1
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800b9e6:	1052      	asrs	r2, r2, #1
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800b9e8:	71a1      	strb	r1, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800b9ea:	7162      	strb	r2, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800b9ec:	60a3      	str	r3, [r4, #8]
}
 800b9ee:	b003      	add	sp, #12
 800b9f0:	bd30      	pop	{r4, r5, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800b9f2:	f89d 1004 	ldrb.w	r1, [sp, #4]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800b9f6:	f99d 2005 	ldrsb.w	r2, [sp, #5]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800b9fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800b9fe:	4809      	ldr	r0, [pc, #36]	@ (800ba24 <SUBGRF_GetPacketStatus+0x8c>)
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800ba00:	4249      	negs	r1, r1
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800ba02:	6800      	ldr	r0, [r0, #0]
 800ba04:	6120      	str	r0, [r4, #16]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800ba06:	3202      	adds	r2, #2
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800ba08:	425b      	negs	r3, r3
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800ba0a:	1049      	asrs	r1, r1, #1
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800ba0c:	1092      	asrs	r2, r2, #2
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800ba0e:	105b      	asrs	r3, r3, #1
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800ba10:	7321      	strb	r1, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800ba12:	7362      	strb	r2, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800ba14:	73a3      	strb	r3, [r4, #14]
}
 800ba16:	b003      	add	sp, #12
 800ba18:	bd30      	pop	{r4, r5, pc}
 800ba1a:	bf00      	nop
 800ba1c:	200002cc 	.word	0x200002cc
 800ba20:	200005d5 	.word	0x200005d5
 800ba24:	200005d0 	.word	0x200005d0

0800ba28 <SUBGRF_WriteRegister>:
{
 800ba28:	b500      	push	{lr}
 800ba2a:	4686      	mov	lr, r0
 800ba2c:	b083      	sub	sp, #12
 800ba2e:	468c      	mov	ip, r1
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800ba30:	2301      	movs	r3, #1
 800ba32:	f10d 0207 	add.w	r2, sp, #7
 800ba36:	4671      	mov	r1, lr
 800ba38:	4803      	ldr	r0, [pc, #12]	@ (800ba48 <SUBGRF_WriteRegister+0x20>)
{
 800ba3a:	f88d c007 	strb.w	ip, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800ba3e:	f7fc f85f 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
}
 800ba42:	b003      	add	sp, #12
 800ba44:	f85d fb04 	ldr.w	pc, [sp], #4
 800ba48:	200002cc 	.word	0x200002cc

0800ba4c <SUBGRF_ReadRegister>:
{
 800ba4c:	b500      	push	{lr}
 800ba4e:	b083      	sub	sp, #12
 800ba50:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800ba52:	2301      	movs	r3, #1
 800ba54:	f10d 0207 	add.w	r2, sp, #7
 800ba58:	4803      	ldr	r0, [pc, #12]	@ (800ba68 <SUBGRF_ReadRegister+0x1c>)
 800ba5a:	f7fc f8b9 	bl	8007bd0 <HAL_SUBGHZ_ReadRegisters>
}
 800ba5e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ba62:	b003      	add	sp, #12
 800ba64:	f85d fb04 	ldr.w	pc, [sp], #4
 800ba68:	200002cc 	.word	0x200002cc

0800ba6c <SUBGRF_WriteRegisters>:
{
 800ba6c:	b510      	push	{r4, lr}
 800ba6e:	4684      	mov	ip, r0
 800ba70:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba72:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ba76:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800ba78:	4803      	ldr	r0, [pc, #12]	@ (800ba88 <SUBGRF_WriteRegisters+0x1c>)
 800ba7a:	460a      	mov	r2, r1
 800ba7c:	4661      	mov	r1, ip
 800ba7e:	f7fc f83f 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba82:	f384 8810 	msr	PRIMASK, r4
}
 800ba86:	bd10      	pop	{r4, pc}
 800ba88:	200002cc 	.word	0x200002cc

0800ba8c <SUBGRF_ReadRegisters>:
{
 800ba8c:	b510      	push	{r4, lr}
 800ba8e:	4684      	mov	ip, r0
 800ba90:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba92:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ba96:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800ba98:	4803      	ldr	r0, [pc, #12]	@ (800baa8 <SUBGRF_ReadRegisters+0x1c>)
 800ba9a:	460a      	mov	r2, r1
 800ba9c:	4661      	mov	r1, ip
 800ba9e:	f7fc f897 	bl	8007bd0 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800baa2:	f384 8810 	msr	PRIMASK, r4
}
 800baa6:	bd10      	pop	{r4, pc}
 800baa8:	200002cc 	.word	0x200002cc

0800baac <SUBGRF_SetSwitch>:
    if (rxtx == RFSWITCH_TX)
 800baac:	2901      	cmp	r1, #1
 800baae:	d003      	beq.n	800bab8 <SUBGRF_SetSwitch+0xc>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800bab0:	2101      	movs	r1, #1
    RBI_ConfigRFSwitch(state);
 800bab2:	4608      	mov	r0, r1
 800bab4:	f000 b9fe 	b.w	800beb4 <RBI_ConfigRFSwitch>
        if (paSelect == RFO_LP)
 800bab8:	2801      	cmp	r0, #1
 800baba:	d005      	beq.n	800bac8 <SUBGRF_SetSwitch+0x1c>
            state = RBI_SWITCH_RFO_HP;
 800babc:	2802      	cmp	r0, #2
 800babe:	bf08      	it	eq
 800bac0:	2103      	moveq	r1, #3
    RBI_ConfigRFSwitch(state);
 800bac2:	4608      	mov	r0, r1
 800bac4:	f000 b9f6 	b.w	800beb4 <RBI_ConfigRFSwitch>
{
 800bac8:	b510      	push	{r4, lr}
 800baca:	b082      	sub	sp, #8
  if ( 1U == RBI_IsDCDC() )
 800bacc:	f000 fa0e 	bl	800beec <RBI_IsDCDC>
 800bad0:	2801      	cmp	r0, #1
 800bad2:	4604      	mov	r4, r0
 800bad4:	d006      	beq.n	800bae4 <SUBGRF_SetSwitch+0x38>
            state = RBI_SWITCH_RFO_LP;
 800bad6:	2102      	movs	r1, #2
    RBI_ConfigRFSwitch(state);
 800bad8:	4608      	mov	r0, r1
}
 800bada:	b002      	add	sp, #8
 800badc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RBI_ConfigRFSwitch(state);
 800bae0:	f000 b9e8 	b.w	800beb4 <RBI_ConfigRFSwitch>
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800bae4:	4603      	mov	r3, r0
 800bae6:	f10d 0207 	add.w	r2, sp, #7
 800baea:	f640 1123 	movw	r1, #2339	@ 0x923
 800baee:	480a      	ldr	r0, [pc, #40]	@ (800bb18 <SUBGRF_SetSwitch+0x6c>)
 800baf0:	f7fc f86e 	bl	8007bd0 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800baf4:	f89d c007 	ldrb.w	ip, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800baf8:	4807      	ldr	r0, [pc, #28]	@ (800bb18 <SUBGRF_SetSwitch+0x6c>)
    modReg&= (~SMPS_DRV_MASK);
 800bafa:	f02c 0c06 	bic.w	ip, ip, #6
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800bafe:	f04c 0c04 	orr.w	ip, ip, #4
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800bb02:	4623      	mov	r3, r4
 800bb04:	f10d 0207 	add.w	r2, sp, #7
 800bb08:	f640 1123 	movw	r1, #2339	@ 0x923
 800bb0c:	f88d c007 	strb.w	ip, [sp, #7]
 800bb10:	f7fb fff6 	bl	8007b00 <HAL_SUBGHZ_WriteRegisters>
        if (paSelect == RFO_HP)
 800bb14:	e7df      	b.n	800bad6 <SUBGRF_SetSwitch+0x2a>
 800bb16:	bf00      	nop
 800bb18:	200002cc 	.word	0x200002cc

0800bb1c <SUBGRF_SetRfTxPower>:
{
 800bb1c:	b538      	push	{r3, r4, r5, lr}
 800bb1e:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 800bb20:	f000 f9e0 	bl	800bee4 <RBI_GetTxConfig>
    switch (TxConfig)
 800bb24:	b150      	cbz	r0, 800bb3c <SUBGRF_SetRfTxPower+0x20>
 800bb26:	2802      	cmp	r0, #2
 800bb28:	bf0c      	ite	eq
 800bb2a:	2502      	moveq	r5, #2
 800bb2c:	2501      	movne	r5, #1
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800bb2e:	4628      	mov	r0, r5
 800bb30:	2202      	movs	r2, #2
 800bb32:	4621      	mov	r1, r4
 800bb34:	f7ff fca2 	bl	800b47c <SUBGRF_SetTxParams>
}
 800bb38:	4628      	mov	r0, r5
 800bb3a:	bd38      	pop	{r3, r4, r5, pc}
                paSelect = RFO_HP;
 800bb3c:	2c10      	cmp	r4, #16
 800bb3e:	bfb4      	ite	lt
 800bb40:	2501      	movlt	r5, #1
 800bb42:	2502      	movge	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800bb44:	4628      	mov	r0, r5
 800bb46:	2202      	movs	r2, #2
 800bb48:	4621      	mov	r1, r4
 800bb4a:	f7ff fc97 	bl	800b47c <SUBGRF_SetTxParams>
}
 800bb4e:	4628      	mov	r0, r5
 800bb50:	bd38      	pop	{r3, r4, r5, pc}
 800bb52:	bf00      	nop

0800bb54 <SUBGRF_GetRadioWakeUpTime>:
}
 800bb54:	2001      	movs	r0, #1
 800bb56:	4770      	bx	lr

0800bb58 <HAL_SUBGHZ_TxCpltCallback>:
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800bb58:	4b01      	ldr	r3, [pc, #4]	@ (800bb60 <HAL_SUBGHZ_TxCpltCallback+0x8>)
 800bb5a:	2001      	movs	r0, #1
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	4718      	bx	r3
 800bb60:	200005c8 	.word	0x200005c8

0800bb64 <HAL_SUBGHZ_RxCpltCallback>:
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800bb64:	4b01      	ldr	r3, [pc, #4]	@ (800bb6c <HAL_SUBGHZ_RxCpltCallback+0x8>)
 800bb66:	2002      	movs	r0, #2
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4718      	bx	r3
 800bb6c:	200005c8 	.word	0x200005c8

0800bb70 <HAL_SUBGHZ_CRCErrorCallback>:
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800bb70:	4b01      	ldr	r3, [pc, #4]	@ (800bb78 <HAL_SUBGHZ_CRCErrorCallback+0x8>)
 800bb72:	2040      	movs	r0, #64	@ 0x40
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	4718      	bx	r3
 800bb78:	200005c8 	.word	0x200005c8

0800bb7c <HAL_SUBGHZ_CADStatusCallback>:
    switch (cadstatus)
 800bb7c:	b139      	cbz	r1, 800bb8e <HAL_SUBGHZ_CADStatusCallback+0x12>
 800bb7e:	2901      	cmp	r1, #1
 800bb80:	d104      	bne.n	800bb8c <HAL_SUBGHZ_CADStatusCallback+0x10>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800bb82:	4b05      	ldr	r3, [pc, #20]	@ (800bb98 <HAL_SUBGHZ_CADStatusCallback+0x1c>)
 800bb84:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4718      	bx	r3
 800bb8c:	4770      	bx	lr
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800bb8e:	4b02      	ldr	r3, [pc, #8]	@ (800bb98 <HAL_SUBGHZ_CADStatusCallback+0x1c>)
 800bb90:	2080      	movs	r0, #128	@ 0x80
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	4718      	bx	r3
 800bb96:	bf00      	nop
 800bb98:	200005c8 	.word	0x200005c8

0800bb9c <HAL_SUBGHZ_RxTxTimeoutCallback>:
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800bb9c:	4b02      	ldr	r3, [pc, #8]	@ (800bba8 <HAL_SUBGHZ_RxTxTimeoutCallback+0xc>)
 800bb9e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4718      	bx	r3
 800bba6:	bf00      	nop
 800bba8:	200005c8 	.word	0x200005c8

0800bbac <HAL_SUBGHZ_HeaderErrorCallback>:
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800bbac:	4b01      	ldr	r3, [pc, #4]	@ (800bbb4 <HAL_SUBGHZ_HeaderErrorCallback+0x8>)
 800bbae:	2020      	movs	r0, #32
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	4718      	bx	r3
 800bbb4:	200005c8 	.word	0x200005c8

0800bbb8 <HAL_SUBGHZ_PreambleDetectedCallback>:
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800bbb8:	4b01      	ldr	r3, [pc, #4]	@ (800bbc0 <HAL_SUBGHZ_PreambleDetectedCallback+0x8>)
 800bbba:	2004      	movs	r0, #4
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4718      	bx	r3
 800bbc0:	200005c8 	.word	0x200005c8

0800bbc4 <HAL_SUBGHZ_SyncWordValidCallback>:
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800bbc4:	4b01      	ldr	r3, [pc, #4]	@ (800bbcc <HAL_SUBGHZ_SyncWordValidCallback+0x8>)
 800bbc6:	2008      	movs	r0, #8
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4718      	bx	r3
 800bbcc:	200005c8 	.word	0x200005c8

0800bbd0 <HAL_SUBGHZ_HeaderValidCallback>:
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800bbd0:	4b01      	ldr	r3, [pc, #4]	@ (800bbd8 <HAL_SUBGHZ_HeaderValidCallback+0x8>)
 800bbd2:	2010      	movs	r0, #16
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4718      	bx	r3
 800bbd8:	200005c8 	.word	0x200005c8

0800bbdc <HAL_SUBGHZ_LrFhssHopCallback>:
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800bbdc:	4b02      	ldr	r3, [pc, #8]	@ (800bbe8 <HAL_SUBGHZ_LrFhssHopCallback+0xc>)
 800bbde:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4718      	bx	r3
 800bbe6:	bf00      	nop
 800bbe8:	200005c8 	.word	0x200005c8

0800bbec <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 800bbec:	b180      	cbz	r0, 800bc10 <SUBGRF_GetFskBandwidthRegValue+0x24>
 800bbee:	4909      	ldr	r1, [pc, #36]	@ (800bc14 <SUBGRF_GetFskBandwidthRegValue+0x28>)
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	e001      	b.n	800bbf8 <SUBGRF_GetFskBandwidthRegValue+0xc>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800bbf4:	2b16      	cmp	r3, #22
 800bbf6:	d00a      	beq.n	800bc0e <SUBGRF_GetFskBandwidthRegValue+0x22>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800bbf8:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800bbfc:	4282      	cmp	r2, r0
 800bbfe:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
 800bc02:	f103 0301 	add.w	r3, r3, #1
 800bc06:	d9f5      	bls.n	800bbf4 <SUBGRF_GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
 800bc08:	f89c 0004 	ldrb.w	r0, [ip, #4]
 800bc0c:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 800bc0e:	e7fe      	b.n	800bc0e <SUBGRF_GetFskBandwidthRegValue+0x22>
        return( 0x1F );
 800bc10:	201f      	movs	r0, #31
}
 800bc12:	4770      	bx	lr
 800bc14:	0800d300 	.word	0x0800d300

0800bc18 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800bc18:	b570      	push	{r4, r5, r6, lr}
 800bc1a:	b082      	sub	sp, #8
  uint8_t BwMant[] = {4, 8, 10, 12};
 800bc1c:	4a24      	ldr	r2, [pc, #144]	@ (800bcb0 <SUBGRF_GetCFO+0x98>)
 800bc1e:	9201      	str	r2, [sp, #4]
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800bc20:	2301      	movs	r3, #1
{
 800bc22:	4605      	mov	r5, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800bc24:	f10d 0203 	add.w	r2, sp, #3
 800bc28:	4822      	ldr	r0, [pc, #136]	@ (800bcb4 <SUBGRF_GetCFO+0x9c>)
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
  uint8_t bandwidth_exp = reg & 0x7;
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800bc2a:	4c23      	ldr	r4, [pc, #140]	@ (800bcb8 <SUBGRF_GetCFO+0xa0>)
{
 800bc2c:	460e      	mov	r6, r1
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800bc2e:	f640 0107 	movw	r1, #2055	@ 0x807
 800bc32:	f7fb ffcd 	bl	8007bd0 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800bc36:	f89d 3003 	ldrb.w	r3, [sp, #3]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800bc3a:	f3c3 02c1 	ubfx	r2, r3, #3, #2
 800bc3e:	3208      	adds	r2, #8
 800bc40:	446a      	add	r2, sp
  uint8_t bandwidth_exp = reg & 0x7;
 800bc42:	f003 0307 	and.w	r3, r3, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800bc46:	f812 2c04 	ldrb.w	r2, [r2, #-4]
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc50:	fbb4 f4f3 	udiv	r4, r4, r3
  uint32_t cf_osr = cf_fs / bitRate;
 800bc54:	fbb4 f0f5 	udiv	r0, r4, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800bc58:	2807      	cmp	r0, #7
 800bc5a:	d804      	bhi.n	800bc66 <SUBGRF_GetCFO+0x4e>
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 800bc5c:	0040      	lsls	r0, r0, #1
 800bc5e:	2803      	cmp	r0, #3
  {
    interp = 4;
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800bc60:	bf8c      	ite	hi
 800bc62:	0064      	lslhi	r4, r4, #1
 800bc64:	00a4      	lslls	r4, r4, #2
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800bc66:	f10d 0203 	add.w	r2, sp, #3
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	f44f 61d6 	mov.w	r1, #1712	@ 0x6b0
 800bc70:	4810      	ldr	r0, [pc, #64]	@ (800bcb4 <SUBGRF_GetCFO+0x9c>)
 800bc72:	f7fb ffad 	bl	8007bd0 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800bc76:	f89d 5003 	ldrb.w	r5, [sp, #3]
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800bc7a:	480e      	ldr	r0, [pc, #56]	@ (800bcb4 <SUBGRF_GetCFO+0x9c>)
 800bc7c:	f10d 0203 	add.w	r2, sp, #3
 800bc80:	2301      	movs	r3, #1
 800bc82:	f240 61b1 	movw	r1, #1713	@ 0x6b1
 800bc86:	f7fb ffa3 	bl	8007bd0 <HAL_SUBGHZ_ReadRegisters>
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800bc8a:	022d      	lsls	r5, r5, #8
    return data;
 800bc8c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800bc90:	f405 6570 	and.w	r5, r5, #3840	@ 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800bc94:	432b      	orrs	r3, r5
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800bc96:	052a      	lsls	r2, r5, #20
 800bc98:	bf44      	itt	mi
 800bc9a:	ea6f 5303 	mvnmi.w	r3, r3, lsl #20
 800bc9e:	ea6f 5313 	mvnmi.w	r3, r3, lsr #20
  {
    cfo_bin |= 0xFFFFF000;
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800bca2:	0964      	lsrs	r4, r4, #5
 800bca4:	fb03 f404 	mul.w	r4, r3, r4
 800bca8:	11e4      	asrs	r4, r4, #7
 800bcaa:	6034      	str	r4, [r6, #0]
}
 800bcac:	b002      	add	sp, #8
 800bcae:	bd70      	pop	{r4, r5, r6, pc}
 800bcb0:	0c0a0804 	.word	0x0c0a0804
 800bcb4:	200002cc 	.word	0x200002cc
 800bcb8:	01e84800 	.word	0x01e84800

0800bcbc <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 800bcbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop

0800bcc4 <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 800bcc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop

0800bccc <RFW_Init>:
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 800bccc:	f04f 30ff 	mov.w	r0, #4294967295
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop

0800bcd4 <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800bcd4:	4770      	bx	lr
 800bcd6:	bf00      	nop

0800bcd8 <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 800bcd8:	2000      	movs	r0, #0
 800bcda:	4770      	bx	lr

0800bcdc <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
 800bcdc:	2000      	movs	r0, #0
 800bcde:	4770      	bx	lr

0800bce0 <RFW_SetAntSwitch>:
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}

void RFW_SetAntSwitch( uint8_t AntSwitch )
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop

0800bce4 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 800bce4:	f04f 30ff 	mov.w	r0, #4294967295
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop

0800bcec <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 800bcec:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop

0800bcf4 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
 800bcf4:	4770      	bx	lr
 800bcf6:	bf00      	nop

0800bcf8 <RFW_ReceivePayload>:
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}

void RFW_ReceivePayload( void )
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop

0800bcfc <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800bcfc:	4770      	bx	lr
 800bcfe:	bf00      	nop

0800bd00 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800bd00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800bd02:	f7f5 fca3 	bl	800164c <SystemApp_Init>
  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800bd06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SubghzApp_Init();
 800bd0a:	f000 b81f 	b.w	800bd4c <SubghzApp_Init>
 800bd0e:	bf00      	nop

0800bd10 <MX_SubGHz_Phy_Process>:
void MX_SubGHz_Phy_Process(void)
{
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800bd10:	f04f 30ff 	mov.w	r0, #4294967295
 800bd14:	f000 bc16 	b.w	800c544 <UTIL_SEQ_Run>

0800bd18 <OnRxError>:
}

static void OnRxError(void)
{
  /* USER CODE BEGIN OnRxError */
	debug_print("Rx error callback\r\n");
 800bd18:	4801      	ldr	r0, [pc, #4]	@ (800bd20 <OnRxError+0x8>)
 800bd1a:	f7f5 b87b 	b.w	8000e14 <debug_print>
 800bd1e:	bf00      	nop
 800bd20:	0800d3b0 	.word	0x0800d3b0

0800bd24 <OnRxTimeout>:
	debug_print("Rx timeout callback\r\n");
 800bd24:	4801      	ldr	r0, [pc, #4]	@ (800bd2c <OnRxTimeout+0x8>)
 800bd26:	f7f5 b875 	b.w	8000e14 <debug_print>
 800bd2a:	bf00      	nop
 800bd2c:	0800d3c4 	.word	0x0800d3c4

0800bd30 <OnTxTimeout>:
	debug_print("Tx timeout callback\r\n");
 800bd30:	4801      	ldr	r0, [pc, #4]	@ (800bd38 <OnTxTimeout+0x8>)
 800bd32:	f7f5 b86f 	b.w	8000e14 <debug_print>
 800bd36:	bf00      	nop
 800bd38:	0800d3dc 	.word	0x0800d3dc

0800bd3c <OnTxDone>:
	debug_print("Tx done callback\r\n");
 800bd3c:	4801      	ldr	r0, [pc, #4]	@ (800bd44 <OnTxDone+0x8>)
 800bd3e:	f7f5 b869 	b.w	8000e14 <debug_print>
 800bd42:	bf00      	nop
 800bd44:	0800d3f4 	.word	0x0800d3f4

0800bd48 <OnRxDone>:
	decode_print_packet(payload, size, rssi, LoraSnr_FskCfo);
 800bd48:	f7f5 b90c 	b.w	8000f64 <decode_print_packet>

0800bd4c <SubghzApp_Init>:
{
 800bd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  RadioEvents.TxDone = OnTxDone;
 800bd50:	4820      	ldr	r0, [pc, #128]	@ (800bdd4 <SubghzApp_Init+0x88>)
  Radio.Init(&RadioEvents);
 800bd52:	4e21      	ldr	r6, [pc, #132]	@ (800bdd8 <SubghzApp_Init+0x8c>)
  RadioEvents.TxDone = OnTxDone;
 800bd54:	4a21      	ldr	r2, [pc, #132]	@ (800bddc <SubghzApp_Init+0x90>)
  RadioEvents.RxDone = OnRxDone;
 800bd56:	4b22      	ldr	r3, [pc, #136]	@ (800bde0 <SubghzApp_Init+0x94>)
  RadioEvents.TxTimeout = OnTxTimeout;
 800bd58:	4922      	ldr	r1, [pc, #136]	@ (800bde4 <SubghzApp_Init+0x98>)
  RadioEvents.TxDone = OnTxDone;
 800bd5a:	6002      	str	r2, [r0, #0]
  RadioEvents.RxDone = OnRxDone;
 800bd5c:	6083      	str	r3, [r0, #8]
  RadioEvents.RxError = OnRxError;
 800bd5e:	4a22      	ldr	r2, [pc, #136]	@ (800bde8 <SubghzApp_Init+0x9c>)
  RadioEvents.RxTimeout = OnRxTimeout;
 800bd60:	4b22      	ldr	r3, [pc, #136]	@ (800bdec <SubghzApp_Init+0xa0>)
  RadioEvents.TxTimeout = OnTxTimeout;
 800bd62:	6041      	str	r1, [r0, #4]
{
 800bd64:	b08a      	sub	sp, #40	@ 0x28
  RadioEvents.RxError = OnRxError;
 800bd66:	6102      	str	r2, [r0, #16]
  RadioEvents.RxTimeout = OnRxTimeout;
 800bd68:	60c3      	str	r3, [r0, #12]
  Radio.Init(&RadioEvents);
 800bd6a:	6833      	ldr	r3, [r6, #0]
 800bd6c:	4798      	blx	r3
  Radio.SetChannel(RF_FREQUENCY);
 800bd6e:	68f3      	ldr	r3, [r6, #12]
 800bd70:	481f      	ldr	r0, [pc, #124]	@ (800bdf0 <SubghzApp_Init+0xa4>)
 800bd72:	4798      	blx	r3
  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800bd74:	2400      	movs	r4, #0
 800bd76:	2501      	movs	r5, #1
 800bd78:	f04f 0808 	mov.w	r8, #8
 800bd7c:	2707      	movs	r7, #7
 800bd7e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800bd82:	e9cd 4307 	strd	r4, r3, [sp, #28]
 800bd86:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800bd8a:	e9cd 4503 	strd	r4, r5, [sp, #12]
 800bd8e:	f8d6 c01c 	ldr.w	ip, [r6, #28]
 800bd92:	9700      	str	r7, [sp, #0]
 800bd94:	4623      	mov	r3, r4
 800bd96:	4622      	mov	r2, r4
 800bd98:	4628      	mov	r0, r5
 800bd9a:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800bd9e:	210e      	movs	r1, #14
 800bda0:	47e0      	blx	ip
  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800bda2:	2305      	movs	r3, #5
 800bda4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800bda8:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800bdac:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800bdb0:	9403      	str	r4, [sp, #12]
 800bdb2:	9400      	str	r4, [sp, #0]
 800bdb4:	4621      	mov	r1, r4
 800bdb6:	9302      	str	r3, [sp, #8]
 800bdb8:	4628      	mov	r0, r5
 800bdba:	462b      	mov	r3, r5
 800bdbc:	69b4      	ldr	r4, [r6, #24]
 800bdbe:	f8cd 8004 	str.w	r8, [sp, #4]
 800bdc2:	463a      	mov	r2, r7
 800bdc4:	47a0      	blx	r4
  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 800bdc6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800bdc8:	21ff      	movs	r1, #255	@ 0xff
 800bdca:	4628      	mov	r0, r5
}
 800bdcc:	b00a      	add	sp, #40	@ 0x28
 800bdce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 800bdd2:	4718      	bx	r3
 800bdd4:	200005d8 	.word	0x200005d8
 800bdd8:	0800d274 	.word	0x0800d274
 800bddc:	0800bd3d 	.word	0x0800bd3d
 800bde0:	0800bd49 	.word	0x0800bd49
 800bde4:	0800bd31 	.word	0x0800bd31
 800bde8:	0800bd19 	.word	0x0800bd19
 800bdec:	0800bd25 	.word	0x0800bd25
 800bdf0:	339e1c80 	.word	0x339e1c80

0800bdf4 <SubghzApp_SetLoRaConfig>:
{
 800bdf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Radio.SetTxConfig(MODEM_LORA, tx_output_power, 0, LORA_BANDWIDTH,
 800bdf8:	4f19      	ldr	r7, [pc, #100]	@ (800be60 <SubghzApp_SetLoRaConfig+0x6c>)
{
 800bdfa:	b08a      	sub	sp, #40	@ 0x28
	Radio.SetTxConfig(MODEM_LORA, tx_output_power, 0, LORA_BANDWIDTH,
 800bdfc:	2400      	movs	r4, #0
 800bdfe:	2501      	movs	r5, #1
{
 800be00:	460e      	mov	r6, r1
	Radio.SetTxConfig(MODEM_LORA, tx_output_power, 0, LORA_BANDWIDTH,
 800be02:	f04f 0808 	mov.w	r8, #8
 800be06:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800be0a:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800be0e:	e9cd 5404 	strd	r5, r4, [sp, #16]
 800be12:	f8d7 c01c 	ldr.w	ip, [r7, #28]
 800be16:	9308      	str	r3, [sp, #32]
 800be18:	b241      	sxtb	r1, r0
 800be1a:	9403      	str	r4, [sp, #12]
 800be1c:	4623      	mov	r3, r4
 800be1e:	4622      	mov	r2, r4
 800be20:	4628      	mov	r0, r5
 800be22:	e9cd 6500 	strd	r6, r5, [sp]
 800be26:	f8cd 8008 	str.w	r8, [sp, #8]
 800be2a:	47e0      	blx	ip
	Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, spreading_factor,
 800be2c:	2305      	movs	r3, #5
 800be2e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800be32:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800be36:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800be3a:	9403      	str	r4, [sp, #12]
 800be3c:	9400      	str	r4, [sp, #0]
 800be3e:	4621      	mov	r1, r4
 800be40:	9302      	str	r3, [sp, #8]
 800be42:	4628      	mov	r0, r5
 800be44:	462b      	mov	r3, r5
 800be46:	69bc      	ldr	r4, [r7, #24]
 800be48:	f8cd 8004 	str.w	r8, [sp, #4]
 800be4c:	4632      	mov	r2, r6
 800be4e:	47a0      	blx	r4
	Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 800be50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be52:	21ff      	movs	r1, #255	@ 0xff
 800be54:	4628      	mov	r0, r5
}
 800be56:	b00a      	add	sp, #40	@ 0x28
 800be58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 800be5c:	4718      	bx	r3
 800be5e:	bf00      	nop
 800be60:	0800d274 	.word	0x0800d274

0800be64 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800be64:	b530      	push	{r4, r5, lr}
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
  /* USER CODE BEGIN RBI_Init_2 */
  //#warning user to provide its board code or to call his board driver functions
  GPIO_InitTypeDef gpio_init_structure = {0};
 800be66:	2400      	movs	r4, #0
{
 800be68:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef gpio_init_structure = {0};
 800be6a:	e9cd 4404 	strd	r4, r4, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800be6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be72:	9406      	str	r4, [sp, #24]
 800be74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  //Configure the Radio Switch pin
  gpio_init_structure.Pin   = RFIO_SEL_PIN;
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(RFIO_SEL_GPIO_PORT, &gpio_init_structure);
 800be76:	4d0e      	ldr	r5, [pc, #56]	@ (800beb0 <RBI_Init+0x4c>)
 800be78:	f042 0204 	orr.w	r2, r2, #4
 800be7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800be7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be80:	f003 0304 	and.w	r3, r3, #4
 800be84:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Pin   = RFIO_SEL_PIN;
 800be86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800be8a:	2301      	movs	r3, #1
 800be8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(RFIO_SEL_GPIO_PORT, &gpio_init_structure);
 800be90:	a902      	add	r1, sp, #8
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be92:	2303      	movs	r3, #3
  HAL_GPIO_Init(RFIO_SEL_GPIO_PORT, &gpio_init_structure);
 800be94:	4628      	mov	r0, r5
  (void)tmpreg;
 800be96:	9a01      	ldr	r2, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be98:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(RFIO_SEL_GPIO_PORT, &gpio_init_structure);
 800be9a:	f7f9 f8bf 	bl	800501c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RFIO_SEL_GPIO_PORT, RFIO_SEL_PIN, GPIO_PIN_RESET);
 800be9e:	4628      	mov	r0, r5
 800bea0:	4622      	mov	r2, r4
 800bea2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800bea6:	f7f9 fa1b 	bl	80052e0 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800beaa:	4620      	mov	r0, r4
 800beac:	b009      	add	sp, #36	@ 0x24
 800beae:	bd30      	pop	{r4, r5, pc}
 800beb0:	48000800 	.word	0x48000800

0800beb4 <RBI_ConfigRFSwitch>:
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
//#warning user to provide its board code or to call his board driver functions

  // notes from brock : with one switch, only RX or TX => OFF=RX, HP=LP
  // quand RFIO_SEL = 0, RX ; si RFIO_SEL = 1, TX
  switch (Config)
 800beb4:	2801      	cmp	r0, #1
{
 800beb6:	b508      	push	{r3, lr}
  switch (Config)
 800beb8:	d90a      	bls.n	800bed0 <RBI_ConfigRFSwitch+0x1c>
 800beba:	3802      	subs	r0, #2
 800bebc:	2801      	cmp	r0, #1
 800bebe:	d805      	bhi.n	800becc <RBI_ConfigRFSwitch+0x18>
	  break;
	}
	case RBI_SWITCH_RFO_LP:
	{
	  /*Turns On in Tx Low Power the RF Switch */
		  HAL_GPIO_WritePin(RFIO_SEL_GPIO_PORT, RFIO_SEL_PIN, GPIO_PIN_SET);
 800bec0:	4807      	ldr	r0, [pc, #28]	@ (800bee0 <RBI_ConfigRFSwitch+0x2c>)
 800bec2:	2201      	movs	r2, #1
 800bec4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800bec8:	f7f9 fa0a 	bl	80052e0 <HAL_GPIO_WritePin>
	  break;
  }
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800becc:	2000      	movs	r0, #0
 800bece:	bd08      	pop	{r3, pc}
		  HAL_GPIO_WritePin(RFIO_SEL_GPIO_PORT, RFIO_SEL_PIN, GPIO_PIN_RESET);
 800bed0:	4803      	ldr	r0, [pc, #12]	@ (800bee0 <RBI_ConfigRFSwitch+0x2c>)
 800bed2:	2200      	movs	r2, #0
 800bed4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800bed8:	f7f9 fa02 	bl	80052e0 <HAL_GPIO_WritePin>
}
 800bedc:	2000      	movs	r0, #0
 800bede:	bd08      	pop	{r3, pc}
 800bee0:	48000800 	.word	0x48000800

0800bee4 <RBI_GetTxConfig>:
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
//#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800bee4:	2001      	movs	r0, #1
 800bee6:	4770      	bx	lr

0800bee8 <RBI_IsTCXO>:
  /* USER CODE BEGIN RBI_IsTCXO_2 */
//#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800bee8:	2000      	movs	r0, #0
 800beea:	4770      	bx	lr

0800beec <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
 800beec:	2001      	movs	r0, #1
 800beee:	4770      	bx	lr

0800bef0 <RBI_GetRFOMaxPowerConfig>:
  int32_t ret = 0;
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
//#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
  {
    ret = 15; /*dBm*/
 800bef0:	2800      	cmp	r0, #0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800bef2:	bf14      	ite	ne
 800bef4:	2016      	movne	r0, #22
 800bef6:	200f      	moveq	r0, #15
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop

0800befc <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800befc:	4902      	ldr	r1, [pc, #8]	@ (800bf08 <UTIL_LPM_Init+0xc>)
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800befe:	4a03      	ldr	r2, [pc, #12]	@ (800bf0c <UTIL_LPM_Init+0x10>)
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800bf00:	2300      	movs	r3, #0
 800bf02:	600b      	str	r3, [r1, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800bf04:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800bf06:	4770      	bx	lr
 800bf08:	200005f8 	.word	0x200005f8
 800bf0c:	200005f4 	.word	0x200005f4

0800bf10 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf10:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bf14:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 800bf16:	b141      	cbz	r1, 800bf2a <UTIL_LPM_SetStopMode+0x1a>
 800bf18:	2901      	cmp	r1, #1
 800bf1a:	d103      	bne.n	800bf24 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800bf1c:	4907      	ldr	r1, [pc, #28]	@ (800bf3c <UTIL_LPM_SetStopMode+0x2c>)
 800bf1e:	680a      	ldr	r2, [r1, #0]
 800bf20:	4302      	orrs	r2, r0
 800bf22:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf24:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800bf28:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 800bf2a:	4904      	ldr	r1, [pc, #16]	@ (800bf3c <UTIL_LPM_SetStopMode+0x2c>)
 800bf2c:	680a      	ldr	r2, [r1, #0]
 800bf2e:	ea22 0200 	bic.w	r2, r2, r0
 800bf32:	600a      	str	r2, [r1, #0]
 800bf34:	f383 8810 	msr	PRIMASK, r3
}
 800bf38:	4770      	bx	lr
 800bf3a:	bf00      	nop
 800bf3c:	200005f8 	.word	0x200005f8

0800bf40 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf40:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bf44:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800bf46:	b141      	cbz	r1, 800bf5a <UTIL_LPM_SetOffMode+0x1a>
 800bf48:	2901      	cmp	r1, #1
 800bf4a:	d103      	bne.n	800bf54 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800bf4c:	4907      	ldr	r1, [pc, #28]	@ (800bf6c <UTIL_LPM_SetOffMode+0x2c>)
 800bf4e:	680a      	ldr	r2, [r1, #0]
 800bf50:	4302      	orrs	r2, r0
 800bf52:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf54:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800bf58:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 800bf5a:	4904      	ldr	r1, [pc, #16]	@ (800bf6c <UTIL_LPM_SetOffMode+0x2c>)
 800bf5c:	680a      	ldr	r2, [r1, #0]
 800bf5e:	ea22 0200 	bic.w	r2, r2, r0
 800bf62:	600a      	str	r2, [r1, #0]
 800bf64:	f383 8810 	msr	PRIMASK, r3
}
 800bf68:	4770      	bx	lr
 800bf6a:	bf00      	nop
 800bf6c:	200005f4 	.word	0x200005f4

0800bf70 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800bf70:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf72:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bf76:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800bf78:	4b0e      	ldr	r3, [pc, #56]	@ (800bfb4 <UTIL_LPM_EnterLowPower+0x44>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	b13b      	cbz	r3, 800bf8e <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800bf7e:	4d0e      	ldr	r5, [pc, #56]	@ (800bfb8 <UTIL_LPM_EnterLowPower+0x48>)
 800bf80:	682b      	ldr	r3, [r5, #0]
 800bf82:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800bf84:	686b      	ldr	r3, [r5, #4]
 800bf86:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf88:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800bf8c:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800bf8e:	4b0b      	ldr	r3, [pc, #44]	@ (800bfbc <UTIL_LPM_EnterLowPower+0x4c>)
        UTIL_PowerDriver.EnterStopMode( );
 800bf90:	4d09      	ldr	r5, [pc, #36]	@ (800bfb8 <UTIL_LPM_EnterLowPower+0x48>)
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	b133      	cbz	r3, 800bfa4 <UTIL_LPM_EnterLowPower+0x34>
        UTIL_PowerDriver.EnterStopMode( );
 800bf96:	68ab      	ldr	r3, [r5, #8]
 800bf98:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800bf9a:	68eb      	ldr	r3, [r5, #12]
 800bf9c:	4798      	blx	r3
 800bf9e:	f384 8810 	msr	PRIMASK, r4
}
 800bfa2:	bd38      	pop	{r3, r4, r5, pc}
      UTIL_PowerDriver.EnterOffMode( );
 800bfa4:	692b      	ldr	r3, [r5, #16]
 800bfa6:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800bfa8:	696b      	ldr	r3, [r5, #20]
 800bfaa:	4798      	blx	r3
 800bfac:	f384 8810 	msr	PRIMASK, r4
}
 800bfb0:	bd38      	pop	{r3, r4, r5, pc}
 800bfb2:	bf00      	nop
 800bfb4:	200005f8 	.word	0x200005f8
 800bfb8:	0800d090 	.word	0x0800d090
 800bfbc:	200005f4 	.word	0x200005f4

0800bfc0 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 800bfc0:	2a00      	cmp	r2, #0
 800bfc2:	d049      	beq.n	800c058 <UTIL_MEM_cpy_8+0x98>
 800bfc4:	f102 3cff 	add.w	ip, r2, #4294967295
 800bfc8:	fa1f fc8c 	uxth.w	ip, ip
 800bfcc:	f1bc 0f05 	cmp.w	ip, #5
 800bfd0:	d935      	bls.n	800c03e <UTIL_MEM_cpy_8+0x7e>
 800bfd2:	1c4b      	adds	r3, r1, #1
{
 800bfd4:	b530      	push	{r4, r5, lr}
 800bfd6:	1ac4      	subs	r4, r0, r3
 800bfd8:	2c02      	cmp	r4, #2
 800bfda:	d80c      	bhi.n	800bff6 <UTIL_MEM_cpy_8+0x36>
 800bfdc:	f10c 0c01 	add.w	ip, ip, #1
 800bfe0:	3801      	subs	r0, #1
 800bfe2:	4461      	add	r1, ip
 800bfe4:	e000      	b.n	800bfe8 <UTIL_MEM_cpy_8+0x28>
 800bfe6:	3301      	adds	r3, #1
    {
        *dst8++ = *src8++;
 800bfe8:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800bfec:	f800 2f01 	strb.w	r2, [r0, #1]!
  while( size-- )
 800bff0:	4299      	cmp	r1, r3
 800bff2:	d1f8      	bne.n	800bfe6 <UTIL_MEM_cpy_8+0x26>
    }
}
 800bff4:	bd30      	pop	{r4, r5, pc}
 800bff6:	0895      	lsrs	r5, r2, #2
 800bff8:	460b      	mov	r3, r1
 800bffa:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 800bffe:	4686      	mov	lr, r0
        *dst8++ = *src8++;
 800c000:	f853 4b04 	ldr.w	r4, [r3], #4
 800c004:	f84e 4b04 	str.w	r4, [lr], #4
  while( size-- )
 800c008:	42ab      	cmp	r3, r5
 800c00a:	d1f9      	bne.n	800c000 <UTIL_MEM_cpy_8+0x40>
 800c00c:	f022 0403 	bic.w	r4, r2, #3
 800c010:	ebac 0c04 	sub.w	ip, ip, r4
 800c014:	0792      	lsls	r2, r2, #30
 800c016:	fa1f f38c 	uxth.w	r3, ip
 800c01a:	b2a5      	uxth	r5, r4
 800c01c:	eb00 0c04 	add.w	ip, r0, r4
 800c020:	440c      	add	r4, r1
 800c022:	d0e7      	beq.n	800bff4 <UTIL_MEM_cpy_8+0x34>
        *dst8++ = *src8++;
 800c024:	5d4a      	ldrb	r2, [r1, r5]
 800c026:	5542      	strb	r2, [r0, r5]
  while( size-- )
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d0e3      	beq.n	800bff4 <UTIL_MEM_cpy_8+0x34>
        *dst8++ = *src8++;
 800c02c:	7862      	ldrb	r2, [r4, #1]
 800c02e:	f88c 2001 	strb.w	r2, [ip, #1]
  while( size-- )
 800c032:	2b01      	cmp	r3, #1
 800c034:	d0de      	beq.n	800bff4 <UTIL_MEM_cpy_8+0x34>
        *dst8++ = *src8++;
 800c036:	78a3      	ldrb	r3, [r4, #2]
 800c038:	f88c 3002 	strb.w	r3, [ip, #2]
}
 800c03c:	bd30      	pop	{r4, r5, pc}
 800c03e:	f10c 0c01 	add.w	ip, ip, #1
 800c042:	1c4b      	adds	r3, r1, #1
 800c044:	3801      	subs	r0, #1
 800c046:	4461      	add	r1, ip
 800c048:	e000      	b.n	800c04c <UTIL_MEM_cpy_8+0x8c>
 800c04a:	3301      	adds	r3, #1
        *dst8++ = *src8++;
 800c04c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800c050:	f800 2f01 	strb.w	r2, [r0, #1]!
  while( size-- )
 800c054:	4299      	cmp	r1, r3
 800c056:	d1f8      	bne.n	800c04a <UTIL_MEM_cpy_8+0x8a>
 800c058:	4770      	bx	lr
 800c05a:	bf00      	nop

0800c05c <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 800c05c:	b10a      	cbz	r2, 800c062 <UTIL_MEM_set_8+0x6>
  {
    *dst8++ = value;
 800c05e:	f000 bec3 	b.w	800cde8 <memset>
  }
}
 800c062:	4770      	bx	lr

0800c064 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800c064:	b530      	push	{r4, r5, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c066:	4c11      	ldr	r4, [pc, #68]	@ (800c0ac <SysTimeGet+0x48>)
{
 800c068:	b083      	sub	sp, #12
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800c06a:	2300      	movs	r3, #0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c06c:	6922      	ldr	r2, [r4, #16]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800c06e:	9300      	str	r3, [sp, #0]
 800c070:	f8ad 3004 	strh.w	r3, [sp, #4]
{
 800c074:	4605      	mov	r5, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c076:	a801      	add	r0, sp, #4
 800c078:	4790      	blx	r2

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800c07a:	68e3      	ldr	r3, [r4, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c07c:	9000      	str	r0, [sp, #0]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800c07e:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800c080:	6863      	ldr	r3, [r4, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800c082:	4604      	mov	r4, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800c084:	4798      	blx	r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800c086:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  c.Seconds = a.Seconds + b.Seconds;
 800c08a:	9900      	ldr	r1, [sp, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800c08c:	4423      	add	r3, r4
 800c08e:	b21a      	sxth	r2, r3
  if( c.SubSeconds >= 1000 )
 800c090:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
  c.Seconds = a.Seconds + b.Seconds;
 800c094:	4408      	add	r0, r1
  if( c.SubSeconds >= 1000 )
 800c096:	db04      	blt.n	800c0a2 <SysTimeGet+0x3e>
 800c098:	b29b      	uxth	r3, r3
    c.SubSeconds -= 1000;
 800c09a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
    c.Seconds++;
 800c09e:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 800c0a0:	b21a      	sxth	r2, r3

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 800c0a2:	6028      	str	r0, [r5, #0]
}
 800c0a4:	4628      	mov	r0, r5
  return sysTime;
 800c0a6:	80aa      	strh	r2, [r5, #4]
}
 800c0a8:	b003      	add	sp, #12
 800c0aa:	bd30      	pop	{r4, r5, pc}
 800c0ac:	0800d154 	.word	0x0800d154

0800c0b0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800c0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b4:	b099      	sub	sp, #100	@ 0x64
 800c0b6:	4693      	mov	fp, r2

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800c0b8:	1e0a      	subs	r2, r1, #0
 800c0ba:	9201      	str	r2, [sp, #4]
 800c0bc:	f340 81d3 	ble.w	800c466 <tiny_vsnprintf_like+0x3b6>
 800c0c0:	4681      	mov	r9, r0
 800c0c2:	9300      	str	r3, [sp, #0]
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800c0c4:	4604      	mov	r4, r0
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800c0c6:	f04f 0a20 	mov.w	sl, #32
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800c0ca:	f89b 3000 	ldrb.w	r3, [fp]
  {
    CHECK_STR_SIZE(buf, str, size);
 800c0ce:	eba4 0009 	sub.w	r0, r4, r9
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800c0d2:	b923      	cbnz	r3, 800c0de <tiny_vsnprintf_like+0x2e>
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	7023      	strb	r3, [r4, #0]
  return str - buf;
}
 800c0d8:	b019      	add	sp, #100	@ 0x64
 800c0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    CHECK_STR_SIZE(buf, str, size);
 800c0de:	9a01      	ldr	r2, [sp, #4]
 800c0e0:	1e57      	subs	r7, r2, #1
 800c0e2:	4287      	cmp	r7, r0
 800c0e4:	ddf6      	ble.n	800c0d4 <tiny_vsnprintf_like+0x24>
    if (*fmt != '%')
 800c0e6:	2b25      	cmp	r3, #37	@ 0x25
    fmt++;
 800c0e8:	f10b 0601 	add.w	r6, fp, #1
    if (*fmt != '%')
 800c0ec:	d142      	bne.n	800c174 <tiny_vsnprintf_like+0xc4>
    if (*fmt == '0')
 800c0ee:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800c0f2:	2b30      	cmp	r3, #48	@ 0x30
 800c0f4:	d042      	beq.n	800c17c <tiny_vsnprintf_like+0xcc>
    if (is_digit(*fmt))
 800c0f6:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800c0fa:	2a09      	cmp	r2, #9
    flags = 0;
 800c0fc:	bf98      	it	ls
 800c0fe:	f04f 0e00 	movls.w	lr, #0
    if (is_digit(*fmt))
 800c102:	d93d      	bls.n	800c180 <tiny_vsnprintf_like+0xd0>
    switch (*fmt)
 800c104:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800c108:	2a20      	cmp	r2, #32
 800c10a:	d822      	bhi.n	800c152 <tiny_vsnprintf_like+0xa2>
 800c10c:	e8df f012 	tbh	[pc, r2, lsl #1]
 800c110:	0021013d 	.word	0x0021013d
 800c114:	00210021 	.word	0x00210021
 800c118:	00210021 	.word	0x00210021
 800c11c:	00210021 	.word	0x00210021
 800c120:	00210021 	.word	0x00210021
 800c124:	01ed0021 	.word	0x01ed0021
 800c128:	00210090 	.word	0x00210090
 800c12c:	00210021 	.word	0x00210021
 800c130:	00900021 	.word	0x00900021
 800c134:	00210021 	.word	0x00210021
 800c138:	00210021 	.word	0x00210021
 800c13c:	00210021 	.word	0x00210021
 800c140:	00210021 	.word	0x00210021
 800c144:	01f50021 	.word	0x01f50021
 800c148:	01ef0021 	.word	0x01ef0021
 800c14c:	00210021 	.word	0x00210021
 800c150:	00e6      	.short	0x00e6
 800c152:	f04f 0e00 	mov.w	lr, #0
 800c156:	f04f 35ff 	mov.w	r5, #4294967295
        if (*fmt != '%') *str++ = '%';
 800c15a:	2b25      	cmp	r3, #37	@ 0x25
 800c15c:	f000 8177 	beq.w	800c44e <tiny_vsnprintf_like+0x39e>
 800c160:	2325      	movs	r3, #37	@ 0x25
 800c162:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 800c166:	eba4 0009 	sub.w	r0, r4, r9
 800c16a:	4287      	cmp	r7, r0
 800c16c:	f300 81d0 	bgt.w	800c510 <tiny_vsnprintf_like+0x460>
 800c170:	210a      	movs	r1, #10
 800c172:	e0b8      	b.n	800c2e6 <tiny_vsnprintf_like+0x236>
      *str++ = *fmt;
 800c174:	f804 3b01 	strb.w	r3, [r4], #1
      continue;
 800c178:	46b3      	mov	fp, r6
 800c17a:	e7a6      	b.n	800c0ca <tiny_vsnprintf_like+0x1a>
      flags |= ZEROPAD;
 800c17c:	f04f 0e01 	mov.w	lr, #1
  int i = 0;
 800c180:	2500      	movs	r5, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800c182:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800c186:	eb03 0245 	add.w	r2, r3, r5, lsl #1
 800c18a:	46b3      	mov	fp, r6
 800c18c:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800c190:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800c194:	2909      	cmp	r1, #9
 800c196:	f1a2 0530 	sub.w	r5, r2, #48	@ 0x30
 800c19a:	d9f2      	bls.n	800c182 <tiny_vsnprintf_like+0xd2>
    switch (*fmt)
 800c19c:	f1a3 0158 	sub.w	r1, r3, #88	@ 0x58
 800c1a0:	2920      	cmp	r1, #32
 800c1a2:	d8da      	bhi.n	800c15a <tiny_vsnprintf_like+0xaa>
 800c1a4:	f20f 0c04 	addw	ip, pc, #4
 800c1a8:	f85c f021 	ldr.w	pc, [ip, r1, lsl #2]
 800c1ac:	0800c281 	.word	0x0800c281
 800c1b0:	0800c15b 	.word	0x0800c15b
 800c1b4:	0800c15b 	.word	0x0800c15b
 800c1b8:	0800c15b 	.word	0x0800c15b
 800c1bc:	0800c15b 	.word	0x0800c15b
 800c1c0:	0800c15b 	.word	0x0800c15b
 800c1c4:	0800c15b 	.word	0x0800c15b
 800c1c8:	0800c15b 	.word	0x0800c15b
 800c1cc:	0800c15b 	.word	0x0800c15b
 800c1d0:	0800c15b 	.word	0x0800c15b
 800c1d4:	0800c15b 	.word	0x0800c15b
 800c1d8:	0800c2f3 	.word	0x0800c2f3
 800c1dc:	0800c239 	.word	0x0800c239
 800c1e0:	0800c15b 	.word	0x0800c15b
 800c1e4:	0800c15b 	.word	0x0800c15b
 800c1e8:	0800c15b 	.word	0x0800c15b
 800c1ec:	0800c15b 	.word	0x0800c15b
 800c1f0:	0800c239 	.word	0x0800c239
 800c1f4:	0800c15b 	.word	0x0800c15b
 800c1f8:	0800c15b 	.word	0x0800c15b
 800c1fc:	0800c15b 	.word	0x0800c15b
 800c200:	0800c15b 	.word	0x0800c15b
 800c204:	0800c15b 	.word	0x0800c15b
 800c208:	0800c15b 	.word	0x0800c15b
 800c20c:	0800c15b 	.word	0x0800c15b
 800c210:	0800c15b 	.word	0x0800c15b
 800c214:	0800c15b 	.word	0x0800c15b
 800c218:	0800c31d 	.word	0x0800c31d
 800c21c:	0800c15b 	.word	0x0800c15b
 800c220:	0800c171 	.word	0x0800c171
 800c224:	0800c15b 	.word	0x0800c15b
 800c228:	0800c15b 	.word	0x0800c15b
 800c22c:	0800c2e5 	.word	0x0800c2e5
 800c230:	f04f 0e00 	mov.w	lr, #0
 800c234:	f04f 35ff 	mov.w	r5, #4294967295
      num = va_arg(args, int);
 800c238:	9a00      	ldr	r2, [sp, #0]
 800c23a:	f852 3b04 	ldr.w	r3, [r2], #4
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800c23e:	1a38      	subs	r0, r7, r0
 800c240:	210a      	movs	r1, #10
    else if (flags & SIGN)
 800c242:	2702      	movs	r7, #2
  char *dig = lower_digits;
 800c244:	f8df 82e8 	ldr.w	r8, [pc, #744]	@ 800c530 <tiny_vsnprintf_like+0x480>
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800c248:	f106 0b01 	add.w	fp, r6, #1
  c = (type & ZEROPAD) ? '0' : ' ';
 800c24c:	f1be 0f00 	cmp.w	lr, #0
 800c250:	f040 80cb 	bne.w	800c3ea <tiny_vsnprintf_like+0x33a>
 800c254:	2620      	movs	r6, #32
  if (type & SIGN)
 800c256:	2f00      	cmp	r7, #0
 800c258:	f000 80a2 	beq.w	800c3a0 <tiny_vsnprintf_like+0x2f0>
    if (num < 0)
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	f2c0 80ce 	blt.w	800c3fe <tiny_vsnprintf_like+0x34e>
  if (num == 0)
 800c262:	f040 80d3 	bne.w	800c40c <tiny_vsnprintf_like+0x35c>
    tmp[i++] = '0';
 800c266:	2330      	movs	r3, #48	@ 0x30
  size -= precision;
 800c268:	3d01      	subs	r5, #1
    tmp[i++] = '0';
 800c26a:	f88d 301c 	strb.w	r3, [sp, #28]
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800c26e:	9200      	str	r2, [sp, #0]
 800c270:	f1be 0f00 	cmp.w	lr, #0
 800c274:	f040 8122 	bne.w	800c4bc <tiny_vsnprintf_like+0x40c>
 800c278:	46f4      	mov	ip, lr
 800c27a:	9402      	str	r4, [sp, #8]
    tmp[i++] = '0';
 800c27c:	2201      	movs	r2, #1
 800c27e:	e09b      	b.n	800c3b8 <tiny_vsnprintf_like+0x308>
      num = va_arg(args, unsigned int);
 800c280:	9a00      	ldr	r2, [sp, #0]
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800c282:	1a38      	subs	r0, r7, r0
 800c284:	f852 3b04 	ldr.w	r3, [r2], #4
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800c288:	f10b 0b02 	add.w	fp, fp, #2
  c = (type & ZEROPAD) ? '0' : ' ';
 800c28c:	f1be 0f00 	cmp.w	lr, #0
 800c290:	f000 8083 	beq.w	800c39a <tiny_vsnprintf_like+0x2ea>
  if (type & UPPERCASE)  dig = upper_digits;
 800c294:	f8df 829c 	ldr.w	r8, [pc, #668]	@ 800c534 <tiny_vsnprintf_like+0x484>
  c = (type & ZEROPAD) ? '0' : ' ';
 800c298:	2110      	movs	r1, #16
  if (num == 0)
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	f040 8117 	bne.w	800c4ce <tiny_vsnprintf_like+0x41e>
    tmp[i++] = '0';
 800c2a0:	2630      	movs	r6, #48	@ 0x30
  size -= precision;
 800c2a2:	9200      	str	r2, [sp, #0]
 800c2a4:	3d01      	subs	r5, #1
    tmp[i++] = '0';
 800c2a6:	f88d 601c 	strb.w	r6, [sp, #28]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	4425      	add	r5, r4
 800c2ae:	e004      	b.n	800c2ba <tiny_vsnprintf_like+0x20a>
  while (size-- > 0) ASSIGN_STR(c);
 800c2b0:	3801      	subs	r0, #1
 800c2b2:	f804 6b01 	strb.w	r6, [r4], #1
 800c2b6:	f43f af08 	beq.w	800c0ca <tiny_vsnprintf_like+0x1a>
 800c2ba:	1b2b      	subs	r3, r5, r4
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	dcf7      	bgt.n	800c2b0 <tiny_vsnprintf_like+0x200>
 800c2c0:	a907      	add	r1, sp, #28
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800c2c2:	4420      	add	r0, r4
 800c2c4:	440a      	add	r2, r1
 800c2c6:	e006      	b.n	800c2d6 <tiny_vsnprintf_like+0x226>
 800c2c8:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 800c2cc:	f804 3b01 	strb.w	r3, [r4], #1
 800c2d0:	4284      	cmp	r4, r0
 800c2d2:	f43f aefa 	beq.w	800c0ca <tiny_vsnprintf_like+0x1a>
 800c2d6:	428a      	cmp	r2, r1
 800c2d8:	d1f6      	bne.n	800c2c8 <tiny_vsnprintf_like+0x218>
 800c2da:	e6f6      	b.n	800c0ca <tiny_vsnprintf_like+0x1a>
    switch (*fmt)
 800c2dc:	f04f 0e00 	mov.w	lr, #0
 800c2e0:	f04f 35ff 	mov.w	r5, #4294967295
 800c2e4:	2110      	movs	r1, #16
      num = va_arg(args, unsigned int);
 800c2e6:	9a00      	ldr	r2, [sp, #0]
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800c2e8:	1a38      	subs	r0, r7, r0
 800c2ea:	f852 3b04 	ldr.w	r3, [r2], #4
 800c2ee:	2700      	movs	r7, #0
 800c2f0:	e7a8      	b.n	800c244 <tiny_vsnprintf_like+0x194>
          while (--field_width > 0) *str++ = ' ';
 800c2f2:	2a31      	cmp	r2, #49	@ 0x31
 800c2f4:	f340 80f9 	ble.w	800c4ea <tiny_vsnprintf_like+0x43a>
 800c2f8:	f1a2 0531 	sub.w	r5, r2, #49	@ 0x31
 800c2fc:	462a      	mov	r2, r5
 800c2fe:	2120      	movs	r1, #32
 800c300:	4620      	mov	r0, r4
 800c302:	f000 fd71 	bl	800cde8 <memset>
 800c306:	1962      	adds	r2, r4, r5
        *str++ = (unsigned char) va_arg(args, int);
 800c308:	9b00      	ldr	r3, [sp, #0]
 800c30a:	4614      	mov	r4, r2
 800c30c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c310:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800c314:	f106 0b01 	add.w	fp, r6, #1
        *str++ = (unsigned char) va_arg(args, int);
 800c318:	9300      	str	r3, [sp, #0]
        continue;
 800c31a:	e6d6      	b.n	800c0ca <tiny_vsnprintf_like+0x1a>
        s = va_arg(args, char *);
 800c31c:	9f00      	ldr	r7, [sp, #0]
 800c31e:	f857 8b04 	ldr.w	r8, [r7], #4
          while (len < field_width--) *str++ = ' ';
 800c322:	f1a2 0b31 	sub.w	fp, r2, #49	@ 0x31
        if (!s) s = "<NULL>";
 800c326:	f1b8 0f00 	cmp.w	r8, #0
 800c32a:	f000 80d8 	beq.w	800c4de <tiny_vsnprintf_like+0x42e>
        len = strlen(s);
 800c32e:	4640      	mov	r0, r8
 800c330:	f7f3 ff22 	bl	8000178 <strlen>
          while (len < field_width--) *str++ = ' ';
 800c334:	42a8      	cmp	r0, r5
        len = strlen(s);
 800c336:	4603      	mov	r3, r0
          while (len < field_width--) *str++ = ' ';
 800c338:	da0c      	bge.n	800c354 <tiny_vsnprintf_like+0x2a4>
 800c33a:	f10b 0201 	add.w	r2, fp, #1
 800c33e:	1ad2      	subs	r2, r2, r3
 800c340:	455b      	cmp	r3, fp
 800c342:	bfc8      	it	gt
 800c344:	2201      	movgt	r2, #1
 800c346:	4620      	mov	r0, r4
 800c348:	2120      	movs	r1, #32
 800c34a:	9300      	str	r3, [sp, #0]
 800c34c:	4414      	add	r4, r2
 800c34e:	f000 fd4b 	bl	800cde8 <memset>
 800c352:	9b00      	ldr	r3, [sp, #0]
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800c354:	f106 0b01 	add.w	fp, r6, #1
        for (i = 0; i < len; ++i) *str++ = *s++;
 800c358:	2b00      	cmp	r3, #0
 800c35a:	f000 80de 	beq.w	800c51a <tiny_vsnprintf_like+0x46a>
 800c35e:	1e5a      	subs	r2, r3, #1
 800c360:	2a05      	cmp	r2, #5
 800c362:	4618      	mov	r0, r3
 800c364:	f108 0201 	add.w	r2, r8, #1
 800c368:	d902      	bls.n	800c370 <tiny_vsnprintf_like+0x2c0>
 800c36a:	1aa1      	subs	r1, r4, r2
 800c36c:	2902      	cmp	r1, #2
 800c36e:	d87e      	bhi.n	800c46e <tiny_vsnprintf_like+0x3be>
 800c370:	4480      	add	r8, r0
 800c372:	1e63      	subs	r3, r4, #1
 800c374:	e000      	b.n	800c378 <tiny_vsnprintf_like+0x2c8>
 800c376:	3201      	adds	r2, #1
 800c378:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800c37c:	f803 1f01 	strb.w	r1, [r3, #1]!
 800c380:	4590      	cmp	r8, r2
 800c382:	d1f8      	bne.n	800c376 <tiny_vsnprintf_like+0x2c6>
 800c384:	4404      	add	r4, r0
 800c386:	9700      	str	r7, [sp, #0]
 800c388:	e69f      	b.n	800c0ca <tiny_vsnprintf_like+0x1a>
      num = va_arg(args, unsigned int);
 800c38a:	9a00      	ldr	r2, [sp, #0]
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800c38c:	f852 3b04 	ldr.w	r3, [r2], #4
 800c390:	1a38      	subs	r0, r7, r0
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800c392:	f10b 0b02 	add.w	fp, fp, #2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800c396:	f04f 35ff 	mov.w	r5, #4294967295
  if (type & UPPERCASE)  dig = upper_digits;
 800c39a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c534 <tiny_vsnprintf_like+0x484>
 800c39e:	2110      	movs	r1, #16
  if (num == 0)
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	f040 808d 	bne.w	800c4c0 <tiny_vsnprintf_like+0x410>
  size -= precision;
 800c3a6:	469c      	mov	ip, r3
    tmp[i++] = '0';
 800c3a8:	2330      	movs	r3, #48	@ 0x30
  size -= precision;
 800c3aa:	9200      	str	r2, [sp, #0]
 800c3ac:	3d01      	subs	r5, #1
    tmp[i++] = '0';
 800c3ae:	f88d 301c 	strb.w	r3, [sp, #28]
  size -= precision;
 800c3b2:	9402      	str	r4, [sp, #8]
  c = (type & ZEROPAD) ? '0' : ' ';
 800c3b4:	2620      	movs	r6, #32
    tmp[i++] = '0';
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	1961      	adds	r1, r4, r5
 800c3ba:	e004      	b.n	800c3c6 <tiny_vsnprintf_like+0x316>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800c3bc:	3801      	subs	r0, #1
 800c3be:	f804 ab01 	strb.w	sl, [r4], #1
 800c3c2:	f43f ae82 	beq.w	800c0ca <tiny_vsnprintf_like+0x1a>
 800c3c6:	1b0b      	subs	r3, r1, r4
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	dcf7      	bgt.n	800c3bc <tiny_vsnprintf_like+0x30c>
 800c3cc:	9b02      	ldr	r3, [sp, #8]
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	442b      	add	r3, r5
 800c3d2:	1b1d      	subs	r5, r3, r4
  if (sign) ASSIGN_STR(sign);
 800c3d4:	f1bc 0f00 	cmp.w	ip, #0
 800c3d8:	f43f af68 	beq.w	800c2ac <tiny_vsnprintf_like+0x1fc>
 800c3dc:	232d      	movs	r3, #45	@ 0x2d
 800c3de:	3801      	subs	r0, #1
 800c3e0:	f804 3b01 	strb.w	r3, [r4], #1
 800c3e4:	f47f af62 	bne.w	800c2ac <tiny_vsnprintf_like+0x1fc>
 800c3e8:	e66f      	b.n	800c0ca <tiny_vsnprintf_like+0x1a>
  if (type & SIGN)
 800c3ea:	2f00      	cmp	r7, #0
 800c3ec:	f43f af55 	beq.w	800c29a <tiny_vsnprintf_like+0x1ea>
    if (num < 0)
 800c3f0:	2b00      	cmp	r3, #0
  if (type & SIGN)
 800c3f2:	f04f 0e01 	mov.w	lr, #1
  c = (type & ZEROPAD) ? '0' : ' ';
 800c3f6:	f04f 0630 	mov.w	r6, #48	@ 0x30
    if (num < 0)
 800c3fa:	f6bf af32 	bge.w	800c262 <tiny_vsnprintf_like+0x1b2>
      num = -num;
 800c3fe:	425b      	negs	r3, r3
      size--;
 800c400:	3d01      	subs	r5, #1
 800c402:	9200      	str	r2, [sp, #0]
 800c404:	9402      	str	r4, [sp, #8]
      sign = '-';
 800c406:	f04f 0c2d 	mov.w	ip, #45	@ 0x2d
 800c40a:	e003      	b.n	800c414 <tiny_vsnprintf_like+0x364>
 800c40c:	9200      	str	r2, [sp, #0]
 800c40e:	9402      	str	r4, [sp, #8]
 800c410:	f04f 0c00 	mov.w	ip, #0
  i = 0;
 800c414:	e9cd c403 	strd	ip, r4, [sp, #12]
 800c418:	af07      	add	r7, sp, #28
 800c41a:	2200      	movs	r2, #0
 800c41c:	f8cd e014 	str.w	lr, [sp, #20]
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800c420:	fbb3 f4f1 	udiv	r4, r3, r1
 800c424:	fb01 3e14 	mls	lr, r1, r4, r3
 800c428:	469c      	mov	ip, r3
    while (num != 0)
 800c42a:	458c      	cmp	ip, r1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800c42c:	f818 300e 	ldrb.w	r3, [r8, lr]
 800c430:	f807 3b01 	strb.w	r3, [r7], #1
 800c434:	f102 0201 	add.w	r2, r2, #1
      num = ((unsigned long) num) / (unsigned) base;
 800c438:	4623      	mov	r3, r4
    while (num != 0)
 800c43a:	d2f1      	bcs.n	800c420 <tiny_vsnprintf_like+0x370>
  size -= precision;
 800c43c:	f8dd e014 	ldr.w	lr, [sp, #20]
 800c440:	e9dd c403 	ldrd	ip, r4, [sp, #12]
 800c444:	1aad      	subs	r5, r5, r2
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800c446:	f1be 0f00 	cmp.w	lr, #0
 800c44a:	d1c3      	bne.n	800c3d4 <tiny_vsnprintf_like+0x324>
 800c44c:	e7b4      	b.n	800c3b8 <tiny_vsnprintf_like+0x308>
          *str++ = *fmt;
 800c44e:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 800c452:	eba4 0009 	sub.w	r0, r4, r9
 800c456:	4287      	cmp	r7, r0
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800c458:	bfc8      	it	gt
 800c45a:	f106 0b01 	addgt.w	fp, r6, #1
        CHECK_STR_SIZE(buf, str, size);
 800c45e:	f73f ae34 	bgt.w	800c0ca <tiny_vsnprintf_like+0x1a>
 800c462:	210a      	movs	r1, #10
 800c464:	e73f      	b.n	800c2e6 <tiny_vsnprintf_like+0x236>
    return 0;
 800c466:	2000      	movs	r0, #0
}
 800c468:	b019      	add	sp, #100	@ 0x64
 800c46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c46e:	f023 0603 	bic.w	r6, r3, #3
 800c472:	4426      	add	r6, r4
 800c474:	4622      	mov	r2, r4
 800c476:	4641      	mov	r1, r8
        for (i = 0; i < len; ++i) *str++ = *s++;
 800c478:	f851 5b04 	ldr.w	r5, [r1], #4
 800c47c:	f842 5b04 	str.w	r5, [r2], #4
 800c480:	42b2      	cmp	r2, r6
 800c482:	d1f9      	bne.n	800c478 <tiny_vsnprintf_like+0x3c8>
 800c484:	0799      	lsls	r1, r3, #30
 800c486:	f023 0203 	bic.w	r2, r3, #3
 800c48a:	f43f af7b 	beq.w	800c384 <tiny_vsnprintf_like+0x2d4>
 800c48e:	f818 1002 	ldrb.w	r1, [r8, r2]
 800c492:	54a1      	strb	r1, [r4, r2]
 800c494:	1c51      	adds	r1, r2, #1
 800c496:	428b      	cmp	r3, r1
 800c498:	4490      	add	r8, r2
 800c49a:	eb04 0502 	add.w	r5, r4, r2
 800c49e:	f77f af71 	ble.w	800c384 <tiny_vsnprintf_like+0x2d4>
 800c4a2:	3202      	adds	r2, #2
 800c4a4:	f898 1001 	ldrb.w	r1, [r8, #1]
 800c4a8:	7069      	strb	r1, [r5, #1]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	f6bf af6a 	bge.w	800c384 <tiny_vsnprintf_like+0x2d4>
 800c4b0:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c4b4:	70ab      	strb	r3, [r5, #2]
 800c4b6:	4404      	add	r4, r0
 800c4b8:	9700      	str	r7, [sp, #0]
 800c4ba:	e606      	b.n	800c0ca <tiny_vsnprintf_like+0x1a>
    tmp[i++] = '0';
 800c4bc:	4672      	mov	r2, lr
 800c4be:	e6f5      	b.n	800c2ac <tiny_vsnprintf_like+0x1fc>
  if (num == 0)
 800c4c0:	f04f 0e00 	mov.w	lr, #0
 800c4c4:	9200      	str	r2, [sp, #0]
 800c4c6:	9402      	str	r4, [sp, #8]
  c = (type & ZEROPAD) ? '0' : ' ';
 800c4c8:	2620      	movs	r6, #32
  if (num == 0)
 800c4ca:	46f4      	mov	ip, lr
 800c4cc:	e7a2      	b.n	800c414 <tiny_vsnprintf_like+0x364>
 800c4ce:	9200      	str	r2, [sp, #0]
 800c4d0:	9402      	str	r4, [sp, #8]
 800c4d2:	f04f 0e01 	mov.w	lr, #1
  c = (type & ZEROPAD) ? '0' : ' ';
 800c4d6:	2630      	movs	r6, #48	@ 0x30
  if (num == 0)
 800c4d8:	f04f 0c00 	mov.w	ip, #0
 800c4dc:	e79a      	b.n	800c414 <tiny_vsnprintf_like+0x364>
          while (len < field_width--) *str++ = ' ';
 800c4de:	2d06      	cmp	r5, #6
 800c4e0:	dd1d      	ble.n	800c51e <tiny_vsnprintf_like+0x46e>
        if (!s) s = "<NULL>";
 800c4e2:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 800c538 <tiny_vsnprintf_like+0x488>
          while (len < field_width--) *str++ = ' ';
 800c4e6:	2306      	movs	r3, #6
 800c4e8:	e727      	b.n	800c33a <tiny_vsnprintf_like+0x28a>
    switch (*fmt)
 800c4ea:	4622      	mov	r2, r4
 800c4ec:	e70c      	b.n	800c308 <tiny_vsnprintf_like+0x258>
 800c4ee:	f04f 0e00 	mov.w	lr, #0
 800c4f2:	210a      	movs	r1, #10
 800c4f4:	f04f 35ff 	mov.w	r5, #4294967295
 800c4f8:	e6f5      	b.n	800c2e6 <tiny_vsnprintf_like+0x236>
        s = va_arg(args, char *);
 800c4fa:	9f00      	ldr	r7, [sp, #0]
 800c4fc:	f857 8b04 	ldr.w	r8, [r7], #4
        if (!s) s = "<NULL>";
 800c500:	f1b8 0f00 	cmp.w	r8, #0
 800c504:	d00b      	beq.n	800c51e <tiny_vsnprintf_like+0x46e>
 800c506:	f04f 35ff 	mov.w	r5, #4294967295
 800c50a:	f06f 0b01 	mvn.w	fp, #1
 800c50e:	e70e      	b.n	800c32e <tiny_vsnprintf_like+0x27e>
        if (*fmt)
 800c510:	7833      	ldrb	r3, [r6, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d19b      	bne.n	800c44e <tiny_vsnprintf_like+0x39e>
 800c516:	46b3      	mov	fp, r6
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800c518:	e5d7      	b.n	800c0ca <tiny_vsnprintf_like+0x1a>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800c51a:	9700      	str	r7, [sp, #0]
 800c51c:	e5d5      	b.n	800c0ca <tiny_vsnprintf_like+0x1a>
        if (!s) s = "<NULL>";
 800c51e:	f8df 8018 	ldr.w	r8, [pc, #24]	@ 800c538 <tiny_vsnprintf_like+0x488>
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800c522:	f106 0b01 	add.w	fp, r6, #1
 800c526:	2006      	movs	r0, #6
 800c528:	f108 0201 	add.w	r2, r8, #1
 800c52c:	e720      	b.n	800c370 <tiny_vsnprintf_like+0x2c0>
 800c52e:	bf00      	nop
 800c530:	0800d410 	.word	0x0800d410
 800c534:	0800d438 	.word	0x0800d438
 800c538:	0800d408 	.word	0x0800d408

0800c53c <UTIL_SEQ_PreIdle>:
__WEAK void UTIL_SEQ_Idle( void )
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop

0800c540 <UTIL_SEQ_PostIdle>:
   * Unless specified by the application, there is nothing to be done
   */
  return;
}

__WEAK void UTIL_SEQ_PostIdle( void )
 800c540:	4770      	bx	lr
 800c542:	bf00      	nop

0800c544 <UTIL_SEQ_Run>:
{
 800c544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  super_mask_backup = SuperMask;
 800c548:	4d4b      	ldr	r5, [pc, #300]	@ (800c678 <UTIL_SEQ_Run+0x134>)
  local_taskset = TaskSet;
 800c54a:	f8df b130 	ldr.w	fp, [pc, #304]	@ 800c67c <UTIL_SEQ_Run+0x138>
  local_evtset = EvtSet;
 800c54e:	4e4c      	ldr	r6, [pc, #304]	@ (800c680 <UTIL_SEQ_Run+0x13c>)
  local_taskmask = TaskMask;
 800c550:	4f4c      	ldr	r7, [pc, #304]	@ (800c684 <UTIL_SEQ_Run+0x140>)
  local_taskset = TaskSet;
 800c552:	f8db 3000 	ldr.w	r3, [fp]
  super_mask_backup = SuperMask;
 800c556:	682a      	ldr	r2, [r5, #0]
  local_evtset = EvtSet;
 800c558:	6834      	ldr	r4, [r6, #0]
  local_taskmask = TaskMask;
 800c55a:	6839      	ldr	r1, [r7, #0]
  local_evtwaited =  EvtWaited;
 800c55c:	f8df 8128 	ldr.w	r8, [pc, #296]	@ 800c688 <UTIL_SEQ_Run+0x144>
  SuperMask &= Mask_bm;
 800c560:	4010      	ands	r0, r2
{
 800c562:	b083      	sub	sp, #12
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c564:	400b      	ands	r3, r1
 800c566:	4203      	tst	r3, r0
  super_mask_backup = SuperMask;
 800c568:	9201      	str	r2, [sp, #4]
  SuperMask &= Mask_bm;
 800c56a:	6028      	str	r0, [r5, #0]
  local_evtwaited =  EvtWaited;
 800c56c:	f8d8 2000 	ldr.w	r2, [r8]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c570:	d05e      	beq.n	800c630 <UTIL_SEQ_Run+0xec>
 800c572:	4214      	tst	r4, r2
 800c574:	d15c      	bne.n	800c630 <UTIL_SEQ_Run+0xec>
 800c576:	f8df 9114 	ldr.w	r9, [pc, #276]	@ 800c68c <UTIL_SEQ_Run+0x148>
 800c57a:	4c45      	ldr	r4, [pc, #276]	@ (800c690 <UTIL_SEQ_Run+0x14c>)
 800c57c:	f8df a114 	ldr.w	sl, [pc, #276]	@ 800c694 <UTIL_SEQ_Run+0x150>
 800c580:	e044      	b.n	800c60c <UTIL_SEQ_Run+0xc8>
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800c582:	0412      	lsls	r2, r2, #16
 800c584:	2118      	movs	r1, #24
 800c586:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800c588:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800c58c:	bf3c      	itt	cc
 800c58e:	0212      	lslcc	r2, r2, #8
 800c590:	460b      	movcc	r3, r1
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800c592:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 800c596:	d202      	bcs.n	800c59e <UTIL_SEQ_Run+0x5a>
 800c598:	3304      	adds	r3, #4
 800c59a:	b2db      	uxtb	r3, r3
 800c59c:	0112      	lsls	r2, r2, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800c59e:	0f12      	lsrs	r2, r2, #28

  return (uint8_t)(31U-n);
 800c5a0:	f1c3 031f 	rsb	r3, r3, #31
 800c5a4:	f81a 2002 	ldrb.w	r2, [sl, r2]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c5a8:	6861      	ldr	r1, [r4, #4]
  return (uint8_t)(31U-n);
 800c5aa:	1a9b      	subs	r3, r3, r2
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c5ac:	b2db      	uxtb	r3, r3
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c5ae:	2201      	movs	r2, #1
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c5b0:	f8c9 3000 	str.w	r3, [r9]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c5b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c5b8:	ea21 0303 	bic.w	r3, r1, r3
 800c5bc:	6063      	str	r3, [r4, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c5be:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c5c2:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c5c4:	f8d9 3000 	ldr.w	r3, [r9]
 800c5c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c5cc:	f8db 2000 	ldr.w	r2, [fp]
 800c5d0:	ea22 0203 	bic.w	r2, r2, r3
 800c5d4:	f8cb 2000 	str.w	r2, [fp]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c5d8:	6822      	ldr	r2, [r4, #0]
 800c5da:	ea22 0303 	bic.w	r3, r2, r3
 800c5de:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5e0:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 800c5e4:	4a2c      	ldr	r2, [pc, #176]	@ (800c698 <UTIL_SEQ_Run+0x154>)
 800c5e6:	f8d9 3000 	ldr.w	r3, [r9]
 800c5ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5ee:	4798      	blx	r3
    local_taskset = TaskSet;
 800c5f0:	f8db 3000 	ldr.w	r3, [fp]
    local_evtset = EvtSet;
 800c5f4:	f8d6 c000 	ldr.w	ip, [r6]
    local_taskmask = TaskMask;
 800c5f8:	6839      	ldr	r1, [r7, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c5fa:	6828      	ldr	r0, [r5, #0]
    local_evtwaited = EvtWaited;
 800c5fc:	f8d8 2000 	ldr.w	r2, [r8]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c600:	400b      	ands	r3, r1
 800c602:	4203      	tst	r3, r0
 800c604:	d016      	beq.n	800c634 <UTIL_SEQ_Run+0xf0>
 800c606:	ea1c 0f02 	tst.w	ip, r2
 800c60a:	d113      	bne.n	800c634 <UTIL_SEQ_Run+0xf0>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c60c:	6823      	ldr	r3, [r4, #0]
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800c60e:	6823      	ldr	r3, [r4, #0]
 800c610:	4008      	ands	r0, r1
 800c612:	4018      	ands	r0, r3
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c614:	6863      	ldr	r3, [r4, #4]
 800c616:	4203      	tst	r3, r0
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800c618:	bf04      	itt	eq
 800c61a:	f04f 33ff 	moveq.w	r3, #4294967295
 800c61e:	6063      	streq	r3, [r4, #4]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c620:	6862      	ldr	r2, [r4, #4]
 800c622:	4002      	ands	r2, r0
  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800c624:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800c628:	d3ab      	bcc.n	800c582 <UTIL_SEQ_Run+0x3e>
 800c62a:	2108      	movs	r1, #8
uint8_t n = 0U;
 800c62c:	2300      	movs	r3, #0
 800c62e:	e7ab      	b.n	800c588 <UTIL_SEQ_Run+0x44>
 800c630:	f8df 9058 	ldr.w	r9, [pc, #88]	@ 800c68c <UTIL_SEQ_Run+0x148>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c634:	f04f 33ff 	mov.w	r3, #4294967295
 800c638:	f8c9 3000 	str.w	r3, [r9]
  UTIL_SEQ_PreIdle( );
 800c63c:	f7ff ff7e 	bl	800c53c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c640:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c644:	b672      	cpsid	i
  local_taskset = TaskSet;
 800c646:	f8db 3000 	ldr.w	r3, [fp]
  local_evtset = EvtSet;
 800c64a:	6831      	ldr	r1, [r6, #0]
  local_taskmask = TaskMask;
 800c64c:	683a      	ldr	r2, [r7, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c64e:	4013      	ands	r3, r2
 800c650:	682a      	ldr	r2, [r5, #0]
 800c652:	4213      	tst	r3, r2
 800c654:	d103      	bne.n	800c65e <UTIL_SEQ_Run+0x11a>
    if ((local_evtset & EvtWaited)== 0U)
 800c656:	f8d8 3000 	ldr.w	r3, [r8]
 800c65a:	420b      	tst	r3, r1
 800c65c:	d008      	beq.n	800c670 <UTIL_SEQ_Run+0x12c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c65e:	f384 8810 	msr	PRIMASK, r4
  UTIL_SEQ_PostIdle( );
 800c662:	f7ff ff6d 	bl	800c540 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800c666:	9b01      	ldr	r3, [sp, #4]
 800c668:	602b      	str	r3, [r5, #0]
}
 800c66a:	b003      	add	sp, #12
 800c66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      UTIL_SEQ_Idle( );
 800c670:	f7f5 f812 	bl	8001698 <UTIL_SEQ_Idle>
 800c674:	e7f3      	b.n	800c65e <UTIL_SEQ_Run+0x11a>
 800c676:	bf00      	nop
 800c678:	2000001c 	.word	0x2000001c
 800c67c:	20000614 	.word	0x20000614
 800c680:	20000610 	.word	0x20000610
 800c684:	20000020 	.word	0x20000020
 800c688:	2000060c 	.word	0x2000060c
 800c68c:	20000608 	.word	0x20000608
 800c690:	200005fc 	.word	0x200005fc
 800c694:	0800d460 	.word	0x0800d460
 800c698:	20000604 	.word	0x20000604

0800c69c <UTIL_TIMER_Start.part.0>:
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
 800c69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6a0:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6a2:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c6a6:	b672      	cpsid	i
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
    ticks = TimerObject->ReloadValue;
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800c6a8:	4f37      	ldr	r7, [pc, #220]	@ (800c788 <UTIL_TIMER_Start.part.0+0xec>)
    ticks = TimerObject->ReloadValue;
 800c6aa:	6845      	ldr	r5, [r0, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800c6ac:	f8d7 9020 	ldr.w	r9, [r7, #32]
    
    TimerObject->Timestamp = ticks;
    TimerObject->IsPending = 0U;
    TimerObject->IsRunning = 1U;
    TimerObject->IsReloadStopped = 0U;
    if( TimerListHead == NULL )
 800c6b0:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 800c78c <UTIL_TIMER_Start.part.0+0xf0>
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800c6b4:	47c8      	blx	r9
    TimerObject->Timestamp = ticks;
 800c6b6:	42a8      	cmp	r0, r5
 800c6b8:	bf38      	it	cc
 800c6ba:	4628      	movcc	r0, r5
    if( TimerListHead == NULL )
 800c6bc:	f8d8 5000 	ldr.w	r5, [r8]
    TimerObject->Timestamp = ticks;
 800c6c0:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 800c6c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
    TimerObject->IsReloadStopped = 0U;
 800c6c6:	f04f 0a00 	mov.w	sl, #0
    TimerObject->IsPending = 0U;
 800c6ca:	8123      	strh	r3, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800c6cc:	f884 a00a 	strb.w	sl, [r4, #10]
    if( TimerListHead == NULL )
 800c6d0:	2d00      	cmp	r5, #0
 800c6d2:	d033      	beq.n	800c73c <UTIL_TIMER_Start.part.0+0xa0>
      UTIL_TimerDriver.SetTimerContext();
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800c6d4:	69bd      	ldr	r5, [r7, #24]
 800c6d6:	47a8      	blx	r5
      TimerObject->Timestamp += elapsedTime;
 800c6d8:	6823      	ldr	r3, [r4, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800c6da:	f8d8 1000 	ldr.w	r1, [r8]
      TimerObject->Timestamp += elapsedTime;
 800c6de:	4418      	add	r0, r3
 800c6e0:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800c6e2:	680b      	ldr	r3, [r1, #0]
 800c6e4:	4298      	cmp	r0, r3
 800c6e6:	d311      	bcc.n	800c70c <UTIL_TIMER_Start.part.0+0x70>
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800c6e8:	694b      	ldr	r3, [r1, #20]

  while (cur->Next != NULL )
 800c6ea:	b92b      	cbnz	r3, 800c6f8 <UTIL_TIMER_Start.part.0+0x5c>
 800c6ec:	e03f      	b.n	800c76e <UTIL_TIMER_Start.part.0+0xd2>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
        next = next->Next;
 800c6ee:	695a      	ldr	r2, [r3, #20]
  while (cur->Next != NULL )
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	2a00      	cmp	r2, #0
 800c6f4:	d03c      	beq.n	800c770 <UTIL_TIMER_Start.part.0+0xd4>
        next = next->Next;
 800c6f6:	4613      	mov	r3, r2
    if( TimerObject->Timestamp  > next->Timestamp )
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	4290      	cmp	r0, r2
 800c6fc:	d8f7      	bhi.n	800c6ee <UTIL_TIMER_Start.part.0+0x52>
    }
    else
    {
        cur->Next = TimerObject;
 800c6fe:	614c      	str	r4, [r1, #20]
        TimerObject->Next = next;
 800c700:	6163      	str	r3, [r4, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c702:	f386 8810 	msr	PRIMASK, r6
}
 800c706:	2000      	movs	r0, #0
 800c708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
{
  UTIL_TIMER_Object_t* cur = TimerListHead;

  if( cur != NULL )
  {
    cur->IsPending = 0;
 800c70c:	f881 a008 	strb.w	sl, [r1, #8]
  }

  TimerObject->Next = cur;
 800c710:	6161      	str	r1, [r4, #20]
  TimerListHead = TimerObject;
 800c712:	f8c8 4000 	str.w	r4, [r8]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c716:	47c8      	blx	r9
  TimerObject->IsPending = 1;
 800c718:	2301      	movs	r3, #1
 800c71a:	7223      	strb	r3, [r4, #8]
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c71c:	f8d4 9000 	ldr.w	r9, [r4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c720:	4680      	mov	r8, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c722:	47a8      	blx	r5
 800c724:	eb08 0300 	add.w	r3, r8, r0
 800c728:	4599      	cmp	r9, r3
 800c72a:	d329      	bcc.n	800c780 <UTIL_TIMER_Start.part.0+0xe4>
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800c72c:	6820      	ldr	r0, [r4, #0]
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	4798      	blx	r3
 800c732:	f386 8810 	msr	PRIMASK, r6
}
 800c736:	2000      	movs	r0, #0
 800c738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      UTIL_TimerDriver.SetTimerContext();
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	4798      	blx	r3
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c740:	f8d8 3000 	ldr.w	r3, [r8]
  if( cur != NULL )
 800c744:	b103      	cbz	r3, 800c748 <UTIL_TIMER_Start.part.0+0xac>
    cur->IsPending = 0;
 800c746:	721d      	strb	r5, [r3, #8]
  TimerObject->Next = cur;
 800c748:	6163      	str	r3, [r4, #20]
  TimerListHead = TimerObject;
 800c74a:	f8c8 4000 	str.w	r4, [r8]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c74e:	47c8      	blx	r9
  TimerObject->IsPending = 1;
 800c750:	2301      	movs	r3, #1
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c752:	f8d7 8018 	ldr.w	r8, [r7, #24]
  TimerObject->IsPending = 1;
 800c756:	7223      	strb	r3, [r4, #8]
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c758:	f8d4 9000 	ldr.w	r9, [r4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c75c:	4605      	mov	r5, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c75e:	47c0      	blx	r8
 800c760:	4428      	add	r0, r5
 800c762:	4581      	cmp	r9, r0
 800c764:	d2e2      	bcs.n	800c72c <UTIL_TIMER_Start.part.0+0x90>
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800c766:	47c0      	blx	r8
 800c768:	4428      	add	r0, r5
 800c76a:	6020      	str	r0, [r4, #0]
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800c76c:	e7df      	b.n	800c72e <UTIL_TIMER_Start.part.0+0x92>
  while (cur->Next != NULL )
 800c76e:	460b      	mov	r3, r1
  TimerObject->Next = NULL;
 800c770:	2200      	movs	r2, #0
  cur->Next = TimerObject;
 800c772:	615c      	str	r4, [r3, #20]
  TimerObject->Next = NULL;
 800c774:	6162      	str	r2, [r4, #20]
 800c776:	f386 8810 	msr	PRIMASK, r6
}
 800c77a:	2000      	movs	r0, #0
 800c77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800c780:	47a8      	blx	r5
 800c782:	4440      	add	r0, r8
 800c784:	6020      	str	r0, [r4, #0]
 800c786:	e7d2      	b.n	800c72e <UTIL_TIMER_Start.part.0+0x92>
 800c788:	0800d168 	.word	0x0800d168
 800c78c:	20000618 	.word	0x20000618

0800c790 <UTIL_TIMER_Init>:
  return UTIL_TimerDriver.InitTimer();
 800c790:	4b02      	ldr	r3, [pc, #8]	@ (800c79c <UTIL_TIMER_Init+0xc>)
  TimerListHead = NULL;
 800c792:	4a03      	ldr	r2, [pc, #12]	@ (800c7a0 <UTIL_TIMER_Init+0x10>)
  return UTIL_TimerDriver.InitTimer();
 800c794:	681b      	ldr	r3, [r3, #0]
  TimerListHead = NULL;
 800c796:	2100      	movs	r1, #0
 800c798:	6011      	str	r1, [r2, #0]
  return UTIL_TimerDriver.InitTimer();
 800c79a:	4718      	bx	r3
 800c79c:	0800d168 	.word	0x0800d168
 800c7a0:	20000618 	.word	0x20000618

0800c7a4 <UTIL_TIMER_Create>:
{
 800c7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7a6:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 800c7a8:	b190      	cbz	r0, 800c7d0 <UTIL_TIMER_Create+0x2c>
 800c7aa:	461e      	mov	r6, r3
 800c7ac:	b183      	cbz	r3, 800c7d0 <UTIL_TIMER_Create+0x2c>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800c7ae:	4b09      	ldr	r3, [pc, #36]	@ (800c7d4 <UTIL_TIMER_Create+0x30>)
    TimerObject->Timestamp = 0U;
 800c7b0:	2500      	movs	r5, #0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800c7b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    TimerObject->Timestamp = 0U;
 800c7b4:	6025      	str	r5, [r4, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800c7b6:	4608      	mov	r0, r1
 800c7b8:	4617      	mov	r7, r2
 800c7ba:	4798      	blx	r3
    TimerObject->argument = Argument;
 800c7bc:	9b06      	ldr	r3, [sp, #24]
    TimerObject->IsPending = 0U;
 800c7be:	8125      	strh	r5, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800c7c0:	72a5      	strb	r5, [r4, #10]
    TimerObject->Mode = Mode;
 800c7c2:	72e7      	strb	r7, [r4, #11]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800c7c4:	6060      	str	r0, [r4, #4]
    TimerObject->Callback = Callback;
 800c7c6:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 800c7c8:	6123      	str	r3, [r4, #16]
    TimerObject->Next = NULL;
 800c7ca:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 800c7cc:	4628      	mov	r0, r5
}
 800c7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 800c7d0:	2001      	movs	r0, #1
}
 800c7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7d4:	0800d168 	.word	0x0800d168

0800c7d8 <UTIL_TIMER_Start>:
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800c7d8:	b138      	cbz	r0, 800c7ea <UTIL_TIMER_Start+0x12>
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c7da:	4b07      	ldr	r3, [pc, #28]	@ (800c7f8 <UTIL_TIMER_Start+0x20>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
  while( cur != NULL )
 800c7de:	b913      	cbnz	r3, 800c7e6 <UTIL_TIMER_Start+0xe>
 800c7e0:	e005      	b.n	800c7ee <UTIL_TIMER_Start+0x16>
    cur = cur->Next;
 800c7e2:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 800c7e4:	b11b      	cbz	r3, 800c7ee <UTIL_TIMER_Start+0x16>
    if( cur == TimerObject )
 800c7e6:	4298      	cmp	r0, r3
 800c7e8:	d1fb      	bne.n	800c7e2 <UTIL_TIMER_Start+0xa>
}
 800c7ea:	2001      	movs	r0, #1
 800c7ec:	4770      	bx	lr
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800c7ee:	7a43      	ldrb	r3, [r0, #9]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d1fa      	bne.n	800c7ea <UTIL_TIMER_Start+0x12>
 800c7f4:	f7ff bf52 	b.w	800c69c <UTIL_TIMER_Start.part.0>
 800c7f8:	20000618 	.word	0x20000618

0800c7fc <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 800c7fc:	b1d0      	cbz	r0, 800c834 <UTIL_TIMER_Stop+0x38>
{
 800c7fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c802:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c806:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800c808:	4c1f      	ldr	r4, [pc, #124]	@ (800c888 <UTIL_TIMER_Stop+0x8c>)
 800c80a:	6823      	ldr	r3, [r4, #0]
    TimerObject->IsReloadStopped = 1U;
 800c80c:	2501      	movs	r5, #1
 800c80e:	7285      	strb	r5, [r0, #10]
    if(NULL != TimerListHead)
 800c810:	b15b      	cbz	r3, 800c82a <UTIL_TIMER_Stop+0x2e>
      TimerObject->IsRunning = 0U;
 800c812:	2200      	movs	r2, #0
 800c814:	7242      	strb	r2, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800c816:	4298      	cmp	r0, r3
          if( TimerListHead->Next != NULL )
 800c818:	695f      	ldr	r7, [r3, #20]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800c81a:	d102      	bne.n	800c822 <UTIL_TIMER_Stop+0x26>
 800c81c:	e013      	b.n	800c846 <UTIL_TIMER_Stop+0x4a>
          if( cur == TimerObject )
 800c81e:	4298      	cmp	r0, r3
 800c820:	d00a      	beq.n	800c838 <UTIL_TIMER_Stop+0x3c>
            cur = cur->Next;
 800c822:	461a      	mov	r2, r3
 800c824:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
 800c826:	2b00      	cmp	r3, #0
 800c828:	d1f9      	bne.n	800c81e <UTIL_TIMER_Stop+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c82a:	f386 8810 	msr	PRIMASK, r6
}
 800c82e:	2000      	movs	r0, #0
}
 800c830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ret = UTIL_TIMER_INVALID_PARAM;
 800c834:	2001      	movs	r0, #1
}
 800c836:	4770      	bx	lr
            if( cur->Next != NULL )
 800c838:	6943      	ldr	r3, [r0, #20]
              prev->Next = cur;
 800c83a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c83c:	f386 8810 	msr	PRIMASK, r6
}
 800c840:	2000      	movs	r0, #0
}
 800c842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          TimerListHead->IsPending = 0;
 800c846:	7202      	strb	r2, [r0, #8]
          if( TimerListHead->Next != NULL )
 800c848:	b1a7      	cbz	r7, 800c874 <UTIL_TIMER_Stop+0x78>
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c84a:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 800c88c <UTIL_TIMER_Stop+0x90>
            TimerListHead = TimerListHead->Next;
 800c84e:	6027      	str	r7, [r4, #0]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c850:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800c854:	4798      	blx	r3
  TimerObject->IsPending = 1;
 800c856:	723d      	strb	r5, [r7, #8]
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c858:	f8d8 5018 	ldr.w	r5, [r8, #24]
 800c85c:	f8d7 9000 	ldr.w	r9, [r7]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c860:	4604      	mov	r4, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c862:	47a8      	blx	r5
 800c864:	4420      	add	r0, r4
 800c866:	4581      	cmp	r9, r0
 800c868:	d309      	bcc.n	800c87e <UTIL_TIMER_Stop+0x82>
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800c86a:	6838      	ldr	r0, [r7, #0]
 800c86c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c870:	4798      	blx	r3
}
 800c872:	e7da      	b.n	800c82a <UTIL_TIMER_Stop+0x2e>
            UTIL_TimerDriver.StopTimerEvt( );
 800c874:	4b05      	ldr	r3, [pc, #20]	@ (800c88c <UTIL_TIMER_Stop+0x90>)
 800c876:	68db      	ldr	r3, [r3, #12]
 800c878:	4798      	blx	r3
            TimerListHead = NULL;
 800c87a:	6027      	str	r7, [r4, #0]
 800c87c:	e7d5      	b.n	800c82a <UTIL_TIMER_Stop+0x2e>
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800c87e:	47a8      	blx	r5
 800c880:	4420      	add	r0, r4
 800c882:	6038      	str	r0, [r7, #0]
 800c884:	e7f2      	b.n	800c86c <UTIL_TIMER_Stop+0x70>
 800c886:	bf00      	nop
 800c888:	20000618 	.word	0x20000618
 800c88c:	0800d168 	.word	0x0800d168

0800c890 <UTIL_TIMER_SetPeriod>:
{
 800c890:	b538      	push	{r3, r4, r5, lr}
 800c892:	4604      	mov	r4, r0
  if(NULL == TimerObject)
 800c894:	b1b0      	cbz	r0, 800c8c4 <UTIL_TIMER_SetPeriod+0x34>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800c896:	4b11      	ldr	r3, [pc, #68]	@ (800c8dc <UTIL_TIMER_SetPeriod+0x4c>)
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c898:	4d11      	ldr	r5, [pc, #68]	@ (800c8e0 <UTIL_TIMER_SetPeriod+0x50>)
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800c89a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c89c:	4608      	mov	r0, r1
 800c89e:	4798      	blx	r3
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c8a0:	682b      	ldr	r3, [r5, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800c8a2:	6060      	str	r0, [r4, #4]
  while( cur != NULL )
 800c8a4:	b913      	cbnz	r3, 800c8ac <UTIL_TIMER_SetPeriod+0x1c>
 800c8a6:	e00f      	b.n	800c8c8 <UTIL_TIMER_SetPeriod+0x38>
    cur = cur->Next;
 800c8a8:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 800c8aa:	b16b      	cbz	r3, 800c8c8 <UTIL_TIMER_SetPeriod+0x38>
    if( cur == TimerObject )
 800c8ac:	429c      	cmp	r4, r3
 800c8ae:	d1fb      	bne.n	800c8a8 <UTIL_TIMER_SetPeriod+0x18>
      (void)UTIL_TIMER_Stop(TimerObject);
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	f7ff ffa3 	bl	800c7fc <UTIL_TIMER_Stop>
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c8b6:	682b      	ldr	r3, [r5, #0]
  while( cur != NULL )
 800c8b8:	b913      	cbnz	r3, 800c8c0 <UTIL_TIMER_SetPeriod+0x30>
 800c8ba:	e007      	b.n	800c8cc <UTIL_TIMER_SetPeriod+0x3c>
    cur = cur->Next;
 800c8bc:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 800c8be:	b12b      	cbz	r3, 800c8cc <UTIL_TIMER_SetPeriod+0x3c>
    if( cur == TimerObject )
 800c8c0:	429c      	cmp	r4, r3
 800c8c2:	d1fb      	bne.n	800c8bc <UTIL_TIMER_SetPeriod+0x2c>
    ret =  UTIL_TIMER_INVALID_PARAM;
 800c8c4:	2001      	movs	r0, #1
}
 800c8c6:	bd38      	pop	{r3, r4, r5, pc}
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800c8c8:	4618      	mov	r0, r3
}
 800c8ca:	bd38      	pop	{r3, r4, r5, pc}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800c8cc:	7a63      	ldrb	r3, [r4, #9]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d1f8      	bne.n	800c8c4 <UTIL_TIMER_SetPeriod+0x34>
 800c8d2:	4620      	mov	r0, r4
}
 800c8d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8d8:	f7ff bee0 	b.w	800c69c <UTIL_TIMER_Start.part.0>
 800c8dc:	0800d168 	.word	0x0800d168
 800c8e0:	20000618 	.word	0x20000618

0800c8e4 <UTIL_TIMER_IRQ_Handler>:
{
 800c8e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8e8:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c8ec:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800c8ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c9c4 <UTIL_TIMER_IRQ_Handler+0xe0>
  if ( TimerListHead != NULL )
 800c8f2:	4d35      	ldr	r5, [pc, #212]	@ (800c9c8 <UTIL_TIMER_IRQ_Handler+0xe4>)
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800c8f4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800c8f8:	4798      	blx	r3
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800c8fa:	f8d8 3010 	ldr.w	r3, [r8, #16]
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800c8fe:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800c900:	4798      	blx	r3
  if ( TimerListHead != NULL )
 800c902:	682c      	ldr	r4, [r5, #0]
 800c904:	b164      	cbz	r4, 800c920 <UTIL_TIMER_IRQ_Handler+0x3c>
  DeltaContext = now  - old; /*intentional wrap around */
 800c906:	1b87      	subs	r7, r0, r6
        cur->Timestamp -= DeltaContext;
 800c908:	1a31      	subs	r1, r6, r0
  DeltaContext = now  - old; /*intentional wrap around */
 800c90a:	4623      	mov	r3, r4
 800c90c:	2600      	movs	r6, #0
      if (cur->Timestamp > DeltaContext)
 800c90e:	681a      	ldr	r2, [r3, #0]
 800c910:	4297      	cmp	r7, r2
        cur->Timestamp -= DeltaContext;
 800c912:	eb01 0002 	add.w	r0, r1, r2
      if (cur->Timestamp > DeltaContext)
 800c916:	d21e      	bcs.n	800c956 <UTIL_TIMER_IRQ_Handler+0x72>
 800c918:	6018      	str	r0, [r3, #0]
      cur = cur->Next;
 800c91a:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d1f6      	bne.n	800c90e <UTIL_TIMER_IRQ_Handler+0x2a>
      cur->IsPending = 0;
 800c920:	2700      	movs	r7, #0
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800c922:	b1a4      	cbz	r4, 800c94e <UTIL_TIMER_IRQ_Handler+0x6a>
 800c924:	6826      	ldr	r6, [r4, #0]
 800c926:	b12e      	cbz	r6, 800c934 <UTIL_TIMER_IRQ_Handler+0x50>
 800c928:	f8d8 4018 	ldr.w	r4, [r8, #24]
 800c92c:	47a0      	blx	r4
 800c92e:	4286      	cmp	r6, r0
 800c930:	d217      	bcs.n	800c962 <UTIL_TIMER_IRQ_Handler+0x7e>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800c932:	682c      	ldr	r4, [r5, #0]
      TimerListHead = TimerListHead->Next;
 800c934:	6962      	ldr	r2, [r4, #20]
      cur->IsPending = 0;
 800c936:	8127      	strh	r7, [r4, #8]
      cur->Callback(cur->argument);
 800c938:	e9d4 3003 	ldrd	r3, r0, [r4, #12]
      TimerListHead = TimerListHead->Next;
 800c93c:	602a      	str	r2, [r5, #0]
      cur->Callback(cur->argument);
 800c93e:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800c940:	8963      	ldrh	r3, [r4, #10]
 800c942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c946:	d025      	beq.n	800c994 <UTIL_TIMER_IRQ_Handler+0xb0>
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c948:	682c      	ldr	r4, [r5, #0]
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800c94a:	2c00      	cmp	r4, #0
 800c94c:	d1ea      	bne.n	800c924 <UTIL_TIMER_IRQ_Handler+0x40>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c94e:	f389 8810 	msr	PRIMASK, r9
}
 800c952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c956:	601e      	str	r6, [r3, #0]
      cur = cur->Next;
 800c958:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d1d7      	bne.n	800c90e <UTIL_TIMER_IRQ_Handler+0x2a>
      cur->IsPending = 0;
 800c95e:	2700      	movs	r7, #0
 800c960:	e7df      	b.n	800c922 <UTIL_TIMER_IRQ_Handler+0x3e>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800c962:	682d      	ldr	r5, [r5, #0]
 800c964:	2d00      	cmp	r5, #0
 800c966:	d0f2      	beq.n	800c94e <UTIL_TIMER_IRQ_Handler+0x6a>
 800c968:	7a2b      	ldrb	r3, [r5, #8]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d1ef      	bne.n	800c94e <UTIL_TIMER_IRQ_Handler+0x6a>
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c96e:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800c972:	4798      	blx	r3
  TimerObject->IsPending = 1;
 800c974:	2301      	movs	r3, #1
 800c976:	722b      	strb	r3, [r5, #8]
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c978:	682f      	ldr	r7, [r5, #0]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c97a:	4606      	mov	r6, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c97c:	47a0      	blx	r4
 800c97e:	1833      	adds	r3, r6, r0
 800c980:	429f      	cmp	r7, r3
 800c982:	d31a      	bcc.n	800c9ba <UTIL_TIMER_IRQ_Handler+0xd6>
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800c984:	6828      	ldr	r0, [r5, #0]
 800c986:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c98a:	4798      	blx	r3
 800c98c:	f389 8810 	msr	PRIMASK, r9
}
 800c990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c994:	682a      	ldr	r2, [r5, #0]
  while( cur != NULL )
 800c996:	b142      	cbz	r2, 800c9aa <UTIL_TIMER_IRQ_Handler+0xc6>
    if( cur == TimerObject )
 800c998:	42a2      	cmp	r2, r4
 800c99a:	d00c      	beq.n	800c9b6 <UTIL_TIMER_IRQ_Handler+0xd2>
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c99c:	4613      	mov	r3, r2
 800c99e:	e001      	b.n	800c9a4 <UTIL_TIMER_IRQ_Handler+0xc0>
    if( cur == TimerObject )
 800c9a0:	42a3      	cmp	r3, r4
 800c9a2:	d008      	beq.n	800c9b6 <UTIL_TIMER_IRQ_Handler+0xd2>
    cur = cur->Next;
 800c9a4:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d1fa      	bne.n	800c9a0 <UTIL_TIMER_IRQ_Handler+0xbc>
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800c9aa:	7a63      	ldrb	r3, [r4, #9]
 800c9ac:	b91b      	cbnz	r3, 800c9b6 <UTIL_TIMER_IRQ_Handler+0xd2>
 800c9ae:	4620      	mov	r0, r4
 800c9b0:	f7ff fe74 	bl	800c69c <UTIL_TIMER_Start.part.0>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800c9b4:	682a      	ldr	r2, [r5, #0]
    if( cur == TimerObject )
 800c9b6:	4614      	mov	r4, r2
 800c9b8:	e7b3      	b.n	800c922 <UTIL_TIMER_IRQ_Handler+0x3e>
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800c9ba:	47a0      	blx	r4
 800c9bc:	4430      	add	r0, r6
 800c9be:	6028      	str	r0, [r5, #0]
 800c9c0:	e7e1      	b.n	800c986 <UTIL_TIMER_IRQ_Handler+0xa2>
 800c9c2:	bf00      	nop
 800c9c4:	0800d168 	.word	0x0800d168
 800c9c8:	20000618 	.word	0x20000618

0800c9cc <UTIL_TIMER_GetCurrentTime>:
{
 800c9cc:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800c9ce:	4c03      	ldr	r4, [pc, #12]	@ (800c9dc <UTIL_TIMER_GetCurrentTime+0x10>)
 800c9d0:	69e3      	ldr	r3, [r4, #28]
 800c9d2:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 800c9d4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
}
 800c9d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return  UTIL_TimerDriver.Tick2ms(now);
 800c9da:	4718      	bx	r3
 800c9dc:	0800d168 	.word	0x0800d168

0800c9e0 <UTIL_TIMER_GetElapsedTime>:
{
 800c9e0:	b570      	push	{r4, r5, r6, lr}
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800c9e2:	4d06      	ldr	r5, [pc, #24]	@ (800c9fc <UTIL_TIMER_GetElapsedTime+0x1c>)
 800c9e4:	69eb      	ldr	r3, [r5, #28]
{
 800c9e6:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800c9e8:	4798      	blx	r3
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800c9ea:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800c9ec:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	4798      	blx	r3
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800c9f2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800c9f4:	1a20      	subs	r0, r4, r0
}
 800c9f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800c9fa:	4718      	bx	r3
 800c9fc:	0800d168 	.word	0x0800d168

0800ca00 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800ca00:	b510      	push	{r4, lr}
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800ca02:	4808      	ldr	r0, [pc, #32]	@ (800ca24 <UTIL_ADV_TRACE_Init+0x24>)
 800ca04:	2218      	movs	r2, #24
 800ca06:	2100      	movs	r1, #0
 800ca08:	f7ff fb28 	bl	800c05c <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800ca0c:	4806      	ldr	r0, [pc, #24]	@ (800ca28 <UTIL_ADV_TRACE_Init+0x28>)
 800ca0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca12:	2100      	movs	r1, #0
 800ca14:	f7ff fb22 	bl	800c05c <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800ca18:	4b04      	ldr	r3, [pc, #16]	@ (800ca2c <UTIL_ADV_TRACE_Init+0x2c>)
 800ca1a:	4805      	ldr	r0, [pc, #20]	@ (800ca30 <UTIL_ADV_TRACE_Init+0x30>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
}
 800ca1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800ca22:	4718      	bx	r3
 800ca24:	2000091c 	.word	0x2000091c
 800ca28:	2000071c 	.word	0x2000071c
 800ca2c:	0800d194 	.word	0x0800d194
 800ca30:	0800cd3d 	.word	0x0800cd3d

0800ca34 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800ca34:	4b01      	ldr	r3, [pc, #4]	@ (800ca3c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 800ca36:	6058      	str	r0, [r3, #4]
}
 800ca38:	4770      	bx	lr
 800ca3a:	bf00      	nop
 800ca3c:	2000091c 	.word	0x2000091c

0800ca40 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800ca40:	4b01      	ldr	r3, [pc, #4]	@ (800ca48 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 800ca42:	7218      	strb	r0, [r3, #8]
}
 800ca44:	4770      	bx	lr
 800ca46:	bf00      	nop
 800ca48:	2000091c 	.word	0x2000091c

0800ca4c <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800ca4c:	b530      	push	{r4, r5, lr}
 800ca4e:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca50:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ca54:	b672      	cpsid	i
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800ca56:	4c28      	ldr	r4, [pc, #160]	@ (800caf8 <TRACE_Send+0xac>)
  if(TRACE_IsLocked() == 0u)
 800ca58:	8ae2      	ldrh	r2, [r4, #22]
 800ca5a:	b9fa      	cbnz	r2, 800ca9c <TRACE_Send+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca5c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ca60:	b672      	cpsid	i
  ADV_TRACE_Ctx.TraceLock++;
 800ca62:	8ae3      	ldrh	r3, [r4, #22]
 800ca64:	3301      	adds	r3, #1
 800ca66:	82e3      	strh	r3, [r4, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca68:	f380 8810 	msr	PRIMASK, r0
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800ca6c:	8a23      	ldrh	r3, [r4, #16]
 800ca6e:	f8b4 c012 	ldrh.w	ip, [r4, #18]
 800ca72:	4563      	cmp	r3, ip
 800ca74:	d017      	beq.n	800caa6 <TRACE_Send+0x5a>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800ca76:	78a0      	ldrb	r0, [r4, #2]
 800ca78:	2801      	cmp	r0, #1
 800ca7a:	d02d      	beq.n	800cad8 <TRACE_Send+0x8c>
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800ca7c:	4d1f      	ldr	r5, [pc, #124]	@ (800cafc <TRACE_Send+0xb0>)
 800ca7e:	441d      	add	r5, r3
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800ca80:	b310      	cbz	r0, 800cac8 <TRACE_Send+0x7c>
 800ca82:	f381 8810 	msr	PRIMASK, r1
      UTIL_ADV_TRACE_PreSendHook();
 800ca86:	f7f4 fe09 	bl	800169c <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800ca8a:	4b1d      	ldr	r3, [pc, #116]	@ (800cb00 <TRACE_Send+0xb4>)
 800ca8c:	8aa1      	ldrh	r1, [r4, #20]
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	9301      	str	r3, [sp, #4]
 800ca92:	4628      	mov	r0, r5
}
 800ca94:	b003      	add	sp, #12
 800ca96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800ca9a:	4718      	bx	r3
 800ca9c:	f381 8810 	msr	PRIMASK, r1
}
 800caa0:	2000      	movs	r0, #0
 800caa2:	b003      	add	sp, #12
 800caa4:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800caa6:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800caaa:	b672      	cpsid	i
  ADV_TRACE_Ctx.TraceLock--;
 800caac:	8ae3      	ldrh	r3, [r4, #22]
 800caae:	3b01      	subs	r3, #1
 800cab0:	82e3      	strh	r3, [r4, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cab2:	f382 8810 	msr	PRIMASK, r2
 800cab6:	f381 8810 	msr	PRIMASK, r1
}
 800caba:	2000      	movs	r0, #0
 800cabc:	b003      	add	sp, #12
 800cabe:	bd30      	pop	{r4, r5, pc}
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800cac0:	4d0e      	ldr	r5, [pc, #56]	@ (800cafc <TRACE_Send+0xb0>)
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800cac2:	70a2      	strb	r2, [r4, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800cac4:	8222      	strh	r2, [r4, #16]
 800cac6:	4613      	mov	r3, r2
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800cac8:	459c      	cmp	ip, r3
 800caca:	d911      	bls.n	800caf0 <TRACE_Send+0xa4>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800cacc:	ebac 0c03 	sub.w	ip, ip, r3
 800cad0:	fa1f f38c 	uxth.w	r3, ip
 800cad4:	82a3      	strh	r3, [r4, #20]
 800cad6:	e7d4      	b.n	800ca82 <TRACE_Send+0x36>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800cad8:	8820      	ldrh	r0, [r4, #0]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800cada:	8022      	strh	r2, [r4, #0]
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800cadc:	1ac2      	subs	r2, r0, r3
 800cade:	b292      	uxth	r2, r2
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800cae0:	2002      	movs	r0, #2
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800cae2:	82a2      	strh	r2, [r4, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800cae4:	70a0      	strb	r0, [r4, #2]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800cae6:	2a00      	cmp	r2, #0
 800cae8:	d0ea      	beq.n	800cac0 <TRACE_Send+0x74>
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800caea:	4d04      	ldr	r5, [pc, #16]	@ (800cafc <TRACE_Send+0xb0>)
 800caec:	441d      	add	r5, r3
 800caee:	e7c8      	b.n	800ca82 <TRACE_Send+0x36>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800caf0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	e7ed      	b.n	800cad4 <TRACE_Send+0x88>
 800caf8:	2000091c 	.word	0x2000091c
 800cafc:	2000071c 	.word	0x2000071c
 800cb00:	0800d194 	.word	0x0800d194

0800cb04 <UTIL_ADV_TRACE_COND_FSend>:
{
 800cb04:	b408      	push	{r3}
 800cb06:	b530      	push	{r4, r5, lr}
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800cb08:	4c89      	ldr	r4, [pc, #548]	@ (800cd30 <UTIL_ADV_TRACE_COND_FSend+0x22c>)
{
 800cb0a:	b086      	sub	sp, #24
  uint16_t timestamp_size = 0u;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800cb12:	7a23      	ldrb	r3, [r4, #8]
{
 800cb14:	9d09      	ldr	r5, [sp, #36]	@ 0x24
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800cb16:	4283      	cmp	r3, r0
 800cb18:	f0c0 8107 	bcc.w	800cd2a <UTIL_ADV_TRACE_COND_FSend+0x226>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800cb1c:	68e3      	ldr	r3, [r4, #12]
 800cb1e:	4399      	bics	r1, r3
 800cb20:	f040 8100 	bne.w	800cd24 <UTIL_ADV_TRACE_COND_FSend+0x220>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800cb24:	6863      	ldr	r3, [r4, #4]
 800cb26:	b113      	cbz	r3, 800cb2e <UTIL_ADV_TRACE_COND_FSend+0x2a>
 800cb28:	2a00      	cmp	r2, #0
 800cb2a:	f040 80ca 	bne.w	800ccc2 <UTIL_ADV_TRACE_COND_FSend+0x1be>
  va_start( vaArgs, strFormat);
 800cb2e:	ab0a      	add	r3, sp, #40	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800cb30:	462a      	mov	r2, r5
 800cb32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cb36:	487f      	ldr	r0, [pc, #508]	@ (800cd34 <UTIL_ADV_TRACE_COND_FSend+0x230>)
  va_start( vaArgs, strFormat);
 800cb38:	9301      	str	r3, [sp, #4]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800cb3a:	f7ff fab9 	bl	800c0b0 <tiny_vsnprintf_like>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb3e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cb42:	b672      	cpsid	i
  ADV_TRACE_Ctx.TraceLock++;
 800cb44:	8ae3      	ldrh	r3, [r4, #22]
 800cb46:	3301      	adds	r3, #1
 800cb48:	82e3      	strh	r3, [r4, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb4a:	f382 8810 	msr	PRIMASK, r2
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800cb4e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800cb52:	4403      	add	r3, r0
 800cb54:	b29b      	uxth	r3, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb56:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cb5a:	b672      	cpsid	i
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800cb5c:	8a62      	ldrh	r2, [r4, #18]
 800cb5e:	8a21      	ldrh	r1, [r4, #16]
 800cb60:	428a      	cmp	r2, r1
 800cb62:	f000 80c0 	beq.w	800cce6 <UTIL_ADV_TRACE_COND_FSend+0x1e2>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800cb66:	f200 80b1 	bhi.w	800cccc <UTIL_ADV_TRACE_COND_FSend+0x1c8>
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800cb6a:	1a89      	subs	r1, r1, r2
  if(freesize > Size)
 800cb6c:	b289      	uxth	r1, r1
 800cb6e:	428b      	cmp	r3, r1
 800cb70:	f080 80c7 	bcs.w	800cd02 <UTIL_ADV_TRACE_COND_FSend+0x1fe>
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800cb74:	4413      	add	r3, r2
 800cb76:	b29b      	uxth	r3, r3
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800cb78:	4610      	mov	r0, r2
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800cb7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb7e:	8263      	strh	r3, [r4, #18]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb80:	f38c 8810 	msr	PRIMASK, ip
    for (idx = 0u; idx < timestamp_size; idx++)
 800cb84:	f8bd 3002 	ldrh.w	r3, [sp, #2]
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800cb88:	496b      	ldr	r1, [pc, #428]	@ (800cd38 <UTIL_ADV_TRACE_COND_FSend+0x234>)
    for (idx = 0u; idx < timestamp_size; idx++)
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	f000 8083 	beq.w	800cc96 <UTIL_ADV_TRACE_COND_FSend+0x192>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800cb90:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800cb94:	5488      	strb	r0, [r1, r2]
    for (idx = 0u; idx < timestamp_size; idx++)
 800cb96:	2b01      	cmp	r3, #1
      writepos = writepos + 1u;
 800cb98:	f102 0001 	add.w	r0, r2, #1
 800cb9c:	b280      	uxth	r0, r0
    for (idx = 0u; idx < timestamp_size; idx++)
 800cb9e:	d078      	beq.n	800cc92 <UTIL_ADV_TRACE_COND_FSend+0x18e>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800cba0:	f89d c009 	ldrb.w	ip, [sp, #9]
 800cba4:	f801 c000 	strb.w	ip, [r1, r0]
    for (idx = 0u; idx < timestamp_size; idx++)
 800cba8:	2b02      	cmp	r3, #2
      writepos = writepos + 1u;
 800cbaa:	f102 0002 	add.w	r0, r2, #2
 800cbae:	b280      	uxth	r0, r0
    for (idx = 0u; idx < timestamp_size; idx++)
 800cbb0:	d06f      	beq.n	800cc92 <UTIL_ADV_TRACE_COND_FSend+0x18e>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800cbb2:	f89d c00a 	ldrb.w	ip, [sp, #10]
 800cbb6:	f801 c000 	strb.w	ip, [r1, r0]
    for (idx = 0u; idx < timestamp_size; idx++)
 800cbba:	2b03      	cmp	r3, #3
      writepos = writepos + 1u;
 800cbbc:	f102 0003 	add.w	r0, r2, #3
 800cbc0:	b280      	uxth	r0, r0
    for (idx = 0u; idx < timestamp_size; idx++)
 800cbc2:	d066      	beq.n	800cc92 <UTIL_ADV_TRACE_COND_FSend+0x18e>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800cbc4:	f89d c00b 	ldrb.w	ip, [sp, #11]
 800cbc8:	f801 c000 	strb.w	ip, [r1, r0]
    for (idx = 0u; idx < timestamp_size; idx++)
 800cbcc:	2b04      	cmp	r3, #4
      writepos = writepos + 1u;
 800cbce:	f102 0004 	add.w	r0, r2, #4
 800cbd2:	b280      	uxth	r0, r0
    for (idx = 0u; idx < timestamp_size; idx++)
 800cbd4:	d05d      	beq.n	800cc92 <UTIL_ADV_TRACE_COND_FSend+0x18e>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800cbd6:	f89d c00c 	ldrb.w	ip, [sp, #12]
 800cbda:	f801 c000 	strb.w	ip, [r1, r0]
    for (idx = 0u; idx < timestamp_size; idx++)
 800cbde:	2b05      	cmp	r3, #5
      writepos = writepos + 1u;
 800cbe0:	f102 0005 	add.w	r0, r2, #5
 800cbe4:	b280      	uxth	r0, r0
    for (idx = 0u; idx < timestamp_size; idx++)
 800cbe6:	d054      	beq.n	800cc92 <UTIL_ADV_TRACE_COND_FSend+0x18e>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800cbe8:	f89d c00d 	ldrb.w	ip, [sp, #13]
 800cbec:	f801 c000 	strb.w	ip, [r1, r0]
    for (idx = 0u; idx < timestamp_size; idx++)
 800cbf0:	2b06      	cmp	r3, #6
      writepos = writepos + 1u;
 800cbf2:	f102 0006 	add.w	r0, r2, #6
 800cbf6:	b280      	uxth	r0, r0
    for (idx = 0u; idx < timestamp_size; idx++)
 800cbf8:	d04b      	beq.n	800cc92 <UTIL_ADV_TRACE_COND_FSend+0x18e>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800cbfa:	f89d c00e 	ldrb.w	ip, [sp, #14]
 800cbfe:	f801 c000 	strb.w	ip, [r1, r0]
    for (idx = 0u; idx < timestamp_size; idx++)
 800cc02:	2b07      	cmp	r3, #7
      writepos = writepos + 1u;
 800cc04:	f102 0007 	add.w	r0, r2, #7
 800cc08:	b280      	uxth	r0, r0
    for (idx = 0u; idx < timestamp_size; idx++)
 800cc0a:	d042      	beq.n	800cc92 <UTIL_ADV_TRACE_COND_FSend+0x18e>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800cc0c:	f89d c00f 	ldrb.w	ip, [sp, #15]
 800cc10:	f801 c000 	strb.w	ip, [r1, r0]
    for (idx = 0u; idx < timestamp_size; idx++)
 800cc14:	2b08      	cmp	r3, #8
      writepos = writepos + 1u;
 800cc16:	f102 0008 	add.w	r0, r2, #8
 800cc1a:	b280      	uxth	r0, r0
    for (idx = 0u; idx < timestamp_size; idx++)
 800cc1c:	d039      	beq.n	800cc92 <UTIL_ADV_TRACE_COND_FSend+0x18e>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800cc1e:	f89d c010 	ldrb.w	ip, [sp, #16]
 800cc22:	f801 c000 	strb.w	ip, [r1, r0]
    for (idx = 0u; idx < timestamp_size; idx++)
 800cc26:	2b09      	cmp	r3, #9
      writepos = writepos + 1u;
 800cc28:	f102 0009 	add.w	r0, r2, #9
 800cc2c:	b280      	uxth	r0, r0
    for (idx = 0u; idx < timestamp_size; idx++)
 800cc2e:	d030      	beq.n	800cc92 <UTIL_ADV_TRACE_COND_FSend+0x18e>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800cc30:	f89d c011 	ldrb.w	ip, [sp, #17]
 800cc34:	f801 c000 	strb.w	ip, [r1, r0]
    for (idx = 0u; idx < timestamp_size; idx++)
 800cc38:	2b0a      	cmp	r3, #10
      writepos = writepos + 1u;
 800cc3a:	f102 000a 	add.w	r0, r2, #10
 800cc3e:	b280      	uxth	r0, r0
    for (idx = 0u; idx < timestamp_size; idx++)
 800cc40:	d027      	beq.n	800cc92 <UTIL_ADV_TRACE_COND_FSend+0x18e>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800cc42:	f89d c012 	ldrb.w	ip, [sp, #18]
 800cc46:	f801 c000 	strb.w	ip, [r1, r0]
    for (idx = 0u; idx < timestamp_size; idx++)
 800cc4a:	2b0b      	cmp	r3, #11
      writepos = writepos + 1u;
 800cc4c:	f102 000b 	add.w	r0, r2, #11
 800cc50:	b280      	uxth	r0, r0
    for (idx = 0u; idx < timestamp_size; idx++)
 800cc52:	d01e      	beq.n	800cc92 <UTIL_ADV_TRACE_COND_FSend+0x18e>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800cc54:	f89d c013 	ldrb.w	ip, [sp, #19]
 800cc58:	f801 c000 	strb.w	ip, [r1, r0]
    for (idx = 0u; idx < timestamp_size; idx++)
 800cc5c:	2b0c      	cmp	r3, #12
      writepos = writepos + 1u;
 800cc5e:	f102 000c 	add.w	r0, r2, #12
 800cc62:	b280      	uxth	r0, r0
    for (idx = 0u; idx < timestamp_size; idx++)
 800cc64:	d015      	beq.n	800cc92 <UTIL_ADV_TRACE_COND_FSend+0x18e>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800cc66:	f89d c014 	ldrb.w	ip, [sp, #20]
 800cc6a:	f801 c000 	strb.w	ip, [r1, r0]
    for (idx = 0u; idx < timestamp_size; idx++)
 800cc6e:	2b0d      	cmp	r3, #13
      writepos = writepos + 1u;
 800cc70:	f102 000d 	add.w	r0, r2, #13
 800cc74:	b280      	uxth	r0, r0
    for (idx = 0u; idx < timestamp_size; idx++)
 800cc76:	d00c      	beq.n	800cc92 <UTIL_ADV_TRACE_COND_FSend+0x18e>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800cc78:	f89d c015 	ldrb.w	ip, [sp, #21]
 800cc7c:	f801 c000 	strb.w	ip, [r1, r0]
      writepos = writepos + 1u;
 800cc80:	f102 000e 	add.w	r0, r2, #14
    for (idx = 0u; idx < timestamp_size; idx++)
 800cc84:	2b0e      	cmp	r3, #14
      writepos = writepos + 1u;
 800cc86:	b280      	uxth	r0, r0
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800cc88:	bf1c      	itt	ne
 800cc8a:	f89d c016 	ldrbne.w	ip, [sp, #22]
 800cc8e:	f801 c000 	strbne.w	ip, [r1, r0]
      writepos = writepos + 1u;
 800cc92:	4413      	add	r3, r2
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800cc94:	b298      	uxth	r0, r3
 800cc96:	9b01      	ldr	r3, [sp, #4]
 800cc98:	4408      	add	r0, r1
 800cc9a:	462a      	mov	r2, r5
 800cc9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cca0:	f7ff fa06 	bl	800c0b0 <tiny_vsnprintf_like>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cca4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cca8:	b672      	cpsid	i
  ADV_TRACE_Ctx.TraceLock--;
 800ccaa:	8ae3      	ldrh	r3, [r4, #22]
 800ccac:	3b01      	subs	r3, #1
 800ccae:	82e3      	strh	r3, [r4, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccb0:	f382 8810 	msr	PRIMASK, r2
    return TRACE_Send();
 800ccb4:	f7ff feca 	bl	800ca4c <TRACE_Send>
}
 800ccb8:	b006      	add	sp, #24
 800ccba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ccbe:	b001      	add	sp, #4
 800ccc0:	4770      	bx	lr
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800ccc2:	f10d 0102 	add.w	r1, sp, #2
 800ccc6:	a802      	add	r0, sp, #8
 800ccc8:	4798      	blx	r3
 800ccca:	e730      	b.n	800cb2e <UTIL_ADV_TRACE_COND_FSend+0x2a>
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800cccc:	f5c2 7000 	rsb	r0, r2, #512	@ 0x200
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800ccd0:	b280      	uxth	r0, r0
 800ccd2:	4283      	cmp	r3, r0
 800ccd4:	f4ff af4e 	bcc.w	800cb74 <UTIL_ADV_TRACE_COND_FSend+0x70>
 800ccd8:	428b      	cmp	r3, r1
 800ccda:	d212      	bcs.n	800cd02 <UTIL_ADV_TRACE_COND_FSend+0x1fe>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800ccdc:	2101      	movs	r1, #1
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800ccde:	8022      	strh	r2, [r4, #0]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800cce0:	70a1      	strb	r1, [r4, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800cce2:	2200      	movs	r2, #0
 800cce4:	e746      	b.n	800cb74 <UTIL_ADV_TRACE_COND_FSend+0x70>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800cce6:	f5c2 7100 	rsb	r1, r2, #512	@ 0x200
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800ccea:	b289      	uxth	r1, r1
 800ccec:	428b      	cmp	r3, r1
 800ccee:	f4ff af41 	bcc.w	800cb74 <UTIL_ADV_TRACE_COND_FSend+0x70>
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d205      	bcs.n	800cd02 <UTIL_ADV_TRACE_COND_FSend+0x1fe>
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800ccf6:	8022      	strh	r2, [r4, #0]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800ccf8:	2101      	movs	r1, #1
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800ccfa:	2200      	movs	r2, #0
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800ccfc:	70a1      	strb	r1, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800ccfe:	4610      	mov	r0, r2
 800cd00:	e73b      	b.n	800cb7a <UTIL_ADV_TRACE_COND_FSend+0x76>
 800cd02:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd06:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cd0a:	b672      	cpsid	i
  ADV_TRACE_Ctx.TraceLock--;
 800cd0c:	8ae3      	ldrh	r3, [r4, #22]
 800cd0e:	3b01      	subs	r3, #1
 800cd10:	82e3      	strh	r3, [r4, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd12:	f382 8810 	msr	PRIMASK, r2
  return UTIL_ADV_TRACE_MEM_FULL;
 800cd16:	f06f 0002 	mvn.w	r0, #2
}
 800cd1a:	b006      	add	sp, #24
 800cd1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd20:	b001      	add	sp, #4
 800cd22:	4770      	bx	lr
    return UTIL_ADV_TRACE_REGIONMASKED;
 800cd24:	f06f 0005 	mvn.w	r0, #5
 800cd28:	e7c6      	b.n	800ccb8 <UTIL_ADV_TRACE_COND_FSend+0x1b4>
    return UTIL_ADV_TRACE_GIVEUP;
 800cd2a:	f06f 0004 	mvn.w	r0, #4
 800cd2e:	e7c3      	b.n	800ccb8 <UTIL_ADV_TRACE_COND_FSend+0x1b4>
 800cd30:	2000091c 	.word	0x2000091c
 800cd34:	2000061c 	.word	0x2000061c
 800cd38:	2000071c 	.word	0x2000071c

0800cd3c <TRACE_TxCpltCallback>:
{
 800cd3c:	b510      	push	{r4, lr}
 800cd3e:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd40:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cd44:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800cd46:	4c25      	ldr	r4, [pc, #148]	@ (800cddc <TRACE_TxCpltCallback+0xa0>)
 800cd48:	78a2      	ldrb	r2, [r4, #2]
 800cd4a:	2a02      	cmp	r2, #2
 800cd4c:	d019      	beq.n	800cd82 <TRACE_TxCpltCallback+0x46>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800cd4e:	8a23      	ldrh	r3, [r4, #16]
 800cd50:	8aa1      	ldrh	r1, [r4, #20]
 800cd52:	440b      	add	r3, r1
 800cd54:	f3c3 0308 	ubfx	r3, r3, #0, #9
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800cd58:	8a61      	ldrh	r1, [r4, #18]
 800cd5a:	8223      	strh	r3, [r4, #16]
 800cd5c:	4299      	cmp	r1, r3
 800cd5e:	d002      	beq.n	800cd66 <TRACE_TxCpltCallback+0x2a>
 800cd60:	8ae0      	ldrh	r0, [r4, #22]
 800cd62:	2801      	cmp	r0, #1
 800cd64:	d011      	beq.n	800cd8a <TRACE_TxCpltCallback+0x4e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd66:	f38c 8810 	msr	PRIMASK, ip
    UTIL_ADV_TRACE_PostSendHook();
 800cd6a:	f7f4 fc9b 	bl	80016a4 <UTIL_ADV_TRACE_PostSendHook>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd6e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cd72:	b672      	cpsid	i
  ADV_TRACE_Ctx.TraceLock--;
 800cd74:	8ae3      	ldrh	r3, [r4, #22]
 800cd76:	3b01      	subs	r3, #1
 800cd78:	82e3      	strh	r3, [r4, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd7a:	f382 8810 	msr	PRIMASK, r2
}
 800cd7e:	b002      	add	sp, #8
 800cd80:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800cd82:	2300      	movs	r3, #0
 800cd84:	461a      	mov	r2, r3
 800cd86:	70a3      	strb	r3, [r4, #2]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 800cd88:	e7e6      	b.n	800cd58 <TRACE_TxCpltCallback+0x1c>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800cd8a:	2a01      	cmp	r2, #1
 800cd8c:	d011      	beq.n	800cdb2 <TRACE_TxCpltCallback+0x76>
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800cd8e:	4814      	ldr	r0, [pc, #80]	@ (800cde0 <TRACE_TxCpltCallback+0xa4>)
 800cd90:	4418      	add	r0, r3
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800cd92:	b922      	cbnz	r2, 800cd9e <TRACE_TxCpltCallback+0x62>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800cd94:	4299      	cmp	r1, r3
 800cd96:	d91a      	bls.n	800cdce <TRACE_TxCpltCallback+0x92>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800cd98:	1ac9      	subs	r1, r1, r3
 800cd9a:	b28b      	uxth	r3, r1
 800cd9c:	82a3      	strh	r3, [r4, #20]
 800cd9e:	f38c 8810 	msr	PRIMASK, ip
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800cda2:	4b10      	ldr	r3, [pc, #64]	@ (800cde4 <TRACE_TxCpltCallback+0xa8>)
 800cda4:	8aa1      	ldrh	r1, [r4, #20]
 800cda6:	68db      	ldr	r3, [r3, #12]
 800cda8:	9301      	str	r3, [sp, #4]
}
 800cdaa:	b002      	add	sp, #8
 800cdac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800cdb0:	4718      	bx	r3
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800cdb2:	8822      	ldrh	r2, [r4, #0]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800cdb4:	2002      	movs	r0, #2
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800cdb6:	1ad2      	subs	r2, r2, r3
 800cdb8:	b292      	uxth	r2, r2
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800cdba:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800cdbc:	2000      	movs	r0, #0
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800cdbe:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800cdc0:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800cdc2:	b942      	cbnz	r2, 800cdd6 <TRACE_TxCpltCallback+0x9a>
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800cdc4:	4806      	ldr	r0, [pc, #24]	@ (800cde0 <TRACE_TxCpltCallback+0xa4>)
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800cdc6:	70a2      	strb	r2, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800cdc8:	8222      	strh	r2, [r4, #16]
 800cdca:	4613      	mov	r3, r2
 800cdcc:	e7e2      	b.n	800cd94 <TRACE_TxCpltCallback+0x58>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800cdce:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	e7e2      	b.n	800cd9c <TRACE_TxCpltCallback+0x60>
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800cdd6:	4802      	ldr	r0, [pc, #8]	@ (800cde0 <TRACE_TxCpltCallback+0xa4>)
 800cdd8:	4418      	add	r0, r3
 800cdda:	e7e0      	b.n	800cd9e <TRACE_TxCpltCallback+0x62>
 800cddc:	2000091c 	.word	0x2000091c
 800cde0:	2000071c 	.word	0x2000071c
 800cde4:	0800d194 	.word	0x0800d194

0800cde8 <memset>:
 800cde8:	4402      	add	r2, r0
 800cdea:	4603      	mov	r3, r0
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d100      	bne.n	800cdf2 <memset+0xa>
 800cdf0:	4770      	bx	lr
 800cdf2:	f803 1b01 	strb.w	r1, [r3], #1
 800cdf6:	e7f9      	b.n	800cdec <memset+0x4>

0800cdf8 <__libc_init_array>:
 800cdf8:	b570      	push	{r4, r5, r6, lr}
 800cdfa:	4d0d      	ldr	r5, [pc, #52]	@ (800ce30 <__libc_init_array+0x38>)
 800cdfc:	4c0d      	ldr	r4, [pc, #52]	@ (800ce34 <__libc_init_array+0x3c>)
 800cdfe:	1b64      	subs	r4, r4, r5
 800ce00:	10a4      	asrs	r4, r4, #2
 800ce02:	2600      	movs	r6, #0
 800ce04:	42a6      	cmp	r6, r4
 800ce06:	d109      	bne.n	800ce1c <__libc_init_array+0x24>
 800ce08:	4d0b      	ldr	r5, [pc, #44]	@ (800ce38 <__libc_init_array+0x40>)
 800ce0a:	4c0c      	ldr	r4, [pc, #48]	@ (800ce3c <__libc_init_array+0x44>)
 800ce0c:	f000 f818 	bl	800ce40 <_init>
 800ce10:	1b64      	subs	r4, r4, r5
 800ce12:	10a4      	asrs	r4, r4, #2
 800ce14:	2600      	movs	r6, #0
 800ce16:	42a6      	cmp	r6, r4
 800ce18:	d105      	bne.n	800ce26 <__libc_init_array+0x2e>
 800ce1a:	bd70      	pop	{r4, r5, r6, pc}
 800ce1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce20:	4798      	blx	r3
 800ce22:	3601      	adds	r6, #1
 800ce24:	e7ee      	b.n	800ce04 <__libc_init_array+0xc>
 800ce26:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce2a:	4798      	blx	r3
 800ce2c:	3601      	adds	r6, #1
 800ce2e:	e7f2      	b.n	800ce16 <__libc_init_array+0x1e>
 800ce30:	0800d478 	.word	0x0800d478
 800ce34:	0800d478 	.word	0x0800d478
 800ce38:	0800d478 	.word	0x0800d478
 800ce3c:	0800d47c 	.word	0x0800d47c

0800ce40 <_init>:
 800ce40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce42:	bf00      	nop
 800ce44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce46:	bc08      	pop	{r3}
 800ce48:	469e      	mov	lr, r3
 800ce4a:	4770      	bx	lr

0800ce4c <_fini>:
 800ce4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce4e:	bf00      	nop
 800ce50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce52:	bc08      	pop	{r3}
 800ce54:	469e      	mov	lr, r3
 800ce56:	4770      	bx	lr
